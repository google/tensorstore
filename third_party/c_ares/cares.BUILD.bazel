load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")

CONFIG_SRC = select({
    "@platforms//os:macos": "@tensorstore//third_party:c_ares/config/darwin.h",
    "@platforms//os:windows": "@tensorstore//third_party:c_ares/config/windows.h",
    "//conditions:default": "@tensorstore//third_party:c_ares/config/linux.h",
})

copy_file(
    name = "ares_config_h",
    src = CONFIG_SRC,
    out = "ares_config.h",
)

OVERRIDES = """

/* IMPORTANT: gRPC MANUAL EDIT HERE!
 * Undefine UNICODE, as c-ares does not use the ANSI version of functions
 * explicitly. */
#ifdef UNICODE
#undef UNICODE
#endif

#ifdef _UNICODE
#undef _UNICODE
#endif

#endif /* __CARES_BUILD_H */
"""

WIN_SUBSTITUTIONS = {
    "@CARES_TYPEOF_ARES_SOCKLEN_T@": "int",
    "@CARES_TYPEOF_ARES_SSIZE_T@": "__int64",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_COMPAT_H": "// #undef CARES_HAVE_ARPA_NAMESER_COMPAT_H",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_H": "// #undef CARES_HAVE_ARPA_NAMESER_H",
    "#cmakedefine CARES_HAVE_SYS_SOCKET_H": "// #undef CARES_HAVE_SYS_SOCKET_H",
    "#cmakedefine CARES_HAVE_SYS_TYPES_H": "// #undef CARES_HAVE_SYS_TYPES_H",
    "#cmakedefine CARES_HAVE_WINDOWS_H": "#define CARES_HAVE_WINDOWS_H 1",
    "#cmakedefine CARES_HAVE_WINSOCK2_H": "#define CARES_HAVE_WINSOCK2_H 1",
    "#cmakedefine CARES_HAVE_WS2TCPIP_H": "#define CARES_HAVE_WS2TCPIP_H 1",
    "#cmakedefine CARES_HAVE_SYS_SELECT_H": "// #undef CARES_HAVE_SYS_SELECT_H",
    "#endif /* __CARES_BUILD_H */": OVERRIDES,
}

DEFAULT_SUBSTITUTIONS = {
    "@CARES_TYPEOF_ARES_SOCKLEN_T@": "socklen_t",
    "@CARES_TYPEOF_ARES_SSIZE_T@": "ssize_t",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_COMPAT_H": "// #undef CARES_HAVE_ARPA_NAMESER_COMPAT_H",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_H": "// #undef CARES_HAVE_ARPA_NAMESER_H",
    "#cmakedefine CARES_HAVE_SYS_SOCKET_H": "#define CARES_HAVE_SYS_SOCKET_H 1",
    "#cmakedefine CARES_HAVE_SYS_TYPES_H": "#define CARES_HAVE_SYS_TYPES_H 1",
    "#cmakedefine CARES_HAVE_WINDOWS_H": "// #undef CARES_HAVE_WINDOWS_H",
    "#cmakedefine CARES_HAVE_WINSOCK2_H": "// #undef CARES_HAVE_WINSOCK2_H",
    "#cmakedefine CARES_HAVE_WS2TCPIP_H": "// #undef CARES_HAVE_WS2TCPIP_H",
    "#cmakedefine CARES_HAVE_SYS_SELECT_H": "#define CARES_HAVE_SYS_SELECT_H 1",
    "#endif /* __CARES_BUILD_H */": OVERRIDES,
}

expand_template(
    name = "ares_build_h",
    out = "ares_build.h",
    substitutions = select({
        "@platforms//os:windows": WIN_SUBSTITUTIONS,
        "//conditions:default": DEFAULT_SUBSTITUTIONS,
    }),
    template = "include/ares_build.h.cmake",
)

# From Makefile.inc
CSOURCES = [
    "src/lib/ares_addrinfo2hostent.c",
    "src/lib/ares_addrinfo_localhost.c",
    "src/lib/ares_android.c",
    "src/lib/ares_cancel.c",
    "src/lib/ares_close_sockets.c",
    "src/lib/ares_conn.c",
    "src/lib/ares_cookie.c",
    "src/lib/ares_data.c",
    "src/lib/ares_destroy.c",
    "src/lib/ares_free_hostent.c",
    "src/lib/ares_free_string.c",
    "src/lib/ares_freeaddrinfo.c",
    "src/lib/ares_getaddrinfo.c",
    "src/lib/ares_getenv.c",
    "src/lib/ares_gethostbyaddr.c",
    "src/lib/ares_gethostbyname.c",
    "src/lib/ares_getnameinfo.c",
    "src/lib/ares_hosts_file.c",
    "src/lib/ares_init.c",
    "src/lib/ares_library_init.c",
    "src/lib/ares_metrics.c",
    "src/lib/ares_options.c",
    "src/lib/ares_parse_into_addrinfo.c",
    "src/lib/ares_process.c",
    "src/lib/ares_qcache.c",
    "src/lib/ares_query.c",
    "src/lib/ares_search.c",
    "src/lib/ares_send.c",
    "src/lib/ares_set_socket_functions.c",
    "src/lib/ares_socket.c",
    "src/lib/ares_sortaddrinfo.c",
    "src/lib/ares_strerror.c",
    "src/lib/ares_sysconfig.c",
    "src/lib/ares_sysconfig_files.c",
    "src/lib/ares_sysconfig_mac.c",
    "src/lib/ares_sysconfig_win.c",
    "src/lib/ares_timeout.c",
    "src/lib/ares_update_servers.c",
    "src/lib/ares_version.c",
    "src/lib/dsa/ares_array.c",
    "src/lib/dsa/ares_htable.c",
    "src/lib/dsa/ares_htable_asvp.c",
    "src/lib/dsa/ares_htable_dict.c",
    "src/lib/dsa/ares_htable_strvp.c",
    "src/lib/dsa/ares_htable_szvp.c",
    "src/lib/dsa/ares_htable_vpstr.c",
    "src/lib/dsa/ares_htable_vpvp.c",
    "src/lib/dsa/ares_llist.c",
    "src/lib/dsa/ares_slist.c",
    "src/lib/event/ares_event_configchg.c",
    "src/lib/event/ares_event_epoll.c",
    "src/lib/event/ares_event_kqueue.c",
    "src/lib/event/ares_event_poll.c",
    "src/lib/event/ares_event_select.c",
    "src/lib/event/ares_event_thread.c",
    "src/lib/event/ares_event_wake_pipe.c",
    "src/lib/event/ares_event_win32.c",
    "src/lib/inet_net_pton.c",
    "src/lib/inet_ntop.c",
    "src/lib/legacy/ares_create_query.c",
    "src/lib/legacy/ares_expand_name.c",
    "src/lib/legacy/ares_expand_string.c",
    "src/lib/legacy/ares_fds.c",
    "src/lib/legacy/ares_getsock.c",
    "src/lib/legacy/ares_parse_a_reply.c",
    "src/lib/legacy/ares_parse_aaaa_reply.c",
    "src/lib/legacy/ares_parse_caa_reply.c",
    "src/lib/legacy/ares_parse_mx_reply.c",
    "src/lib/legacy/ares_parse_naptr_reply.c",
    "src/lib/legacy/ares_parse_ns_reply.c",
    "src/lib/legacy/ares_parse_ptr_reply.c",
    "src/lib/legacy/ares_parse_soa_reply.c",
    "src/lib/legacy/ares_parse_srv_reply.c",
    "src/lib/legacy/ares_parse_txt_reply.c",
    "src/lib/legacy/ares_parse_uri_reply.c",
    "src/lib/record/ares_dns_mapping.c",
    "src/lib/record/ares_dns_multistring.c",
    "src/lib/record/ares_dns_name.c",
    "src/lib/record/ares_dns_parse.c",
    "src/lib/record/ares_dns_record.c",
    "src/lib/record/ares_dns_write.c",
    "src/lib/str/ares_buf.c",
    "src/lib/str/ares_str.c",
    "src/lib/str/ares_strsplit.c",
    "src/lib/util/ares_iface_ips.c",
    "src/lib/util/ares_math.c",
    "src/lib/util/ares_rand.c",
    "src/lib/util/ares_threads.c",
    "src/lib/util/ares_timeval.c",
    "src/lib/util/ares_uri.c",
    "src/lib/windows_port.c",
]

HHEADERS = [
    "src/lib/ares_android.h",
    "src/lib/ares_conn.h",
    "src/lib/ares_data.h",
    "src/lib/ares_getenv.h",
    "src/lib/ares_inet_net_pton.h",
    "src/lib/ares_ipv6.h",
    "src/lib/ares_private.h",
    "src/lib/ares_setup.h",
    "src/lib/ares_socket.h",
    "src/lib/dsa/ares_htable.h",
    "src/lib/dsa/ares_slist.h",
    "src/lib/event/ares_event.h",
    "src/lib/event/ares_event_win32.h",
    "src/lib/include/ares_array.h",
    "src/lib/include/ares_buf.h",
    "src/lib/include/ares_htable_asvp.h",
    "src/lib/include/ares_htable_dict.h",
    "src/lib/include/ares_htable_strvp.h",
    "src/lib/include/ares_htable_szvp.h",
    "src/lib/include/ares_htable_vpstr.h",
    "src/lib/include/ares_htable_vpvp.h",
    "src/lib/include/ares_llist.h",
    "src/lib/include/ares_mem.h",
    "src/lib/include/ares_str.h",
    "src/lib/record/ares_dns_multistring.h",
    "src/lib/record/ares_dns_private.h",
    "src/lib/str/ares_strsplit.h",
    "src/lib/util/ares_iface_ips.h",
    "src/lib/util/ares_math.h",
    "src/lib/util/ares_rand.h",
    "src/lib/util/ares_time.h",
    "src/lib/util/ares_threads.h",
    "src/lib/util/ares_uri.h",
    "src/lib/thirdparty/apple/dnsinfo.h",
]

# From include/Makefile.am
HEADERS = [
    "include/ares.h",
    "include/ares_version.h",
    "include/ares_dns.h",
    "include/ares_dns_record.h",
    "include/ares_nameser.h",
]

cc_library(
    name = "ares",
    srcs = CSOURCES,
    hdrs = [
        "ares_build.h",
        "ares_config.h",
    ] + HEADERS,
    copts = [
        "-D_GNU_SOURCE",
        "-D_HAS_EXCEPTIONS=0",
        "-DHAVE_CONFIG_H",
    ] + select({
        "@platforms//os:windows": [
            "-DNOMINMAX",
            "-D_CRT_SECURE_NO_DEPRECATE",
            "-D_CRT_NONSTDC_NO_DEPRECATE",
            "-D_WIN32_WINNT=0x0600",
        ],
        "//conditions:default": [],
    }),
    defines = ["CARES_STATICLIB"],
    includes = [
        ".",
        "include",
    ],
    linkopts = select({
        ":compiler_mingw_gcc": [
            "-lws2_32",
            "-liphlpapi",
        ],
        ":compiler_msvc": [
            "-defaultlib:ws2_32.lib",
            "-defaultlib:iphlpapi.lib",
        ],
        "//conditions:default": [],
    }),
    linkstatic = 1,
    visibility = [
        "//visibility:public",
    ],
    deps = [":ares_private"],
    alwayslink = 1,
)

cc_library(
    name = "ares_private",
    hdrs = HHEADERS,
    defines = ["CARES_STATICLIB"],
    includes = [
        "src/lib",
        "src/lib/include",
    ],
    visibility = [
        "//visibility:private",
    ],
)

config_setting(
    name = "compiler_mingw_gcc",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "mingw-gcc",
    },
)

config_setting(
    name = "compiler_msvc",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
)
