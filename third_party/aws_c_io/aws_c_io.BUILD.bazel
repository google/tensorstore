# Description:
#   AWS s2n tls

package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # Apache 2.0

# Ensure that ws2_32.lib is linked for mingw.
# copybara:strip_begin
_WS2_32_LINKOPTS = []
# copybara:strip_end_and_replace_begin
# _WS2_32_LINKOPTS = select({
#     "@tensorstore//:compiler_mingw_gcc": [
#         "-DEFAULTLIB:ws2_32.lib",
#         "-lws2_32",
#     ],
#     "@tensorstore//:compiler_msvc": ["-DEFAULTLIB:ws2_32.lib"],
#     "//conditions:default": [],
# })
# copybara:replace_end

cc_library(
    name = "aws_c_io",
    srcs = glob([
        "source/*.h",
        "source/*.c",
        "source/pkcs11/**/*.h",
        "source/pkcs11/**/*.c",
    ]) + select({
        "@platforms//os:windows": glob([
            "source/windows/*.c",
            "source/windows/iocp/*.c",
        ]),
        "@platforms//os:osx": glob([
            "source/bsd/*.c",
            "source/darwin/*.c",
            "source/posix/*.c",
        ]),
        "//conditions:default": glob([
            "source/linux/*.c",
            "source/posix/*.c",
            "source/s2n/*.h",
            "source/s2n/*.c",
        ]),
    }),
    hdrs = glob([
        "include/aws/io/**/*.h",
    ]),
    includes = ["include"],
    linkopts = select({
        "@platforms//os:windows": [
            "-DEFAULTLIB:ncrypt.lib",
            "-DEFAULTLIB:ws2_32.lib",
            "-DEFAULTLIB:secur32.lib",
            "-DEFAULTLIB:crypt32.lib",
            "-DEFAULTLIB:kernel32.lib",
        ],
        "//conditions:default": [
            "-ldl",
            "-lpthread",
        ],
    }) + select({
        ":compiler_mingw_gcc": [
            "-lncrypt",
            "-lws2_32",
            "-lsecur32",
            "-lcrypt32",
            "-lkernel32",
        ],
        "//conditions:default": [],
    }),
    local_defines = select({
        "@platforms//os:windows": [
            "AWS_USE_IO_COMPLETION_PORTS",
        ],
        "@platforms//os:osx": [
            "AWS_USE_KQUEUE",
        ],
        "//conditions:default": [
            "AWS_USE_EPOLL",
            "USE_S2N",
        ],
    }),
    deps = [
        "@aws_c_cal",
        "@aws_c_common",
        "@com_google_boringssl//:crypto",
    ] + select({
        "@platforms//os:windows": [],
        "@platforms//os:osx": [],
        "//conditions:default": [
            "@aws_s2n_tls//:s2n_tls",
        ],
    }),
)

[
    alias(
        name = name,
        actual = "@tensorstore//:{target}".format(target = name),
    )
    for name in [
        "compiler_mingw_gcc",
    ]
]
