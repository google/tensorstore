# DO NOT EDIT: Generated by pypi_solver
"""Defines third-party bazel repos for Python packages fetched with pip."""

load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load(
    "//third_party:repo.bzl",
    "third_party_python_package",
)

def repo():
    repo_pypa_absl_py()
    repo_pypa_alabaster()
    repo_pypa_annotated_types()
    repo_pypa_antlr4_python3_runtime()
    repo_pypa_appdirs()
    repo_pypa_asttokens()
    repo_pypa_attrs()
    repo_pypa_aws_sam_translator()
    repo_pypa_aws_xray_sdk()
    repo_pypa_babel()
    repo_pypa_black()
    repo_pypa_blinker()
    repo_pypa_boto3()
    repo_pypa_botocore()
    repo_pypa_certifi()
    repo_pypa_cffi()
    repo_pypa_cfn_lint()
    repo_pypa_charset_normalizer()
    repo_pypa_clang_format()
    repo_pypa_click()
    repo_pypa_cloudpickle()
    repo_pypa_colorama()
    repo_pypa_crc32c()
    repo_pypa_cryptography()
    repo_pypa_decorator()
    repo_pypa_docker()
    repo_pypa_docutils()
    repo_pypa_exceptiongroup()
    repo_pypa_executing()
    repo_pypa_flask()
    repo_pypa_flask_cors()
    repo_pypa_googleapis_common_protos()
    repo_pypa_graphql_core()
    repo_pypa_grpcio()
    repo_pypa_idna()
    repo_pypa_imagesize()
    repo_pypa_importlib_metadata()
    repo_pypa_iniconfig()
    repo_pypa_ipython()
    repo_pypa_itsdangerous()
    repo_pypa_jedi()
    repo_pypa_jinja2()
    repo_pypa_jmespath()
    repo_pypa_joserfc()
    repo_pypa_jsondiff()
    repo_pypa_jsonpatch()
    repo_pypa_jsonpath_ng()
    repo_pypa_jsonpointer()
    repo_pypa_jsonschema()
    repo_pypa_jsonschema_path()
    repo_pypa_jsonschema_specifications()
    repo_pypa_lazy_object_proxy()
    repo_pypa_libclang()
    repo_pypa_markupsafe()
    repo_pypa_matplotlib_inline()
    repo_pypa_ml_dtypes()
    repo_pypa_moto()
    repo_pypa_mpmath()
    repo_pypa_mypy_extensions()
    repo_pypa_networkx()
    repo_pypa_numpy()
    repo_pypa_openapi_schema_validator()
    repo_pypa_openapi_spec_validator()
    repo_pypa_packaging()
    repo_pypa_parso()
    repo_pypa_pathable()
    repo_pypa_pathspec()
    repo_pypa_pexpect()
    repo_pypa_platformdirs()
    repo_pypa_pluggy()
    repo_pypa_prompt_toolkit()
    repo_pypa_protobuf()
    repo_pypa_ptyprocess()
    repo_pypa_pure_eval()
    repo_pypa_py_partiql_parser()
    repo_pypa_pycparser()
    repo_pypa_pydantic()
    repo_pypa_pydantic_core()
    repo_pypa_pydantic_extra_types()
    repo_pypa_pygments()
    repo_pypa_pyparsing()
    repo_pypa_pytest()
    repo_pypa_pytest_asyncio()
    repo_pypa_python_dateutil()
    repo_pypa_pywin32()
    repo_pypa_pyyaml()
    repo_pypa_referencing()
    repo_pypa_regex()
    repo_pypa_requests()
    repo_pypa_requests_toolbelt()
    repo_pypa_responses()
    repo_pypa_rfc3339_validator()
    repo_pypa_rpds_py()
    repo_pypa_s3transfer()
    repo_pypa_scalpl()
    repo_pypa_setuptools()
    repo_pypa_six()
    repo_pypa_snowballstemmer()
    repo_pypa_sphinx()
    repo_pypa_sphinx_immaterial()
    repo_pypa_sphinxcontrib_applehelp()
    repo_pypa_sphinxcontrib_devhelp()
    repo_pypa_sphinxcontrib_htmlhelp()
    repo_pypa_sphinxcontrib_jsmath()
    repo_pypa_sphinxcontrib_qthelp()
    repo_pypa_sphinxcontrib_serializinghtml()
    repo_pypa_stack_data()
    repo_pypa_sympy()
    repo_pypa_tomli()
    repo_pypa_traitlets()
    repo_pypa_typing_extensions()
    repo_pypa_urllib3()
    repo_pypa_wcwidth()
    repo_pypa_werkzeug()
    repo_pypa_wrapt()
    repo_pypa_xmltodict()
    repo_pypa_yapf()
    repo_pypa_zipp()

def repo_pypa_absl_py():
    maybe(
        third_party_python_package,
        name = "pypa_absl_py",
        target = "absl_py",
        requirement = "absl-py==2.1.0",
    )

def repo_pypa_alabaster():
    maybe(
        third_party_python_package,
        name = "pypa_alabaster",
        target = "alabaster",
        requirement = "alabaster==0.7.16",
    )

def repo_pypa_annotated_types():
    maybe(
        third_party_python_package,
        name = "pypa_annotated_types",
        target = "annotated_types",
        requirement = "annotated-types==0.7.0",
    )

def repo_pypa_antlr4_python3_runtime():
    maybe(
        third_party_python_package,
        name = "pypa_antlr4_python3_runtime",
        target = "antlr4_python3_runtime",
        requirement = "antlr4-python3-runtime==4.13.2",
    )

def repo_pypa_appdirs():
    maybe(
        third_party_python_package,
        name = "pypa_appdirs",
        target = "appdirs",
        requirement = "appdirs==1.4.4",
    )

def repo_pypa_asttokens():
    repo_pypa_six()
    maybe(
        third_party_python_package,
        name = "pypa_asttokens",
        target = "asttokens",
        requirement = "asttokens==2.4.1",
        deps = [
            "@pypa_six//:six",
        ],
    )

def repo_pypa_attrs():
    maybe(
        third_party_python_package,
        name = "pypa_attrs",
        target = "attrs",
        requirement = "attrs==24.2.0",
    )

def repo_pypa_aws_sam_translator():
    repo_pypa_boto3()
    repo_pypa_jsonschema()
    repo_pypa_pydantic()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_aws_sam_translator",
        target = "aws_sam_translator",
        requirement = "aws-sam-translator==1.91.0",
        deps = [
            "@pypa_boto3//:boto3",
            "@pypa_jsonschema//:jsonschema",
            "@pypa_pydantic//:pydantic",
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_aws_xray_sdk():
    repo_pypa_botocore()
    repo_pypa_wrapt()
    maybe(
        third_party_python_package,
        name = "pypa_aws_xray_sdk",
        target = "aws_xray_sdk",
        requirement = "aws-xray-sdk==2.14.0",
        deps = [
            "@pypa_botocore//:botocore",
            "@pypa_wrapt//:wrapt",
        ],
    )

def repo_pypa_babel():
    maybe(
        third_party_python_package,
        name = "pypa_babel",
        target = "babel",
        requirement = "babel==2.16.0",
    )

def repo_pypa_black():
    repo_pypa_click()
    repo_pypa_mypy_extensions()
    repo_pypa_packaging()
    repo_pypa_pathspec()
    repo_pypa_platformdirs()
    repo_pypa_tomli()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_black",
        target = "black",
        requirement = "black==24.10.0",
        deps = [
            "@pypa_click//:click",
            "@pypa_mypy_extensions//:mypy_extensions",
            "@pypa_packaging//:packaging",
            "@pypa_pathspec//:pathspec",
            "@pypa_platformdirs//:platformdirs",
            "@pypa_tomli//:tomli",
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_blinker():
    maybe(
        third_party_python_package,
        name = "pypa_blinker",
        target = "blinker",
        requirement = "blinker==1.8.2",
    )

def repo_pypa_boto3():
    repo_pypa_botocore()
    repo_pypa_jmespath()
    repo_pypa_s3transfer()
    maybe(
        third_party_python_package,
        name = "pypa_boto3",
        target = "boto3",
        requirement = "boto3==1.35.48",
        deps = [
            "@pypa_botocore//:botocore",
            "@pypa_jmespath//:jmespath",
            "@pypa_s3transfer//:s3transfer",
        ],
    )

def repo_pypa_botocore():
    repo_pypa_jmespath()
    repo_pypa_python_dateutil()
    repo_pypa_urllib3()
    maybe(
        third_party_python_package,
        name = "pypa_botocore",
        target = "botocore",
        requirement = "botocore==1.35.48",
        deps = [
            "@pypa_jmespath//:jmespath",
            "@pypa_python_dateutil//:python_dateutil",
            "@pypa_urllib3//:urllib3",
        ],
    )

def repo_pypa_certifi():
    maybe(
        third_party_python_package,
        name = "pypa_certifi",
        target = "certifi",
        requirement = "certifi==2024.8.30",
    )

def repo_pypa_cffi():
    repo_pypa_pycparser()
    maybe(
        third_party_python_package,
        name = "pypa_cffi",
        target = "cffi",
        requirement = "cffi==1.17.1",
        deps = [
            "@pypa_pycparser//:pycparser",
        ],
    )

def repo_pypa_cfn_lint():
    repo_pypa_aws_sam_translator()
    repo_pypa_jsonpatch()
    repo_pypa_networkx()
    repo_pypa_pyyaml()
    repo_pypa_regex()
    repo_pypa_sympy()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_cfn_lint",
        target = "cfn_lint",
        requirement = "cfn-lint==1.18.1",
        deps = [
            "@pypa_aws_sam_translator//:aws_sam_translator",
            "@pypa_jsonpatch//:jsonpatch",
            "@pypa_networkx//:networkx",
            "@pypa_pyyaml//:pyyaml",
            "@pypa_regex//:regex",
            "@pypa_sympy//:sympy",
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_charset_normalizer():
    maybe(
        third_party_python_package,
        name = "pypa_charset_normalizer",
        target = "charset_normalizer",
        requirement = "charset-normalizer==3.4.0",
    )

def repo_pypa_clang_format():
    maybe(
        third_party_python_package,
        name = "pypa_clang_format",
        target = "clang_format",
        requirement = "clang-format==19.1.2",
    )

def repo_pypa_click():
    maybe(
        third_party_python_package,
        name = "pypa_click",
        target = "click",
        requirement = "click==8.1.7",
    )

def repo_pypa_cloudpickle():
    maybe(
        third_party_python_package,
        name = "pypa_cloudpickle",
        target = "cloudpickle",
        requirement = "cloudpickle==3.1.0",
    )

def repo_pypa_colorama():
    maybe(
        third_party_python_package,
        name = "pypa_colorama",
        target = "colorama",
        requirement = "colorama==0.4.6",
    )

def repo_pypa_crc32c():
    maybe(
        third_party_python_package,
        name = "pypa_crc32c",
        target = "crc32c",
        requirement = "crc32c==2.7.1",
    )

def repo_pypa_cryptography():
    repo_pypa_cffi()
    maybe(
        third_party_python_package,
        name = "pypa_cryptography",
        target = "cryptography",
        requirement = "cryptography==43.0.3",
        deps = [
            "@pypa_cffi//:cffi",
        ],
    )

def repo_pypa_decorator():
    maybe(
        third_party_python_package,
        name = "pypa_decorator",
        target = "decorator",
        requirement = "decorator==5.1.1",
    )

def repo_pypa_docker():
    repo_pypa_pywin32()
    repo_pypa_requests()
    repo_pypa_urllib3()
    maybe(
        third_party_python_package,
        name = "pypa_docker",
        target = "docker",
        requirement = "docker==7.1.0",
        deps = [
            "@pypa_requests//:requests",
            "@pypa_urllib3//:urllib3",
        ],
        win32 = [
            "@pypa_pywin32//:pywin32",
        ],
    )

def repo_pypa_docutils():
    maybe(
        third_party_python_package,
        name = "pypa_docutils",
        target = "docutils",
        requirement = "docutils==0.21.2",
    )

def repo_pypa_exceptiongroup():
    maybe(
        third_party_python_package,
        name = "pypa_exceptiongroup",
        target = "exceptiongroup",
        requirement = "exceptiongroup==1.2.2",
    )

def repo_pypa_executing():
    maybe(
        third_party_python_package,
        name = "pypa_executing",
        target = "executing",
        requirement = "executing==2.1.0",
    )

def repo_pypa_flask():
    repo_pypa_blinker()
    repo_pypa_click()
    repo_pypa_importlib_metadata()
    repo_pypa_itsdangerous()
    repo_pypa_jinja2()
    repo_pypa_werkzeug()
    maybe(
        third_party_python_package,
        name = "pypa_flask",
        target = "flask",
        requirement = "flask==3.0.3",
        deps = [
            "@pypa_blinker//:blinker",
            "@pypa_click//:click",
            "@pypa_importlib_metadata//:importlib_metadata",
            "@pypa_itsdangerous//:itsdangerous",
            "@pypa_jinja2//:jinja2",
            "@pypa_werkzeug//:werkzeug",
        ],
    )

def repo_pypa_flask_cors():
    repo_pypa_flask()
    maybe(
        third_party_python_package,
        name = "pypa_flask_cors",
        target = "flask_cors",
        requirement = "flask-cors==5.0.0",
        deps = [
            "@pypa_flask//:flask",
        ],
    )

def repo_pypa_googleapis_common_protos():
    repo_pypa_protobuf()
    maybe(
        third_party_python_package,
        name = "pypa_googleapis_common_protos",
        target = "googleapis_common_protos",
        requirement = "googleapis-common-protos==1.65.0",
        deps = [
            "@pypa_protobuf//:protobuf",
        ],
    )

def repo_pypa_graphql_core():
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_graphql_core",
        target = "graphql_core",
        requirement = "graphql-core==3.2.5",
        deps = [
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_grpcio():
    maybe(
        third_party_python_package,
        name = "pypa_grpcio",
        target = "grpcio",
        requirement = "grpcio==1.67.0",
    )

def repo_pypa_idna():
    maybe(
        third_party_python_package,
        name = "pypa_idna",
        target = "idna",
        requirement = "idna==3.10",
    )

def repo_pypa_imagesize():
    maybe(
        third_party_python_package,
        name = "pypa_imagesize",
        target = "imagesize",
        requirement = "imagesize==1.4.1",
    )

def repo_pypa_importlib_metadata():
    repo_pypa_zipp()
    maybe(
        third_party_python_package,
        name = "pypa_importlib_metadata",
        target = "importlib_metadata",
        requirement = "importlib-metadata==8.5.0",
        deps = [
            "@pypa_zipp//:zipp",
        ],
    )

def repo_pypa_iniconfig():
    maybe(
        third_party_python_package,
        name = "pypa_iniconfig",
        target = "iniconfig",
        requirement = "iniconfig==2.0.0",
    )

def repo_pypa_ipython():
    repo_pypa_colorama()
    repo_pypa_decorator()
    repo_pypa_exceptiongroup()
    repo_pypa_jedi()
    repo_pypa_matplotlib_inline()
    repo_pypa_pexpect()
    repo_pypa_prompt_toolkit()
    repo_pypa_pygments()
    repo_pypa_stack_data()
    repo_pypa_traitlets()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_ipython",
        target = "ipython",
        requirement = "ipython==8.18.1",
        deps = [
            "@pypa_decorator//:decorator",
            "@pypa_exceptiongroup//:exceptiongroup",
            "@pypa_jedi//:jedi",
            "@pypa_matplotlib_inline//:matplotlib_inline",
            "@pypa_prompt_toolkit//:prompt_toolkit",
            "@pypa_pygments//:pygments",
            "@pypa_stack_data//:stack_data",
            "@pypa_traitlets//:traitlets",
            "@pypa_typing_extensions//:typing_extensions",
        ],
        not_win32 = [
            "@pypa_pexpect//:pexpect",
        ],
        win32 = [
            "@pypa_colorama//:colorama",
        ],
    )

def repo_pypa_itsdangerous():
    maybe(
        third_party_python_package,
        name = "pypa_itsdangerous",
        target = "itsdangerous",
        requirement = "itsdangerous==2.2.0",
    )

def repo_pypa_jedi():
    repo_pypa_parso()
    maybe(
        third_party_python_package,
        name = "pypa_jedi",
        target = "jedi",
        requirement = "jedi==0.19.1",
        deps = [
            "@pypa_parso//:parso",
        ],
    )

def repo_pypa_jinja2():
    repo_pypa_markupsafe()
    maybe(
        third_party_python_package,
        name = "pypa_jinja2",
        target = "jinja2",
        requirement = "Jinja2==3.1.4",
        deps = [
            "@pypa_markupsafe//:markupsafe",
        ],
    )

def repo_pypa_jmespath():
    maybe(
        third_party_python_package,
        name = "pypa_jmespath",
        target = "jmespath",
        requirement = "jmespath==1.0.1",
    )

def repo_pypa_joserfc():
    repo_pypa_cryptography()
    maybe(
        third_party_python_package,
        name = "pypa_joserfc",
        target = "joserfc",
        requirement = "joserfc==1.0.0",
        deps = [
            "@pypa_cryptography//:cryptography",
        ],
    )

def repo_pypa_jsondiff():
    repo_pypa_pyyaml()
    maybe(
        third_party_python_package,
        name = "pypa_jsondiff",
        target = "jsondiff",
        requirement = "jsondiff==2.2.1",
        deps = [
            "@pypa_pyyaml//:pyyaml",
        ],
    )

def repo_pypa_jsonpatch():
    repo_pypa_jsonpointer()
    maybe(
        third_party_python_package,
        name = "pypa_jsonpatch",
        target = "jsonpatch",
        requirement = "jsonpatch==1.33",
        deps = [
            "@pypa_jsonpointer//:jsonpointer",
        ],
    )

def repo_pypa_jsonpath_ng():
    maybe(
        third_party_python_package,
        name = "pypa_jsonpath_ng",
        target = "jsonpath_ng",
        requirement = "jsonpath-ng==1.7.0",
    )

def repo_pypa_jsonpointer():
    maybe(
        third_party_python_package,
        name = "pypa_jsonpointer",
        target = "jsonpointer",
        requirement = "jsonpointer==3.0.0",
    )

def repo_pypa_jsonschema():
    repo_pypa_attrs()
    repo_pypa_jsonschema_specifications()
    repo_pypa_referencing()
    repo_pypa_rpds_py()
    maybe(
        third_party_python_package,
        name = "pypa_jsonschema",
        target = "jsonschema",
        requirement = "jsonschema==4.23.0",
        deps = [
            "@pypa_attrs//:attrs",
            "@pypa_jsonschema_specifications//:jsonschema_specifications",
            "@pypa_referencing//:referencing",
            "@pypa_rpds_py//:rpds_py",
        ],
    )

def repo_pypa_jsonschema_path():
    repo_pypa_pathable()
    repo_pypa_pyyaml()
    repo_pypa_referencing()
    repo_pypa_requests()
    maybe(
        third_party_python_package,
        name = "pypa_jsonschema_path",
        target = "jsonschema_path",
        requirement = "jsonschema-path==0.3.3",
        deps = [
            "@pypa_pathable//:pathable",
            "@pypa_pyyaml//:pyyaml",
            "@pypa_referencing//:referencing",
            "@pypa_requests//:requests",
        ],
    )

def repo_pypa_jsonschema_specifications():
    repo_pypa_referencing()
    maybe(
        third_party_python_package,
        name = "pypa_jsonschema_specifications",
        target = "jsonschema_specifications",
        requirement = "jsonschema-specifications==2023.12.1",
        deps = [
            "@pypa_referencing//:referencing",
        ],
    )

def repo_pypa_lazy_object_proxy():
    maybe(
        third_party_python_package,
        name = "pypa_lazy_object_proxy",
        target = "lazy_object_proxy",
        requirement = "lazy-object-proxy==1.10.0",
    )

def repo_pypa_libclang():
    maybe(
        third_party_python_package,
        name = "pypa_libclang",
        target = "libclang",
        requirement = "libclang==18.1.1",
    )

def repo_pypa_markupsafe():
    maybe(
        third_party_python_package,
        name = "pypa_markupsafe",
        target = "markupsafe",
        requirement = "MarkupSafe==3.0.2",
    )

def repo_pypa_matplotlib_inline():
    repo_pypa_traitlets()
    maybe(
        third_party_python_package,
        name = "pypa_matplotlib_inline",
        target = "matplotlib_inline",
        requirement = "matplotlib-inline==0.1.7",
        deps = [
            "@pypa_traitlets//:traitlets",
        ],
    )

def repo_pypa_ml_dtypes():
    repo_pypa_numpy()
    maybe(
        third_party_python_package,
        name = "pypa_ml_dtypes",
        target = "ml_dtypes",
        requirement = "ml_dtypes==0.5.0",
        deps = [
            "@pypa_numpy//:numpy",
        ],
    )

def repo_pypa_moto():
    repo_pypa_antlr4_python3_runtime()
    repo_pypa_aws_xray_sdk()
    repo_pypa_boto3()
    repo_pypa_botocore()
    repo_pypa_cfn_lint()
    repo_pypa_cryptography()
    repo_pypa_docker()
    repo_pypa_flask()
    repo_pypa_flask_cors()
    repo_pypa_graphql_core()
    repo_pypa_jinja2()
    repo_pypa_joserfc()
    repo_pypa_jsondiff()
    repo_pypa_jsonpath_ng()
    repo_pypa_openapi_spec_validator()
    repo_pypa_py_partiql_parser()
    repo_pypa_pyparsing()
    repo_pypa_python_dateutil()
    repo_pypa_pyyaml()
    repo_pypa_requests()
    repo_pypa_responses()
    repo_pypa_setuptools()
    repo_pypa_werkzeug()
    repo_pypa_xmltodict()
    maybe(
        third_party_python_package,
        name = "pypa_moto",
        target = "moto",
        requirement = "moto[s3,server]==5.0.18",
        deps = [
            "@pypa_antlr4_python3_runtime//:antlr4_python3_runtime",
            "@pypa_aws_xray_sdk//:aws_xray_sdk",
            "@pypa_boto3//:boto3",
            "@pypa_botocore//:botocore",
            "@pypa_cfn_lint//:cfn_lint",
            "@pypa_cryptography//:cryptography",
            "@pypa_docker//:docker",
            "@pypa_flask//:flask",
            "@pypa_flask_cors//:flask_cors",
            "@pypa_graphql_core//:graphql_core",
            "@pypa_jinja2//:jinja2",
            "@pypa_joserfc//:joserfc",
            "@pypa_jsondiff//:jsondiff",
            "@pypa_jsonpath_ng//:jsonpath_ng",
            "@pypa_openapi_spec_validator//:openapi_spec_validator",
            "@pypa_py_partiql_parser//:py_partiql_parser",
            "@pypa_pyparsing//:pyparsing",
            "@pypa_python_dateutil//:python_dateutil",
            "@pypa_pyyaml//:pyyaml",
            "@pypa_requests//:requests",
            "@pypa_responses//:responses",
            "@pypa_setuptools//:setuptools",
            "@pypa_werkzeug//:werkzeug",
            "@pypa_xmltodict//:xmltodict",
        ],
    )

def repo_pypa_mpmath():
    maybe(
        third_party_python_package,
        name = "pypa_mpmath",
        target = "mpmath",
        requirement = "mpmath==1.3.0",
    )

def repo_pypa_mypy_extensions():
    maybe(
        third_party_python_package,
        name = "pypa_mypy_extensions",
        target = "mypy_extensions",
        requirement = "mypy-extensions==1.0.0",
    )

def repo_pypa_networkx():
    maybe(
        third_party_python_package,
        name = "pypa_networkx",
        target = "networkx",
        requirement = "networkx==3.2.1",
    )

def repo_pypa_numpy():
    maybe(
        third_party_python_package,
        name = "pypa_numpy",
        target = "numpy",
        requirement = "numpy==2.0.2",
    )

def repo_pypa_openapi_schema_validator():
    repo_pypa_jsonschema()
    repo_pypa_jsonschema_specifications()
    repo_pypa_rfc3339_validator()
    maybe(
        third_party_python_package,
        name = "pypa_openapi_schema_validator",
        target = "openapi_schema_validator",
        requirement = "openapi-schema-validator==0.6.2",
        deps = [
            "@pypa_jsonschema//:jsonschema",
            "@pypa_jsonschema_specifications//:jsonschema_specifications",
            "@pypa_rfc3339_validator//:rfc3339_validator",
        ],
    )

def repo_pypa_openapi_spec_validator():
    repo_pypa_jsonschema()
    repo_pypa_jsonschema_path()
    repo_pypa_lazy_object_proxy()
    repo_pypa_openapi_schema_validator()
    maybe(
        third_party_python_package,
        name = "pypa_openapi_spec_validator",
        target = "openapi_spec_validator",
        requirement = "openapi-spec-validator==0.7.1",
        deps = [
            "@pypa_jsonschema//:jsonschema",
            "@pypa_jsonschema_path//:jsonschema_path",
            "@pypa_lazy_object_proxy//:lazy_object_proxy",
            "@pypa_openapi_schema_validator//:openapi_schema_validator",
        ],
    )

def repo_pypa_packaging():
    maybe(
        third_party_python_package,
        name = "pypa_packaging",
        target = "packaging",
        requirement = "packaging==24.1",
    )

def repo_pypa_parso():
    maybe(
        third_party_python_package,
        name = "pypa_parso",
        target = "parso",
        requirement = "parso==0.8.4",
    )

def repo_pypa_pathable():
    maybe(
        third_party_python_package,
        name = "pypa_pathable",
        target = "pathable",
        requirement = "pathable==0.4.3",
    )

def repo_pypa_pathspec():
    maybe(
        third_party_python_package,
        name = "pypa_pathspec",
        target = "pathspec",
        requirement = "pathspec==0.12.1",
    )

def repo_pypa_pexpect():
    repo_pypa_ptyprocess()
    maybe(
        third_party_python_package,
        name = "pypa_pexpect",
        target = "pexpect",
        requirement = "pexpect==4.9.0",
        deps = [
            "@pypa_ptyprocess//:ptyprocess",
        ],
    )

def repo_pypa_platformdirs():
    maybe(
        third_party_python_package,
        name = "pypa_platformdirs",
        target = "platformdirs",
        requirement = "platformdirs==4.3.6",
    )

def repo_pypa_pluggy():
    maybe(
        third_party_python_package,
        name = "pypa_pluggy",
        target = "pluggy",
        requirement = "pluggy==1.5.0",
    )

def repo_pypa_prompt_toolkit():
    repo_pypa_wcwidth()
    maybe(
        third_party_python_package,
        name = "pypa_prompt_toolkit",
        target = "prompt_toolkit",
        requirement = "prompt-toolkit==3.0.48",
        deps = [
            "@pypa_wcwidth//:wcwidth",
        ],
    )

def repo_pypa_protobuf():
    maybe(
        third_party_python_package,
        name = "pypa_protobuf",
        target = "protobuf",
        requirement = "protobuf==5.28.3",
    )

def repo_pypa_ptyprocess():
    maybe(
        third_party_python_package,
        name = "pypa_ptyprocess",
        target = "ptyprocess",
        requirement = "ptyprocess==0.7.0",
    )

def repo_pypa_pure_eval():
    maybe(
        third_party_python_package,
        name = "pypa_pure_eval",
        target = "pure_eval",
        requirement = "pure-eval==0.2.3",
    )

def repo_pypa_py_partiql_parser():
    maybe(
        third_party_python_package,
        name = "pypa_py_partiql_parser",
        target = "py_partiql_parser",
        requirement = "py-partiql-parser==0.5.6",
    )

def repo_pypa_pycparser():
    maybe(
        third_party_python_package,
        name = "pypa_pycparser",
        target = "pycparser",
        requirement = "pycparser==2.22",
    )

def repo_pypa_pydantic():
    repo_pypa_annotated_types()
    repo_pypa_pydantic_core()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_pydantic",
        target = "pydantic",
        requirement = "pydantic==2.9.2",
        deps = [
            "@pypa_annotated_types//:annotated_types",
            "@pypa_pydantic_core//:pydantic_core",
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_pydantic_core():
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_pydantic_core",
        target = "pydantic_core",
        requirement = "pydantic-core==2.23.4",
        deps = [
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_pydantic_extra_types():
    repo_pypa_pydantic()
    maybe(
        third_party_python_package,
        name = "pypa_pydantic_extra_types",
        target = "pydantic_extra_types",
        requirement = "pydantic-extra-types==2.9.0",
        deps = [
            "@pypa_pydantic//:pydantic",
        ],
    )

def repo_pypa_pygments():
    maybe(
        third_party_python_package,
        name = "pypa_pygments",
        target = "pygments",
        requirement = "Pygments==2.18.0",
    )

def repo_pypa_pyparsing():
    maybe(
        third_party_python_package,
        name = "pypa_pyparsing",
        target = "pyparsing",
        requirement = "pyparsing==3.2.0",
    )

def repo_pypa_pytest():
    repo_pypa_colorama()
    repo_pypa_exceptiongroup()
    repo_pypa_iniconfig()
    repo_pypa_packaging()
    repo_pypa_pluggy()
    repo_pypa_tomli()
    maybe(
        third_party_python_package,
        name = "pypa_pytest",
        target = "pytest",
        requirement = "pytest==8.3.3",
        deps = [
            "@pypa_exceptiongroup//:exceptiongroup",
            "@pypa_iniconfig//:iniconfig",
            "@pypa_packaging//:packaging",
            "@pypa_pluggy//:pluggy",
            "@pypa_tomli//:tomli",
        ],
        win32 = [
            "@pypa_colorama//:colorama",
        ],
    )

def repo_pypa_pytest_asyncio():
    repo_pypa_pytest()
    maybe(
        third_party_python_package,
        name = "pypa_pytest_asyncio",
        target = "pytest_asyncio",
        requirement = "pytest-asyncio==0.24.0",
        deps = [
            "@pypa_pytest//:pytest",
        ],
    )

def repo_pypa_python_dateutil():
    repo_pypa_six()
    maybe(
        third_party_python_package,
        name = "pypa_python_dateutil",
        target = "python_dateutil",
        requirement = "python-dateutil==2.9.0.post0",
        deps = [
            "@pypa_six//:six",
        ],
    )

def repo_pypa_pywin32():
    maybe(
        third_party_python_package,
        name = "pypa_pywin32",
        target = "pywin32",
        requirement = "pywin32==308",
    )

def repo_pypa_pyyaml():
    maybe(
        third_party_python_package,
        name = "pypa_pyyaml",
        target = "pyyaml",
        requirement = "PyYAML==6.0.2",
    )

def repo_pypa_referencing():
    repo_pypa_attrs()
    repo_pypa_rpds_py()
    maybe(
        third_party_python_package,
        name = "pypa_referencing",
        target = "referencing",
        requirement = "referencing==0.35.1",
        deps = [
            "@pypa_attrs//:attrs",
            "@pypa_rpds_py//:rpds_py",
        ],
    )

def repo_pypa_regex():
    maybe(
        third_party_python_package,
        name = "pypa_regex",
        target = "regex",
        requirement = "regex==2024.9.11",
    )

def repo_pypa_requests():
    repo_pypa_certifi()
    repo_pypa_charset_normalizer()
    repo_pypa_idna()
    repo_pypa_urllib3()
    maybe(
        third_party_python_package,
        name = "pypa_requests",
        target = "requests",
        requirement = "requests==2.32.3",
        deps = [
            "@pypa_certifi//:certifi",
            "@pypa_charset_normalizer//:charset_normalizer",
            "@pypa_idna//:idna",
            "@pypa_urllib3//:urllib3",
        ],
    )

def repo_pypa_requests_toolbelt():
    repo_pypa_requests()
    maybe(
        third_party_python_package,
        name = "pypa_requests_toolbelt",
        target = "requests_toolbelt",
        requirement = "requests-toolbelt==1.0.0",
        deps = [
            "@pypa_requests//:requests",
        ],
    )

def repo_pypa_responses():
    repo_pypa_pyyaml()
    repo_pypa_requests()
    repo_pypa_urllib3()
    maybe(
        third_party_python_package,
        name = "pypa_responses",
        target = "responses",
        requirement = "responses==0.25.3",
        deps = [
            "@pypa_pyyaml//:pyyaml",
            "@pypa_requests//:requests",
            "@pypa_urllib3//:urllib3",
        ],
    )

def repo_pypa_rfc3339_validator():
    repo_pypa_six()
    maybe(
        third_party_python_package,
        name = "pypa_rfc3339_validator",
        target = "rfc3339_validator",
        requirement = "rfc3339-validator==0.1.4",
        deps = [
            "@pypa_six//:six",
        ],
    )

def repo_pypa_rpds_py():
    maybe(
        third_party_python_package,
        name = "pypa_rpds_py",
        target = "rpds_py",
        requirement = "rpds-py==0.20.0",
    )

def repo_pypa_s3transfer():
    repo_pypa_botocore()
    maybe(
        third_party_python_package,
        name = "pypa_s3transfer",
        target = "s3transfer",
        requirement = "s3transfer==0.10.3",
        deps = [
            "@pypa_botocore//:botocore",
        ],
    )

def repo_pypa_scalpl():
    maybe(
        third_party_python_package,
        name = "pypa_scalpl",
        target = "scalpl",
        requirement = "scalpl==0.4.2",
    )

def repo_pypa_setuptools():
    maybe(
        third_party_python_package,
        name = "pypa_setuptools",
        target = "setuptools",
        requirement = "setuptools==75.2.0",
    )

def repo_pypa_six():
    maybe(
        third_party_python_package,
        name = "pypa_six",
        target = "six",
        requirement = "six==1.16.0",
    )

def repo_pypa_snowballstemmer():
    maybe(
        third_party_python_package,
        name = "pypa_snowballstemmer",
        target = "snowballstemmer",
        requirement = "snowballstemmer==2.2.0",
    )

def repo_pypa_sphinx():
    repo_pypa_alabaster()
    repo_pypa_babel()
    repo_pypa_colorama()
    repo_pypa_docutils()
    repo_pypa_imagesize()
    repo_pypa_importlib_metadata()
    repo_pypa_jinja2()
    repo_pypa_packaging()
    repo_pypa_pygments()
    repo_pypa_requests()
    repo_pypa_snowballstemmer()
    repo_pypa_sphinxcontrib_applehelp()
    repo_pypa_sphinxcontrib_devhelp()
    repo_pypa_sphinxcontrib_htmlhelp()
    repo_pypa_sphinxcontrib_jsmath()
    repo_pypa_sphinxcontrib_qthelp()
    repo_pypa_sphinxcontrib_serializinghtml()
    repo_pypa_tomli()
    maybe(
        third_party_python_package,
        name = "pypa_sphinx",
        target = "sphinx",
        requirement = "sphinx==7.3.7",
        deps = [
            "@pypa_alabaster//:alabaster",
            "@pypa_babel//:babel",
            "@pypa_docutils//:docutils",
            "@pypa_imagesize//:imagesize",
            "@pypa_importlib_metadata//:importlib_metadata",
            "@pypa_jinja2//:jinja2",
            "@pypa_packaging//:packaging",
            "@pypa_pygments//:pygments",
            "@pypa_requests//:requests",
            "@pypa_snowballstemmer//:snowballstemmer",
            "@pypa_sphinxcontrib_applehelp//:sphinxcontrib_applehelp",
            "@pypa_sphinxcontrib_devhelp//:sphinxcontrib_devhelp",
            "@pypa_sphinxcontrib_htmlhelp//:sphinxcontrib_htmlhelp",
            "@pypa_sphinxcontrib_jsmath//:sphinxcontrib_jsmath",
            "@pypa_sphinxcontrib_qthelp//:sphinxcontrib_qthelp",
            "@pypa_sphinxcontrib_serializinghtml//:sphinxcontrib_serializinghtml",
            "@pypa_tomli//:tomli",
        ],
        win32 = [
            "@pypa_colorama//:colorama",
        ],
    )

def repo_pypa_sphinx_immaterial():
    repo_pypa_appdirs()
    repo_pypa_markupsafe()
    repo_pypa_pydantic()
    repo_pypa_pydantic_extra_types()
    repo_pypa_requests()
    repo_pypa_sphinx()
    repo_pypa_typing_extensions()
    maybe(
        third_party_python_package,
        name = "pypa_sphinx_immaterial",
        target = "sphinx_immaterial",
        requirement = "sphinx-immaterial==0.12.4",
        deps = [
            "@pypa_appdirs//:appdirs",
            "@pypa_markupsafe//:markupsafe",
            "@pypa_pydantic//:pydantic",
            "@pypa_pydantic_extra_types//:pydantic_extra_types",
            "@pypa_requests//:requests",
            "@pypa_sphinx//:sphinx",
            "@pypa_typing_extensions//:typing_extensions",
        ],
    )

def repo_pypa_sphinxcontrib_applehelp():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_applehelp",
        target = "sphinxcontrib_applehelp",
        requirement = "sphinxcontrib-applehelp==2.0.0",
    )

def repo_pypa_sphinxcontrib_devhelp():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_devhelp",
        target = "sphinxcontrib_devhelp",
        requirement = "sphinxcontrib-devhelp==2.0.0",
    )

def repo_pypa_sphinxcontrib_htmlhelp():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_htmlhelp",
        target = "sphinxcontrib_htmlhelp",
        requirement = "sphinxcontrib-htmlhelp==2.1.0",
    )

def repo_pypa_sphinxcontrib_jsmath():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_jsmath",
        target = "sphinxcontrib_jsmath",
        requirement = "sphinxcontrib-jsmath==1.0.1",
    )

def repo_pypa_sphinxcontrib_qthelp():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_qthelp",
        target = "sphinxcontrib_qthelp",
        requirement = "sphinxcontrib-qthelp==2.0.0",
    )

def repo_pypa_sphinxcontrib_serializinghtml():
    maybe(
        third_party_python_package,
        name = "pypa_sphinxcontrib_serializinghtml",
        target = "sphinxcontrib_serializinghtml",
        requirement = "sphinxcontrib-serializinghtml==2.0.0",
    )

def repo_pypa_stack_data():
    repo_pypa_asttokens()
    repo_pypa_executing()
    repo_pypa_pure_eval()
    maybe(
        third_party_python_package,
        name = "pypa_stack_data",
        target = "stack_data",
        requirement = "stack-data==0.6.3",
        deps = [
            "@pypa_asttokens//:asttokens",
            "@pypa_executing//:executing",
            "@pypa_pure_eval//:pure_eval",
        ],
    )

def repo_pypa_sympy():
    repo_pypa_mpmath()
    maybe(
        third_party_python_package,
        name = "pypa_sympy",
        target = "sympy",
        requirement = "sympy==1.13.3",
        deps = [
            "@pypa_mpmath//:mpmath",
        ],
    )

def repo_pypa_tomli():
    maybe(
        third_party_python_package,
        name = "pypa_tomli",
        target = "tomli",
        requirement = "tomli==2.0.2",
    )

def repo_pypa_traitlets():
    maybe(
        third_party_python_package,
        name = "pypa_traitlets",
        target = "traitlets",
        requirement = "traitlets==5.14.3",
    )

def repo_pypa_typing_extensions():
    maybe(
        third_party_python_package,
        name = "pypa_typing_extensions",
        target = "typing_extensions",
        requirement = "typing-extensions==4.12.2",
    )

def repo_pypa_urllib3():
    maybe(
        third_party_python_package,
        name = "pypa_urllib3",
        target = "urllib3",
        requirement = "urllib3==1.26.20",
    )

def repo_pypa_wcwidth():
    maybe(
        third_party_python_package,
        name = "pypa_wcwidth",
        target = "wcwidth",
        requirement = "wcwidth==0.2.13",
    )

def repo_pypa_werkzeug():
    repo_pypa_markupsafe()
    maybe(
        third_party_python_package,
        name = "pypa_werkzeug",
        target = "werkzeug",
        requirement = "werkzeug==3.0.4",
        deps = [
            "@pypa_markupsafe//:markupsafe",
        ],
    )

def repo_pypa_wrapt():
    maybe(
        third_party_python_package,
        name = "pypa_wrapt",
        target = "wrapt",
        requirement = "wrapt==1.16.0",
    )

def repo_pypa_xmltodict():
    maybe(
        third_party_python_package,
        name = "pypa_xmltodict",
        target = "xmltodict",
        requirement = "xmltodict==0.14.2",
    )

def repo_pypa_yapf():
    repo_pypa_importlib_metadata()
    repo_pypa_platformdirs()
    repo_pypa_tomli()
    maybe(
        third_party_python_package,
        name = "pypa_yapf",
        target = "yapf",
        requirement = "yapf==0.40.2",
        deps = [
            "@pypa_importlib_metadata//:importlib_metadata",
            "@pypa_platformdirs//:platformdirs",
            "@pypa_tomli//:tomli",
        ],
    )

def repo_pypa_zipp():
    maybe(
        third_party_python_package,
        name = "pypa_zipp",
        target = "zipp",
        requirement = "zipp==3.20.2",
    )
