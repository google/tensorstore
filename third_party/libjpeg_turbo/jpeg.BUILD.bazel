load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_nasm//nasm:nasm_library.bzl", "nasm_library")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])

exports_files(["LICENSE.md"])

WITH_SIMD_COPTS = ["-DWITH_SIMD"]

LIBJPEGTURBO_COPTS = select(
    {
        ":compiler_msvc": [
            "-wd4996",
        ],
        ":armeabi-v7a": [
            "-D__ARM_NEON__",
            "-DNEON_INTRINSICS",
            "-march=armv7-a",
            "-mfpu=neon",
            "-mfloat-abi=softfp",
            "-fprefetch-loop-arrays",
            "-w",
        ],
        "@platforms//cpu:arm64": [
            "-DNEON_INTRINSICS",
            "-w",
        ],
        "@platforms//cpu:ppc": [
            "-mcpu=power8",
            "-mtune=power8",
            "-w",
        ],
        "//conditions:default": [
            "-w",
        ],
    },
) + select(
    {
        "@platforms//cpu:x86_64": WITH_SIMD_COPTS,
        "@platforms//cpu:arm64": WITH_SIMD_COPTS,
        "@platforms//cpu:ppc": WITH_SIMD_COPTS,
        ":armeabi-v7a": WITH_SIMD_COPTS,
        "//conditions:default": [],
    },
)

cc_library(
    name = "jpeg",
    srcs = [
        "jaricom.c",
        "jcapimin.c",
        "jcapistd.c",
        "jcarith.c",
        "jccoefct.c",
        "jccolor.c",
        "jcdctmgr.c",
        "jchuff.c",
        "jcicc.c",
        "jcinit.c",
        "jcmainct.c",
        "jcmarker.c",
        "jcmaster.c",
        "jcomapi.c",
        "jcparam.c",
        "jcphuff.c",
        "jcprepct.c",
        "jcsample.c",
        "jctrans.c",
        "jdapimin.c",
        "jdapistd.c",
        "jdarith.c",
        "jdatadst.c",
        "jdatasrc.c",
        "jdcoefct.c",
        "jdcolor.c",
        "jddctmgr.c",
        "jdhuff.c",
        "jdicc.c",
        "jdinput.c",
        "jdmainct.c",
        "jdmarker.c",
        "jdmaster.c",
        "jdmerge.c",
        "jdphuff.c",
        "jdpostct.c",
        "jdsample.c",
        "jdtrans.c",
        "jerror.c",
        "jfdctflt.c",
        "jfdctfst.c",
        "jfdctint.c",
        "jidctflt.c",
        "jidctfst.c",
        "jidctint.c",
        "jidctred.c",
        "jmemmgr.c",
        "jmemnobs.c",
        "jquant1.c",
        "jquant2.c",
        "jutils.c",
        # headers
        "jchuff.h",
        "jconfig.h",
        "jconfigint.h",
        "jdcoefct.h",
        "jdct.h",
        "jdhuff.h",
        "jdmainct.h",
        "jdmaster.h",
        "jdmerge.h",
        "jdsample.h",
        "jinclude.h",
        "jmemsys.h",
        "jpeg_nbits_table.h",
        "jpegcomp.h",
    ],
    hdrs = [
        "jerror.h",
        "jmorecfg.h",
        "jpegint.h",
        "jpeglib.h",
    ],
    copts = LIBJPEGTURBO_COPTS,
    includes = ["."],
    textual_hdrs = [
        "jccolext.c",
        "jdcol565.c",
        "jdcolext.c",
        "jdmrg565.c",
        "jdmrgext.c",
        "jstdhuff.c",
    ],
    visibility = ["//visibility:public"],
    implementation_deps = select(
        {
            "@platforms//cpu:x86_64": [":simd_x86_64"],
            ":armeabi-v7a": [":simd_arm"],
            "@platforms//cpu:arm64": [":simd_arm"],
            "@platforms//cpu:ppc": [":simd_altivec"],
            "//conditions:default": [":simd_none"],
        },
    ),
)

# SIMD support
cc_library(
    name = "simd_common",
    hdrs = [
        "jchuff.h",
        "jconfig.h",
        "jconfigint.h",
        "jdct.h",
        "jerror.h",
        "jinclude.h",
        "jmorecfg.h",
        "jpegint.h",
        "jpeglib.h",
        "jsimd.h",
        "jsimddct.h",
        "jversion.h",
        "simd/jsimd.h",
    ],
    copts = LIBJPEGTURBO_COPTS,
)

cc_library(
    name = "simd_none",
    srcs = [
        "jsimd_none.c",
    ],
    copts = LIBJPEGTURBO_COPTS,
    deps = [":simd_common"],
)

cc_library(
    name = "simd_altivec",
    srcs = [
        "simd/powerpc/jccolor-altivec.c",
        "simd/powerpc/jcgray-altivec.c",
        "simd/powerpc/jcsample-altivec.c",
        "simd/powerpc/jdcolor-altivec.c",
        "simd/powerpc/jdmerge-altivec.c",
        "simd/powerpc/jdsample-altivec.c",
        "simd/powerpc/jfdctfst-altivec.c",
        "simd/powerpc/jfdctint-altivec.c",
        "simd/powerpc/jidctfst-altivec.c",
        "simd/powerpc/jidctint-altivec.c",
        "simd/powerpc/jquanti-altivec.c",
        "simd/powerpc/jsimd.c",
    ],
    hdrs = [
        "simd/powerpc/jccolext-altivec.c",
        "simd/powerpc/jcgryext-altivec.c",
        "simd/powerpc/jcsample.h",
        "simd/powerpc/jdcolext-altivec.c",
        "simd/powerpc/jdmrgext-altivec.c",
        "simd/powerpc/jsimd_altivec.h",
    ],
    copts = LIBJPEGTURBO_COPTS,
    target_compatible_with = ["@platforms//cpu:ppc"],
    deps = [":simd_common"],
)

cc_library(
    name = "simd_x86_64",
    srcs = [
        "simd/x86_64/jsimd.c",
        ":simd_x86_64_asm",
    ],
    copts = LIBJPEGTURBO_COPTS,
    linkstatic = 1,
    target_compatible_with = ["@platforms//cpu:x86_64"],
    deps = [
        ":simd_common",
    ],
)

nasm_library(
    name = "simd_x86_64_asm",
    srcs = [
        "simd/x86_64/jccolor-avx2.asm",
        "simd/x86_64/jccolor-sse2.asm",
        "simd/x86_64/jcgray-avx2.asm",
        "simd/x86_64/jcgray-sse2.asm",
        "simd/x86_64/jchuff-sse2.asm",
        "simd/x86_64/jcphuff-sse2.asm",
        "simd/x86_64/jcsample-avx2.asm",
        "simd/x86_64/jcsample-sse2.asm",
        "simd/x86_64/jdcolor-avx2.asm",
        "simd/x86_64/jdcolor-sse2.asm",
        "simd/x86_64/jdmerge-avx2.asm",
        "simd/x86_64/jdmerge-sse2.asm",
        "simd/x86_64/jdsample-avx2.asm",
        "simd/x86_64/jdsample-sse2.asm",
        "simd/x86_64/jfdctflt-sse.asm",
        "simd/x86_64/jfdctfst-sse2.asm",
        "simd/x86_64/jfdctint-avx2.asm",
        "simd/x86_64/jfdctint-sse2.asm",
        "simd/x86_64/jidctflt-sse2.asm",
        "simd/x86_64/jidctfst-sse2.asm",
        "simd/x86_64/jidctint-avx2.asm",
        "simd/x86_64/jidctint-sse2.asm",
        "simd/x86_64/jidctred-sse2.asm",
        "simd/x86_64/jquantf-sse2.asm",
        "simd/x86_64/jquanti-avx2.asm",
        "simd/x86_64/jquanti-sse2.asm",
        "simd/x86_64/jsimdcpu.asm",
    ],
    copts = [
        "-w+all",
        "-w-reloc-rel-dword",
        "-D__x86_64__",
    ] + select({
        "@platforms//os:windows": [
            "-DWIN64",
        ],
        "@platforms//os:macos": [
            "-DMACHO",
            "-DPIC",
        ],
        "//conditions:default": [
            "-DELF",
            "-DPIC",
        ],
    }),
    hdrs = [
        "simd/nasm/jcolsamp.inc",
        "simd/nasm/jdct.inc",
        "simd/nasm/jsimdcfg.inc",
        "simd/nasm/jsimdcfg.inc.h",
        "simd/nasm/jsimdext.inc",
        # The non-ext .asm files with the similar name %include these
        "simd/x86_64/jccolext-avx2.asm",
        "simd/x86_64/jccolext-sse2.asm",
        "simd/x86_64/jcgryext-avx2.asm",
        "simd/x86_64/jcgryext-sse2.asm",
        "simd/x86_64/jdcolext-avx2.asm",
        "simd/x86_64/jdcolext-sse2.asm",
        "simd/x86_64/jdmrgext-avx2.asm",
        "simd/x86_64/jdmrgext-sse2.asm",
    ],
    includes = [
        "simd/nasm",
        "simd/x86_64",
    ],
    target_compatible_with = ["@platforms//cpu:x86_64"],
)

expand_template(
    name = "neon-compat_gen",
    out = "simd/arm/neon-compat.h",
    substitutions = {
        "#cmakedefine HAVE_VLD1_S16_X3": "#define HAVE_VLD1_S16_X3",
        "#cmakedefine HAVE_VLD1_U16_X2": "#define HAVE_VLD1_U16_X2",
        "#cmakedefine HAVE_VLD1Q_U8_X4": "#define HAVE_VLD1Q_U8_X4",
    },
    template = "simd/arm/neon-compat.h.in",
)

copy_file(
    name = "neon-compat_hdr_src",
    src = "simd/arm/neon-compat.h",
    out = "neon-compat.h",
    allow_symlink = True,
)

cc_library(
    name = "neon-compat_hdr",
    hdrs = ["neon-compat.h"],
    copts = LIBJPEGTURBO_COPTS,
)

cc_library(
    name = "simd_arm",
    srcs = [
        "simd/arm/jccolor-neon.c",
        "simd/arm/jcgray-neon.c",
        "simd/arm/jcphuff-neon.c",
        "simd/arm/jcsample-neon.c",
        "simd/arm/jdcolor-neon.c",
        "simd/arm/jdmerge-neon.c",
        "simd/arm/jdsample-neon.c",
        "simd/arm/jfdctfst-neon.c",
        "simd/arm/jfdctint-neon.c",
        "simd/arm/jidctfst-neon.c",
        "simd/arm/jidctint-neon.c",
        "simd/arm/jidctred-neon.c",
        "simd/arm/jquanti-neon.c",
    ] + select(
        {
            ":armeabi-v7a": [
                "simd/arm/aarch32/jchuff-neon.c",
                "simd/arm/aarch32/jsimd.c",
            ],
            "@platforms//cpu:arm64": [
                "simd/arm/aarch64/jchuff-neon.c",
                "simd/arm/aarch64/jsimd.c",
            ],
            "//conditions:default": [],
        },
    ),
    hdrs = [
        "simd/arm/align.h",
        "simd/arm/jchuff.h",
        "neon-compat.h",
    ],
    copts = LIBJPEGTURBO_COPTS,
    #target_compatible_with = [
    #    ":armeabi-v7a",
    #    "@platforms//cpu:arm64",
    #],
    textual_hdrs = [
        "simd/arm/jcgryext-neon.c",
        "simd/arm/jdcolext-neon.c",
        "simd/arm/jdmrgext-neon.c",
    ] + select(
        {
            ":armeabi-v7a": [
                "simd/arm/aarch32/jccolext-neon.c",
            ],
            "@platforms//cpu:arm64": [
                "simd/arm/aarch64/jccolext-neon.c",
            ],
            "//conditions:default": [],
        },
    ),
    deps = [":simd_common"],
)

# libjpeg-turbo configure rules
copy_file(
    name = "jversion_copy",
    src = "@tensorstore//third_party:libjpeg_turbo/config/jversion.h",
    out = "jversion.h",
)

copy_file(
    name = "jconfig_copy",
    src = "@tensorstore//third_party:libjpeg_turbo/config/jconfig.h",
    out = "jconfig.h",
)

copy_file(
    name = "jconfigint_copy",
    src = "@tensorstore//third_party:libjpeg_turbo/config/jconfigint.h",
    out = "jconfigint.h",
)

# Config settings.
# TODO(jbms): replace with suitable @platforms constraint.
config_setting(
    name = "armeabi-v7a",
    values = {"cpu": "armeabi-v7a"},
)

alias(
    name = "compiler_msvc",
    actual = "@rules_cc//cc/compiler:msvc-cl",
)
