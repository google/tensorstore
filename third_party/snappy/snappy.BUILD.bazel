load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

filegroup(
    name = "license",
    srcs = ["COPYING"],
)

cc_library(
    name = "snappy",
    srcs = [
        "snappy.cc",
        "snappy-internal.h",
        "snappy-sinksource.cc",
        "snappy-stubs-internal.cc",
        "snappy-stubs-internal.h",
        "config.h",
    ],
    hdrs = [
        "snappy.h",
        "snappy-sinksource.h",
        "snappy-stubs-public.h",
    ],
    copts = select({
        "@platforms//os:windows": [],
        "//conditions:default": [
            "-Wno-sign-compare",
        ],
    }),
    local_defines = ["HAVE_CONFIG_H"],
)

cc_library(
    name = "snappy-c",
    srcs = ["snappy-c.cc"],
    hdrs = ["snappy-c.h"],
    deps = [":snappy"],
    local_defines = ["HAVE_CONFIG_H"],
)

# Generate a config.h similar to what cmake would produce.
write_file(
    name = "config_h",
    out = "config.h",
    content = [
        """
#define HAVE_STDDEF_H 1
#define HAVE_STDINT_H 1
#ifdef __has_builtin
#  if !defined(HAVE_BUILTIN_EXPECT) && __has_builtin(__builtin_expect)
#    define HAVE_BUILTIN_EXPECT 1
#  endif
#  if !defined(HAVE_BUILTIN_CTZ) && __has_builtin(__builtin_ctzll)
#    define HAVE_BUILTIN_CTZ 1
#  endif
#  if !defined(HAVE_BUILTIN_PREFETCH) && __has_builtin(__builtin_prefetech)
#    define HAVE_BUILTIN_PREFETCH 1
#  endif
#elif defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef HAVE_BUILTIN_EXPECT
#    define HAVE_BUILTIN_EXPECT 1
#  endif
#  ifndef HAVE_BUILTIN_CTZ
#    define HAVE_BUILTIN_CTZ 1
#  endif
#  ifndef HAVE_BUILTIN_PREFETCH
#    define HAVE_BUILTIN_PREFETCH 1
#  endif
#endif

#if defined(_WIN32) && !defined(HAVE_WINDOWS_H)
#define HAVE_WINDOWS_H 1
#endif

#ifdef __has_include
#  if !defined(HAVE_BYTESWAP_H) && __has_include(<byteswap.h>)
#    define HAVE_BYTESWAP_H 1
#  endif
#  if !defined(HAVE_UNISTD_H) && __has_include(<unistd.h>)
#    define HAVE_UNISTD_H 1
#  endif
#  if !defined(HAVE_SYS_ENDIAN_H) && __has_include(<sys/endian.h>)
#    define HAVE_SYS_ENDIAN_H 1
#  endif
#  if !defined(HAVE_SYS_MMAN_H) && __has_include(<sys/mman.h>)
#    define HAVE_SYS_MMAN_H 1
#  endif
#  if !defined(HAVE_SYS_UIO_H) && __has_include(<sys/uio.h>)
#    define HAVE_SYS_UIO_H 1
#  endif
#  if !defined(HAVE_SYS_TIME_H) && __has_include(<sys/time.h>)
#    define HAVE_SYS_TIME_H 1
#  endif
#endif

#ifndef SNAPPY_IS_BIG_ENDIAN
#  ifdef __s390x__
#    define SNAPPY_IS_BIG_ENDIAN 1
#  elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#    define SNAPPY_IS_BIG_ENDIAN 1
#  endif
#endif

""",
    ],
    newline = "unix",
)

# Assume sys/uio.h is available on non-Windows.
# Set the version numbers.
expand_template(
    name = "snappy_stubs_public_h",
    out = "snappy-stubs-public.h",
    substitutions = {
        "${HAVE_SYS_UIO_H_01}": "!_WIN32",
        "${PROJECT_VERSION_MAJOR}": "1",
        "${PROJECT_VERSION_MINOR}": "2",
        "${PROJECT_VERSION_PATCH}": "2",
    },
    template = "snappy-stubs-public.h.in",
)
