# Description:
#   NASM is a portable assembler in the Intel/Microsoft tradition.

load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

exports_files(["LICENSE"])

cc_binary(
    name = "nasm",
    srcs = [
        "asm/assemble.c",
        "asm/assemble.h",
        "asm/directbl.c",
        "asm/directiv.c",
        "asm/directiv.h",
        "asm/error.c",
        "asm/eval.c",
        "asm/eval.h",
        "asm/exprdump.c",
        "asm/exprlib.c",
        "asm/floats.c",
        "asm/floats.h",
        "asm/labels.c",
        "asm/listing.c",
        "asm/listing.h",
        "asm/nasm.c",
        "asm/parser.c",
        "asm/parser.h",
        "asm/pptok.c",
        "asm/pptok.h",
        "asm/pragma.c",
        "asm/preproc-nop.c",
        "asm/preproc.c",
        "asm/preproc.h",
        "asm/quote.c",
        "asm/quote.h",
        "asm/rdstrnum.c",
        "asm/segalloc.c",
        "asm/srcfile.c",
        "asm/srcfile.h",
        "asm/stdscan.c",
        "asm/stdscan.h",
        "asm/strfunc.c",
        "asm/tokens.h",
        "asm/tokhash.c",
        "asm/warnings.c",
        "common/common.c",
        "config/unconfig.h",
        "config/unknown.h",
        "disasm/disasm.c",
        "disasm/disasm.h",
        "disasm/sync.c",
        "disasm/sync.h",
        "include/bytesex.h",
        "include/compiler.h",
        "include/disp8.h",
        "include/error.h",
        "include/hashtbl.h",
        "include/iflag.h",
        "include/ilog2.h",
        "include/insns.h",
        "include/labels.h",
        "include/md5.h",
        "include/nasm.h",
        "include/nasmint.h",
        "include/nasmlib.h",
        "include/nctype.h",
        "include/opflags.h",
        "include/perfhash.h",
        "include/raa.h",
        "include/rbtree.h",
        "include/rdoff.h",
        "include/saa.h",
        "include/strlist.h",
        "include/tables.h",
        "include/ver.h",
        "include/warnings.h",
        "macros/macros.c",
        "nasmlib/alloc.c",
        "nasmlib/alloc.h",
        "nasmlib/asprintf.c",
        "nasmlib/badenum.c",
        "nasmlib/bsi.c",
        "nasmlib/crc64.c",
        # "nasmlib/errfile.c",
        "nasmlib/file.c",
        "nasmlib/file.h",
        "nasmlib/filename.c",
        "nasmlib/hashtbl.c",
        "nasmlib/ilog2.c",
        "nasmlib/md5c.c",
        "nasmlib/mmap.c",
        "nasmlib/nctype.c",
        "nasmlib/path.c",
        "nasmlib/perfhash.c",
        "nasmlib/raa.c",
        "nasmlib/rbtree.c",
        "nasmlib/readnum.c",
        "nasmlib/realpath.c",
        "nasmlib/rlimit.c",
        "nasmlib/saa.c",
        "nasmlib/string.c",
        "nasmlib/strlist.c",
        "nasmlib/ver.c",
        "nasmlib/zerobuf.c",
        "output/codeview.c",
        "output/dwarf.h",
        "output/elf.h",
        "output/legacy.c",
        "output/macho.h",
        "output/nulldbg.c",
        "output/nullout.c",
        "output/outaout.c",
        "output/outas86.c",
        "output/outbin.c",
        "output/outcoff.c",
        "output/outdbg.c",
        "output/outelf.c",
        "output/outelf.h",
        "output/outform.c",
        "output/outform.h",
        "output/outieee.c",
        "output/outlib.c",
        "output/outlib.h",
        "output/outmacho.c",
        "output/outobj.c",
        "output/outrdf2.c",
        "output/pecoff.h",
        "output/stabs.h",
        # "stdlib/snprintf.c",
        # "stdlib/strlcpy.c",
        # "stdlib/strnlen.c",
        "stdlib/strrchrnul.c",
        # "stdlib/vsnprintf.c",
        "version.h",
        "x86/disp8.c",
        "x86/iflag.c",
        "x86/iflaggen.h",
        "x86/insnsa.c",
        "x86/insnsb.c",
        "x86/insnsd.c",
        "x86/insnsi.h",
        "x86/insnsn.c",
        "x86/regdis.c",
        "x86/regdis.h",
        "x86/regflags.c",
        "x86/regs.c",
        "x86/regs.h",
        "x86/regvals.c",
    ] + select({
        ":compiler_msvc": ["config/msvc.h"],
        "//conditions:default": ["config/config.h"],
    }) + select({
        ":have_strlcpy": [],
        "//conditions:default": ["stdlib/strlcpy.c"],
    }),
    copts = select({
        ":compiler_msvc": [],
        "//conditions:default": [
            "-w",
            "-std=c99",
        ],
    }),
    defines = select({
        ":compiler_msvc": [],
        "//conditions:default": [
            "HAVE_CONFIG_H",
        ],
    }),
    includes = [
        "asm",
        "include",
        "output",
        "x86",
    ],
)

CONFIG_H = [
    "#define HAVE_ACCESS 1",
    "#define HAVE_FACCESSAT 1",
    "#define HAVE_FCNTL_H 1",
    "#define HAVE_FILENO 1",
    "#define HAVE_FSEEKO 1",
    "#define HAVE_FSTAT 1",
    "#define HAVE_FTRUNCATE 1",
    "#define HAVE_FUNC_ATTRIBUTE1_ALLOC_SIZE 1",
    "#define HAVE_FUNC_ATTRIBUTE3_FORMAT 1",
    "#define HAVE_FUNC_ATTRIBUTE_COLD 1",
    "#define HAVE_FUNC_ATTRIBUTE_CONST 1",
    "#define HAVE_FUNC_ATTRIBUTE_ERROR 1",
    "#define HAVE_FUNC_ATTRIBUTE_MALLOC 1",
    "#define HAVE_FUNC_ATTRIBUTE_NORETURN 1",
    "#define HAVE_FUNC_ATTRIBUTE_PURE 1",
    "#define HAVE_FUNC_ATTRIBUTE_RETURNS_NONNULL 1",
    "#define HAVE_FUNC_ATTRIBUTE_SENTINEL 1",
    "#define HAVE_FUNC_ATTRIBUTE_UNUSED 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE1_ALLOC_SIZE 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE3_FORMAT 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE_CONST 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE_NORETURN 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE_RETURNS_NONNULL 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE_SENTINEL 1",
    "#define HAVE_FUNC_PTR_ATTRIBUTE_UNUSED 1",
    "#define HAVE_GETGID 1",
    "#define HAVE_GETPAGESIZE 1",
    "#define HAVE_GETRLIMIT 1",
    "#define HAVE_GETUID 1",
    "#define HAVE_INTTYPES_H 1",
    "#define HAVE_MEMORY_H 1",
    "#if defined(__linux__) || defined(__MINGW32__)",
    "#define HAVE_MEMPCPY 1",
    "#endif /* defined(__linux__) || defined(__MINGW32__) */",
    "#define HAVE_PATHCONF 1",
    "#define HAVE_SNPRINTF 1",
    "#define HAVE_STAT 1",
    "#define HAVE_STDBOOL_H 1",
    "#define HAVE_STDC_INLINE 1",
    "#define HAVE_STDINT_H 1",
    "#define HAVE_STDLIB_H 1",
    "#define HAVE_STDNORETURN_H 1",
    "#define HAVE_STRINGS_H 1",
    "#define HAVE_STRING_H 1",
    "",
] + select({
    ":have_strlcpy": [
        "#define HAVE_STRLCPY 1",
        "#define HAVE_DECL_STRLCPY 1",
        "",
    ],
    "//conditions:default": [],
}) + [
    "#define HAVE_STRCASECMP 1",
    "#define HAVE_DECL_STRCASECMP 1",
    "#define HAVE_STRNCASECMP 1",
    "#define HAVE_DECL_STRNCASECMP 1",
    "#define HAVE_STRNLEN 1",
    "#define HAVE_DECL_STRNLEN 1",
    "#define HAVE_STRUCT_STAT 1",
    "#define HAVE_SYSCONF 1",
    "#if !defined(_WIN32)",
    "#define HAVE_STRSEP 1",
    "#define HAVE_DECL_STRSEP 1",
    "#define HAVE_SYS_MMAN_H 1",
    "#define HAVE_UNISTD_H 1",
    "#define HAVE_MMAP 1",
    "#define HAVE_REALPATH 1",
    "#endif /* !defined(_WIN32) */",
    "#define HAVE_SYS_PARAM_H 1",
    "#define HAVE_SYS_STAT_H 1",
    "#define HAVE_SYS_TYPES_H 1",
    "#define HAVE_TYPEOF 1",
    "#define HAVE_UINTPTR_T 1",
    "#define HAVE_VSNPRINTF 1",
    "#define HAVE___BUILTIN_BSWAP16 1",
    "#define HAVE___BUILTIN_BSWAP32 1",
    "#define HAVE___BUILTIN_BSWAP64 1",
    "#define HAVE___BUILTIN_CLZ 1",
    "#define HAVE___BUILTIN_CLZL 1",
    "#define HAVE___BUILTIN_CLZLL 1",
    "#define HAVE___BUILTIN_CONSTANT_P 1",
    "#define HAVE___BUILTIN_EXPECT 1",
    "#define STDC_HEADERS 1",
    "#define restrict __restrict",
    "#define typeof __typeof",
    "",
    "/* Enable GNU extensions on systems that have them.  */",
    "#ifndef _GNU_SOURCE",
    "# define _GNU_SOURCE 1",
    "#endif",
    "",
    "/* #define WORDS_BIGENDIAN 1 */",
    "/* #define WORDS_LITTLEENDIAN 1 */",
    "",
    "/* Enable large inode numbers on Mac OS X 10.5.  */",
    "#if defined(__APPLE__) && !defined(_DARWIN_USE_64_BIT_INODE)",
    "# define _DARWIN_USE_64_BIT_INODE 1",
    "#endif",
    "",
    "#include \"config/unconfig.h\"",
]

write_file(
    name = "config",
    out = "config/config.h",
    content = CONFIG_H,
    newline = "unix",
)

config_setting(
    name = "have_strlcpy",
    constraint_values = ["@platforms//os:macos"],
)

# Config settings
[
    alias(
        name = name,
        actual = "@tensorstore//:{target}".format(target = name),
    )
    for name in [
        "compiler_msvc",
    ]
]
