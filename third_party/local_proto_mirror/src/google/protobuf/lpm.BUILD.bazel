# Since bazel_to_cmake doesn't have a global view of targets, it cannot apply
# aspects to collect the proto_library() sources in order to build e.g. upbdefs.
# As a workaround the upb targets are injected into the reposoitory here so that
# other upb libraries can link to the common protos.
#
#  These also become the "well-known-protos" depdendencies for upb/upbdefs.

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

load(
    "@com_google_protobuf_upb//bazel:upb_proto_library.bzl",
    "upb_proto_library",
    "upb_proto_reflection_library",
)

proto_library(
    name = "any_proto",
    srcs = ["any.proto"],
)

proto_library(
    name = "api_proto",
    srcs = ["api.proto"],
    deps = [
        ":source_context_proto",
        ":type_proto",
    ],
)

proto_library(
    name = "duration_proto",
    srcs = ["duration.proto"],
)

proto_library(
    name = "empty_proto",
    srcs = ["empty.proto"],
)

proto_library(
    name = "field_mask_proto",
    srcs = ["field_mask.proto"],
)

proto_library(
    name = "source_context_proto",
    srcs = ["source_context.proto"],
)

proto_library(
    name = "struct_proto",
    srcs = ["struct.proto"],
)

proto_library(
    name = "timestamp_proto",
    srcs = ["timestamp.proto"],
)

proto_library(
    name = "type_proto",
    srcs = ["type.proto"],
    deps = [
        ":any_proto",
        ":source_context_proto",
    ],
)

proto_library(
    name = "wrappers_proto",
    srcs = ["wrappers.proto"],
)

proto_library(
    name = "descriptor_proto",
    srcs = ["descriptor.proto"],
)

WELL_KNOWN_TYPES = [
    "any",
    "api",
    "duration",
    "empty",
    "field_mask",
    "source_context",
    "struct",
    "timestamp",
    "type",
    "wrappers",
]

[
    upb_proto_library(
        name = x + "_upb_proto",
        deps = [":" + x + "_proto"],
    )
    for x in WELL_KNOWN_TYPES + ["descriptor"]
]

# Well-known type protos

cc_library(
    name = "wkt_upb_proto",
    deps = [":" + wkt + "_upb_proto" for wkt in WELL_KNOWN_TYPES],
)

[
    upb_proto_reflection_library(
        name = x + "_upb_proto_reflection",
        deps = [":" + x + "_proto"],
    )
    for x in WELL_KNOWN_TYPES + ["descriptor"]
]

cc_library(
    name = "wkt_upbdefs_proto",
    deps = [":" + wkt + "_upb_proto_reflection" for wkt in WELL_KNOWN_TYPES],
)
