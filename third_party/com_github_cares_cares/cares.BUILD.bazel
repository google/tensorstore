load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")

CONFIG_SRC = select({
    "@platforms//os:macos": "@tensorstore//third_party:com_github_cares_cares/config/darwin.h",
    "@platforms//os:windows": "@tensorstore//third_party:com_github_cares_cares/config/windows.h",
    "//conditions:default": "@tensorstore//third_party:com_github_cares_cares/config/linux.h",
})

copy_file(
    name = "ares_config_h",
    src = CONFIG_SRC,
    out = "ares_config.h",
)

OVERRIDES = """

/* IMPORTANT: gRPC MANUAL EDIT HERE!
 * Undefine UNICODE, as c-ares does not use the ANSI version of functions
 * explicitly. */
#ifdef UNICODE
#undef UNICODE
#endif

#ifdef _UNICODE
#undef _UNICODE
#endif

#endif /* __CARES_BUILD_H */
"""

WIN_SUBSTITUTIONS = {
    "@CARES_TYPEOF_ARES_SOCKLEN_T@": "int",
    "@CARES_TYPEOF_ARES_SSIZE_T@": "__int64",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_COMPAT_H": "// #define CARES_HAVE_ARPA_NAMESER_COMPAT_H 0",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_H": "// #define CARES_HAVE_ARPA_NAMESER_H 0",
    "#cmakedefine CARES_HAVE_SYS_SOCKET_H": "// #define CARES_HAVE_SYS_SOCKET_H 0",
    "#cmakedefine CARES_HAVE_SYS_TYPES_H": "// #define CARES_HAVE_SYS_TYPES_H 0",
    "#cmakedefine CARES_HAVE_WINDOWS_H": "#define CARES_HAVE_WINDOWS_H 1",
    "#cmakedefine CARES_HAVE_WINSOCK2_H": "#define CARES_HAVE_WINSOCK2_H 1",
    "#cmakedefine CARES_HAVE_WS2TCPIP_H": "#define CARES_HAVE_WS2TCPIP_H 1",
    "#endif /* __CARES_BUILD_H */": OVERRIDES,
}

DEFAULT_SUBSTITUTIONS = {
    "@CARES_TYPEOF_ARES_SOCKLEN_T@": "socklen_t",
    "@CARES_TYPEOF_ARES_SSIZE_T@": "ssize_t",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_COMPAT_H": "// #define CARES_HAVE_ARPA_NAMESER_COMPAT_H 0",
    "#cmakedefine CARES_HAVE_ARPA_NAMESER_H": "// #define CARES_HAVE_ARPA_NAMESER_H 0",
    "#cmakedefine CARES_HAVE_SYS_SOCKET_H": "#define CARES_HAVE_SYS_SOCKET_H 1",
    "#cmakedefine CARES_HAVE_SYS_TYPES_H": "#define CARES_HAVE_SYS_TYPES_H 1",
    "#cmakedefine CARES_HAVE_WINDOWS_H": "// #define CARES_HAVE_WINDOWS_H 0",
    "#cmakedefine CARES_HAVE_WINSOCK2_H": "// #define CARES_HAVE_WINSOCK2_H 0",
    "#cmakedefine CARES_HAVE_WS2TCPIP_H": "// #define CARES_HAVE_WS2TCPIP_H 0",
    "#endif /* __CARES_BUILD_H */": OVERRIDES,
}

expand_template(
    name = "ares_build_h",
    out = "ares_build.h",
    substitutions = select({
        "@platforms//os:windows": WIN_SUBSTITUTIONS,
        "//conditions:default": DEFAULT_SUBSTITUTIONS,
    }),
    template = "include/ares_build.h.cmake",
)

cc_library(
    name = "ares",
    srcs = [
        "src/lib/ares__close_sockets.c",
        "src/lib/ares__get_hostent.c",
        "src/lib/ares__parse_into_addrinfo.c",
        "src/lib/ares__read_line.c",
        "src/lib/ares__readaddrinfo.c",
        "src/lib/ares__sortaddrinfo.c",
        "src/lib/ares__timeval.c",
        "src/lib/ares_android.c",
        "src/lib/ares_cancel.c",
        "src/lib/ares_create_query.c",
        "src/lib/ares_data.c",
        "src/lib/ares_destroy.c",
        "src/lib/ares_expand_name.c",
        "src/lib/ares_expand_string.c",
        "src/lib/ares_fds.c",
        "src/lib/ares_free_hostent.c",
        "src/lib/ares_free_string.c",
        "src/lib/ares_freeaddrinfo.c",
        "src/lib/ares_getaddrinfo.c",
        "src/lib/ares_getenv.c",
        "src/lib/ares_gethostbyaddr.c",
        "src/lib/ares_gethostbyname.c",
        "src/lib/ares_getnameinfo.c",
        "src/lib/ares_getsock.c",
        "src/lib/ares_init.c",
        "src/lib/ares_library_init.c",
        "src/lib/ares_llist.c",
        "src/lib/ares_mkquery.c",
        "src/lib/ares_nowarn.c",
        "src/lib/ares_options.c",
        "src/lib/ares_parse_a_reply.c",
        "src/lib/ares_parse_aaaa_reply.c",
        "src/lib/ares_parse_caa_reply.c",
        "src/lib/ares_parse_mx_reply.c",
        "src/lib/ares_parse_naptr_reply.c",
        "src/lib/ares_parse_ns_reply.c",
        "src/lib/ares_parse_ptr_reply.c",
        "src/lib/ares_parse_soa_reply.c",
        "src/lib/ares_parse_srv_reply.c",
        "src/lib/ares_parse_txt_reply.c",
        "src/lib/ares_platform.c",
        "src/lib/ares_process.c",
        "src/lib/ares_query.c",
        "src/lib/ares_search.c",
        "src/lib/ares_send.c",
        "src/lib/ares_strcasecmp.c",
        "src/lib/ares_strdup.c",
        "src/lib/ares_strerror.c",
        "src/lib/ares_strsplit.c",
        "src/lib/ares_timeout.c",
        "src/lib/ares_version.c",
        "src/lib/ares_writev.c",
        "src/lib/bitncmp.c",
        "src/lib/inet_net_pton.c",
        "src/lib/inet_ntop.c",
        "src/lib/windows_port.c",
    ],
    hdrs = [
        "ares_build.h",
        "ares_config.h",
        "include/ares.h",
        "include/ares_dns.h",
        "include/ares_rules.h",
        "include/ares_version.h",
        "src/lib/ares_android.h",
        "src/lib/ares_data.h",
        "src/lib/ares_getenv.h",
        "src/lib/ares_inet_net_pton.h",
        "src/lib/ares_iphlpapi.h",
        "src/lib/ares_ipv6.h",
        "src/lib/ares_library_init.h",
        "src/lib/ares_llist.h",
        "src/lib/ares_nameser.h",
        "src/lib/ares_nowarn.h",
        "src/lib/ares_platform.h",
        "src/lib/ares_private.h",
        "src/lib/ares_setup.h",
        "src/lib/ares_strcasecmp.h",
        "src/lib/ares_strdup.h",
        "src/lib/ares_strsplit.h",
        "src/lib/ares_writev.h",
        "src/lib/bitncmp.h",
        "src/lib/config-dos.h",
        "src/lib/config-win32.h",
        "src/lib/setup_once.h",
    ],
    copts = [
        "-D_GNU_SOURCE",
        "-D_HAS_EXCEPTIONS=0",
        "-DHAVE_CONFIG_H",
    ] + select({
        "@platforms//os:windows": [
            "-DNOMINMAX",
            "-D_CRT_SECURE_NO_DEPRECATE",
            "-D_CRT_NONSTDC_NO_DEPRECATE",
            "-D_WIN32_WINNT=0x0600",
        ],
        "//conditions:default": [],
    }),
    defines = ["CARES_STATICLIB"],
    includes = [
        ".",
        "include",
    ],
    linkopts = select({
        "@platforms//os:windows": ["-defaultlib:ws2_32.lib"],
        "//conditions:default": [],
    }),
    linkstatic = 1,
    visibility = [
        "//visibility:public",
    ],
    alwayslink = 1,
)
