load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_license//rules:license.bzl", "license")

package(
    default_applicable_licenses = [":license"],
)

exports_files([
    "LICENSE",
])

license(
    name = "license",
    license_kinds = ["@rules_license//licenses/spdx:libpng-2.0"],
    license_text = "LICENSE",
)

copy_file(
    name = "pnglibconf",
    out = "pnglibconf.h",
    src = "scripts/pnglibconf.h.prebuilt",
)

cc_library(
    name = "png",
    srcs = [
        "png.c",
        "pngdebug.h",
        "pngerror.c",
        "pngget.c",
        "pnginfo.h",
        "pnglibconf.h",
        "pngmem.c",
        "pngpread.c",
        "pngpriv.h",
        "pngread.c",
        "pngrio.c",
        "pngrtran.c",
        "pngrutil.c",
        "pngset.c",
        "pngstruct.h",
        "pngtrans.c",
        "pngwio.c",
        "pngwrite.c",
        "pngwtran.c",
        "pngwutil.c",
    ] + select({
        "@platforms//cpu:x86_64": [
            "intel/intel_init.c",
            "intel/filter_sse2_intrinsics.c",
        ],
        "@platforms//cpu:ppc": [
            "powerpc/filter_vsx_intrinsics.c",
            "powerpc/powerpc_init.c",
        ],
        "@platforms//cpu:arm64": [
            "arm/arm_init.c",
            "arm/filter_neon_intrinsics.c",
            "arm/palette_neon_intrinsics.c",
        ],
        "//conditions:default": [],
    }),
    hdrs = [
        "png.h",
        "pngconf.h",
    ],
    linkopts = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["-lm"],
    }),
    includes = ["."],
    visibility = ["//visibility:public"],
    deps = ["@zlib"],
    local_defines = select({
        "@platforms//cpu:arm64": ["PNG_ARM_NEON_OPT=2"],
        "@platforms//cpu:x86_64": ["PNG_INTEL_SSE_OPT=1"],
        "@platforms//cpu:ppc": ["PNG_POWERPC_VSX_OPT=2"],
        "//conditions:default": [],
    }),
    copts = select({
        ":use_x86_gcc_flags": [
            "-mpclmul",
            "-msse2",
        ],
        "//conditions:default": [],
    }) + select({
        ":use_x86_msvc_flags": ["/arch:AVX"],
        "//conditions:default": [],
    }),
)

alias(
    name = "libpng",
    actual = ":png",
    visibility = ["//visibility:public"],
)

# Constraint that indicates whether gcc-style flags should be used.
alias(
    name = "use_x86_gcc_flags",
    actual = select({
        "@rules_cc//cc/compiler:msvc-cl": "@platforms//:incompatible",

        # Otherwise condition on x86_64.
        "//conditions:default": "@platforms//cpu:x86_64",
    }),
)

alias(
    name = "use_x86_msvc_flags",
    actual = select({
        "@rules_cc//cc/compiler:msvc-cl": "@platforms//cpu:x86_64",

        # Otherwise condition on x86_64.
        "//conditions:default": "@platforms//:incompatible",
    }),
)
