# Description:
#   AWS C Common

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])

copy_file(
    name = "config_linux",
    src = "@tensorstore//third_party:aws_c_common/config/common_config.h",
    out = "include/aws/common/config.h",
)

_LOCAL_DEFINES = select({
    "@platforms//os:windows": [
        "AWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_NONE",
        "PSAPI_VERSION=1",
    ],
    "@platforms//os:macos": [
        "AWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_NONE",
        "AWS_PTHREAD_GETNAME_TAKES_3ARGS",
        "HAVE_SYSCONF",
    ],
    "//conditions:default": [
        "AWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_PTHREAD_ATTR",  # or AWS_AFFINITY_METHOD_PTHREAD
        "AWS_PTHREAD_GETNAME_TAKES_3ARGS",
        "AWS_PTHREAD_SETNAME_TAKES_2ARGS",
        "HAVE_SYSCONF",
    ],
}) + select({
    ":have_avx2_intrinsics": ["USE_SIMD_ENCODING"],
    "//conditions:default": [],
})

_SRCS = glob([
    "include/aws/common/external/*.h",
    "source/*.c",
]) + select({
    "@platforms//os:windows": glob([
        "source/windows/*.c",
    ]),
    "@platforms//os:linux": glob([
        "source/linux/*.c",
        "source/posix/*.c",
    ]),
    "@platforms//os:osx": glob([
        "source/posix/*.c",
        "source/darwin/*.c",
    ]),
    "//conditions:default": [],
}) + select({
    "@platforms//os:linux": [],
    "//conditions:default": [
        "source/platform_fallback_stubs/system_info.c",
    ],
}) + select({
    "@platforms//cpu:x86_64": [
        "source/arch/intel/cpuid.c",
    ],
    "@platforms//cpu:arm64": [],
    "//conditions:default": glob(["source/arch/generic/*.c"]),
}) + select({
    ":windows_arm64": glob(["source/arch/arm/windows/*.c"]),
    ":macos_arm64": glob(["source/arch/arm/darwin/*.c"]),
    ":linux_arm64": glob(["source/arch/arm/auxv/*.c"]),
    "//conditions:default": glob([]),
}) + select({
    ":x86_64_mingw_gcc": glob(["source/arch/intel/asm/*.c"]),
    ":x86_64_msvc": glob(["source/arch/intel/msvc/*.c"]),
    ":x86_64_gcc_or_clang": glob(["source/arch/intel/asm/*.c"]),
    "//conditions:default": [],
}) + select({
    ":have_avx2_intrinsics": ["source/arch/intel/encoding_avx2.c"],
    "//conditions:default": [],
})

_X86_GCC_COPTS = [
    "-mavx",
    "-mpclmul",
    "-msse4.2",
    "-mavx2",
]

_COPTS = select({
    ":x86_64_msvc": ["/arch:AVX2"],
    ":x86_64_gcc_or_clang": _X86_GCC_COPTS,
    ":x86_64_mingw_gcc": _X86_GCC_COPTS,
    ":arm64_msvc": [],
    ":arm64_gcc_or_clang": [
        "-march=armv8-a+crc+crypto",
        "-mtune=neoverse-v1",
    ],
    "//conditions:default": [],
})

cc_library(
    name = "aws_c_common",
    srcs = _SRCS,
    hdrs = glob([
        "include/aws/common/*.h",
        "include/aws/common/private/*.h",
    ]) + [
        "include/aws/common/config.h",
    ],
    copts = _COPTS,
    defines = [
        "INTEL_NO_ITTNOTIFY_API",
    ],
    includes = [
        "include",
    ],
    linkopts = select({
        "@platforms//os:windows": [
            "-DEFAULTLIB:bcrypt.lib",
            "-DEFAULTLIB:ws2_32.lib",
            "-DEFAULTLIB:shlwapi.lib",
            "-DEFAULTLIB:psapi.lib",
            "-DEFAULTLIB:kernel32.lib",
        ],
        "@platforms//os:macos": [
            "-framework CoreFoundation",
            "-ldl",
        ],
        "//conditions:default": [
            "-ldl",
        ],
    }) + select({
        "@rules_cc//cc/compiler:mingw-gcc": [
            "-lbcrypt",
            "-lws2_32",
            "-lshlwapi",
            "-lpsapi",
            "-lkernel32",
        ],
        "//conditions:default": [],
    }),
    local_defines = _LOCAL_DEFINES,
    textual_hdrs = glob([
        "include/**/*.inl",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":external_cjson",
        ":external_libcbor",
    ],
)

cc_library(
    name = "external_cjson",
    srcs = ["source/external/cJSON.c"],
    hdrs = ["source/external/cJSON.h"],
    strip_include_prefix = "source",
    defines = ["CJSON_HIDE_SYMBOLS"],
    visibility = ["//visibility:private"],
    copts = _COPTS,
)

cc_library(
    name = "external_libcbor",
    srcs = glob([
        "source/external/libcbor/**/*.c",
    ]),
    hdrs = glob([
        "source/external/libcbor/**/*.h",
    ]),
    copts = _COPTS,
    strip_include_prefix = "source/external/libcbor",
    visibility = ["//visibility:private"],
)

# Constraint that indicates whether avx2 intrinsics can be used (subject to
# runtime CPU detection).
alias(
    name = "have_avx2_intrinsics",
    actual = select({
        # mingw gcc does not correctly align the stack to 32 bytes, which makes
        # avx2 intrinsics unusable.
        #
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412
        "@rules_cc//cc/compiler:mingw-gcc": "@platforms//:incompatible",

        # Otherwise condition on x86_64.
        "//conditions:default": "@platforms//cpu:x86_64",
    }),
)

selects.config_setting_group(
    name = "compiler_gcc_or_clang",
    match_any = [
        "@rules_cc//cc/compiler:gcc",
        "@rules_cc//cc/compiler:clang",
    ],
)

# per-os selection groups for arm64
[
    selects.config_setting_group(
        name = os + "_" + cpu,
        match_all = [
            "@platforms//os:" + os,
            "@platforms//cpu:" + cpu,
        ],
    )
    for os in ["linux", "macos", "windows"]
    for cpu in ["arm64"]
]

# per-cpu/compiler selection groups
[
    selects.config_setting_group(
        name = cpu + "_" + compiler[0],
        match_all = [
            "@platforms//cpu:" + cpu,
            compiler[1],
        ],
    )
    for cpu in ["arm64", "x86_64"]
    for compiler in [
        ("gcc_or_clang", ":compiler_gcc_or_clang"),
        ("msvc", "@rules_cc//cc/compiler:msvc-cl"),
        ("mingw_gcc", "@rules_cc//cc/compiler:mingw-gcc"),
    ]
]
