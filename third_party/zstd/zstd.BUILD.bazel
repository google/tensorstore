load("@rules_cc//cc:cc_library.bzl", "cc_library")

package(default_visibility = ["//visibility:private"])

filegroup(
    name = "common_sources",
    srcs = glob([
        "lib/common/*.c",
        "lib/common/*.h",
    ]),
)

filegroup(
    name = "compress_sources",
    srcs = glob([
        "lib/compress/*.c",
        "lib/compress/*.h",
    ]),
)

filegroup(
    name = "decompress_sources",
    srcs = glob([
        "lib/decompress/*.c",
        "lib/decompress/*.h",
    ]) + select({
        ":zstd_asm_supported": glob(["lib/decompress/*.S"]),
        "//conditions:default": [],
    }),
)

filegroup(
    name = "dictbuilder_sources",
    srcs = glob([
        "lib/dictBuilder/*.c",
        "lib/dictBuilder/*.h",
    ]),
)

LOCAL_DEFINES = [
    "XXH_NAMESPACE=ZSTD_",
    "ZSTD_BUILD_SHARED=OFF",
    "ZSTD_BUILD_STATIC=ON",
] + select({
    ":zstd_asm_supported": [],
    "//conditions:default": ["ZSTD_DISABLE_ASM=1"],
})

cc_library(
    name = "zstd",
    srcs = [
        ":common_sources",
        ":compress_sources",
        ":decompress_sources",
        ":dictbuilder_sources",
    ],
    hdrs = [
        "lib/zdict.h",
        "lib/zstd.h",
        "lib/zstd_errors.h",
    ],
    includes = ["lib"],
    local_defines = LOCAL_DEFINES,
    defines = [
        # Since this rule is used to build a static library, prevent ZSTD from
        # overriding global `-fvisibility=hidden` setting.
        "ZSTDLIB_VISIBLE=",
        "ZSTDLIB_HIDDEN=",
    ],
    visibility = ["//visibility:public"],
)

# Constraint that indicates whether asm is supported by zstd
alias(
    name = "zstd_asm_supported",
    actual = select({
        # Disable for msvc.
        "@rules_cc//cc/compiler:msvc-cl": "@platforms//:incompatible",

        # Enable condition on x86_64.
        "//conditions:default": "@platforms//cpu:x86_64",
    }),
)
