# Description:
#   The libaom package is the reference codec for AV1 and AVIF.
#
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@tensorstore//bazel:rules_nasm.bzl", "nasm_library")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])

exports_files(["LICENSE"])

# used for textual_hdrs, since libaom is a bit imprecise about include boundaries.
LIBAOM_HEADERS_PATTERN = [
    "aom/*.h",
    "aom/internal/*.h",
    "aom_dsp/*.h",
    "aom_dsp/**/*.h",
    "aom_mem/*.h",
    "aom_mem/include/*.h",
    "aom_ports/*.h",
    "aom_scale/*.h",
    "aom_util/*.h",
    "av1/*.h",
    "av1/common/*.h",
    "av1/encoder/*.h",
    "av1/decoder/*.h",
    "common/*.h",
]

LIBAOM_HEADERS = select({
    "@platforms//cpu:arm64": glob(
        LIBAOM_HEADERS_PATTERN + [
            "av1/common/arm/*.h",
            "aom_dsp/arm/*.h",
        ],
        exclude = [
            "aom_ports/ppc.h",
            "**/mips/**",
            "**/*x86.h",
            "**/*avx2.h",
            "**/*sse2.h",
            "**/*sse4.h",
            "**/*sse4_1.h",
            "**/*ssse3.h",
        ],
    ),
    "@platforms//cpu:x86_64": glob(
        LIBAOM_HEADERS_PATTERN + [
            "av1/common/x86/*.h",
            "av1/encoder/x86/*.h",
            "aom_dsp/x86/*.h",
        ],
        exclude = [
            "aom_ports/ppc.h",
            "**/mips/**",
            "**/*arm.h",
        ],
    ),
})

LIBAOM_COPTS = select({
    ":compiler_msvc": [
        "/W3",
        "/wd4996",
    ],
    "//conditions:default": [
        "-std=c99",
        "-Wno-implicit-function-declaration",
        "-Wno-array-parameter",
        "-Wno-stringop-overread",
        "-Wno-stringop-overflow",
    ],
}) + select({
    "@platforms//cpu:arm64": [
        "-DNEON_INTRINSICS",
        "-march=armv8-a+crc",
    ],
    # armv7 may need -fpu=neon as well.
    "//conditions:default": [],
})

ARCH_DICT = {
    # While aom has implementations for various architectures, this build
    # assumes that every processor has -msse through -msse4.2, inclusive.
    "sse42": select({
        ":compiler_msvc": [
            "-D__SSE__",
            "-D__SSE2__",
            "-D__SSE3__",
            "-D__SSSE3__",
            "-D__SSE4__",
            "-D__SSE4_1__",
            "-D__SSE4_2__",
        ],
        "//conditions:default": [
            "-msse",
            "-msse2",
            "-msse3",
            "-mssse3",
            "-msse4",
            "-msse4a",
            "-msse4.1",
            "-msse4.2",
        ],
    }),
    "avx": select({
        ":compiler_msvc": ["/arch:AVX"],
        "//conditions:default": ["-mavx"],
    }),
    "avx2": select({
        ":compiler_msvc": ["/arch:AVX2"],
        "//conditions:default": ["-mavx2"],
    }),
}

NASM_INCLUDES = [
    "LICENSE",  # To get -I./
    "config/aom_config.asm",
    "aom_ports/x86_abi_support.asm",
    "third_party/x86inc/x86inc.asm",
]

NASM_FLAGS = ["-w+all"] + select({
    "@platforms//os:windows": ["-fwin64"],
    "@platforms//os:macos": ["-fmacho64"],
    "//conditions:default": ["-felf64"],
})

cc_library(
    name = "libaom",
    hdrs = LIBAOM_HEADERS,
    visibility = ["//visibility:public"],
    deps = [
        ":av1",
    ],
)

# AV1 section
AV1_SRCS = glob(
    include = [
        "av1/*.c",
        "av1/common/*.c",
        "av1/decoder/*.c",
        "av1/encoder/*.c",
    ],
    exclude = [
        "av1/decoder/inspection.c",
        "av1/encoder/av1_temporal_denoiser.c",
        "av1/encoder/tune_butteraugli.c",
        "av1/encoder/tune_vmaf.c",
    ],
) + select({
    "@platforms//cpu:arm64": glob(
        include = [
            "av1/common/arm/*.c",
            "av1/encoder/arm/**/*.c",
        ],
        exclude = [
            "av1/encoder/arm/neon/av1_temporal_denoiser_neon.c",
        ],
    ),
    "//conditions:default": [],
})

AV1_ASM = glob(["av1/encoder/x86/*.asm"])

AV1_SRC_PATTERNS = {
    "sse42": [
        "av1/encoder/x86/*_sse2.c",
        "av1/common/x86/*_sse2.c",
        "av1/encoder/x86/*_sse3.c",
        "av1/common/x86/*_sse3.c",
        "av1/encoder/x86/*_ssse3.c",
        "av1/common/x86/*_ssse3.c",
        "av1/encoder/x86/*_sse4.c",
        "av1/common/x86/*_sse4.c",
        "av1/encoder/x86/*_sse42.c",
        "av1/common/x86/*_sse42.c",
    ],
    "avx": [
        "av1/encoder/x86/*_avx.c",
        "av1/common/x86/*_avx.c",
        "third_party/SVT-AV1/*.h",
    ],
    "avx2": [
        "av1/encoder/x86/*_avx2.c",
        "av1/common/x86/*_avx2.c",
        "third_party/SVT-AV1/*.h",
    ],
}

cc_library(
    name = "av1",
    srcs = AV1_SRCS,
    copts = LIBAOM_COPTS,
    linkstatic = 1,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":codec",
        ":dsp",
        ":mem",
        ":scale",
        ":config",
        ":fastfeat",
        ":vector",
        ":args_helper",
    ] + select({
        "@platforms//cpu:arm64": [],
        "@platforms//cpu:x86_64": [
            ":av1_x86_asm",
            ":av1_x86_sse42",
            ":av1_x86_avx",
        ],
    }) + select({
        ":have_avx2_intrinsics": [":av1_x86_avx2"],
        "//conditions:default": [],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "av1_x86_asm",
    srcs = AV1_ASM,
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

[
    cc_library(
        name = "av1_x86_{arch}".format(arch = arch),
        srcs = glob(
            include = AV1_SRC_PATTERNS[arch],
            exclude = [
                "av1/encoder/x86/av1_temporal_denoiser_sse2.c",
            ],
        ),
        copts = LIBAOM_COPTS + ARCH_DICT[arch],
        textual_hdrs = LIBAOM_HEADERS,
        deps = [
            ":config",
            ":vector",
        ],
        alwayslink = 1,
    )
    for arch in AV1_SRC_PATTERNS.keys()
]

# DSP section
DSP_SRCS = glob(
    include = ["aom_dsp/*.c"],
    exclude = [
        "aom_dsp/butteraugli.c",
        "aom_dsp/vmaf.c",
    ],
) + select({
    "@platforms//cpu:arm64": glob(["aom_dsp/arm/*_neon.c"]),
    "//conditions:default": ["aom_dsp/x86/aom_asm_stubs.c"],
})

DSP_ASM = glob(["aom_dsp/x86/*.asm"])

DSP_SRC_PATTERNS = {
    "sse42": [
        "aom_dsp/x86/*_sse2.c",
        "aom_dsp/x86/*_ssse3.c",
        "aom_dsp/x86/*_sse4.c",
    ],
    "avx": ["aom_dsp/x86/*_avx.c"],
    "avx2": ["aom_dsp/x86/*_avx2.c"],
}

cc_library(
    name = "dsp",
    srcs = DSP_SRCS,
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
        ":fastfeat",
        ":vector",
    ] + select({
        "@platforms//cpu:arm64": [],
        "@platforms//cpu:x86_64": [
            ":dsp_x86_asm",
        ] + [":dsp_x86_{x}".format(x = x) for x in DSP_SRC_PATTERNS.keys()],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "dsp_x86_asm",
    srcs = DSP_ASM,
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

[
    cc_library(
        name = "dsp_x86_{arch}".format(arch = arch),
        srcs = glob(DSP_SRC_PATTERNS[arch]),
        copts = LIBAOM_COPTS + ARCH_DICT[arch],
        textual_hdrs = LIBAOM_HEADERS,
        deps = [
            ":config",
        ],
        alwayslink = 1,
    )
    for arch in DSP_SRC_PATTERNS.keys()
]

# Other

cc_library(
    name = "scale",
    srcs = glob([
        "aom_scale/*.c",
        "aom_scale/generic/*.c",
    ]),
    hdrs = [
        "aom_scale/aom_scale.h",
    ],
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
        ":mem",
    ],
    alwayslink = 1,
)

CODEC_SRCS = glob(["aom/src/*.c"]) + [
    "config/aom_config.c",
    "aom_util/aom_thread.c",
    "aom_util/debug_util.c",
] + select({
    "@platforms//cpu:arm64": [
        "aom_ports/arm_cpudetect.c",
    ],
    "//conditions:default": [],
})

CODEC_HDRS = glob([
    "aom/internal/*.h",
    "aom/*.h",
]) + [
    "aom_util/aom_thread.h",
    "aom_util/debug_util.h",
] + select({
    "@platforms//cpu:arm64": [
        "aom_ports/arm.h",
    ],
    "//conditions:default": [],
})

cc_library(
    name = "codec",
    srcs = CODEC_SRCS,
    hdrs = CODEC_HDRS,
    copts = LIBAOM_COPTS,
    includes = ["aom"],
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":mem",
        ":config",
        ":args_helper",
    ] + select({
        "@platforms//cpu:arm64": [],
        "//conditions:default": [
            ":codec_x86_asm",
        ],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "codec_x86_asm",
    srcs = [
        "aom_ports/float.asm",
    ],
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

cc_library(
    name = "mem",
    srcs = glob([
        "aom_mem/*.c",
        "aom_mem/include/*.h",
    ]) + [
        "aom/aom_integer.h",
    ],
    hdrs = [
        "aom_mem/aom_mem.h",
    ],
    copts = LIBAOM_COPTS,
    includes = ["aom_mem"],
    deps = [":config"],
    alwayslink = 1,
)

cc_library(
    name = "args_helper",
    srcs = [
        "common/args_helper.c",
    ],
    hdrs = ["common/args_helper.h"],
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [":config"],
    alwayslink = 1,
)

# Utils

cc_library(
    name = "fastfeat",
    srcs = [
        "third_party/fastfeat/fast.c",
        "third_party/fastfeat/fast_9.c",
        "third_party/fastfeat/nonmax.c",
    ],
    hdrs = [
        "third_party/fastfeat/fast.h",
    ],
    copts = LIBAOM_COPTS,
)

cc_library(
    name = "vector",
    srcs = [
        "third_party/vector/vector.c",
    ],
    hdrs = [
        "third_party/vector/vector.h",
    ],
    copts = LIBAOM_COPTS,
)

# Config section

cc_library(
    name = "config",
    hdrs = [
        "config/aom_config.h",
        "config/aom_dsp_rtcd.h",
        "config/aom_scale_rtcd.h",
        "config/aom_version.h",
        "config/av1_rtcd.h",
    ],
)

CONFIG_SUBSTITUTIONS = select({
    "@platforms//cpu:arm64": {"${ARM64}": "1"},
    "//conditions:default": {"${ARM64}": "0"},
}) | select({
    "@platforms//cpu:x86_64": {"${X86_64}": "1"},
    "//conditions:default": {"${X86_64}": "0"},
}) | select({
    "@platforms//os:windows": {"${PTHREAD}": "0"},
    "//conditions:default": {"${PTHREAD}": "1"},
}) | select({
    ":have_avx2_intrinsics": {"${HAVE_AVX2}": "1"},
    "//conditions:default": {"${HAVE_AVX2}": "0"},
})

expand_template(
    name = "config_h_tmpl",
    out = "config/aom_config.h",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@tensorstore//third_party:org_aomedia_aom/aom_config.h.template",
)

expand_template(
    name = "config_asm_tmpl",
    out = "config/aom_config.asm",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@tensorstore//third_party:org_aomedia_aom/aom_config.asm.template",
)

expand_template(
    name = "config_version_tmpl",
    out = "config/aom_version.h",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@tensorstore//third_party:org_aomedia_aom/aom_version.h.template",
)

write_file(
    name = "config_c_tmpl",
    out = "config/aom_config.c",
    content = [
        "/*",
        " * Copyright (c) 2016, Alliance for Open Media. All rights reserved",
        " *",
        " * This source code is subject to the terms of the BSD 2 Clause License and",
        " * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License",
        " * was not distributed with this source code in the LICENSE file, you can",
        " * obtain it at www.aomedia.org/license/software. If the Alliance for Open",
        " * Media Patent License 1.0 was not distributed with this source code in the",
        " * PATENTS file, you can obtain it at www.aomedia.org/license/patent.",
        " */",
        "#include \"aom/aom_codec.h\"",
        "static const char* const cfg = \"bazel build @org_aomedia_aom//:all\";",
        "const char *aom_codec_build_config(void) {return cfg;}",
        "",
    ],
    newline = "unix",
)

GENERATED_CONFIGS = [
    ("@platforms//cpu:arm64", "arm64"),
    (":have_avx2_intrinsics", "x86_64_avx2"),
    ("//conditions:default", "x86_64"),
]

[
    copy_file(
        name = "copy_{tag}".format(tag = tag),
        src = select({
            condition: "@tensorstore//third_party:org_aomedia_aom/generated_configs/{config}/{tag}.h".format(
                config = config,
                tag = tag,
            )
            for condition, config in GENERATED_CONFIGS
        }),
        out = "config/{tag}.h".format(tag = tag),
    )
    for tag in [
        "aom_dsp_rtcd",
        "aom_scale_rtcd",
        "av1_rtcd",
    ]
]

# Config settings
[
    alias(
        name = name,
        actual = "@tensorstore//:{target}".format(target = name),
    )
    for name in [
        "compiler_msvc",
        "compiler_mingw_gcc",
        "compiler_clang",
    ]
]

# Constraint that indicates whether avx2 intrinsics can be used (subject to
# runtime CPU detection).
alias(
    name = "have_avx2_intrinsics",
    actual = select({
        # mingw gcc does not correctly align the stack to 32 bytes, which makes
        # avx2 intrinsics unusable.
        #
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412
        #
        # In this case map to `:compiler_msvc` which we know to be unsatisfied.
        ":compiler_mingw_gcc": ":compiler_msvc",
        # Enable by default on x86_64.
        "//conditions:default": "@platforms//cpu:x86_64",
    }),
)
