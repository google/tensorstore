# Copyright 2022 The TensorStore Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff -u -ur upb-a/bazel/upb_proto_library.bzl upb-b/bazel/upb_proto_library.bzl
--- upb-a/bazel/upb_proto_library.bzl	2022-11-18 18:02:10.000000000 +0000
+++ upb-b/bazel/upb_proto_library.bzl	2022-12-14 18:30:35.717321360 +0000
@@ -69,22 +69,13 @@
         short_path = short_path.split(virtual_imports)[1].split("/", 1)[1]
     return short_path
 
-def _get_real_root(ctx, file):
-    real_short_path = _get_real_short_path(file)
-    root = file.path[:-len(real_short_path) - 1]
-
-    if not _is_google3 and ctx.rule.attr.strip_import_prefix:
-        root = paths.join(root, ctx.rule.attr.strip_import_prefix[1:])
-    return root
-
 def _generate_output_file(ctx, src, extension):
     package = ctx.label.package
     if not _is_google3:
         strip_import_prefix = ctx.rule.attr.strip_import_prefix
         if strip_import_prefix and strip_import_prefix != "/":
-            if not package.startswith(strip_import_prefix[1:]):
-                fail("%s does not begin with prefix %s" % (package, strip_import_prefix))
-            package = package[len(strip_import_prefix):]
+            if package.startswith(strip_import_prefix):
+                package = package[len(strip_import_prefix):]
 
     real_short_path = _get_real_short_path(src)
     real_short_path = paths.relativize(real_short_path, package)
@@ -234,6 +225,9 @@
     tool = getattr(ctx.executable, "_gen_" + generator)
     srcs = [_generate_output_file(ctx, name, ext + ".c") for name in proto_sources]
     hdrs = [_generate_output_file(ctx, name, ext + ".h") for name in proto_sources]
+
+    real_root = srcs[0].path[:-len(_get_real_short_path(srcs[0]))-1]
+
     transitive_sets = proto_info.transitive_descriptor_sets.to_list()
     fasttable_enabled = (hasattr(ctx.attr, "_fasttable_enabled") and
                          ctx.attr._fasttable_enabled[_FastTableEnabledInfo].enabled)
@@ -247,7 +241,7 @@
         outputs = srcs + hdrs,
         executable = ctx.executable._protoc,
         arguments = [
-                        "--" + generator + "_out=" + codegen_params + _get_real_root(ctx, srcs[0]),
+                        "--" + generator + "_out=" + codegen_params + real_root,
                         "--plugin=protoc-gen-" + generator + "=" + tool.path,
                         "--descriptor_set_in=" + ctx.configuration.host_path_separator.join([f.path for f in transitive_sets]),
                     ] +
diff -u -ur a/protos_generator/BUILD b/protos_generator/BUILD
--- a/protos_generator/BUILD	2022-11-18 18:02:10.000000000 +0000
+++ b/protos_generator/BUILD	2022-12-07 22:45:40.100162408 +0000
@@ -41,7 +41,7 @@
         ":generator",
         "//upbc:file_layout",
         "@com_google_protobuf//:protobuf",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
 
@@ -76,6 +76,6 @@
         "@com_google_absl//absl/log:check",
         "@com_google_absl//absl/strings",
         "@com_google_protobuf//:protobuf",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
diff -u -ur a/upbc/BUILD b/upbc/BUILD
--- a/upbc/BUILD	2022-11-18 18:02:10.000000000 +0000
+++ b/upbc/BUILD	2022-12-07 22:45:40.100162408 +0000
@@ -99,7 +99,7 @@
         "//:upb",
         "@com_google_absl//absl/container:flat_hash_map",
         "@com_google_absl//absl/strings",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
 
@@ -129,7 +129,7 @@
         "@com_google_absl//absl/container:flat_hash_map",
         "@com_google_absl//absl/strings",
         "@com_google_protobuf//:protobuf",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
 
@@ -148,7 +148,7 @@
         "@com_google_absl//absl/container:flat_hash_set",
         "@com_google_absl//absl/strings",
         "@com_google_protobuf//:protobuf",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
 
@@ -162,7 +162,7 @@
     deps = [
         ":common",
         "@com_google_protobuf//:protobuf",
-        "@com_google_protobuf//src/google/protobuf/compiler:code_generator",
+        "@com_google_protobuf//:protoc_lib",
     ],
 )
 
