# Description:
#   AWS CheckSums

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])

cc_library(
    name = "aws_checksums",
    srcs = glob([
        "source/*.c",
        "source/generic/*.c",
    ]) + select({
        "@platforms//cpu:x86_64": glob([
            "source/intel/*.c",
            "source/intel/intrin/*.c",
        ]),
        "@platforms//cpu:arm64": glob(["source/arm/*.c"]),
        "//conditions:default": [],
    }) + select({
        ":x86_64_gcc_or_clang": glob(["source/intel/asm/*.c"]),
        "//conditions:default": [],
    }),
    hdrs = glob([
        "include/aws/checksums/*.h",
        "include/aws/checksums/private/*.h",
    ]),
    copts = select({
        ":x86_64_msvc": [
            "/arch:AVX2",
            "/arch:AVX512",
        ],
        ":x86_64_gcc_or_clang": [
            "-mavx",
            "-mpclmul",
            "-msse4.2",
            "-mavx2",
            "-mavx512f",
            "-mvpclmulqdq",
        ],
        ":arm64_msvc": ["/arch:arm8.1"],
        ":arm64_gcc_or_clang": [
            "-march=armv8-a+crc+crypto",
            "-mtune=neoverse-v1",
        ],
        "//conditions:default": [],
    }),
    includes = ["include"],
    deps = [
        "@aws_c_common",
    ],
    visibility = ["//visibility:public"],
)

[
    selects.config_setting_group(
        name = os + "_" + cpu,
        match_all = [
            "@platforms//os:" + os,
            "@platforms//cpu:" + cpu,
        ],
    )
    for os in ["linux", "macos", "windows"]
    for cpu in ["arm64", "x86_64"]
]

selects.config_setting_group(
    name = "compiler_gcc_or_clang",
    match_any = [
        "@rules_cc//cc/compiler:gcc",
        "@rules_cc//cc/compiler:clang",
    ],
)

[
    selects.config_setting_group(
        name = cpu_os + "_" + compiler[0],
        match_all = [
            "@platforms//cpu:" + cpu,
            compiler[1],
        ],
    )
    for compiler in [
        ("gcc_or_clang", ":compiler_gcc_or_clang"),
        ("msvc", "@rules_cc//cc/compiler:msvc-cl"),
    ]
    for cpu in ["arm64", "x86_64"]
]
