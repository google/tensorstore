$schema: http://json-schema.org/draft-07/schema#
$id: TensorStore
type: object
title: Specifies a TensorStore to open/create.
description: |
  The following properties are supported by all TensorStore drivers.  Refer to
  the :ref:`driver documentation<tensorstore-drivers>` for the supported
  `.driver` identifiers and driver-specific properties.
properties:
  driver:
    type: string
    title: Driver identifier
    description: Specifies the :ref:`TensorStore driver<tensorstore-drivers>`.
  context:
    $ref: Context
    title: Specifies context resources that augment/override the parent context.
  dtype:
    $ref: dtype
    title: Specifies the data type.
  rank:
    type: integer
    minimum: 0
    maximum: 32
    title: |
      Specifies the rank of the TensorStore.
    description: |
      If `.transform` is also specified, the input rank must match.  Otherwise,
      the rank constraint applies to the driver directly.
  transform:
    $ref: IndexTransform
    title: Specifies a transform.
  schema:
    $ref: Schema
    title: Specifies constraints on the schema.
    description: |
      When opening an existing array, specifies constraints on the existing
      schema; opening will fail if the constraints do not match.  Any soft
      constraints specified in the :json:schema:`~Schema.chunk_layout` are
      ignored.  When creating a new array, a suitable schema will be selected
      automatically based on the specified schema constraints in combination
      with any driver-specific constraints.
required:
- driver
definitions:
  dtype:
    $id: dtype
    title: Specifies a TensorStore data type.
    description: |
      TensorStore data types correspond to the logical data representation, not
      the precise encoding.  There are not separate data types for little endian
      and big endian byte order.
    oneOf:
      - const: "bool"
        title: Boolean value (0 or 1).
        description: |
          Each value occupies an entire byte in memory, but depending on the
          format may be encoded more efficiently.
      - const: "char"
        title: |
          Single byte, interpreted as an ASCII character.
      - const: "byte"
        title: |
          Single byte.
      - const: "int4"
        title: |
          4-bit signed `two's-complement <https://en.wikipedia.org/wiki/Two%27s_complement>`__ integer, internally stored as its 8-bit signed integer equivalent (i.e. sign-extended).
      - const: "int8"
        title: |
          8-bit signed `two's-complement <https://en.wikipedia.org/wiki/Two%27s_complement>`__ integer.
      - const: "uint8"
        title: |
          8-bit unsigned integer.
      - const: "int16"
        title: |
          16-bit signed `two's-complement <https://en.wikipedia.org/wiki/Two%27s_complement>`__ integer.
      - const: "uint16"
        title: |
          16-bit unsigned integer.
      - const: "int32"
        title: |
          32-bit signed `two's-complement <https://en.wikipedia.org/wiki/Two%27s_complement>`__ integer.
      - const: "uint32"
        title: |
          32-bit unsigned integer.
      - const: "int64"
        title: |
          64-bit signed `two's-complement <https://en.wikipedia.org/wiki/Two%27s_complement>`__ integer.
      - const: "uint64"
        title: |
          64-bit unsigned integer.
      - const: "float8_e4m3fn"
        title: |
           `8-bit floating point - Exponent: 4, Mantissa: 3, bias: 7, with NaN,  without infinities
           <https://github.com/jax-ml/ml_dtypes#float8_e4m3fn>`__ .
      - const: "float8_e4m3fnuz"
        title: |
           `8-bit floating point - Exponent: 4, Mantissa: 3, bias: 8, with NaN,  without infinities
           <https://github.com/jax-ml/ml_dtypes#float8_e4m3fnuz>`__ .
      - const: "float8_e4m3b11fnuz"
        title: |
           `8-bit floating point - Exponent: 4, Mantissa: 3, bias: 11, with NaN,  without infinities
           <https://github.com/jax-ml/ml_dtypes#float8_e4m3b11fnuz>`__ .
      - const: "float8_e5m2"
        title: |
           `8-bit floating point - Exponent: 5, Mantissa: 2, bias: 15, IEEE 754, with NaN and infinities.
           <https://github.com/jax-ml/ml_dtypes#float8_e5m2>`__ .
      - const: "float8_e5m2fnuz"
        title: |
           `8-bit floating point - Exponent: 5, Mantissa: 2, bias: 16, with NaN, without infinities.
           <https://github.com/jax-ml/ml_dtypes#float8_e5m2fnuz>`__ .
      - const: "float16"
        title: |
           `IEEE 754 binary16
           <https://en.wikipedia.org/wiki/Half-precision_floating-point_format>`__
           half-precision floating-point number.
      - const: "bfloat16"
        title: |
          `bfloat16 floating-point format <https://en.wikipedia.org/wiki/Bfloat16_floating-point_format>`__ number.
      - const: "float32"
        title: |
           `IEEE 754 binary32
           <https://en.wikipedia.org/wiki/Single-precision_floating-point_format>`__
           single-precision floating-point number.
      - const: "float64"
        title: |
           `IEEE 754 binary64
           <https://en.wikipedia.org/wiki/Double-precision_floating-point_format>`__
           double-precision floating-point number.
      - const: "complex64"
        title: |
          Complex number, where the real and imaginary components are each
          represented by a `.float32`.
      - const: "complex128"
        title: |
          Complex number, where the real and imaginary components are each
          represented by a `.float64`.
      - const: "string"
        title: |
          Byte string.
      - const: "ustring"
        title: |
          Unicode string (represented in memory as UTF-8).
      - const: "json"
        title: |
          `JSON <https://en.wikipedia.org/wiki/JSON>`__ value.
