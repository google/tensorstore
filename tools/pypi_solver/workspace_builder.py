# Copyright 2023 The TensorStore Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=g-importing-member

import io
import json
import re
from typing import Collection, Dict, Set

from packaging.requirements import Requirement
from packaging.utils import canonicalize_name
from packaging.utils import NormalizedName
from packaging.version import Version
import utils


WORKSPACE_OPEN = '''# DO NOT EDIT: Generated by pypi_solver
"""Defines third-party bazel repos for Python packages fetched with pip."""

load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load(
    "%s//third_party:repo.bzl",
    "third_party_python_package",
)

def repo():
'''

REPO_MACRO_BODY = """    maybe(
        third_party_python_package,
        name = %s,
        target = %s,
        requirement = %s,
"""


def _get_target_name(package_name):
  return re.sub("[^0-9a-z_]+", "_", package_name.lower())


def _get_repo_name(package_name):
  return "pypa_%s" % (_get_target_name(package_name),)


def _get_full_target_name(package_name) -> str:
  return "@%s//:%s" % (
      _get_repo_name(package_name),
      _get_target_name(package_name),
  )


class _WorkspaceBuilder:
  """Renders a workspace.bzl file."""

  def __init__(
      self,
      metadata: utils.PypiMetadata,
      merged: Dict[NormalizedName, Set[Requirement]],
      parents: Dict[NormalizedName, Set[NormalizedName]],
  ):
    self._metadata = metadata
    self._merged = merged
    self._parents = parents

  def _write_repo_macro(self, name: NormalizedName, f: io.StringIO) -> None:
    """Writes an individual  repo_pypa_... for a given repository."""

    r = utils.merge_requirements_set(self._merged[name])
    p_set = self._parents.get(name, [])

    all_children = set()
    mapping = dict()

    e = self._metadata.evaluate_requirement(r)
    for v in e.requires_dist:
      for vr in e.requires_dist[v]:
        vr_name = canonicalize_name(vr.name)
        if vr_name in p_set:
          continue
        marker_tuple = e.requires_dist[v].get(vr)
        all_children.add(vr_name)
        if isinstance(marker_tuple, tuple):
          mapping.setdefault(marker_tuple[0], set()).add(vr_name)
        else:
          mapping.setdefault("deps", set()).add(vr_name)

    r.marker = None
    package_name = _get_target_name(name)
    repo_name = _get_repo_name(name)

    f.write(f"def repo_{repo_name}():\n")
    for c in sorted(all_children):
      f.write(f"    repo_{_get_repo_name(c)}()\n")

    f.write(
        REPO_MACRO_BODY
        % (
            json.dumps(repo_name),
            json.dumps(package_name),
            json.dumps(str(r)),
        )
    )
    if not all_children:
      f.write("    )\n")
      return

    for var in sorted(mapping):
      f.write(f"        {var} = [\n")
      for c in sorted(mapping[var]):
        f.write("            " + json.dumps(_get_full_target_name(c)) + ",\n")
      f.write("        ],\n")
    f.write("    )\n")
    return

  def write_workspace(self, tools_workspace: str) -> str:
    """Writes the workspace.bzl file."""
    f = io.StringIO()
    f.write(WORKSPACE_OPEN % (tools_workspace,))
    for package_name in sorted(self._merged):
      dep_repo_name = _get_repo_name(package_name)
      f.write(f"    repo_{dep_repo_name}()\n")

    for package_name in sorted(self._merged):
      f.write("\n")
      self._write_repo_macro(package_name, f)
    return f.getvalue()


def build_workspace(
    metadata: utils.PypiMetadata,
    initial_requirements: Collection[Requirement],
    solution: Dict[NormalizedName, Version],
    tools_workspace: str,
) -> str:
  """Construct text for a workspace.bzl file."""

  parents = dict()
  merged = metadata.collate_solution(initial_requirements, solution, parents)

  builder = _WorkspaceBuilder(metadata, merged, parents)
  return builder.write_workspace(tools_workspace)
