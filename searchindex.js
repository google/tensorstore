Search.setIndex({"alltitles": {"API reference": [[8, "api-reference"], [1702, "api-reference"]], "Accessors": [[174, "accessors"], [227, "accessors"], [490, "accessors"], [627, "accessors"], [661, "accessors"], [915, "accessors"], [1205, "accessors"], [1297, "accessors"], [1706, "accessors"], [1740, "accessors"], [1741, "accessors"], [1743, "accessors"], [1752, "accessors"], [1788, "accessors"], [1799, "accessors"], [1832, "accessors"], [1869, "accessors"], [1870, "accessors"], [1882, "accessors"], [1894, "accessors"], [1918, "accessors"], [1951, "accessors"], [1983, "accessors"], [2019, "accessors"], [2070, "accessors"], [2080, "accessors"]], "Adding singleton dimensions": [[1777, "adding-singleton-dimensions"], [2162, "adding-singleton-dimensions"]], "Alignment": [[8, "alignment"]], "Alignment and broadcasting": [[1688, "alignment-and-broadcasting"]], "All unlabeled dimensions example": [[605, null]], "Allocation": [[416, "allocation"]], "Arithmetic operations": [[143, "arithmetic-operations"], [227, "arithmetic-operations"], [490, "arithmetic-operations"]], "Arithmetic operators": [[110, "arithmetic-operators"], [699, "arithmetic-operators"], [2080, "arithmetic-operators"]], "Array": [[8, "array"]], "Array -> array codecs": [[1685, "array-array-codecs"]], "Array -> bytes codecs": [[1685, "array-bytes-codecs"]], "Assignment": [[174, "assignment"], [1205, "assignment"]], "Assignment operators": [[110, "assignment-operators"], [699, "assignment-operators"]], "Asynchronous support": [[8, "asynchronous-support"], [1702, "asynchronous-support"]], "Authentication": [[1691, "authentication"], [1698, "authentication"]], "B+tree node footer": [[1697, "b-tree-node-footer"]], "B+tree node format": [[1697, "b-tree-node-format"]], "B+tree node inner header": [[1697, "b-tree-node-inner-header"]], "B+tree node outer header": [[1697, "b-tree-node-outer-header"]], "Basic operations": [[110, "basic-operations"]], "Bazel Build Requirements": [[1689, "bazel-build-requirements"]], "Bazel integration": [[1689, "bazel-integration"]], "Bitwise operators": [[699, "bitwise-operators"]], "Blocking interface": [[1788, "blocking-interface"]], "Boolean array indexing": [[1777, "boolean-array-indexing"], [2162, "boolean-array-indexing"]], "Bounds propagation": [[661, "bounds-propagation"]], "Broadcasting": [[39, "broadcasting"], [1205, "broadcasting"]], "Build Requirements": [[1689, "build-requirements"]], "Build caching": [[1689, "build-caching"]], "Building and Installing": [[1689, "building-and-installing"]], "Building the documentation": [[1689, "building-the-documentation"]], "Bytes -> bytes codecs": [[1685, "bytes-bytes-codecs"]], "C++ API": [[1689, "c-api"]], "CMake Build Requirements": [[1689, "cmake-build-requirements"]], "CMake integration": [[1689, "cmake-integration"]], "Cache behavior": [[1692, "cache-behavior"]], "Caching": [[2161, "caching"]], "Callback interface": [[1788, "callback-interface"]], "Checksum": [[1685, "checksum"]], "Chunk key encodings": [[1685, "chunk-key-encodings"]], "Chunk layout": [[1681, "chunk-layout"], [1682, "chunk-layout"], [1683, "chunk-layout"], [1684, "chunk-layout"], [1685, "chunk-layout"], [2164, "chunk-layout"]], "Chunk templates": [[1706, "chunk-templates"]], "Chunked storage drivers": [[1679, "chunked-storage-drivers"]], "Classes": [[1706, "classes"], [1740, "classes"], [1869, "classes"]], "Classification functions": [[110, "classification-functions"]], "Codec": [[1681, "codec"], [1682, "codec"], [1683, "codec"], [1684, "codec"], [1685, "codec"], [2164, "codec"]], "Codecs": [[1685, "codecs"]], "Comparison": [[39, "comparison"], [490, "comparison"], [995, "comparison"]], "Comparison operators": [[1706, "comparison-operators"], [1707, "comparison-operators"], [1870, "comparison-operators"], [1882, "comparison-operators"], [1894, "comparison-operators"], [1951, "comparison-operators"], [1983, "comparison-operators"], [2080, "comparison-operators"]], "Compile-time data type/rank/mode constraints": [[8, "compile-time-data-type-rank-mode-constraints"]], "Composed examples": [[2162, "composed-examples"]], "Composition": [[586, "composition"], [995, "composition"]], "Compression": [[1681, "compression"], [1685, "compression"]], "Compression configuration": [[1697, "compression-configuration"]], "Compressors": [[1684, "compressors"]], "Concepts": [[1687, "concepts"], [1697, "concepts"]], "Constructors": [[21, "constructors"], [39, "constructors"], [110, "constructors"], [134, "constructors"], [143, "constructors"], [165, "constructors"], [174, "constructors"], [196, "constructors"], [227, "constructors"], [283, "constructors"], [290, "constructors"], [300, "constructors"], [340, "constructors"], [365, "constructors"], [371, "constructors"], [383, "constructors"], [393, "constructors"], [416, "constructors"], [465, "constructors"], [490, "constructors"], [526, "constructors"], [540, "constructors"], [586, "constructors"], [615, "constructors"], [627, "constructors"], [661, "constructors"], [699, "constructors"], [801, "constructors"], [811, "constructors"], [862, "constructors"], [869, "constructors"], [894, "constructors"], [915, "constructors"], [924, "constructors"], [930, "constructors"], [943, "constructors"], [965, "constructors"], [995, "constructors"], [1029, "constructors"], [1040, "constructors"], [1063, "constructors"], [1121, "constructors"], [1154, "constructors"], [1205, "constructors"], [1240, "constructors"], [1268, "constructors"], [1278, "constructors"], [1297, "constructors"], [1306, "constructors"], [1345, "constructors"], [1379, "constructors"], [1482, "constructors"], [1533, "constructors"], [1622, "constructors"], [1703, "constructors"], [1706, "constructors"], [1707, "constructors"], [1737, "constructors"], [1740, "constructors"], [1743, "constructors"], [1752, "constructors"], [1788, "constructors"], [1799, "constructors"], [1832, "constructors"], [1869, "constructors"], [1870, "constructors"], [1877, "constructors"], [1882, "constructors"], [1894, "constructors"], [1918, "constructors"], [1925, "constructors"], [1939, "constructors"], [1946, "constructors"], [1951, "constructors"], [1983, "constructors"], [2020, "constructors"], [2070, "constructors"], [2080, "constructors"], [2115, "constructors"], [2119, "constructors"], [2147, "constructors"]], "Context framework": [[0, "context-framework"]], "Conversion operators": [[110, "conversion-operators"], [131, "conversion-operators"], [134, "conversion-operators"], [165, "conversion-operators"], [365, "conversion-operators"], [486, "conversion-operators"], [649, "conversion-operators"], [699, "conversion-operators"], [801, "conversion-operators"], [833, "conversion-operators"], [862, "conversion-operators"], [995, "conversion-operators"], [1121, "conversion-operators"], [1188, "conversion-operators"], [1290, "conversion-operators"], [1507, "conversion-operators"]], "Copy functions": [[39, "copy-functions"]], "Core": [[8, "core"], [1702, "core"]], "Creating a new TensorStore": [[2151, "creating-a-new-tensorstore"]], "Creation functions": [[39, "creation-functions"]], "Data file table format": [[1697, "data-file-table-format"]], "Data members": [[39, "data-members"], [90, "data-members"], [100, "data-members"], [131, "data-members"], [143, "data-members"], [165, "data-members"], [174, "data-members"], [196, "data-members"], [220, "data-members"], [227, "data-members"], [253, "data-members"], [300, "data-members"], [318, "data-members"], [401, "data-members"], [406, "data-members"], [459, "data-members"], [586, "data-members"], [661, "data-members"], [778, "data-members"], [801, "data-members"], [811, "data-members"], [862, "data-members"], [869, "data-members"], [894, "data-members"], [930, "data-members"], [981, "data-members"], [995, "data-members"], [1013, "data-members"], [1017, "data-members"], [1021, "data-members"], [1040, "data-members"], [1057, "data-members"], [1061, "data-members"], [1089, "data-members"], [1188, "data-members"], [1205, "data-members"], [1240, "data-members"], [1268, "data-members"], [1306, "data-members"], [1345, "data-members"], [1366, "data-members"], [1379, "data-members"], [1390, "data-members"], [1394, "data-members"], [1465, "data-members"], [1472, "data-members"], [1482, "data-members"], [1500, "data-members"], [1507, "data-members"], [1512, "data-members"], [1517, "data-members"], [1519, "data-members"], [1533, "data-members"], [1551, "data-members"], [1556, "data-members"], [1559, "data-members"], [1566, "data-members"], [1570, "data-members"], [1622, "data-members"]], "Data type": [[1681, "data-type"], [1682, "data-type"], [1683, "data-type"], [1684, "data-type"], [1685, "data-type"], [2019, "data-type"]], "Data types": [[8, "data-types"], [1702, "data-types"]], "Debugging": [[1686, "debugging"]], "Development": [[1689, "development"]], "Differences compared to NumPy indexing": [[2162, "differences-compared-to-numpy-indexing"]], "Dimension Units": [[1682, "dimension-units"]], "Dimension expression construction": [[2162, "dimension-expression-construction"]], "Dimension expressions": [[2162, "dimension-expressions"]], "Dimension selections": [[2162, "dimension-selections"]], "Dimension units": [[1681, "dimension-units"], [1683, "dimension-units"], [1685, "dimension-units"], [2164, "dimension-units"]], "Domain": [[1681, "domain"], [1682, "domain"], [1683, "domain"], [1684, "domain"], [1685, "domain"]], "Downsampling": [[8, "downsampling"]], "Drivers": [[1679, "drivers"], [1693, "drivers"]], "Durability of writes": [[1690, "durability-of-writes"]], "Ellipsis": [[1777, "ellipsis"], [2162, "ellipsis"]], "Environment variables": [[1686, "environment-variables"]], "Error": [[1777, null], [1777, null]], "Error handling": [[8, "error-handling"]], "Example": [[0, null], [518, null], [609, null], [1670, null], [1671, null], [1672, null], [1672, null], [1673, null], [1674, null], [1675, null], [1676, null], [1677, null], [1678, null], [1679, null], [1680, null], [1680, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1681, null], [1682, null], [1682, null], [1682, null], [1682, null], [1683, null], [1683, "example"], [1684, null], [1684, null], [1684, null], [1684, null], [1684, null], [1684, null], [1684, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1688, null], [1688, null], [1688, null], [1692, null], [1692, null], [1692, null], [1692, null], [1698, null], [1698, null], [1729, null], [1730, null], [1732, null], [1733, null], [1736, null], [1742, null], [1746, null], [1747, null], [1748, null], [1750, null], [1751, null], [1765, null], [1766, null], [1767, null], [1768, null], [1769, null], [1770, null], [1771, null], [1772, null], [1773, null], [1774, null], [1775, null], [1789, null], [1792, null], [1800, null], [1805, null], [1809, null], [1811, null], [1812, null], [1813, null], [1814, null], [1815, null], [1816, null], [1817, null], [1818, null], [1820, null], [1822, null], [1823, null], [1824, null], [1825, null], [1826, null], [1836, null], [1837, null], [1843, null], [1844, null], [1845, null], [1846, null], [1847, null], [1848, null], [1849, null], [1850, null], [1851, null], [1852, null], [1855, null], [1856, null], [1859, null], [1862, null], [1867, null], [1869, null], [1874, null], [1883, null], [1884, null], [1886, null], [1887, null], [1888, null], [1889, null], [1890, null], [1891, null], [1892, null], [1893, null], [1899, null], [1900, null], [1901, null], [1902, null], [1903, null], [1904, null], [1905, null], [1906, null], [1907, null], [1908, null], [1909, null], [1911, null], [1912, null], [1913, null], [1915, null], [1916, null], [1917, null], [1926, null], [1927, null], [1928, null], [1948, null], [1949, null], [1953, null], [1954, null], [1955, null], [1956, null], [1957, null], [1958, null], [1959, null], [1960, null], [1961, null], [1962, null], [1963, null], [1964, null], [1965, null], [1966, null], [1967, null], [1970, null], [1971, null], [1973, null], [1976, null], [1981, null], [1982, null], [1985, null], [1986, null], [1987, null], [1988, null], [1989, null], [1990, null], [1991, null], [1992, null], [1993, null], [1994, null], [1995, null], [1996, null], [1997, null], [1998, null], [1999, null], [2000, null], [2003, null], [2004, null], [2005, null], [2007, null], [2008, null], [2011, null], [2012, null], [2017, null], [2018, null], [2026, null], [2027, null], [2028, null], [2029, null], [2030, null], [2031, null], [2032, null], [2033, null], [2034, null], [2035, null], [2036, null], [2037, null], [2038, null], [2039, null], [2040, null], [2041, null], [2042, null], [2046, null], [2050, null], [2051, null], [2053, null], [2055, null], [2058, null], [2059, null], [2069, null], [2081, null], [2082, null], [2083, null], [2084, null], [2085, null], [2086, null], [2087, null], [2088, null], [2089, null], [2090, null], [2091, null], [2110, null], [2111, null], [2139, null], [2146, null], [2147, null], [2164, null], [2164, null]], "Example\nclass: example": [[2164, null], [2164, null]], "Example JSON specifications": [[1682, "example-json-specifications"], [1696, "example-json-specifications"], [1700, "example-json-specifications"], [1701, "example-json-specifications"]], "Example of chunk aspect ratio and elements constraint": [[1681, null], [1684, null]], "Example of chunk aspect ratio constraint": [[1681, null], [1684, null]], "Example of chunk layout with explicit chunk shapes": [[1682, null], [1685, null]], "Example of chunk layout with separate read and write chunk constraints": [[1682, null], [1685, null]], "Example of explicit chunk shape constraint": [[1681, null], [1684, null]], "Example of skipping reading the metadata when opening an existing array": [[2151, null]], "Example of skipping writing the metadata when creating a new array": [[2151, null]], "Example of stack driver": [[1683, null]], "Example of unconstrained chunk layout": [[1681, null], [1682, null], [1684, null], [1685, null]], "Example of unconstrained chunk layout with compressed segmentation encoding": [[1682, null]], "Example with all unlabeled dimensions": [[1801, null], [1835, null]], "Example with fully labeled dimensions": [[1801, null], [1835, null]], "Example with mixed labeled and unlabeled dimensions": [[1801, null], [1835, null]], "Example with scalar data type": [[1684, null], [1684, null], [1684, null]], "Example with scalar data type and C order": [[1684, null]], "Example with scalar data type and Fortran order": [[1684, null]], "Example with sharded raw encoding": [[1682, null]], "Example with structured data type": [[1684, null], [1684, null], [1684, null]], "Example with structured data type and C order": [[1684, null]], "Example with structured data type and Fortran order": [[1684, null]], "Example with unsharded compressed segmentation encoding": [[1682, null]], "Example with unsharded raw encoding": [[1682, null]], "Example without sharding": [[1685, null]], "Examples": [[520, null], [1690, null], [1691, null], [1692, null], [1695, null], [1698, null], [1752, null], [1753, null], [1754, null], [1756, null], [1757, null], [1758, null], [1759, null], [1760, null], [1777, "examples"], [1778, null], [1779, null], [1780, null], [1781, null], [1782, null], [1783, null], [1784, null], [1785, null], [1787, null], [1802, null], [1803, null], [1804, null], [1806, null], [1807, null], [1808, null], [1834, null], [1838, null], [1839, null], [1840, null], [1841, null], [2019, null], [2025, null], [2116, null], [2151, "examples"]], "Examples (input dimensions refer to dimensions of target,\n          while output dimensions refer to dimensions of source):": [[13, null]], "Examples:": [[519, null], [2150, "examples"]], "Experimental": [[1702, "experimental"]], "Exponential functions": [[110, "exponential-functions"]], "Fill value": [[1681, "fill-value"], [1682, "fill-value"], [1683, "fill-value"], [1684, "fill-value"], [1685, "fill-value"]], "Floating-point manipulation functions": [[110, "floating-point-manipulation-functions"]], "For example:": [[547, null]], "Formatting": [[39, "formatting"]], "Friend functions": [[39, "friend-functions"], [100, "friend-functions"], [143, "friend-functions"], [165, "friend-functions"], [174, "friend-functions"], [220, "friend-functions"], [253, "friend-functions"], [271, "friend-functions"], [300, "friend-functions"], [318, "friend-functions"], [340, "friend-functions"], [365, "friend-functions"], [371, "friend-functions"], [406, "friend-functions"], [416, "friend-functions"], [459, "friend-functions"], [465, "friend-functions"], [586, "friend-functions"], [615, "friend-functions"], [627, "friend-functions"], [649, "friend-functions"], [661, "friend-functions"], [811, "friend-functions"], [862, "friend-functions"], [869, "friend-functions"], [894, "friend-functions"], [915, "friend-functions"], [1021, "friend-functions"], [1063, "friend-functions"], [1089, "friend-functions"], [1092, "friend-functions"], [1121, "friend-functions"], [1154, "friend-functions"], [1188, "friend-functions"], [1205, "friend-functions"], [1240, "friend-functions"], [1268, "friend-functions"], [1278, "friend-functions"], [1297, "friend-functions"], [1345, "friend-functions"], [1366, "friend-functions"], [1394, "friend-functions"], [1482, "friend-functions"], [1517, "friend-functions"], [1519, "friend-functions"], [1533, "friend-functions"]], "Fully labeled dimensions example": [[605, null]], "Geometric operations": [[1799, "geometric-operations"]], "Getting started": [[1687, "getting-started"]], "Google Cloud Credentials": [[1686, "google-cloud-credentials"]], "Google Cloud Storage": [[1686, "google-cloud-storage"]], "HTTP requests": [[1686, "http-requests"]], "Highlights": [[1687, "highlights"]], "Hyperbolic functions": [[110, "hyperbolic-functions"]], "I/O": [[1240, "i-o"], [1869, "i-o"], [2019, "i-o"]], "IPython shell without installing": [[1689, "ipython-shell-without-installing"]], "Identity transform": [[661, "identity-transform"]], "Important": [[1696, null], [1700, null]], "Index domain": [[1688, "index-domain"]], "Index space": [[1688, "index-space"]], "Index transform": [[1688, "index-transform"]], "Index transforms": [[2162, "index-transforms"]], "Index vectors": [[8, "index-vectors"]], "Indexing": [[8, "indexing"], [39, "indexing"], [1205, "indexing"], [1702, "indexing"], [1799, "indexing"], [1832, "indexing"], [1951, "indexing"], [1983, "indexing"], [2019, "indexing"], [2162, "indexing"]], "Integer array indexing": [[1777, "integer-array-indexing"], [2162, "integer-array-indexing"]], "Integer indexing": [[1777, "integer-indexing"], [2162, "integer-indexing"]], "Interior B+tree node format (height > 0)": [[1697, "interior-b-tree-node-format-height-0"]], "Interior version tree node entries (height > 0)": [[1697, "interior-version-tree-node-entries-height-0"]], "Interval indexing": [[1777, "interval-indexing"], [2162, "interval-indexing"]], "Iteration": [[8, "iteration"]], "JSON Spec": [[2165, "json-spec"]], "JSON serialization": [[8, "json-serialization"]], "Key-Value Storage Layer": [[1693, "key-value-storage-layer"]], "Key-value storage": [[8, "key-value-storage"]], "Leaf B+tree node format (height = 0)": [[1697, "leaf-b-tree-node-format-height-0"]], "Limitations": [[1681, "limitations"], [1682, "limitations"], [1684, "limitations"], [1690, "limitations"], [1696, "limitations"], [1699, "limitations"], [1700, "limitations"], [1701, "limitations"]], "Linking": [[526, "linking"]], "Local checkout installation": [[1689, "local-checkout-installation"]], "Manifest configuration": [[1697, "manifest-configuration"]], "Manifest footer": [[1697, "manifest-footer"]], "Manifest format": [[1697, "manifest-format"]], "Manifest header": [[1697, "manifest-header"]], "Manifest kinds": [[1697, "manifest-kinds"]], "Manifest version tree": [[1697, "manifest-version-tree"]], "Map functions": [[526, "map-functions"]], "Mapping to TensorStore Schema": [[1681, "mapping-to-tensorstore-schema"], [1682, "mapping-to-tensorstore-schema"], [1684, "mapping-to-tensorstore-schema"], [1685, "mapping-to-tensorstore-schema"]], "Metafunctions": [[490, "metafunctions"]], "Methods": [[21, "methods"], [39, "methods"], [90, "methods"], [131, "methods"], [134, "methods"], [143, "methods"], [165, "methods"], [174, "methods"], [196, "methods"], [220, "methods"], [253, "methods"], [271, "methods"], [283, "methods"], [290, "methods"], [300, "methods"], [318, "methods"], [340, "methods"], [365, "methods"], [371, "methods"], [416, "methods"], [427, "methods"], [465, "methods"], [486, "methods"], [490, "methods"], [526, "methods"], [540, "methods"], [586, "methods"], [615, "methods"], [627, "methods"], [649, "methods"], [661, "methods"], [801, "methods"], [811, "methods"], [833, "methods"], [862, "methods"], [869, "methods"], [894, "methods"], [930, "methods"], [943, "methods"], [944, "methods"], [965, "methods"], [981, "methods"], [995, "methods"], [1029, "methods"], [1040, "methods"], [1049, "methods"], [1051, "methods"], [1063, "methods"], [1089, "methods"], [1121, "methods"], [1154, "methods"], [1188, "methods"], [1205, "methods"], [1240, "methods"], [1268, "methods"], [1278, "methods"], [1306, "methods"], [1345, "methods"], [1379, "methods"], [1474, "methods"], [1482, "methods"], [1507, "methods"], [1517, "methods"], [1533, "methods"], [1556, "methods"], [1566, "methods"], [1622, "methods"]], "Mixed labeled and unlabeled dimensions example": [[605, null]], "Mutators": [[1882, "mutators"], [1951, "mutators"], [1983, "mutators"]], "Non-transactional semantics": [[2069, "non-transactional-semantics"]], "Note": [[4, null], [16, null], [30, null], [169, null], [174, null], [542, null], [836, null], [841, null], [842, null], [843, null], [848, null], [849, null], [854, null], [966, null], [967, null], [976, null], [978, null], [1065, null], [1070, null], [1506, null], [1622, null], [1679, null], [1680, null], [1681, null], [1682, null], [1684, null], [1684, null], [1685, null], [1686, null], [1688, null], [1688, null], [1688, null], [1689, null], [1689, null], [1689, null], [1689, null], [1690, null], [1692, null], [1697, null], [1697, null], [1697, null], [1697, null], [1697, null], [1699, null], [1732, null], [1736, null], [1747, null], [1775, null], [1778, null], [1782, null], [1799, null], [1801, null], [1802, null], [1805, null], [1835, null], [1900, null], [1901, null], [1903, null], [1908, null], [1910, null], [1912, null], [1958, null], [1961, null], [1981, null], [1993, null], [1994, null], [1996, null], [1997, null], [1999, null], [2005, null], [2008, null], [2017, null], [2069, null], [2114, null], [2114, null], [2151, null], [2151, null], [2152, null], [2152, null], [2154, null], [2154, null], [2155, null], [2160, null], [2161, null], [2161, null], [2161, null], [2162, null], [2162, null], [2162, null], [2162, null], [2162, null], [2162, null], [2164, null]], "NumPy-style dimension expression indexing": [[2162, "numpy-style-dimension-expression-indexing"]], "NumPy-style indexing": [[2162, "numpy-style-indexing"]], "Numbered file": [[1697, "numbered-file"]], "OCDBT": [[1702, "ocdbt"]], "Opening an existing TensorStore": [[2151, "opening-an-existing-tensorstore"]], "Operations": [[1703, "operations"], [1752, "operations"], [1776, "operations"], [2070, "operations"], [2115, "operations"], [2162, "operations"]], "Operators": [[1869, "operators"], [1882, "operators"]], "Outer indexing mode (oindex)": [[2162, "outer-indexing-mode-oindex"]], "Output index methods": [[1688, "output-index-methods"]], "Ownership conversion": [[490, "ownership-conversion"]], "Pickle support": [[2161, "pickle-support"]], "Power functions": [[110, "power-functions"], [699, "power-functions"]], "Proxy configuration": [[1686, "proxy-configuration"]], "Public members": [[1707, "public-members"], [1737, "public-members"], [1752, "public-members"], [1788, "public-members"], [1877, "public-members"], [1925, "public-members"], [1935, "public-members"], [1939, "public-members"], [1946, "public-members"], [2020, "public-members"], [2092, "public-members"], [2095, "public-members"], [2097, "public-members"], [2115, "public-members"], [2119, "public-members"], [2147, "public-members"]], "Python API": [[1683, "python-api"]], "Python API from PyPI": [[1689, "python-api-from-pypi"]], "Python API from Source": [[1689, "python-api-from-source"]], "Reading and writing a local N5 dataset": [[2163, "reading-and-writing-a-local-n5-dataset"]], "Reading the Janelia FlyEM Hemibrain dataset": [[2163, "reading-the-janelia-flyem-hemibrain-dataset"]], "Related Constants": [[39, "related-constants"], [99, "related-constants"], [131, "related-constants"], [174, "related-constants"], [355, "related-constants"], [390, "related-constants"], [392, "related-constants"], [398, "related-constants"], [416, "related-constants"], [473, "related-constants"], [489, "related-constants"], [490, "related-constants"], [526, "related-constants"], [585, "related-constants"], [586, "related-constants"], [661, "related-constants"], [882, "related-constants"], [1012, "related-constants"], [1054, "related-constants"], [1056, "related-constants"], [1060, "related-constants"], [1063, "related-constants"], [1112, "related-constants"], [1205, "related-constants"], [1278, "related-constants"], [1306, "related-constants"], [1361, "related-constants"], [1378, "related-constants"], [1622, "related-constants"], [1665, "related-constants"]], "Related Functions": [[21, "related-functions"], [39, "related-functions"], [99, "related-functions"], [165, "related-functions"], [174, "related-functions"], [392, "related-functions"], [393, "related-functions"], [416, "related-functions"], [425, "related-functions"], [427, "related-functions"], [459, "related-functions"], [465, "related-functions"], [473, "related-functions"], [477, "related-functions"], [480, "related-functions"], [483, "related-functions"], [484, "related-functions"], [512, "related-functions"], [526, "related-functions"], [585, "related-functions"], [586, "related-functions"], [615, "related-functions"], [627, "related-functions"], [661, "related-functions"], [697, "related-functions"], [811, "related-functions"], [892, "related-functions"], [915, "related-functions"], [960, "related-functions"], [965, "related-functions"], [995, "related-functions"], [1028, "related-functions"], [1056, "related-functions"], [1060, "related-functions"], [1063, "related-functions"], [1154, "related-functions"], [1205, "related-functions"], [1240, "related-functions"], [1294, "related-functions"], [1306, "related-functions"], [1379, "related-functions"], [1482, "related-functions"], [1622, "related-functions"]], "Related Macros": [[1063, "related-macros"]], "Related Types": [[39, "related-types"], [174, "related-types"], [365, "related-types"], [398, "related-types"], [406, "related-types"], [416, "related-types"], [427, "related-types"], [473, "related-types"], [490, "related-types"], [512, "related-types"], [526, "related-types"], [569, "related-types"], [586, "related-types"], [627, "related-types"], [661, "related-types"], [930, "related-types"], [943, "related-types"], [1011, "related-types"], [1012, "related-types"], [1021, "related-types"], [1055, "related-types"], [1059, "related-types"], [1063, "related-types"], [1089, "related-types"], [1121, "related-types"], [1154, "related-types"], [1205, "related-types"], [1240, "related-types"], [1278, "related-types"], [1297, "related-types"], [1306, "related-types"], [1378, "related-types"], [1394, "related-types"], [1445, "related-types"], [1480, "related-types"], [1482, "related-types"], [1499, "related-types"], [1506, "related-types"], [1533, "related-types"], [1565, "related-types"]], "Required third-party libraries": [[1689, "id8"]], "Rounding functions": [[110, "rounding-functions"]], "Running tests": [[1689, "running-tests"]], "Schema": [[2164, "schema"]], "See also": [[943, null], [1114, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1685, null], [1724, null], [1725, null], [1726, null], [1727, null], [1728, null], [1731, null], [1732, null], [1735, null], [1736, null], [1740, null], [1752, null], [1777, null], [1777, null], [1777, null], [1777, null], [1777, null], [1777, null], [1781, null], [1787, null], [1788, null], [1799, null], [1800, null], [1819, null], [1821, null], [1828, null], [1829, null], [1830, null], [1831, null], [1832, null], [1833, null], [1837, null], [1853, null], [1854, null], [1856, null], [1863, null], [1864, null], [1865, null], [1866, null], [1867, null], [1888, null], [1900, null], [1901, null], [1903, null], [1905, null], [1912, null], [1917, null], [1925, null], [1935, null], [1939, null], [1946, null], [1952, null], [1954, null], [1955, null], [1956, null], [1957, null], [1968, null], [1969, null], [1971, null], [1977, null], [1978, null], [1979, null], [1980, null], [1982, null], [1984, null], [1986, null], [1987, null], [1988, null], [1989, null], [2001, null], [2002, null], [2004, null], [2013, null], [2014, null], [2015, null], [2016, null], [2018, null], [2020, null], [2024, null], [2025, null], [2026, null], [2027, null], [2028, null], [2029, null], [2030, null], [2031, null], [2032, null], [2033, null], [2043, null], [2044, null], [2047, null], [2048, null], [2051, null], [2061, null], [2062, null], [2063, null], [2064, null], [2065, null], [2066, null], [2075, null], [2077, null], [2097, null], [2114, null], [2152, null], [2154, null]], "Selection of chunk layout when creating a new array": [[1681, "selection-of-chunk-layout-when-creating-a-new-array"], [1682, "selection-of-chunk-layout-when-creating-a-new-array"], [1684, "selection-of-chunk-layout-when-creating-a-new-array"], [1685, "selection-of-chunk-layout-when-creating-a-new-array"]], "Sequence accessors": [[1799, "sequence-accessors"]], "Set operations": [[1121, "set-operations"]], "Setters": [[1706, "setters"]], "Single file": [[1697, "single-file"]], "Single file drivers": [[1679, "single-file-drivers"]], "Spec": [[1702, "spec"]], "Storage format": [[1697, "storage-format"]], "String Utilities": [[8, "string-utilities"]], "String representation": [[1752, "string-representation"], [1799, "string-representation"], [1832, "string-representation"], [1869, "string-representation"], [1882, "string-representation"], [1951, "string-representation"], [1983, "string-representation"]], "Supported data types": [[1684, "id8"]], "Supported generators": [[1689, "supported-generators"]], "Supported operations": [[1683, "supported-operations"]], "Synchronous I/O": [[1869, "synchronous-i-o"]], "TLS CA certificates": [[1686, "tls-ca-certificates"], [1691, "tls-ca-certificates"], [1692, "tls-ca-certificates"]], "TensorStore": [[1687, "tensorstore"]], "TensorStore Schema": [[1683, "tensorstore-schema"]], "Tensorstore Curl Options": [[1686, "tensorstore-curl-options"]], "Test support": [[1063, "test-support"]], "Testing": [[1691, "testing"]], "Third-party dependencies": [[1689, "third-party-dependencies"]], "Tip": [[2051, null], [2051, null]], "Transaction support": [[2161, "transaction-support"]], "Transactional semantics": [[2069, "transactional-semantics"]], "Transactions": [[1869, "transactions"], [2019, "transactions"]], "Transformation": [[8, "transformation"]], "Trigonometric functions": [[110, "trigonometric-functions"]], "Tutorial": [[2163, "tutorial"]], "Types": [[39, "types"], [100, "types"], [131, "types"], [143, "types"], [165, "types"], [174, "types"], [196, "types"], [227, "types"], [253, "types"], [271, "types"], [290, "types"], [340, "types"], [365, "types"], [371, "types"], [413, "types"], [490, "types"], [507, "types"], [513, "types"], [526, "types"], [586, "types"], [615, "types"], [778, "types"], [924, "types"], [930, "types"], [943, "types"], [965, "types"], [981, "types"], [1026, "types"], [1029, "types"], [1040, "types"], [1063, "types"], [1089, "types"], [1121, "types"], [1205, "types"], [1240, "types"], [1278, "types"], [1306, "types"], [1400, "types"], [1517, "types"], [1622, "types"]], "Using assume_metadata for improved concurrent open efficiency": [[2151, "using-assume-metadata-for-improved-concurrent-open-efficiency"]], "Utilities": [[8, "utilities"]], "Vectorized indexing mode (vindex)": [[2162, "vectorized-indexing-mode-vindex"]], "Version tree leaf node entries format (height = 0)": [[1697, "version-tree-leaf-node-entries-format-height-0"]], "Version tree node footer": [[1697, "version-tree-node-footer"]], "Version tree node format": [[1697, "version-tree-node-format"]], "Version tree node inner header": [[1697, "version-tree-node-inner-header"]], "Version tree node outer header": [[1697, "version-tree-node-outer-header"]], "Views": [[1702, "views"]], "Virtual views": [[1702, "virtual-views"]], "Warning": [[7, null], [43, null], [45, null], [64, null], [427, null], [527, null], [563, null], [758, null], [842, null], [849, null], [990, null], [1193, null], [1357, null], [1358, null], [1679, null], [1679, null], [1681, null], [1681, null], [1682, null], [1682, null], [1682, null], [1684, null], [1684, null], [1684, null], [1685, null], [1685, null], [1685, null], [1685, null], [1689, null], [1689, null], [1693, null], [1698, null], [1703, null], [1703, null], [1780, null], [1788, null], [1789, null], [1790, null], [1908, null], [1908, null], [1909, null], [1912, null], [2017, null], [2017, null], [2025, null], [2030, null], [2031, null], [2032, null], [2033, null], [2048, null], [2051, null], [2054, null], [2058, null], [2058, null], [2059, null], [2066, null], [2069, null], [2069, null], [2069, null], [2151, null], [2151, null], [2151, null], [2161, null], [2161, null], [2162, null], [2162, null], [2162, null]], "Zstd compression configuration": [[1697, "zstd-compression-configuration"]], "array Driver": [[1670, "array-driver"]], "avif Driver": [[1673, "avif-driver"]], "bmp Driver": [[1674, "bmp-driver"]], "cast Driver": [[1671, "cast-driver"]], "diagonal": [[2162, "diagonal"]], "downsample Driver": [[1672, "downsample-driver"]], "file Key-Value Store driver": [[1690, "file-key-value-store-driver"]], "gcs Key-Value Store driver": [[1691, "gcs-key-value-store-driver"]], "http Key-Value Store driver": [[1692, "http-key-value-store-driver"]], "jpeg Driver": [[1675, "jpeg-driver"]], "json Driver": [[1680, "json-driver"]], "kvstack Key-Value Store driver": [[1694, "kvstack-key-value-store-driver"]], "label": [[2162, "label"]], "mark_bounds_implicit": [[2162, "mark-bounds-implicit"]], "memory Key-Value Store driver": [[1695, "memory-key-value-store-driver"]], "n5 Driver": [[1681, "n5-driver"]], "neuroglancer_precomputed Driver": [[1682, "neuroglancer-precomputed-driver"]], "neuroglancer_uint64_sharded Key-Value Store driver": [[1696, "neuroglancer-uint64-sharded-key-value-store-driver"]], "ocdbt Key-Value Store driver": [[1697, "ocdbt-key-value-store-driver"]], "oindex": [[2162, "oindex"]], "png Driver": [[1676, "png-driver"]], "s3 Key-Value Store driver": [[1698, "s3-key-value-store-driver"]], "stack Driver": [[1683, "stack-driver"]], "stride": [[2162, "stride"]], "tiff Driver": [[1677, "tiff-driver"]], "translate_backward_by": [[2162, "translate-backward-by"]], "translate_by": [[2162, "translate-by"]], "translate_to": [[2162, "translate-to"]], "transpose": [[2162, "transpose"]], "tsgrpc_kvstore Key-Value Store driver": [[1699, "tsgrpc-kvstore-key-value-store-driver"]], "vindex": [[2162, "vindex"]], "webp Driver": [[1678, "webp-driver"]], "zarr Driver": [[1684, "zarr-driver"]], "zarr3 Driver": [[1685, "zarr3-driver"]], "zarr3_sharding_indexed Key-Value Store driver": [[1700, "zarr3-sharding-indexed-key-value-store-driver"]], "zip Key-Value Store driver": [[1701, "zip-key-value-store-driver"]]}, "docurls": ["context.html", "cpp/api/TENSORSTORE_ASSERT_OK.html", "cpp/api/TENSORSTORE_ASSERT_OK_AND_ASSIGN.html", "cpp/api/TENSORSTORE_ASSIGN_OR_RETURN.html", "cpp/api/TENSORSTORE_CHECK_OK.html", "cpp/api/TENSORSTORE_CHECK_OK_AND_ASSIGN.html", "cpp/api/TENSORSTORE_EXPECT_OK.html", "cpp/api/TENSORSTORE_RETURN_IF_ERROR.html", "cpp/api/index.html", "cpp/api/tensorstore.AddByteOffset-element_pointer.html", "cpp/api/tensorstore.AddByteOffset-raw.html", "cpp/api/tensorstore.AddByteOffset-shared_ptr.html", "cpp/api/tensorstore.AlignDimensionsTo.html", "cpp/api/tensorstore.AlignDomainTo.html", "cpp/api/tensorstore.AlignTransformTo.html", "cpp/api/tensorstore.AllDims.html", "cpp/api/tensorstore.AllocateAndConstruct.html", "cpp/api/tensorstore.AllocateAndConstructShared.html", "cpp/api/tensorstore.AllocateArray.html", "cpp/api/tensorstore.AllocateArrayElementsLike.html", "cpp/api/tensorstore.AllocateArrayLike.html", "cpp/api/tensorstore.AnyFuture.html", "cpp/api/tensorstore.AnyFuture.AnyFuture.html", "cpp/api/tensorstore.AnyFuture.Force.html", "cpp/api/tensorstore.AnyFuture.IgnoreFuture.html", "cpp/api/tensorstore.AnyFuture.UntypedExecuteWhenReady.html", "cpp/api/tensorstore.AnyFuture.Wait.html", "cpp/api/tensorstore.AnyFuture.WaitFor.html", "cpp/api/tensorstore.AnyFuture.WaitUntil.html", "cpp/api/tensorstore.AnyFuture.null.html", "cpp/api/tensorstore.AnyFuture.ready.html", "cpp/api/tensorstore.AnyFuture.reset.html", "cpp/api/tensorstore.AnyFuture.status.html", "cpp/api/tensorstore.AppendToString.html", "cpp/api/tensorstore.ApplyIndexTransform-Array.html", "cpp/api/tensorstore.ApplyIndexTransform-TransformedArray.html", "cpp/api/tensorstore.AreArraysEqual.html", "cpp/api/tensorstore.AreCompatibleOrUnbounded.html", "cpp/api/tensorstore.AreElementTypesCompatible.html", "cpp/api/tensorstore.Array.html", "cpp/api/tensorstore.Array.Array-convert.html", "cpp/api/tensorstore.Array.Array-default.html", "cpp/api/tensorstore.Array.Array-element_pointer.html", "cpp/api/tensorstore.Array.Array-element_pointer-domain-order.html", "cpp/api/tensorstore.Array.Array-element_pointer-layout.html", "cpp/api/tensorstore.Array.Array-element_pointer-shape-order.html", "cpp/api/tensorstore.Array.Array-unchecked.html", "cpp/api/tensorstore.Array.DataType.html", "cpp/api/tensorstore.Array.Element.html", "cpp/api/tensorstore.Array.ElementPointer.html", "cpp/api/tensorstore.Array.ElementTag.html", "cpp/api/tensorstore.Array.Layout.html", "cpp/api/tensorstore.Array.MaybeConstIndex.html", "cpp/api/tensorstore.Array.MaybeConstOriginIndex.html", "cpp/api/tensorstore.Array.Pointer.html", "cpp/api/tensorstore.Array.RankType.html", "cpp/api/tensorstore.Array.RawPointer.html", "cpp/api/tensorstore.Array.RebindElement.html", "cpp/api/tensorstore.Array.RebindRank.html", "cpp/api/tensorstore.Array.array_origin_kind.html", "cpp/api/tensorstore.Array.array_view.html", "cpp/api/tensorstore.Array.byte_strided_origin_pointer.html", "cpp/api/tensorstore.Array.byte_strided_pointer.html", "cpp/api/tensorstore.Array.byte_strides.html", "cpp/api/tensorstore.Array.data.html", "cpp/api/tensorstore.Array.domain.html", "cpp/api/tensorstore.Array.dtype.html", "cpp/api/tensorstore.Array.element_pointer.html", "cpp/api/tensorstore.Array.index_type.html", "cpp/api/tensorstore.Array.layout.html", "cpp/api/tensorstore.Array.layout_container_kind.html", "cpp/api/tensorstore.Array.num_elements.html", "cpp/api/tensorstore.Array.operator-assign.html", "cpp/api/tensorstore.Array.operator-bitwise_or.html", "cpp/api/tensorstore.Array.operator-call-index.html", "cpp/api/tensorstore.Array.operator-call-indices.html", "cpp/api/tensorstore.Array.operator-equal_to.html", "cpp/api/tensorstore.Array.operator-not_equal_to.html", "cpp/api/tensorstore.Array.operator-shift_left.html", "cpp/api/tensorstore.Array.operator-subscript-index.html", "cpp/api/tensorstore.Array.operator-subscript-indices.html", "cpp/api/tensorstore.Array.origin.html", "cpp/api/tensorstore.Array.pointer.html", "cpp/api/tensorstore.Array.rank.html", "cpp/api/tensorstore.Array.shape.html", "cpp/api/tensorstore.Array.shared_array.html", "cpp/api/tensorstore.Array.shared_array_view.html", "cpp/api/tensorstore.Array.static_rank.html", "cpp/api/tensorstore.Array.valid.html", "cpp/api/tensorstore.Array.value_type.html", "cpp/api/tensorstore.ArrayFormatOptions.html", "cpp/api/tensorstore.ArrayFormatOptions.Default.html", "cpp/api/tensorstore.ArrayFormatOptions.prefix.html", "cpp/api/tensorstore.ArrayFormatOptions.separator.html", "cpp/api/tensorstore.ArrayFormatOptions.suffix.html", "cpp/api/tensorstore.ArrayFormatOptions.summary_edge_items.html", "cpp/api/tensorstore.ArrayFormatOptions.summary_ellipses.html", "cpp/api/tensorstore.ArrayFormatOptions.summary_threshold.html", "cpp/api/tensorstore.ArrayOriginCast.html", "cpp/api/tensorstore.ArrayOriginKind.html", "cpp/api/tensorstore.ArrayStorageStatistics.html", "cpp/api/tensorstore.ArrayStorageStatistics.Mask.html", "cpp/api/tensorstore.ArrayStorageStatistics.fully_stored.html", "cpp/api/tensorstore.ArrayStorageStatistics.mask.html", "cpp/api/tensorstore.ArrayStorageStatistics.not_stored.html", "cpp/api/tensorstore.ArrayStorageStatistics.operator-complement.html", "cpp/api/tensorstore.ArrayStorageStatistics.operator-equal_to.html", "cpp/api/tensorstore.ArrayStorageStatistics.operator-shift_left.html", "cpp/api/tensorstore.ArrayView.html", "cpp/api/tensorstore.ArraysHaveSameShapes.html", "cpp/api/tensorstore.BFloat16.html", "cpp/api/tensorstore.BFloat16.BFloat16-convert.html", "cpp/api/tensorstore.BFloat16.BFloat16-zero.html", "cpp/api/tensorstore.BFloat16.operator-assign-bool.html", "cpp/api/tensorstore.BFloat16.operator-assign-float.html", "cpp/api/tensorstore.BFloat16.operator-assign-integer.html", "cpp/api/tensorstore.BFloat16.operator-cast.html", "cpp/api/tensorstore.BFloat16.operator-divides.html", "cpp/api/tensorstore.BFloat16.operator-divides_assign.html", "cpp/api/tensorstore.BFloat16.operator-minus-binary.html", "cpp/api/tensorstore.BFloat16.operator-minus_assign.html", "cpp/api/tensorstore.BFloat16.operator-multiplies.html", "cpp/api/tensorstore.BFloat16.operator-multiplies_assign.html", "cpp/api/tensorstore.BFloat16.operator-negate-negate.html", "cpp/api/tensorstore.BFloat16.operator-plus-binary.html", "cpp/api/tensorstore.BFloat16.operator-plus_assign.html", "cpp/api/tensorstore.BFloat16.operator-post_dec-post.html", "cpp/api/tensorstore.BFloat16.operator-post_inc-post.html", "cpp/api/tensorstore.BFloat16.operator-pre_dec-pre.html", "cpp/api/tensorstore.BFloat16.operator-pre_inc-pre.html", "cpp/api/tensorstore.BFloat16.operator-unary_plus-unary.html", "cpp/api/tensorstore.Batch.html", "cpp/api/tensorstore.Batch.New.html", "cpp/api/tensorstore.Batch.Release.html", "cpp/api/tensorstore.Batch.View.html", "cpp/api/tensorstore.Batch.View.View-batch.html", "cpp/api/tensorstore.Batch.View.View-no_batch.html", "cpp/api/tensorstore.Batch.View.deferred.html", "cpp/api/tensorstore.Batch.View.operator-cast.html", "cpp/api/tensorstore.Batch.deferred.html", "cpp/api/tensorstore.Batch.no_batch.html", "cpp/api/tensorstore.Batch.no_batch_t.html", "cpp/api/tensorstore.Batch.operator-cast.html", "cpp/api/tensorstore.BitIterator.html", "cpp/api/tensorstore.BitIterator.BitIterator-base-offset.html", "cpp/api/tensorstore.BitIterator.BitIterator-convert.html", "cpp/api/tensorstore.BitIterator.BitIterator-default.html", "cpp/api/tensorstore.BitIterator.base.html", "cpp/api/tensorstore.BitIterator.difference_type.html", "cpp/api/tensorstore.BitIterator.iterator_category.html", "cpp/api/tensorstore.BitIterator.kBitsPerBlock.html", "cpp/api/tensorstore.BitIterator.offset.html", "cpp/api/tensorstore.BitIterator.operator-dereference.html", "cpp/api/tensorstore.BitIterator.operator-equal_to.html", "cpp/api/tensorstore.BitIterator.operator-minus-iterator.html", "cpp/api/tensorstore.BitIterator.operator-minus-offset.html", "cpp/api/tensorstore.BitIterator.operator-plus.html", "cpp/api/tensorstore.BitIterator.operator-post_dec.html", "cpp/api/tensorstore.BitIterator.operator-post_inc.html", "cpp/api/tensorstore.BitIterator.operator-pre_dec.html", "cpp/api/tensorstore.BitIterator.operator-pre_inc.html", "cpp/api/tensorstore.BitIterator.operator-subscript.html", "cpp/api/tensorstore.BitIterator.pointer.html", "cpp/api/tensorstore.BitIterator.reference.html", "cpp/api/tensorstore.BitIterator.value_type.html", "cpp/api/tensorstore.BitRef.html", "cpp/api/tensorstore.BitRef.BitRef.html", "cpp/api/tensorstore.BitRef.block_type.html", "cpp/api/tensorstore.BitRef.kBitsPerBlock.html", "cpp/api/tensorstore.BitRef.operator-assign-BitRef.html", "cpp/api/tensorstore.BitRef.operator-assign-bool.html", "cpp/api/tensorstore.BitRef.operator-cast.html", "cpp/api/tensorstore.BitRef.swap.html", "cpp/api/tensorstore.BitRef.value_type.html", "cpp/api/tensorstore.Box.html", "cpp/api/tensorstore.Box.Box.html", "cpp/api/tensorstore.Box.Box-convert.html", "cpp/api/tensorstore.Box.Box-default.html", "cpp/api/tensorstore.Box.Box-origin-shape.html", "cpp/api/tensorstore.Box.Box-rank.html", "cpp/api/tensorstore.Box.Box-rank-origin-shape.html", "cpp/api/tensorstore.Box.Box-shape.html", "cpp/api/tensorstore.Box.Box-unchecked.html", "cpp/api/tensorstore.Box.Fill.html", "cpp/api/tensorstore.Box.RankType.html", "cpp/api/tensorstore.Box.is_empty.html", "cpp/api/tensorstore.Box.num_elements.html", "cpp/api/tensorstore.Box.operator-assign.html", "cpp/api/tensorstore.Box.operator-call.html", "cpp/api/tensorstore.Box.operator-shift_left.html", "cpp/api/tensorstore.Box.operator-subscript.html", "cpp/api/tensorstore.Box.origin.html", "cpp/api/tensorstore.Box.rank.html", "cpp/api/tensorstore.Box.set_rank.html", "cpp/api/tensorstore.Box.shape.html", "cpp/api/tensorstore.Box.static_rank.html", "cpp/api/tensorstore.BoxView.html", "cpp/api/tensorstore.BoxView.BoxView-convert.html", "cpp/api/tensorstore.BoxView.BoxView-default.html", "cpp/api/tensorstore.BoxView.BoxView-origin-shape.html", "cpp/api/tensorstore.BoxView.BoxView-rank.html", "cpp/api/tensorstore.BoxView.BoxView-rank-origin-shape.html", "cpp/api/tensorstore.BoxView.BoxView-shape.html", "cpp/api/tensorstore.BoxView.BoxView-unchecked.html", "cpp/api/tensorstore.BoxView.DeepAssign.html", "cpp/api/tensorstore.BoxView.Fill.html", "cpp/api/tensorstore.BoxView.IndexIntervalType.html", "cpp/api/tensorstore.BoxView.IndexType.html", "cpp/api/tensorstore.BoxView.RankType.html", "cpp/api/tensorstore.BoxView.is_empty.html", "cpp/api/tensorstore.BoxView.num_elements.html", "cpp/api/tensorstore.BoxView.operator-assign.html", "cpp/api/tensorstore.BoxView.operator-call.html", "cpp/api/tensorstore.BoxView.operator-subscript.html", "cpp/api/tensorstore.BoxView.origin.html", "cpp/api/tensorstore.BoxView.rank.html", "cpp/api/tensorstore.BoxView.shape.html", "cpp/api/tensorstore.BoxView.static_rank.html", "cpp/api/tensorstore.BroadcastArray.html", "cpp/api/tensorstore.BroadcastStridedLayout.html", "cpp/api/tensorstore.ByteRange.html", "cpp/api/tensorstore.ByteRange.SatisfiesInvariants.html", "cpp/api/tensorstore.ByteRange.exclusive_max.html", "cpp/api/tensorstore.ByteRange.inclusive_min.html", "cpp/api/tensorstore.ByteRange.operator-equal_to.html", "cpp/api/tensorstore.ByteRange.operator-shift_left.html", "cpp/api/tensorstore.ByteRange.size.html", "cpp/api/tensorstore.ByteStridedPointer.html", "cpp/api/tensorstore.ByteStridedPointer.ByteStridedPointer-convert.html", "cpp/api/tensorstore.ByteStridedPointer.ByteStridedPointer-default.html", "cpp/api/tensorstore.ByteStridedPointer.ByteStridedPointer-raw.html", "cpp/api/tensorstore.ByteStridedPointer.alignment.html", "cpp/api/tensorstore.ByteStridedPointer.difference_type.html", "cpp/api/tensorstore.ByteStridedPointer.element_type.html", "cpp/api/tensorstore.ByteStridedPointer.get.html", "cpp/api/tensorstore.ByteStridedPointer.operator-arrow.html", "cpp/api/tensorstore.ByteStridedPointer.operator-cast.html", "cpp/api/tensorstore.ByteStridedPointer.operator-dereference.html", "cpp/api/tensorstore.ByteStridedPointer.operator-minus-byte_offset.html", "cpp/api/tensorstore.ByteStridedPointer.operator-minus-pointer.html", "cpp/api/tensorstore.ByteStridedPointer.operator-minus_assign.html", "cpp/api/tensorstore.ByteStridedPointer.operator-plus.html", "cpp/api/tensorstore.ByteStridedPointer.operator-plus_assign.html", "cpp/api/tensorstore.ByteStridedPointer.operator-subscript.html", "cpp/api/tensorstore.CanCopyTensorStoreToTensorStore.html", "cpp/api/tensorstore.CanReadTensorstoreToArray.html", "cpp/api/tensorstore.CanWriteArrayToTensorStore.html", "cpp/api/tensorstore.CanonicalElementType.html", "cpp/api/tensorstore.Cast-Spec.html", "cpp/api/tensorstore.Cast-TensorStore.html", "cpp/api/tensorstore.CastChecking.html", "cpp/api/tensorstore.ChainResult.html", "cpp/api/tensorstore.CheckContains.html", "cpp/api/tensorstore.ChunkLayout.html", "cpp/api/tensorstore.ChunkLayout.ApplyIndexTransform-expr.html", "cpp/api/tensorstore.ChunkLayout.ApplyIndexTransform-transform.html", "cpp/api/tensorstore.ChunkLayout.ApplyInverseIndexTransform.html", "cpp/api/tensorstore.ChunkLayout.Chunk.html", "cpp/api/tensorstore.ChunkLayout.ChunkAspectRatio.html", "cpp/api/tensorstore.ChunkLayout.ChunkAspectRatioBase.html", "cpp/api/tensorstore.ChunkLayout.ChunkAspectRatioFor.html", "cpp/api/tensorstore.ChunkLayout.ChunkElements.html", "cpp/api/tensorstore.ChunkLayout.ChunkElementsBase.html", "cpp/api/tensorstore.ChunkLayout.ChunkElementsFor.html", "cpp/api/tensorstore.ChunkLayout.ChunkShape.html", "cpp/api/tensorstore.ChunkLayout.ChunkShapeBase.html", "cpp/api/tensorstore.ChunkLayout.ChunkShapeFor.html", "cpp/api/tensorstore.ChunkLayout.CodecChunkElements.html", "cpp/api/tensorstore.ChunkLayout.CodecChunkShape.html", "cpp/api/tensorstore.ChunkLayout.Finalize.html", "cpp/api/tensorstore.ChunkLayout.GetChunkTemplate.html", "cpp/api/tensorstore.ChunkLayout.Grid.html", "cpp/api/tensorstore.ChunkLayout.Grid.AspectRatio.html", "cpp/api/tensorstore.ChunkLayout.Grid.Elements.html", "cpp/api/tensorstore.ChunkLayout.Grid.Set-GridView.html", "cpp/api/tensorstore.ChunkLayout.Grid.Shape.html", "cpp/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.Grid.elements.html", "cpp/api/tensorstore.ChunkLayout.Grid.operator-assign.html", "cpp/api/tensorstore.ChunkLayout.Grid.operator-equal_to.html", "cpp/api/tensorstore.ChunkLayout.Grid.rank.html", "cpp/api/tensorstore.ChunkLayout.Grid.shape.html", "cpp/api/tensorstore.ChunkLayout.GridOrigin.html", "cpp/api/tensorstore.ChunkLayout.GridView.html", "cpp/api/tensorstore.ChunkLayout.GridView.GridView-components.html", "cpp/api/tensorstore.ChunkLayout.GridView.GridView-default.html", "cpp/api/tensorstore.ChunkLayout.GridView.GridView-grid.html", "cpp/api/tensorstore.ChunkLayout.GridView.aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.GridView.elements.html", "cpp/api/tensorstore.ChunkLayout.GridView.shape.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor-kUnspecifiedUsage.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.AspectRatio.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.Elements.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.GridViewFor.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.Shape.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.elements.html", "cpp/api/tensorstore.ChunkLayout.GridViewFor.shape.html", "cpp/api/tensorstore.ChunkLayout.HasHardConstraints.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.InnerOrder-default.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.InnerOrder-order.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.hard_constraint.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.operator-equal_to.html", "cpp/api/tensorstore.ChunkLayout.InnerOrder.valid.html", "cpp/api/tensorstore.ChunkLayout.IsOption.html", "cpp/api/tensorstore.ChunkLayout.ParseUsage.html", "cpp/api/tensorstore.ChunkLayout.ReadChunkElements.html", "cpp/api/tensorstore.ChunkLayout.ReadChunkShape.html", "cpp/api/tensorstore.ChunkLayout.Set-ChunkAspectRatioFor.html", "cpp/api/tensorstore.ChunkLayout.Set-ChunkElementsFor.html", "cpp/api/tensorstore.ChunkLayout.Set-ChunkLayout.html", "cpp/api/tensorstore.ChunkLayout.Set-ChunkShapeFor.html", "cpp/api/tensorstore.ChunkLayout.Set-GridOrigin.html", "cpp/api/tensorstore.ChunkLayout.Set-GridViewFor.html", "cpp/api/tensorstore.ChunkLayout.Set-InnerOrder.html", "cpp/api/tensorstore.ChunkLayout.Set-RankConstraint.html", "cpp/api/tensorstore.ChunkLayout.Usage.html", "cpp/api/tensorstore.ChunkLayout.WriteChunkElements.html", "cpp/api/tensorstore.ChunkLayout.WriteChunkShape.html", "cpp/api/tensorstore.ChunkLayout.codec_chunk.html", "cpp/api/tensorstore.ChunkLayout.codec_chunk_aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.codec_chunk_elements.html", "cpp/api/tensorstore.ChunkLayout.codec_chunk_shape.html", "cpp/api/tensorstore.ChunkLayout.grid_origin.html", "cpp/api/tensorstore.ChunkLayout.inner_order.html", "cpp/api/tensorstore.ChunkLayout.kUnspecifiedUsage.html", "cpp/api/tensorstore.ChunkLayout.operator-bitwise_or.html", "cpp/api/tensorstore.ChunkLayout.operator-shift_left.html", "cpp/api/tensorstore.ChunkLayout.operator-subscript.html", "cpp/api/tensorstore.ChunkLayout.rank.html", "cpp/api/tensorstore.ChunkLayout.read_chunk.html", "cpp/api/tensorstore.ChunkLayout.read_chunk_aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.read_chunk_elements.html", "cpp/api/tensorstore.ChunkLayout.read_chunk_shape.html", "cpp/api/tensorstore.ChunkLayout.write_chunk.html", "cpp/api/tensorstore.ChunkLayout.write_chunk_aspect_ratio.html", "cpp/api/tensorstore.ChunkLayout.write_chunk_elements.html", "cpp/api/tensorstore.ChunkLayout.write_chunk_shape.html", "cpp/api/tensorstore.CodecSpec.html", "cpp/api/tensorstore.CodecSpec.CodecSpec-default.html", "cpp/api/tensorstore.CodecSpec.Merge.html", "cpp/api/tensorstore.CodecSpec.MergeFrom.html", "cpp/api/tensorstore.CodecSpec.ToJsonOptions.html", "cpp/api/tensorstore.CodecSpec.operator-equal_to.html", "cpp/api/tensorstore.CodecSpec.operator-shift_left.html", "cpp/api/tensorstore.CodecSpec.valid.html", "cpp/api/tensorstore.ComposeLayoutAndTransform.html", "cpp/api/tensorstore.ComposeOptionalTransforms.html", "cpp/api/tensorstore.ComposeTransforms.html", "cpp/api/tensorstore.ComputeStridedSliceMap.html", "cpp/api/tensorstore.ComputeStrides.html", "cpp/api/tensorstore.ConstDataTypeCast.html", "cpp/api/tensorstore.ConstrainIndexDomain.html", "cpp/api/tensorstore.ContainerKind.html", "cpp/api/tensorstore.Contains-KeyRange-KeyRange.html", "cpp/api/tensorstore.Contains-KeyRange-string.html", "cpp/api/tensorstore.Contains-box-box.html", "cpp/api/tensorstore.Contains-box-indices.html", "cpp/api/tensorstore.Contains-interval-index.html", "cpp/api/tensorstore.Contains-interval-interval.html", "cpp/api/tensorstore.ContainsOrUnbounded.html", "cpp/api/tensorstore.ContainsPartial-box-indices.html", "cpp/api/tensorstore.ContainsPrefix-KeyRange-string.html", "cpp/api/tensorstore.Context.html", "cpp/api/tensorstore.Context.Context-null.html", "cpp/api/tensorstore.Context.Context-spec-parent.html", "cpp/api/tensorstore.Context.Default.html", "cpp/api/tensorstore.Context.FromJson.html", "cpp/api/tensorstore.Context.GetResource.html", "cpp/api/tensorstore.Context.Resource.html", "cpp/api/tensorstore.Context.Resource.BindContext.html", "cpp/api/tensorstore.Context.Resource.DefaultSpec.html", "cpp/api/tensorstore.Context.Resource.FromJson.html", "cpp/api/tensorstore.Context.Resource.Resource.html", "cpp/api/tensorstore.Context.Resource.StripContext.html", "cpp/api/tensorstore.Context.Resource.ToJson.html", "cpp/api/tensorstore.Context.Resource.ToJsonOptions.html", "cpp/api/tensorstore.Context.Resource.get.html", "cpp/api/tensorstore.Context.Resource.has_resource.html", "cpp/api/tensorstore.Context.Resource.operator-equal_to.html", "cpp/api/tensorstore.Context.Resource.valid.html", "cpp/api/tensorstore.Context.Spec.html", "cpp/api/tensorstore.Context.Spec.Spec.html", "cpp/api/tensorstore.Context.ToJsonOptions.html", "cpp/api/tensorstore.Context.operator-cast-bool.html", "cpp/api/tensorstore.Context.operator-equal_to.html", "cpp/api/tensorstore.Context.parent.html", "cpp/api/tensorstore.Context.spec.html", "cpp/api/tensorstore.ContextBindingMode.html", "cpp/api/tensorstore.ContextBindingState.html", "cpp/api/tensorstore.ContiguousLayoutOrder.html", "cpp/api/tensorstore.ContiguousLayoutPermutation.html", "cpp/api/tensorstore.ContiguousLayoutPermutation.ContiguousLayoutPermutation.html", "cpp/api/tensorstore.ContiguousLayoutPermutation.ContiguousLayoutPermutation-convert.html", "cpp/api/tensorstore.ContiguousLayoutPermutation.ContiguousLayoutPermutation-span.html", "cpp/api/tensorstore.ConvertToContiguousLayoutPermutation.html", "cpp/api/tensorstore.Copy-TensorStore-TensorStore.html", "cpp/api/tensorstore.CopyArray.html", "cpp/api/tensorstore.CopyConvertedArray.html", "cpp/api/tensorstore.CopyOptions.html", "cpp/api/tensorstore.CopyOptions.alignment_options.html", "cpp/api/tensorstore.CopyOptions.batch.html", "cpp/api/tensorstore.CopyOptions.progress_function.html", "cpp/api/tensorstore.CopyOptions.source_data_reference_restriction.html", "cpp/api/tensorstore.CopyProgress.html", "cpp/api/tensorstore.CopyProgress.committed_elements.html", "cpp/api/tensorstore.CopyProgress.copied_elements.html", "cpp/api/tensorstore.CopyProgress.operator-equal_to.html", "cpp/api/tensorstore.CopyProgress.operator-shift_left.html", "cpp/api/tensorstore.CopyProgress.read_elements.html", "cpp/api/tensorstore.CopyProgress.total_elements.html", "cpp/api/tensorstore.CopyProgressFunction.html", "cpp/api/tensorstore.CopyProgressFunction.Function.html", "cpp/api/tensorstore.CopyTransformedArray.html", "cpp/api/tensorstore.DataType.html", "cpp/api/tensorstore.DataType.AbslHashValue.html", "cpp/api/tensorstore.DataType.DataType.html", "cpp/api/tensorstore.DataType.alignment.html", "cpp/api/tensorstore.DataType.name.html", "cpp/api/tensorstore.DataType.operator-equal_to.html", "cpp/api/tensorstore.DataType.operator-shift_left.html", "cpp/api/tensorstore.DataType.size.html", "cpp/api/tensorstore.DataType.valid.html", "cpp/api/tensorstore.DataTypeConversionFlags.html", "cpp/api/tensorstore.DestroyAndFree.html", "cpp/api/tensorstore.DimExpression.html", "cpp/api/tensorstore.DimExpression.AddNew.html", "cpp/api/tensorstore.DimExpression.BoxSlice.html", "cpp/api/tensorstore.DimExpression.ClosedInterval.html", "cpp/api/tensorstore.DimExpression.Diagonal.html", "cpp/api/tensorstore.DimExpression.HalfOpenInterval.html", "cpp/api/tensorstore.DimExpression.IndexArraySlice.html", "cpp/api/tensorstore.DimExpression.IndexSlice.html", "cpp/api/tensorstore.DimExpression.IndexVectorArraySlice.html", "cpp/api/tensorstore.DimExpression.Label.html", "cpp/api/tensorstore.DimExpression.MarkBoundsExplicit.html", "cpp/api/tensorstore.DimExpression.MoveTo.html", "cpp/api/tensorstore.DimExpression.MoveToBack.html", "cpp/api/tensorstore.DimExpression.MoveToFront.html", "cpp/api/tensorstore.DimExpression.OuterIndexArraySlice.html", "cpp/api/tensorstore.DimExpression.Resolve.html", "cpp/api/tensorstore.DimExpression.SizedInterval.html", "cpp/api/tensorstore.DimExpression.Stride.html", "cpp/api/tensorstore.DimExpression.TranslateBackwardBy.html", "cpp/api/tensorstore.DimExpression.TranslateBoxSlice.html", "cpp/api/tensorstore.DimExpression.TranslateBy.html", "cpp/api/tensorstore.DimExpression.TranslateClosedInterval.html", "cpp/api/tensorstore.DimExpression.TranslateHalfOpenInterval.html", "cpp/api/tensorstore.DimExpression.TranslateSizedInterval.html", "cpp/api/tensorstore.DimExpression.TranslateTo.html", "cpp/api/tensorstore.DimExpression.Transpose-consecutive.html", "cpp/api/tensorstore.DimExpression.Transpose-target_dimensions.html", "cpp/api/tensorstore.DimExpression.UnsafeMarkBoundsImplicit.html", "cpp/api/tensorstore.DimExpression.operator-call-domain.html", "cpp/api/tensorstore.DimExpression.operator-call-transform.html", "cpp/api/tensorstore.DimExpression.operator-call-transformable.html", "cpp/api/tensorstore.DimRange.html", "cpp/api/tensorstore.DimRangeSpec.html", "cpp/api/tensorstore.DimRangeSpec.exclusive_stop.html", "cpp/api/tensorstore.DimRangeSpec.inclusive_start.html", "cpp/api/tensorstore.DimRangeSpec.operator-equal_to.html", "cpp/api/tensorstore.DimRangeSpec.operator-shift_left.html", "cpp/api/tensorstore.DimRangeSpec.step.html", "cpp/api/tensorstore.DimensionIdentifier.html", "cpp/api/tensorstore.DimensionIdentifier.DimensionIdentifier-default.html", "cpp/api/tensorstore.DimensionIdentifier.DimensionIdentifier-index.html", "cpp/api/tensorstore.DimensionIdentifier.DimensionIdentifier-label.html", "cpp/api/tensorstore.DimensionIdentifier.index.html", "cpp/api/tensorstore.DimensionIdentifier.label.html", "cpp/api/tensorstore.DimensionIdentifier.operator-equal_to.html", "cpp/api/tensorstore.DimensionIdentifier.operator-shift_left.html", "cpp/api/tensorstore.DimensionIndex.html", "cpp/api/tensorstore.DimensionIndexBuffer.html", "cpp/api/tensorstore.DimensionSet.html", "cpp/api/tensorstore.DimensionUnitsToString.html", "cpp/api/tensorstore.DimensionUnitsVector.html", "cpp/api/tensorstore.Dims.html", "cpp/api/tensorstore.DividePositiveRoundOut.html", "cpp/api/tensorstore.DomainAlignmentOptions.html", "cpp/api/tensorstore.Downsample-Spec.html", "cpp/api/tensorstore.Downsample-TensorStore.html", "cpp/api/tensorstore.DownsampleMethod.html", "cpp/api/tensorstore.DynamicDimSpec.html", "cpp/api/tensorstore.DynamicDims.html", "cpp/api/tensorstore.DynamicRank.html", "cpp/api/tensorstore.DynamicRank.operator-call.html", "cpp/api/tensorstore.DynamicRank.operator-cast.html", "cpp/api/tensorstore.ElementInitialization.html", "cpp/api/tensorstore.ElementPointer.html", "cpp/api/tensorstore.ElementPointer.DataType.html", "cpp/api/tensorstore.ElementPointer.ElementPointer-default.html", "cpp/api/tensorstore.ElementPointer.ElementPointer-element_pointer.html", "cpp/api/tensorstore.ElementPointer.ElementPointer-pointer.html", "cpp/api/tensorstore.ElementPointer.ElementPointer-unchecked.html", "cpp/api/tensorstore.ElementPointer.ElementTag.html", "cpp/api/tensorstore.ElementPointer.Pointer.html", "cpp/api/tensorstore.ElementPointer.byte_strided_pointer.html", "cpp/api/tensorstore.ElementPointer.data.html", "cpp/api/tensorstore.ElementPointer.dtype.html", "cpp/api/tensorstore.ElementPointer.element_type.html", "cpp/api/tensorstore.ElementPointer.operator-assign.html", "cpp/api/tensorstore.ElementPointer.operator-cast.html", "cpp/api/tensorstore.ElementPointer.operator-equal_to-element_pointer.html", "cpp/api/tensorstore.ElementPointer.operator-equal_to-nullptr.html", "cpp/api/tensorstore.ElementPointer.pointer.html", "cpp/api/tensorstore.ElementTagTraits.html", "cpp/api/tensorstore.ElementTagTraits.Element.html", "cpp/api/tensorstore.ElementTagTraits.Pointer.html", "cpp/api/tensorstore.ElementTagTraits.rebind.html", "cpp/api/tensorstore.EqualityComparisonKind.html", "cpp/api/tensorstore.Executor.html", "cpp/api/tensorstore.ExecutorBoundFunction.html", "cpp/api/tensorstore.ExecutorBoundFunction.Executor.html", "cpp/api/tensorstore.ExecutorBoundFunction.Function.html", "cpp/api/tensorstore.ExecutorTask.html", "cpp/api/tensorstore.ExplicitIndexOr.html", "cpp/api/tensorstore.ExtractClosedStridedSlice.html", "cpp/api/tensorstore.ExtractHalfOpenStridedSlice.html", "cpp/api/tensorstore.ExtractSizedStridedSlice.html", "cpp/api/tensorstore.ExtractStridedSlice.html", "cpp/api/tensorstore.FiniteSubset.html", "cpp/api/tensorstore.FlatMapResultType.html", "cpp/api/tensorstore.FlatResult.html", "cpp/api/tensorstore.Float8e4m3fn.html", "cpp/api/tensorstore.Future.html", "cpp/api/tensorstore.Future.ExecuteWhenReady.html", "cpp/api/tensorstore.Future.Future-convert.html", "cpp/api/tensorstore.Future.Future-default.html", "cpp/api/tensorstore.Future.Future-result.html", "cpp/api/tensorstore.Future.Future-status.html", "cpp/api/tensorstore.Future.Future-unwrap.html", "cpp/api/tensorstore.Future.Future-value.html", "cpp/api/tensorstore.Future.IgnoreFuture.html", "cpp/api/tensorstore.Future.operator-assign.html", "cpp/api/tensorstore.Future.result.html", "cpp/api/tensorstore.Future.result_type.html", "cpp/api/tensorstore.Future.value.html", "cpp/api/tensorstore.Future.value_type.html", "cpp/api/tensorstore.FutureCallbackRegistration.html", "cpp/api/tensorstore.FutureCallbackRegistration.FutureCallbackRegistration.html", "cpp/api/tensorstore.FutureCallbackRegistration.Unregister.html", "cpp/api/tensorstore.FutureCallbackRegistration.UnregisterNonBlocking.html", "cpp/api/tensorstore.FutureCallbackRegistration.operator-call.html", "cpp/api/tensorstore.GetAffineTransformDomain.html", "cpp/api/tensorstore.GetAffineTransformDomain-OptionallyImplicitIndexInterval.html", "cpp/api/tensorstore.GetAffineTransformInverseDomain.html", "cpp/api/tensorstore.GetAffineTransformRange-IndexInterval.html", "cpp/api/tensorstore.GetAffineTransformRange-OptionallyImplicitIndexInterval.html", "cpp/api/tensorstore.GetArrayStorageStatisticsOptions.html", "cpp/api/tensorstore.GetBoxDomainOf-IndexDomain.html", "cpp/api/tensorstore.GetBoxDomainOf-IndexTransform.html", "cpp/api/tensorstore.GetBoxDomainOf-TransformedArray.html", "cpp/api/tensorstore.GetBoxDomainOf-array.html", "cpp/api/tensorstore.GetBoxDomainOf-box.html", "cpp/api/tensorstore.GetBoxDomainOf-strided_layout.html", "cpp/api/tensorstore.GetByteExtent-array.html", "cpp/api/tensorstore.GetByteExtent-strided_layout.html", "cpp/api/tensorstore.GetContiguousIndices.html", "cpp/api/tensorstore.GetContiguousOffset.html", "cpp/api/tensorstore.GetDataType.html", "cpp/api/tensorstore.GetDefaultRank.html", "cpp/api/tensorstore.GetOutputRange.html", "cpp/api/tensorstore.GetStaticOrDynamicExtent.html", "cpp/api/tensorstore.GetStatus-AnyFuture.html", "cpp/api/tensorstore.GetStatus-WriteFutures.html", "cpp/api/tensorstore.GetStatus-result.html", "cpp/api/tensorstore.GetStatus-status.html", "cpp/api/tensorstore.GetStorageStatistics.html", "cpp/api/tensorstore.GetSubLayoutView.html", "cpp/api/tensorstore.HasBoxDomain.html", "cpp/api/tensorstore.HaveSameSharedState.html", "cpp/api/tensorstore.Hull-IndexInterval.html", "cpp/api/tensorstore.Hull-OptionallyImplicitIndexInterval.html", "cpp/api/tensorstore.HullIndexDomains.html", "cpp/api/tensorstore.IdentityTransform-box.html", "cpp/api/tensorstore.IdentityTransform-domain.html", "cpp/api/tensorstore.IdentityTransform-labels.html", "cpp/api/tensorstore.IdentityTransform-rank.html", "cpp/api/tensorstore.IdentityTransform-shape.html", "cpp/api/tensorstore.IdentityTransformLike-array.html", "cpp/api/tensorstore.IdentityTransformLike-transform.html", "cpp/api/tensorstore.ImplicitOrEqual.html", "cpp/api/tensorstore.IncludeDefaults.html", "cpp/api/tensorstore.Index.html", "cpp/api/tensorstore.IndexDomain.html", "cpp/api/tensorstore.IndexDomain.ApplyIndexTransform.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-box.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-convert.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-default.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-labels.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-rank.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-shape.html", "cpp/api/tensorstore.IndexDomain.IndexDomain-unchecked.html", "cpp/api/tensorstore.IndexDomain.RankType.html", "cpp/api/tensorstore.IndexDomain.Transpose.html", "cpp/api/tensorstore.IndexDomain.Transpose-permutation.html", "cpp/api/tensorstore.IndexDomain.box.html", "cpp/api/tensorstore.IndexDomain.container_kind.html", "cpp/api/tensorstore.IndexDomain.implicit_lower_bounds.html", "cpp/api/tensorstore.IndexDomain.implicit_upper_bounds.html", "cpp/api/tensorstore.IndexDomain.labels.html", "cpp/api/tensorstore.IndexDomain.num_elements.html", "cpp/api/tensorstore.IndexDomain.operator-bitwise_or.html", "cpp/api/tensorstore.IndexDomain.operator-call-transform.html", "cpp/api/tensorstore.IndexDomain.operator-call-transformable.html", "cpp/api/tensorstore.IndexDomain.operator-equal_to.html", "cpp/api/tensorstore.IndexDomain.operator-subscript-dim.html", "cpp/api/tensorstore.IndexDomain.operator-subscript-dims.html", "cpp/api/tensorstore.IndexDomain.origin.html", "cpp/api/tensorstore.IndexDomain.rank.html", "cpp/api/tensorstore.IndexDomain.shape.html", "cpp/api/tensorstore.IndexDomain.static_rank.html", "cpp/api/tensorstore.IndexDomain.valid.html", "cpp/api/tensorstore.IndexDomainDimension.html", "cpp/api/tensorstore.IndexDomainDimension.IndexDomainDimension-convert.html", "cpp/api/tensorstore.IndexDomainDimension.IndexDomainDimension-default.html", "cpp/api/tensorstore.IndexDomainDimension.IndexDomainDimension-interval.html", "cpp/api/tensorstore.IndexDomainDimension.IndexDomainDimension-interval-label.html", "cpp/api/tensorstore.IndexDomainDimension.Label.html", "cpp/api/tensorstore.IndexDomainDimension.label.html", "cpp/api/tensorstore.IndexDomainDimension.operator-assign.html", "cpp/api/tensorstore.IndexDomainDimension.operator-equal_to.html", "cpp/api/tensorstore.IndexDomainDimension.optionally_implicit_interval.html", "cpp/api/tensorstore.IndexDomainView.html", "cpp/api/tensorstore.IndexInnerProduct.html", "cpp/api/tensorstore.IndexInterval.html", "cpp/api/tensorstore.IndexInterval.Closed.html", "cpp/api/tensorstore.IndexInterval.FiniteRange.html", "cpp/api/tensorstore.IndexInterval.HalfOpen.html", "cpp/api/tensorstore.IndexInterval.IndexInterval.html", "cpp/api/tensorstore.IndexInterval.Infinite.html", "cpp/api/tensorstore.IndexInterval.Sized.html", "cpp/api/tensorstore.IndexInterval.UncheckedClosed.html", "cpp/api/tensorstore.IndexInterval.UncheckedHalfOpen.html", "cpp/api/tensorstore.IndexInterval.UncheckedSized.html", "cpp/api/tensorstore.IndexInterval.ValidClosed.html", "cpp/api/tensorstore.IndexInterval.ValidHalfOpen.html", "cpp/api/tensorstore.IndexInterval.ValidSized.html", "cpp/api/tensorstore.IndexInterval.empty.html", "cpp/api/tensorstore.IndexInterval.exclusive_max.html", "cpp/api/tensorstore.IndexInterval.exclusive_min.html", "cpp/api/tensorstore.IndexInterval.inclusive_max.html", "cpp/api/tensorstore.IndexInterval.inclusive_min.html", "cpp/api/tensorstore.IndexInterval.operator-equal_to.html", "cpp/api/tensorstore.IndexInterval.operator-negate.html", "cpp/api/tensorstore.IndexInterval.operator-shift_left.html", "cpp/api/tensorstore.IndexInterval.size.html", "cpp/api/tensorstore.IndexIntervalRef.html", "cpp/api/tensorstore.IndexIntervalRef.UncheckedSized.html", "cpp/api/tensorstore.IndexIntervalRef.empty.html", "cpp/api/tensorstore.IndexIntervalRef.exclusive_max.html", "cpp/api/tensorstore.IndexIntervalRef.exclusive_min.html", "cpp/api/tensorstore.IndexIntervalRef.inclusive_max.html", "cpp/api/tensorstore.IndexIntervalRef.inclusive_min.html", "cpp/api/tensorstore.IndexIntervalRef.operator-assign.html", "cpp/api/tensorstore.IndexIntervalRef.operator-cast.html", "cpp/api/tensorstore.IndexIntervalRef.operator-equal_to.html", "cpp/api/tensorstore.IndexIntervalRef.operator-shift_left.html", "cpp/api/tensorstore.IndexIntervalRef.size.html", "cpp/api/tensorstore.IndexTransform.html", "cpp/api/tensorstore.IndexTransform.ApplyIndexTransform.html", "cpp/api/tensorstore.IndexTransform.IndexTransform-convert.html", "cpp/api/tensorstore.IndexTransform.IndexTransform-default.html", "cpp/api/tensorstore.IndexTransform.IndexTransform-unchecked.html", "cpp/api/tensorstore.IndexTransform.TransformIndices.html", "cpp/api/tensorstore.IndexTransform.Transpose.html", "cpp/api/tensorstore.IndexTransform.Transpose-permutation.html", "cpp/api/tensorstore.IndexTransform.TransposeOutput.html", "cpp/api/tensorstore.IndexTransform.TransposeOutput-permutation.html", "cpp/api/tensorstore.IndexTransform.container_kind.html", "cpp/api/tensorstore.IndexTransform.implicit_lower_bounds.html", "cpp/api/tensorstore.IndexTransform.implicit_upper_bounds.html", "cpp/api/tensorstore.IndexTransform.input_domain.html", "cpp/api/tensorstore.IndexTransform.input_labels.html", "cpp/api/tensorstore.IndexTransform.input_origin.html", "cpp/api/tensorstore.IndexTransform.input_rank.html", "cpp/api/tensorstore.IndexTransform.input_shape.html", "cpp/api/tensorstore.IndexTransform.operator-assign.html", "cpp/api/tensorstore.IndexTransform.operator-bitwise_or.html", "cpp/api/tensorstore.IndexTransform.operator-call-compose.html", "cpp/api/tensorstore.IndexTransform.operator-call-transformable.html", "cpp/api/tensorstore.IndexTransform.operator-cast.html", "cpp/api/tensorstore.IndexTransform.operator-equal_to.html", "cpp/api/tensorstore.IndexTransform.operator-shift_left.html", "cpp/api/tensorstore.IndexTransform.output_index_map.html", "cpp/api/tensorstore.IndexTransform.output_index_maps.html", "cpp/api/tensorstore.IndexTransform.output_rank.html", "cpp/api/tensorstore.IndexTransform.static_output_rank.html", "cpp/api/tensorstore.IndexTransform.static_rank.html", "cpp/api/tensorstore.IndexTransformView.html", "cpp/api/tensorstore.InitializeArray.html", "cpp/api/tensorstore.InitializeContiguousLayout-domain-layout.html", "cpp/api/tensorstore.InitializeContiguousLayout-layout.html", "cpp/api/tensorstore.InitializeContiguousLayout-shape-layout.html", "cpp/api/tensorstore.InlineExecutor.html", "cpp/api/tensorstore.InlineRank.html", "cpp/api/tensorstore.InlineRankLimit.html", "cpp/api/tensorstore.Int4Padded.html", "cpp/api/tensorstore.Int4Padded.Int4Padded-convert.html", "cpp/api/tensorstore.Int4Padded.Int4Padded-zero.html", "cpp/api/tensorstore.Int4Padded.operator-assign-bool.html", "cpp/api/tensorstore.Int4Padded.operator-assign-integer.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_and-binary.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_and_assign.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_or-binary.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_or_assign.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_xor-binary.html", "cpp/api/tensorstore.Int4Padded.operator-bitwise_xor_assign.html", "cpp/api/tensorstore.Int4Padded.operator-cast.html", "cpp/api/tensorstore.Int4Padded.operator-complement-negate.html", "cpp/api/tensorstore.Int4Padded.operator-divides.html", "cpp/api/tensorstore.Int4Padded.operator-divides_assign.html", "cpp/api/tensorstore.Int4Padded.operator-minus-binary.html", "cpp/api/tensorstore.Int4Padded.operator-minus_assign.html", "cpp/api/tensorstore.Int4Padded.operator-modulus.html", "cpp/api/tensorstore.Int4Padded.operator-modulus_assign.html", "cpp/api/tensorstore.Int4Padded.operator-multiplies.html", "cpp/api/tensorstore.Int4Padded.operator-multiplies_assign.html", "cpp/api/tensorstore.Int4Padded.operator-negate-negate.html", "cpp/api/tensorstore.Int4Padded.operator-plus-binary.html", "cpp/api/tensorstore.Int4Padded.operator-plus_assign.html", "cpp/api/tensorstore.Int4Padded.operator-post_dec-post.html", "cpp/api/tensorstore.Int4Padded.operator-post_inc-post.html", "cpp/api/tensorstore.Int4Padded.operator-pre_dec-pre.html", "cpp/api/tensorstore.Int4Padded.operator-pre_inc-pre.html", "cpp/api/tensorstore.Int4Padded.operator-shift_left-binary.html", "cpp/api/tensorstore.Int4Padded.operator-shift_left_assign.html", "cpp/api/tensorstore.Int4Padded.operator-shift_right-binary.html", "cpp/api/tensorstore.Int4Padded.operator-shift_right_assign.html", "cpp/api/tensorstore.Int4Padded.operator-unary_plus-unary.html", "cpp/api/tensorstore.Intersect-IndexInterval.html", "cpp/api/tensorstore.Intersect-KeyRange.html", "cpp/api/tensorstore.Intersect-OptionallyImplicitIndexInterval.html", "cpp/api/tensorstore.IntersectIndexDomains.html", "cpp/api/tensorstore.IntersectPreferringExplicit.html", "cpp/api/tensorstore.Intersects-KeyRange.html", "cpp/api/tensorstore.IntersectsPrefix-KeyRange-string.html", "cpp/api/tensorstore.IntervalForm.html", "cpp/api/tensorstore.InverseTransform.html", "cpp/api/tensorstore.InvertPermutation.html", "cpp/api/tensorstore.IsArray.html", "cpp/api/tensorstore.IsArrayBasePointerConvertible.html", "cpp/api/tensorstore.IsArrayExplicitlyConvertible.html", "cpp/api/tensorstore.IsArrayOriginKindConvertible.html", "cpp/api/tensorstore.IsBoxLike.html", "cpp/api/tensorstore.IsBoxLikeExplicitlyConvertibleToRank.html", "cpp/api/tensorstore.IsBoxLikeImplicitlyConvertibleToRank.html", "cpp/api/tensorstore.IsBroadcastScalar-array.html", "cpp/api/tensorstore.IsBroadcastScalar-strided_layout.html", "cpp/api/tensorstore.IsCompatibleFullIndexPack.html", "cpp/api/tensorstore.IsCompatibleFullIndexVector.html", "cpp/api/tensorstore.IsCompatibleOptionSequence.html", "cpp/api/tensorstore.IsCompatiblePartialIndexVector.html", "cpp/api/tensorstore.IsContiguousLayout-array.html", "cpp/api/tensorstore.IsContiguousLayout-strided_layout.html", "cpp/api/tensorstore.IsContiguousLayoutOrder.html", "cpp/api/tensorstore.IsDataTypeConversionSupported.html", "cpp/api/tensorstore.IsElementPointer.html", "cpp/api/tensorstore.IsElementPointerCastConvertible.html", "cpp/api/tensorstore.IsElementTag.html", "cpp/api/tensorstore.IsElementType.html", "cpp/api/tensorstore.IsElementTypeExplicitlyConvertible.html", "cpp/api/tensorstore.IsElementTypeImplicitlyConvertible.html", "cpp/api/tensorstore.IsElementTypeOnlyExplicitlyConvertible.html", "cpp/api/tensorstore.IsFinite.html", "cpp/api/tensorstore.IsFinite-box.html", "cpp/api/tensorstore.IsFinite-interval.html", "cpp/api/tensorstore.IsFiniteIndex.html", "cpp/api/tensorstore.IsFuture.html", "cpp/api/tensorstore.IsFutureConvertible.html", "cpp/api/tensorstore.IsImplicitlyCompatibleFullIndexVector.html", "cpp/api/tensorstore.IsIndexArray.html", "cpp/api/tensorstore.IsIndexConvertibleVector.html", "cpp/api/tensorstore.IsIndexDomain.html", "cpp/api/tensorstore.IsIndexTransform.html", "cpp/api/tensorstore.IsIndexVector.html", "cpp/api/tensorstore.IsIndexVectorOrScalar.html", "cpp/api/tensorstore.IsIndexVectorOrScalar.extent.html", "cpp/api/tensorstore.IsIndexVectorOrScalar.normalized_type.html", "cpp/api/tensorstore.IsIndexVectorOrScalar.value.html", "cpp/api/tensorstore.IsModeExplicitlyConvertible-ReadWriteMode.html", "cpp/api/tensorstore.IsMutableBoxLike.html", "cpp/api/tensorstore.IsMutableIndexVector.html", "cpp/api/tensorstore.IsNonVoidArrayBasePointer.html", "cpp/api/tensorstore.IsPossiblySameDataType.html", "cpp/api/tensorstore.IsResult.html", "cpp/api/tensorstore.IsShared.html", "cpp/api/tensorstore.IsSharedArrayLike.html", "cpp/api/tensorstore.IsStaticCastConstructible.html", "cpp/api/tensorstore.IsStridedLayout.html", "cpp/api/tensorstore.IsTransformedArray.html", "cpp/api/tensorstore.IsTransformedArrayLike.html", "cpp/api/tensorstore.IsValidIndex.html", "cpp/api/tensorstore.IsValidInlineRank.html", "cpp/api/tensorstore.IsValidPermutation.html", "cpp/api/tensorstore.IsValidRank.html", "cpp/api/tensorstore.IterateOverArrays.html", "cpp/api/tensorstore.IterateOverTransformedArrays.html", "cpp/api/tensorstore.IterationConstraints.html", "cpp/api/tensorstore.JsonSerializationOptions.html", "cpp/api/tensorstore.JsonSerializationOptions.IsOption.html", "cpp/api/tensorstore.JsonSerializationOptions.JsonSerializationOptions.html", "cpp/api/tensorstore.JsonSerializationOptions.Set.html", "cpp/api/tensorstore.JsonSerializationOptions.Set-DataType.html", "cpp/api/tensorstore.JsonSerializationOptions.Set-IncludeDefaults.html", "cpp/api/tensorstore.JsonSerializationOptions.Set-RankConstraint.html", "cpp/api/tensorstore.JsonSerializationOptions.dtype.html", "cpp/api/tensorstore.JsonSerializationOptions.operator-cast-IncludeDefaults.html", "cpp/api/tensorstore.JsonSerializationOptions.rank.html", "cpp/api/tensorstore.KeyRange.html", "cpp/api/tensorstore.KeyRange.AddPrefix.html", "cpp/api/tensorstore.KeyRange.CompareExclusiveMax.html", "cpp/api/tensorstore.KeyRange.CompareKeyAndExclusiveMax.html", "cpp/api/tensorstore.KeyRange.EmptyRange.html", "cpp/api/tensorstore.KeyRange.KeyRange-default.html", "cpp/api/tensorstore.KeyRange.KeyRange-inclusive_min-exclusive_max.html", "cpp/api/tensorstore.KeyRange.Prefix.html", "cpp/api/tensorstore.KeyRange.PrefixExclusiveMax.html", "cpp/api/tensorstore.KeyRange.RemovePrefix.html", "cpp/api/tensorstore.KeyRange.RemovePrefixLength.html", "cpp/api/tensorstore.KeyRange.Singleton.html", "cpp/api/tensorstore.KeyRange.Successor.html", "cpp/api/tensorstore.KeyRange.empty.html", "cpp/api/tensorstore.KeyRange.exclusive_max.html", "cpp/api/tensorstore.KeyRange.full.html", "cpp/api/tensorstore.KeyRange.inclusive_min.html", "cpp/api/tensorstore.KeyRange.is_non_empty_prefix.html", "cpp/api/tensorstore.KeyRange.is_singleton.html", "cpp/api/tensorstore.KeyRange.operator-equal_to.html", "cpp/api/tensorstore.KeyRange.operator-shift_left.html", "cpp/api/tensorstore.KvStore.html", "cpp/api/tensorstore.LayoutOrderConstraint.html", "cpp/api/tensorstore.LayoutOrderConstraint.operator-cast.html", "cpp/api/tensorstore.LayoutOrderConstraint.order.html", "cpp/api/tensorstore.Link.html", "cpp/api/tensorstore.LinkError.html", "cpp/api/tensorstore.LinkResult.html", "cpp/api/tensorstore.LinkValue.html", "cpp/api/tensorstore.LongestPrefix-KeyRange.html", "cpp/api/tensorstore.MakeArray-array.html", "cpp/api/tensorstore.MakeArrayView-array.html", "cpp/api/tensorstore.MakeArrayView-span.html", "cpp/api/tensorstore.MakeCopy.html", "cpp/api/tensorstore.MakeCopy-cast.html", "cpp/api/tensorstore.MakeCopy-copy.html", "cpp/api/tensorstore.MakeCopy-transformed_array.html", "cpp/api/tensorstore.MakeOffsetArray-array.html", "cpp/api/tensorstore.MakeOffsetArrayView-array.html", "cpp/api/tensorstore.MakeReadyFuture.html", "cpp/api/tensorstore.MakeResult-status.html", "cpp/api/tensorstore.MakeResult-value.html", "cpp/api/tensorstore.MakeScalarArray.html", "cpp/api/tensorstore.MakeScalarArrayView.html", "cpp/api/tensorstore.MakeTransformedArray.html", "cpp/api/tensorstore.MapFuture.html", "cpp/api/tensorstore.MapFutureError.html", "cpp/api/tensorstore.MapFutureValue.html", "cpp/api/tensorstore.MapResult.html", "cpp/api/tensorstore.Materialize.html", "cpp/api/tensorstore.MaybeAnnotateStatus.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.MaybeHardConstraintIndex.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.hard_constraint.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.operator-cast.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.operator-equal_to.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.valid.html", "cpp/api/tensorstore.MaybeHardConstraintIndex.value.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.MaybeHardConstraintSpan-default.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.MaybeHardConstraintSpan-span-hard_constraint.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.hard_constraint.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.operator-equal_to.html", "cpp/api/tensorstore.MaybeHardConstraintSpan.valid.html", "cpp/api/tensorstore.MergeDimensionLabels.html", "cpp/api/tensorstore.MergeDimensionUnits.html", "cpp/api/tensorstore.MergeIndexDomains.html", "cpp/api/tensorstore.MergeOptionallyImplicitIndexIntervals.html", "cpp/api/tensorstore.MinimalSpec.html", "cpp/api/tensorstore.ModeCast-compile_time.html", "cpp/api/tensorstore.ModeCast-runtime.html", "cpp/api/tensorstore.MustAllocateConstraint.html", "cpp/api/tensorstore.MutableBoxView.html", "cpp/api/tensorstore.NormalizeDimRangeSpec.html", "cpp/api/tensorstore.NormalizeDimensionIdentifier.html", "cpp/api/tensorstore.NormalizeDimensionIndex.html", "cpp/api/tensorstore.NormalizeDimensionLabel.html", "cpp/api/tensorstore.NormalizeDynamicDimSpec.html", "cpp/api/tensorstore.NormalizeDynamicDimSpecs.html", "cpp/api/tensorstore.OffsetArrayView.html", "cpp/api/tensorstore.Open.html", "cpp/api/tensorstore.OpenMode.html", "cpp/api/tensorstore.OpenOptions.html", "cpp/api/tensorstore.OptionalByteRangeRequest.html", "cpp/api/tensorstore.OptionalByteRangeRequest.AsByteRange.html", "cpp/api/tensorstore.OptionalByteRangeRequest.IsFull.html", "cpp/api/tensorstore.OptionalByteRangeRequest.IsRange.html", "cpp/api/tensorstore.OptionalByteRangeRequest.IsStat.html", "cpp/api/tensorstore.OptionalByteRangeRequest.IsSuffix.html", "cpp/api/tensorstore.OptionalByteRangeRequest.IsSuffixLength.html", "cpp/api/tensorstore.OptionalByteRangeRequest.OptionalByteRangeRequest-ByteRange.html", "cpp/api/tensorstore.OptionalByteRangeRequest.OptionalByteRangeRequest-full.html", "cpp/api/tensorstore.OptionalByteRangeRequest.OptionalByteRangeRequest-inclusive_min-exclusive_max.html", "cpp/api/tensorstore.OptionalByteRangeRequest.Range.html", "cpp/api/tensorstore.OptionalByteRangeRequest.SatisfiesInvariants.html", "cpp/api/tensorstore.OptionalByteRangeRequest.Stat.html", "cpp/api/tensorstore.OptionalByteRangeRequest.Suffix.html", "cpp/api/tensorstore.OptionalByteRangeRequest.SuffixLength.html", "cpp/api/tensorstore.OptionalByteRangeRequest.Validate.html", "cpp/api/tensorstore.OptionalByteRangeRequest.exclusive_max.html", "cpp/api/tensorstore.OptionalByteRangeRequest.inclusive_min.html", "cpp/api/tensorstore.OptionalByteRangeRequest.operator-equal_to.html", "cpp/api/tensorstore.OptionalByteRangeRequest.operator-shift_left.html", "cpp/api/tensorstore.OptionalByteRangeRequest.size.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.OptionallyImplicitIndexInterval-default.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.OptionallyImplicitIndexInterval-interval-implicit.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.effective_interval.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.implicit_lower.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.implicit_upper.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.interval.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.operator-equal_to.html", "cpp/api/tensorstore.OptionallyImplicitIndexInterval.operator-shift_left.html", "cpp/api/tensorstore.OutputIndexMapIterator.html", "cpp/api/tensorstore.OutputIndexMapIterator.OutputIndexMapIterator.html", "cpp/api/tensorstore.OutputIndexMapIterator.difference_type.html", "cpp/api/tensorstore.OutputIndexMapIterator.iterator_category.html", "cpp/api/tensorstore.OutputIndexMapIterator.pointer.html", "cpp/api/tensorstore.OutputIndexMapIterator.value_type.html", "cpp/api/tensorstore.OutputIndexMapRange.html", "cpp/api/tensorstore.OutputIndexMapRange.OutputIndexMapRange-convert.html", "cpp/api/tensorstore.OutputIndexMapRange.OutputIndexMapRange-default.html", "cpp/api/tensorstore.OutputIndexMapRange.OutputIndexMapRange-transform.html", "cpp/api/tensorstore.OutputIndexMapRange.begin.html", "cpp/api/tensorstore.OutputIndexMapRange.difference_type.html", "cpp/api/tensorstore.OutputIndexMapRange.empty.html", "cpp/api/tensorstore.OutputIndexMapRange.extent.html", "cpp/api/tensorstore.OutputIndexMapRange.input_rank.html", "cpp/api/tensorstore.OutputIndexMapRange.iterator.html", "cpp/api/tensorstore.OutputIndexMapRange.operator-subscript.html", "cpp/api/tensorstore.OutputIndexMapRange.size.html", "cpp/api/tensorstore.OutputIndexMapRange.value_type.html", "cpp/api/tensorstore.OutputIndexMapRef.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.array_ref.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.byte_strides.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.element_pointer.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.index_range.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.layout.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.rank.html", "cpp/api/tensorstore.OutputIndexMapRef.IndexArrayView.shared_array_ref.html", "cpp/api/tensorstore.OutputIndexMapRef.OutputIndexMapRef.html", "cpp/api/tensorstore.OutputIndexMapRef.index_array.html", "cpp/api/tensorstore.OutputIndexMapRef.input_dimension.html", "cpp/api/tensorstore.OutputIndexMapRef.input_rank.html", "cpp/api/tensorstore.OutputIndexMapRef.method.html", "cpp/api/tensorstore.OutputIndexMapRef.offset.html", "cpp/api/tensorstore.OutputIndexMapRef.operator-assign.html", "cpp/api/tensorstore.OutputIndexMapRef.stride.html", "cpp/api/tensorstore.OutputIndexMethod.html", "cpp/api/tensorstore.PermutationMatchesOrder.html", "cpp/api/tensorstore.PipelineResultType.html", "cpp/api/tensorstore.PointerElementTag.html", "cpp/api/tensorstore.ProductOfExtents.html", "cpp/api/tensorstore.Promise.html", "cpp/api/tensorstore.Promise.ExecuteWhenForced.html", "cpp/api/tensorstore.Promise.ExecuteWhenNotNeeded.html", "cpp/api/tensorstore.Promise.Promise-convert.html", "cpp/api/tensorstore.Promise.Promise-default.html", "cpp/api/tensorstore.Promise.SetReady.html", "cpp/api/tensorstore.Promise.SetResult.html", "cpp/api/tensorstore.Promise.future.html", "cpp/api/tensorstore.Promise.null.html", "cpp/api/tensorstore.Promise.operator-assign-convert.html", "cpp/api/tensorstore.Promise.raw_result.html", "cpp/api/tensorstore.Promise.ready.html", "cpp/api/tensorstore.Promise.reset.html", "cpp/api/tensorstore.Promise.result_needed.html", "cpp/api/tensorstore.Promise.result_type.html", "cpp/api/tensorstore.Promise.value_type.html", "cpp/api/tensorstore.PromiseFuturePair.html", "cpp/api/tensorstore.PromiseFuturePair.FutureType.html", "cpp/api/tensorstore.PromiseFuturePair.Link.html", "cpp/api/tensorstore.PromiseFuturePair.LinkError.html", "cpp/api/tensorstore.PromiseFuturePair.LinkValue.html", "cpp/api/tensorstore.PromiseFuturePair.Make.html", "cpp/api/tensorstore.PromiseFuturePair.PromiseType.html", "cpp/api/tensorstore.PromiseFuturePair.future.html", "cpp/api/tensorstore.PromiseFuturePair.promise.html", "cpp/api/tensorstore.PropagateBounds.html", "cpp/api/tensorstore.PropagateBoundsToTransform.html", "cpp/api/tensorstore.PropagateExplicitBounds.html", "cpp/api/tensorstore.PropagateExplicitBoundsToTransform.html", "cpp/api/tensorstore.PropagateInputDomainResizeToOutput.html", "cpp/api/tensorstore.RankConstraint.html", "cpp/api/tensorstore.RankConstraint.Add.html", "cpp/api/tensorstore.RankConstraint.And.html", "cpp/api/tensorstore.RankConstraint.EqualOrUnspecified.html", "cpp/api/tensorstore.RankConstraint.FromInlineRank.html", "cpp/api/tensorstore.RankConstraint.GreaterEqualOrUnspecified.html", "cpp/api/tensorstore.RankConstraint.GreaterOrUnspecified.html", "cpp/api/tensorstore.RankConstraint.Implies.html", "cpp/api/tensorstore.RankConstraint.LessEqualOrUnspecified.html", "cpp/api/tensorstore.RankConstraint.LessOrUnspecified.html", "cpp/api/tensorstore.RankConstraint.RankConstraint-dynamic.html", "cpp/api/tensorstore.RankConstraint.RankConstraint-rank.html", "cpp/api/tensorstore.RankConstraint.Subtract.html", "cpp/api/tensorstore.RankConstraint.operator-cast.html", "cpp/api/tensorstore.RankConstraint.rank.html", "cpp/api/tensorstore.RankConstraint.valid.html", "cpp/api/tensorstore.Read-TensorStore.html", "cpp/api/tensorstore.Read-TensorStore-Array.html", "cpp/api/tensorstore.ReadIntoNewArrayOptions.html", "cpp/api/tensorstore.ReadIntoNewArrayOptions.batch.html", "cpp/api/tensorstore.ReadIntoNewArrayOptions.layout_order.html", "cpp/api/tensorstore.ReadIntoNewArrayOptions.progress_function.html", "cpp/api/tensorstore.ReadOptions.html", "cpp/api/tensorstore.ReadOptions.alignment_options.html", "cpp/api/tensorstore.ReadOptions.batch.html", "cpp/api/tensorstore.ReadOptions.progress_function.html", "cpp/api/tensorstore.ReadProgress.html", "cpp/api/tensorstore.ReadProgress.copied_elements.html", "cpp/api/tensorstore.ReadProgress.operator-equal_to.html", "cpp/api/tensorstore.ReadProgress.operator-shift_left.html", "cpp/api/tensorstore.ReadProgress.total_elements.html", "cpp/api/tensorstore.ReadProgressFunction.html", "cpp/api/tensorstore.ReadProgressFunction.Function.html", "cpp/api/tensorstore.ReadWriteMode.html", "cpp/api/tensorstore.ReadyFuture.html", "cpp/api/tensorstore.ReadyFuture.ReadyFuture-convert.html", "cpp/api/tensorstore.ReadyFuture.ReadyFuture-default.html", "cpp/api/tensorstore.ReadyFuture.ReadyFuture-future.html", "cpp/api/tensorstore.ReadyFuture.operator-assign.html", "cpp/api/tensorstore.ReadyFuture.result.html", "cpp/api/tensorstore.ReadyFuture.result_type.html", "cpp/api/tensorstore.ReadyFuture.value.html", "cpp/api/tensorstore.RebindDataType.html", "cpp/api/tensorstore.RebindMode.html", "cpp/api/tensorstore.RebindRank.html", "cpp/api/tensorstore.RecheckCacheOption.html", "cpp/api/tensorstore.RecheckCacheOption.AtOpen.html", "cpp/api/tensorstore.RecheckCacheOption.Flags.html", "cpp/api/tensorstore.RecheckCacheOption.RecheckCacheOption-bool.html", "cpp/api/tensorstore.RecheckCacheOption.RecheckCacheOption-default.html", "cpp/api/tensorstore.RecheckCacheOption.RecheckCacheOption-time.html", "cpp/api/tensorstore.RecheckCacheOption.flags.html", "cpp/api/tensorstore.RecheckCacheOption.specified.html", "cpp/api/tensorstore.RecheckCacheOption.time.html", "cpp/api/tensorstore.RecheckCached.html", "cpp/api/tensorstore.RecheckCached.AtOpen.html", "cpp/api/tensorstore.RecheckCachedData.html", "cpp/api/tensorstore.RecheckCachedData.AtOpen.html", "cpp/api/tensorstore.RecheckCachedMetadata.html", "cpp/api/tensorstore.RepeatedElementsConstraint.html", "cpp/api/tensorstore.Resize.html", "cpp/api/tensorstore.ResizeMode.html", "cpp/api/tensorstore.ResizeOptions.html", "cpp/api/tensorstore.ResizeOptions.mode.html", "cpp/api/tensorstore.ResolveBounds.html", "cpp/api/tensorstore.ResolveBoundsMode.html", "cpp/api/tensorstore.ResolveBoundsOptions.html", "cpp/api/tensorstore.ResolveBoundsOptions.batch.html", "cpp/api/tensorstore.Result.html", "cpp/api/tensorstore.Result.IgnoreResult.html", "cpp/api/tensorstore.Result.Result-convert.html", "cpp/api/tensorstore.Result.Result-copy.html", "cpp/api/tensorstore.Result.Result-default.html", "cpp/api/tensorstore.Result.Result-in_place.html", "cpp/api/tensorstore.Result.Result-status.html", "cpp/api/tensorstore.Result.Result-value.html", "cpp/api/tensorstore.Result.const_reference_type.html", "cpp/api/tensorstore.Result.emplace.html", "cpp/api/tensorstore.Result.error_type.html", "cpp/api/tensorstore.Result.ok.html", "cpp/api/tensorstore.Result.operator-arrow.html", "cpp/api/tensorstore.Result.operator-assign-convert.html", "cpp/api/tensorstore.Result.operator-assign-copy.html", "cpp/api/tensorstore.Result.operator-assign-status.html", "cpp/api/tensorstore.Result.operator-assign-value.html", "cpp/api/tensorstore.Result.operator-bitwise_or.html", "cpp/api/tensorstore.Result.operator-dereference.html", "cpp/api/tensorstore.Result.operator-equal_to.html", "cpp/api/tensorstore.Result.operator-not_equal_to.html", "cpp/api/tensorstore.Result.reference_type.html", "cpp/api/tensorstore.Result.status.html", "cpp/api/tensorstore.Result.value.html", "cpp/api/tensorstore.Result.value_or.html", "cpp/api/tensorstore.Result.value_type.html", "cpp/api/tensorstore.Schema.html", "cpp/api/tensorstore.Schema.ApplyIndexTransform.html", "cpp/api/tensorstore.Schema.DimensionUnits.html", "cpp/api/tensorstore.Schema.FillValue.html", "cpp/api/tensorstore.Schema.FillValue.operator-equal_to.html", "cpp/api/tensorstore.Schema.IsOption.html", "cpp/api/tensorstore.Schema.Override.html", "cpp/api/tensorstore.Schema.Override-IndexDomain.html", "cpp/api/tensorstore.Schema.Set.html", "cpp/api/tensorstore.Schema.Set-Schema.html", "cpp/api/tensorstore.Schema.Shape.html", "cpp/api/tensorstore.Schema.TransformInputSpaceSchema.html", "cpp/api/tensorstore.Schema.chunk_layout.html", "cpp/api/tensorstore.Schema.codec.html", "cpp/api/tensorstore.Schema.dimension_units.html", "cpp/api/tensorstore.Schema.domain.html", "cpp/api/tensorstore.Schema.dtype.html", "cpp/api/tensorstore.Schema.fill_value.html", "cpp/api/tensorstore.Schema.operator-bitwise_or.html", "cpp/api/tensorstore.Schema.rank.html", "cpp/api/tensorstore.SetDeferredResult.html", "cpp/api/tensorstore.SetPermutation.html", "cpp/api/tensorstore.SetPermutationFromStrides.html", "cpp/api/tensorstore.Shared.html", "cpp/api/tensorstore.SharedArray.html", "cpp/api/tensorstore.SharedArrayView.html", "cpp/api/tensorstore.SharedElementPointer.html", "cpp/api/tensorstore.SharedOffsetArray.html", "cpp/api/tensorstore.SharedOffsetArrayView.html", "cpp/api/tensorstore.ShiftInterval.html", "cpp/api/tensorstore.ShiftIntervalBackward.html", "cpp/api/tensorstore.ShiftIntervalTo.html", "cpp/api/tensorstore.SmallBitSet.html", "cpp/api/tensorstore.SmallBitSet.BoolsView.html", "cpp/api/tensorstore.SmallBitSet.ConstBoolsView.html", "cpp/api/tensorstore.SmallBitSet.FromBoolRange.html", "cpp/api/tensorstore.SmallBitSet.FromBools.html", "cpp/api/tensorstore.SmallBitSet.FromIndexRange.html", "cpp/api/tensorstore.SmallBitSet.FromIndices.html", "cpp/api/tensorstore.SmallBitSet.FromUint.html", "cpp/api/tensorstore.SmallBitSet.IndexView.html", "cpp/api/tensorstore.SmallBitSet.SmallBitSet-bool.html", "cpp/api/tensorstore.SmallBitSet.SmallBitSet-default.html", "cpp/api/tensorstore.SmallBitSet.Uint.html", "cpp/api/tensorstore.SmallBitSet.UpTo.html", "cpp/api/tensorstore.SmallBitSet.all.html", "cpp/api/tensorstore.SmallBitSet.any.html", "cpp/api/tensorstore.SmallBitSet.none.html", "cpp/api/tensorstore.SmallBitSet.operator-assign.html", "cpp/api/tensorstore.SmallBitSet.operator-bitwise_and.html", "cpp/api/tensorstore.SmallBitSet.operator-bitwise_or.html", "cpp/api/tensorstore.SmallBitSet.operator-bitwise_xor.html", "cpp/api/tensorstore.SmallBitSet.operator-cast.html", "cpp/api/tensorstore.SmallBitSet.operator-complement.html", "cpp/api/tensorstore.SmallBitSet.operator-equal_to.html", "cpp/api/tensorstore.SmallBitSet.operator-shift_left.html", "cpp/api/tensorstore.SmallBitSet.operator-subscript.html", "cpp/api/tensorstore.SmallBitSet.reference.html", "cpp/api/tensorstore.SmallBitSet.set.html", "cpp/api/tensorstore.SmallBitSet.size.html", "cpp/api/tensorstore.SmallBitSet.test.html", "cpp/api/tensorstore.SmallBitSet.to_uint.html", "cpp/api/tensorstore.SmallBitSet.value_type.html", "cpp/api/tensorstore.SourceDataReferenceRestriction.html", "cpp/api/tensorstore.SpanStaticExtent.html", "cpp/api/tensorstore.Spec.html", "cpp/api/tensorstore.Spec.ApplyIndexTransform-expr.html", "cpp/api/tensorstore.Spec.ApplyIndexTransform-transform.html", "cpp/api/tensorstore.Spec.BindContext.html", "cpp/api/tensorstore.Spec.GetTransformForIndexingOperation.html", "cpp/api/tensorstore.Spec.Set.html", "cpp/api/tensorstore.Spec.Spec-default.html", "cpp/api/tensorstore.Spec.StripContext.html", "cpp/api/tensorstore.Spec.UnbindContext.html", "cpp/api/tensorstore.Spec.base.html", "cpp/api/tensorstore.Spec.chunk_layout.html", "cpp/api/tensorstore.Spec.codec.html", "cpp/api/tensorstore.Spec.context_binding_state.html", "cpp/api/tensorstore.Spec.dimension_units.html", "cpp/api/tensorstore.Spec.domain.html", "cpp/api/tensorstore.Spec.dtype.html", "cpp/api/tensorstore.Spec.fill_value.html", "cpp/api/tensorstore.Spec.kvstore.html", "cpp/api/tensorstore.Spec.open_mode.html", "cpp/api/tensorstore.Spec.operator-equal_to.html", "cpp/api/tensorstore.Spec.rank.html", "cpp/api/tensorstore.Spec.schema.html", "cpp/api/tensorstore.Spec.transform.html", "cpp/api/tensorstore.Spec.valid.html", "cpp/api/tensorstore.SpecConvertOptions.html", "cpp/api/tensorstore.SpecOptions.html", "cpp/api/tensorstore.SpecRequestOptions.html", "cpp/api/tensorstore.StaticCast.html", "cpp/api/tensorstore.StaticCastResultType.html", "cpp/api/tensorstore.StaticDataType.html", "cpp/api/tensorstore.StaticDataTypeCast.html", "cpp/api/tensorstore.StaticOrDynamicRank.html", "cpp/api/tensorstore.StaticRank.html", "cpp/api/tensorstore.StaticRankCast.html", "cpp/api/tensorstore.StorageGeneration.html", "cpp/api/tensorstore.StorageGeneration.DebugString.html", "cpp/api/tensorstore.StorageGeneration.EqualOrUnspecified.html", "cpp/api/tensorstore.StorageGeneration.Invalid.html", "cpp/api/tensorstore.StorageGeneration.IsClean.html", "cpp/api/tensorstore.StorageGeneration.IsNoValue.html", "cpp/api/tensorstore.StorageGeneration.IsUnknown.html", "cpp/api/tensorstore.StorageGeneration.IsValid.html", "cpp/api/tensorstore.StorageGeneration.NoValue.html", "cpp/api/tensorstore.StorageGeneration.NotEqualOrUnspecified.html", "cpp/api/tensorstore.StorageGeneration.Unknown.html", "cpp/api/tensorstore.StorageGeneration.operator-cast.html", "cpp/api/tensorstore.StorageGeneration.operator-equal_to.html", "cpp/api/tensorstore.StorageGeneration.operator-shift_left.html", "cpp/api/tensorstore.StorageGeneration.value.html", "cpp/api/tensorstore.StrAppend.html", "cpp/api/tensorstore.StrCat.html", "cpp/api/tensorstore.StridedLayout.html", "cpp/api/tensorstore.StridedLayout.MaybeConstIndex.html", "cpp/api/tensorstore.StridedLayout.MaybeConstOriginIndex.html", "cpp/api/tensorstore.StridedLayout.RankType.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-convert.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-default.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-domain-byte_strides.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-order.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-origin-shape-byte_strides.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-rank.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-rank-components.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-shape-byte_strides.html", "cpp/api/tensorstore.StridedLayout.StridedLayout-unchecked.html", "cpp/api/tensorstore.StridedLayout.array_origin_kind.html", "cpp/api/tensorstore.StridedLayout.byte_strides.html", "cpp/api/tensorstore.StridedLayout.container_kind.html", "cpp/api/tensorstore.StridedLayout.domain.html", "cpp/api/tensorstore.StridedLayout.num_elements.html", "cpp/api/tensorstore.StridedLayout.operator-assign-convert.html", "cpp/api/tensorstore.StridedLayout.operator-call-pack.html", "cpp/api/tensorstore.StridedLayout.operator-call-vector.html", "cpp/api/tensorstore.StridedLayout.operator-equal_to.html", "cpp/api/tensorstore.StridedLayout.operator-shift_left.html", "cpp/api/tensorstore.StridedLayout.operator-subscript.html", "cpp/api/tensorstore.StridedLayout.origin.html", "cpp/api/tensorstore.StridedLayout.origin_byte_offset.html", "cpp/api/tensorstore.StridedLayout.rank.html", "cpp/api/tensorstore.StridedLayout.set_rank.html", "cpp/api/tensorstore.StridedLayout.shape.html", "cpp/api/tensorstore.StridedLayout.static_rank.html", "cpp/api/tensorstore.StridedLayoutView.html", "cpp/api/tensorstore.SubArray.html", "cpp/api/tensorstore.SubArrayStaticRank.html", "cpp/api/tensorstore.SubBoxView.html", "cpp/api/tensorstore.TensorReader.html", "cpp/api/tensorstore.TensorStore.html", "cpp/api/tensorstore.TensorStore.ApplyIndexTransform.html", "cpp/api/tensorstore.TensorStore.ApplyTensorStoreTransaction.html", "cpp/api/tensorstore.TensorStore.DataType.html", "cpp/api/tensorstore.TensorStore.Element.html", "cpp/api/tensorstore.TensorStore.RankType.html", "cpp/api/tensorstore.TensorStore.TensorStore-convert.html", "cpp/api/tensorstore.TensorStore.TensorStore-default.html", "cpp/api/tensorstore.TensorStore.TensorStore-unchecked.html", "cpp/api/tensorstore.TensorStore.base.html", "cpp/api/tensorstore.TensorStore.chunk_layout.html", "cpp/api/tensorstore.TensorStore.codec.html", "cpp/api/tensorstore.TensorStore.dimension_units.html", "cpp/api/tensorstore.TensorStore.domain.html", "cpp/api/tensorstore.TensorStore.dtype.html", "cpp/api/tensorstore.TensorStore.fill_value.html", "cpp/api/tensorstore.TensorStore.kvstore.html", "cpp/api/tensorstore.TensorStore.operator-assign.html", "cpp/api/tensorstore.TensorStore.operator-bitwise_or.html", "cpp/api/tensorstore.TensorStore.rank.html", "cpp/api/tensorstore.TensorStore.read_write_mode.html", "cpp/api/tensorstore.TensorStore.schema.html", "cpp/api/tensorstore.TensorStore.spec.html", "cpp/api/tensorstore.TensorStore.static_mode.html", "cpp/api/tensorstore.TensorStore.static_rank.html", "cpp/api/tensorstore.TensorStore.transaction.html", "cpp/api/tensorstore.TensorStore.valid.html", "cpp/api/tensorstore.TensorWriter.html", "cpp/api/tensorstore.TimestampedStorageGeneration.html", "cpp/api/tensorstore.TimestampedStorageGeneration.TimestampedStorageGeneration-default.html", "cpp/api/tensorstore.TimestampedStorageGeneration.TimestampedStorageGeneration-generation-time.html", "cpp/api/tensorstore.TimestampedStorageGeneration.Unconditional.html", "cpp/api/tensorstore.TimestampedStorageGeneration.generation.html", "cpp/api/tensorstore.TimestampedStorageGeneration.operator-equal_to.html", "cpp/api/tensorstore.TimestampedStorageGeneration.operator-shift_left.html", "cpp/api/tensorstore.TimestampedStorageGeneration.time.html", "cpp/api/tensorstore.TimestampedStorageGeneration.unconditional.html", "cpp/api/tensorstore.ToString.html", "cpp/api/tensorstore.Transaction.html", "cpp/api/tensorstore.Transaction.Abort.html", "cpp/api/tensorstore.Transaction.Barrier.html", "cpp/api/tensorstore.Transaction.Commit.html", "cpp/api/tensorstore.Transaction.CommitAsync.html", "cpp/api/tensorstore.Transaction.Transaction-mode.html", "cpp/api/tensorstore.Transaction.Transaction-no_transaction.html", "cpp/api/tensorstore.Transaction.aborted.html", "cpp/api/tensorstore.Transaction.atomic.html", "cpp/api/tensorstore.Transaction.commit_started.html", "cpp/api/tensorstore.Transaction.future.html", "cpp/api/tensorstore.Transaction.mode.html", "cpp/api/tensorstore.Transaction.no_transaction_t.html", "cpp/api/tensorstore.Transaction.no_transaction_t.operator-cast-TransactionMode.html", "cpp/api/tensorstore.Transaction.operator-equal_to.html", "cpp/api/tensorstore.Transaction.total_bytes.html", "cpp/api/tensorstore.TransactionMode.html", "cpp/api/tensorstore.TransactionalOpenOptions.html", "cpp/api/tensorstore.TransformArray.html", "cpp/api/tensorstore.TransformArrayConstraints.html", "cpp/api/tensorstore.TransformArrayConstraints.TransformArrayConstraints.html", "cpp/api/tensorstore.TransformArrayConstraints.allocate_constraint.html", "cpp/api/tensorstore.TransformArrayConstraints.iteration_constraints.html", "cpp/api/tensorstore.TransformArrayConstraints.operator-equal_to.html", "cpp/api/tensorstore.TransformArrayConstraints.order_constraint.html", "cpp/api/tensorstore.TransformArrayConstraints.repeated_elements_constraint.html", "cpp/api/tensorstore.TransformInputDimensionUnits.html", "cpp/api/tensorstore.TransformOutputDimensionUnits.html", "cpp/api/tensorstore.TransformedArray.html", "cpp/api/tensorstore.TransformedArray.DataType.html", "cpp/api/tensorstore.TransformedArray.Element.html", "cpp/api/tensorstore.TransformedArray.ElementPointer.html", "cpp/api/tensorstore.TransformedArray.ElementTag.html", "cpp/api/tensorstore.TransformedArray.Materialize.html", "cpp/api/tensorstore.TransformedArray.Pointer.html", "cpp/api/tensorstore.TransformedArray.RankType.html", "cpp/api/tensorstore.TransformedArray.RebindTransform.html", "cpp/api/tensorstore.TransformedArray.Transform.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-array.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-convert.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-default.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-element_pointer-transform.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-unchecked.html", "cpp/api/tensorstore.TransformedArray.TransformedArray-unchecked-array.html", "cpp/api/tensorstore.TransformedArray.base_array.html", "cpp/api/tensorstore.TransformedArray.data.html", "cpp/api/tensorstore.TransformedArray.domain.html", "cpp/api/tensorstore.TransformedArray.dtype.html", "cpp/api/tensorstore.TransformedArray.element_pointer.html", "cpp/api/tensorstore.TransformedArray.labels.html", "cpp/api/tensorstore.TransformedArray.layout_container_kind.html", "cpp/api/tensorstore.TransformedArray.operator-assign-array.html", "cpp/api/tensorstore.TransformedArray.operator-assign-convert.html", "cpp/api/tensorstore.TransformedArray.operator-bitwise_or.html", "cpp/api/tensorstore.TransformedArray.origin.html", "cpp/api/tensorstore.TransformedArray.rank.html", "cpp/api/tensorstore.TransformedArray.shape.html", "cpp/api/tensorstore.TransformedArray.static_rank.html", "cpp/api/tensorstore.TransformedArray.transform.html", "cpp/api/tensorstore.TransformedArrayTypeFromArray.html", "cpp/api/tensorstore.TransformedArrayTypeFromArrayAndTransform.html", "cpp/api/tensorstore.TransformedArrayView.html", "cpp/api/tensorstore.TransformedSharedArray.html", "cpp/api/tensorstore.TransformedSharedArrayView.html", "cpp/api/tensorstore.TryConvertToArray.html", "cpp/api/tensorstore.UnbroadcastArray.html", "cpp/api/tensorstore.UnbroadcastArrayPreserveRank.html", "cpp/api/tensorstore.Unit.html", "cpp/api/tensorstore.Unit.AbslStringify.html", "cpp/api/tensorstore.Unit.Unit-default.html", "cpp/api/tensorstore.Unit.Unit-multiplier-base_unit.html", "cpp/api/tensorstore.Unit.Unit-string.html", "cpp/api/tensorstore.Unit.base_unit.html", "cpp/api/tensorstore.Unit.multiplier.html", "cpp/api/tensorstore.Unit.operator-divides.html", "cpp/api/tensorstore.Unit.operator-equal_to.html", "cpp/api/tensorstore.Unit.operator-multiplies.html", "cpp/api/tensorstore.Unit.operator-shift_left.html", "cpp/api/tensorstore.Unit.to_string.html", "cpp/api/tensorstore.UnownedToShared.html", "cpp/api/tensorstore.UnownedToShared-array.html", "cpp/api/tensorstore.UnownedToShared-element_pointer.html", "cpp/api/tensorstore.UnownedToShared-owned-element_pointer.html", "cpp/api/tensorstore.UnspecifiedLayoutOrder.html", "cpp/api/tensorstore.UnwrapFutureType.html", "cpp/api/tensorstore.UnwrapQualifiedResultType.html", "cpp/api/tensorstore.UnwrapResult.html", "cpp/api/tensorstore.UnwrapResultType.html", "cpp/api/tensorstore.Utf8String.html", "cpp/api/tensorstore.Utf8String.operator-less.html", "cpp/api/tensorstore.Utf8String.operator-shift_left.html", "cpp/api/tensorstore.Utf8String.utf8.html", "cpp/api/tensorstore.ValidateIndexArrayBounds.html", "cpp/api/tensorstore.ValidateRank.html", "cpp/api/tensorstore.ValidateShapeBroadcast.html", "cpp/api/tensorstore.WaitAllFuture-span.html", "cpp/api/tensorstore.WaitAllFuture-variadic.html", "cpp/api/tensorstore.WithExecutor.html", "cpp/api/tensorstore.WithImplicitDimensions-domain.html", "cpp/api/tensorstore.WithImplicitDimensions-transform.html", "cpp/api/tensorstore.Write-Array-TensorStore.html", "cpp/api/tensorstore.WriteFutures.html", "cpp/api/tensorstore.WriteFutures.Force.html", "cpp/api/tensorstore.WriteFutures.WriteFutures-copy_future-commit_future.html", "cpp/api/tensorstore.WriteFutures.WriteFutures-default.html", "cpp/api/tensorstore.WriteFutures.WriteFutures-result.html", "cpp/api/tensorstore.WriteFutures.WriteFutures-status.html", "cpp/api/tensorstore.WriteFutures.commit_future.html", "cpp/api/tensorstore.WriteFutures.copy_future.html", "cpp/api/tensorstore.WriteFutures.result.html", "cpp/api/tensorstore.WriteFutures.status.html", "cpp/api/tensorstore.WriteFutures.value.html", "cpp/api/tensorstore.WriteOptions.html", "cpp/api/tensorstore.WriteOptions.alignment_options.html", "cpp/api/tensorstore.WriteOptions.progress_function.html", "cpp/api/tensorstore.WriteOptions.source_data_reference_restriction.html", "cpp/api/tensorstore.WriteProgress.html", "cpp/api/tensorstore.WriteProgress.committed_elements.html", "cpp/api/tensorstore.WriteProgress.copied_elements.html", "cpp/api/tensorstore.WriteProgress.operator-equal_to.html", "cpp/api/tensorstore.WriteProgress.operator-shift_left.html", "cpp/api/tensorstore.WriteProgress.total_elements.html", "cpp/api/tensorstore.WriteProgressFunction.html", "cpp/api/tensorstore.WriteProgressFunction.Function.html", "cpp/api/tensorstore.abs-bfloat16.html", "cpp/api/tensorstore.abs-int4padded.html", "cpp/api/tensorstore.acos-bfloat16.html", "cpp/api/tensorstore.acosh-bfloat16.html", "cpp/api/tensorstore.asin-bfloat16.html", "cpp/api/tensorstore.asinh-bfloat16.html", "cpp/api/tensorstore.atan-bfloat16.html", "cpp/api/tensorstore.atanh-bfloat16.html", "cpp/api/tensorstore.c_order.html", "cpp/api/tensorstore.ceil-bfloat16.html", "cpp/api/tensorstore.container.html", "cpp/api/tensorstore.cos-bfloat16.html", "cpp/api/tensorstore.cosh-bfloat16.html", "cpp/api/tensorstore.default_init.html", "cpp/api/tensorstore.dtype_t.html", "cpp/api/tensorstore.dtype_v.html", "cpp/api/tensorstore.dtypes.bfloat16_t.html", "cpp/api/tensorstore.dtypes.bool_t.html", "cpp/api/tensorstore.dtypes.byte_t.html", "cpp/api/tensorstore.dtypes.char_t.html", "cpp/api/tensorstore.dtypes.complex128_t.html", "cpp/api/tensorstore.dtypes.complex64_t.html", "cpp/api/tensorstore.dtypes.float16_t.html", "cpp/api/tensorstore.dtypes.float32_t.html", "cpp/api/tensorstore.dtypes.float64_t.html", "cpp/api/tensorstore.dtypes.float8_e4m3b11fnuz_t.html", "cpp/api/tensorstore.dtypes.float8_e4m3fn_t.html", "cpp/api/tensorstore.dtypes.float8_e4m3fnuz_t.html", "cpp/api/tensorstore.dtypes.float8_e5m2_t.html", "cpp/api/tensorstore.dtypes.float8_e5m2fnuz_t.html", "cpp/api/tensorstore.dtypes.int16_t.html", "cpp/api/tensorstore.dtypes.int32_t.html", "cpp/api/tensorstore.dtypes.int4_t.html", "cpp/api/tensorstore.dtypes.int64_t.html", "cpp/api/tensorstore.dtypes.int8_t.html", "cpp/api/tensorstore.dtypes.json_t.html", "cpp/api/tensorstore.dtypes.string_t.html", "cpp/api/tensorstore.dtypes.uint16_t.html", "cpp/api/tensorstore.dtypes.uint32_t.html", "cpp/api/tensorstore.dtypes.uint64_t.html", "cpp/api/tensorstore.dtypes.uint8_t.html", "cpp/api/tensorstore.dtypes.ustring_t.html", "cpp/api/tensorstore.dynamic_extent.html", "cpp/api/tensorstore.dynamic_rank.html", "cpp/api/tensorstore.exp-bfloat16.html", "cpp/api/tensorstore.exp2-bfloat16.html", "cpp/api/tensorstore.expm1-bfloat16.html", "cpp/api/tensorstore.fix_resizable_bounds.html", "cpp/api/tensorstore.floor-bfloat16.html", "cpp/api/tensorstore.fmax-bfloat16.html", "cpp/api/tensorstore.fmin-bfloat16.html", "cpp/api/tensorstore.fmod-bfloat16.html", "cpp/api/tensorstore.include_repeated_elements.html", "cpp/api/tensorstore.isfinite.html", "cpp/api/tensorstore.isinf.html", "cpp/api/tensorstore.isnan.html", "cpp/api/tensorstore.kImplicit.html", "cpp/api/tensorstore.kInfIndex.html", "cpp/api/tensorstore.kInfSize.html", "cpp/api/tensorstore.kMaxFiniteIndex.html", "cpp/api/tensorstore.kMaxFiniteSize.html", "cpp/api/tensorstore.kMaxRank.html", "cpp/api/tensorstore.kMinFiniteIndex.html", "cpp/api/tensorstore.kvstore.CopyRangeOptions.html", "cpp/api/tensorstore.kvstore.CopyRangeOptions.source_range.html", "cpp/api/tensorstore.kvstore.CopyRangeOptions.source_staleness_bound.html", "cpp/api/tensorstore.kvstore.Delete.html", "cpp/api/tensorstore.kvstore.DeleteRange.html", "cpp/api/tensorstore.kvstore.DriverOpenOptions.html", "cpp/api/tensorstore.kvstore.DriverPtr.html", "cpp/api/tensorstore.kvstore.DriverSpecOptions.html", "cpp/api/tensorstore.kvstore.DriverSpecOptions.IsOption.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.BindContext.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.Set.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.StripContext.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.UnbindContext.html", "cpp/api/tensorstore.kvstore.DriverSpecPtr.context_binding_state.html", "cpp/api/tensorstore.kvstore.ExperimentalCopyRange.html", "cpp/api/tensorstore.kvstore.Key.html", "cpp/api/tensorstore.kvstore.KvStore.html", "cpp/api/tensorstore.kvstore.KvStore.AppendPathComponent.html", "cpp/api/tensorstore.kvstore.KvStore.AppendSuffix.html", "cpp/api/tensorstore.kvstore.KvStore.ApplyTensorStoreTransaction.html", "cpp/api/tensorstore.kvstore.KvStore.KvStore-default.html", "cpp/api/tensorstore.kvstore.KvStore.KvStore-driver.html", "cpp/api/tensorstore.kvstore.KvStore.ToUrl.html", "cpp/api/tensorstore.kvstore.KvStore.base.html", "cpp/api/tensorstore.kvstore.KvStore.driver.html", "cpp/api/tensorstore.kvstore.KvStore.non_transactional.html", "cpp/api/tensorstore.kvstore.KvStore.operator-bitwise_or.html", "cpp/api/tensorstore.kvstore.KvStore.operator-equal_to.html", "cpp/api/tensorstore.kvstore.KvStore.path.html", "cpp/api/tensorstore.kvstore.KvStore.spec.html", "cpp/api/tensorstore.kvstore.KvStore.transaction.html", "cpp/api/tensorstore.kvstore.KvStore.valid.html", "cpp/api/tensorstore.kvstore.ListEntry.html", "cpp/api/tensorstore.kvstore.ListFuture.html", "cpp/api/tensorstore.kvstore.ListOptions.html", "cpp/api/tensorstore.kvstore.ListOptions.range.html", "cpp/api/tensorstore.kvstore.ListOptions.staleness_bound.html", "cpp/api/tensorstore.kvstore.ListOptions.strip_prefix_length.html", "cpp/api/tensorstore.kvstore.Open.html", "cpp/api/tensorstore.kvstore.OpenOptions.html", "cpp/api/tensorstore.kvstore.Read.html", "cpp/api/tensorstore.kvstore.ReadGenerationConditions.html", "cpp/api/tensorstore.kvstore.ReadGenerationConditions.Matches.html", "cpp/api/tensorstore.kvstore.ReadGenerationConditions.if_equal.html", "cpp/api/tensorstore.kvstore.ReadGenerationConditions.if_not_equal.html", "cpp/api/tensorstore.kvstore.ReadGenerationConditions.operator-cast.html", "cpp/api/tensorstore.kvstore.ReadOptions.html", "cpp/api/tensorstore.kvstore.ReadOptions.batch.html", "cpp/api/tensorstore.kvstore.ReadOptions.byte_range.html", "cpp/api/tensorstore.kvstore.ReadOptions.generation_conditions.html", "cpp/api/tensorstore.kvstore.ReadOptions.staleness_bound.html", "cpp/api/tensorstore.kvstore.ReadResult.html", "cpp/api/tensorstore.kvstore.ReadResult.Missing-stamp.html", "cpp/api/tensorstore.kvstore.ReadResult.State.html", "cpp/api/tensorstore.kvstore.ReadResult.Unspecified-default.html", "cpp/api/tensorstore.kvstore.ReadResult.Value-value-stamp.html", "cpp/api/tensorstore.kvstore.ReadResult.aborted.html", "cpp/api/tensorstore.kvstore.ReadResult.has_value.html", "cpp/api/tensorstore.kvstore.ReadResult.kUnspecified.html", "cpp/api/tensorstore.kvstore.ReadResult.not_found.html", "cpp/api/tensorstore.kvstore.ReadResult.operator-equal_to.html", "cpp/api/tensorstore.kvstore.ReadResult.operator-shift_left-ReadResult.html", "cpp/api/tensorstore.kvstore.ReadResult.operator-shift_left-State.html", "cpp/api/tensorstore.kvstore.ReadResult.optional_value.html", "cpp/api/tensorstore.kvstore.ReadResult.stamp.html", "cpp/api/tensorstore.kvstore.ReadResult.state.html", "cpp/api/tensorstore.kvstore.ReadResult.value.html", "cpp/api/tensorstore.kvstore.Spec.html", "cpp/api/tensorstore.kvstore.Spec.AppendPathComponent.html", "cpp/api/tensorstore.kvstore.Spec.AppendSuffix.html", "cpp/api/tensorstore.kvstore.Spec.BindContext.html", "cpp/api/tensorstore.kvstore.Spec.FromUrl.html", "cpp/api/tensorstore.kvstore.Spec.Set.html", "cpp/api/tensorstore.kvstore.Spec.Spec-default.html", "cpp/api/tensorstore.kvstore.Spec.Spec-driver.html", "cpp/api/tensorstore.kvstore.Spec.Spec-driver-path.html", "cpp/api/tensorstore.kvstore.Spec.StripContext.html", "cpp/api/tensorstore.kvstore.Spec.ToUrl.html", "cpp/api/tensorstore.kvstore.Spec.UnbindContext.html", "cpp/api/tensorstore.kvstore.Spec.base.html", "cpp/api/tensorstore.kvstore.Spec.context_binding_state.html", "cpp/api/tensorstore.kvstore.Spec.driver.html", "cpp/api/tensorstore.kvstore.Spec.operator-equal_to.html", "cpp/api/tensorstore.kvstore.Spec.path.html", "cpp/api/tensorstore.kvstore.Spec.valid.html", "cpp/api/tensorstore.kvstore.SpecConvertOptions.html", "cpp/api/tensorstore.kvstore.SpecConvertOptions.IsOption.html", "cpp/api/tensorstore.kvstore.SpecConvertOptions.context.html", "cpp/api/tensorstore.kvstore.SpecConvertOptions.context_binding_mode.html", "cpp/api/tensorstore.kvstore.SpecRequestOptions.html", "cpp/api/tensorstore.kvstore.TransactionalReadGenerationConditions.html", "cpp/api/tensorstore.kvstore.TransactionalReadGenerationConditions.Matches.html", "cpp/api/tensorstore.kvstore.TransactionalReadGenerationConditions.if_not_equal.html", "cpp/api/tensorstore.kvstore.TransactionalReadOptions.html", "cpp/api/tensorstore.kvstore.TransactionalReadOptions.batch.html", "cpp/api/tensorstore.kvstore.TransactionalReadOptions.byte_range.html", "cpp/api/tensorstore.kvstore.TransactionalReadOptions.generation_conditions.html", "cpp/api/tensorstore.kvstore.TransactionalReadOptions.staleness_bound.html", "cpp/api/tensorstore.kvstore.Value.html", "cpp/api/tensorstore.kvstore.Write.html", "cpp/api/tensorstore.kvstore.WriteGenerationConditions.html", "cpp/api/tensorstore.kvstore.WriteGenerationConditions.Matches.html", "cpp/api/tensorstore.kvstore.WriteGenerationConditions.MatchesNoValue.html", "cpp/api/tensorstore.kvstore.WriteGenerationConditions.if_equal.html", "cpp/api/tensorstore.kvstore.WriteOptions.html", "cpp/api/tensorstore.kvstore.WriteOptions.generation_conditions.html", "cpp/api/tensorstore.log-bfloat16.html", "cpp/api/tensorstore.log10-bfloat16.html", "cpp/api/tensorstore.log1p-bfloat16.html", "cpp/api/tensorstore.log2-bfloat16.html", "cpp/api/tensorstore.may_allocate.html", "cpp/api/tensorstore.nextafter-bfloat16.html", "cpp/api/tensorstore.no_batch.html", "cpp/api/tensorstore.no_transaction.html", "cpp/api/tensorstore.offset_origin.html", "cpp/api/tensorstore.operator-bitwise_and-DataTypeConversionFlags.html", "cpp/api/tensorstore.operator-bitwise_and-DomainAlignmentOptions.html", "cpp/api/tensorstore.operator-bitwise_and-OpenMode.html", "cpp/api/tensorstore.operator-bitwise_and-ReadWriteMode.html", "cpp/api/tensorstore.operator-bitwise_and-ResizeMode.html", "cpp/api/tensorstore.operator-bitwise_and-ResolveBoundsMode.html", "cpp/api/tensorstore.operator-bitwise_or.html", "cpp/api/tensorstore.operator-bitwise_or-DataTypeConversionFlags.html", "cpp/api/tensorstore.operator-bitwise_or-DomainAlignmentOptions.html", "cpp/api/tensorstore.operator-bitwise_or-OpenMode.html", "cpp/api/tensorstore.operator-bitwise_or-ReadWriteMode.html", "cpp/api/tensorstore.operator-bitwise_or-ResizeMode.html", "cpp/api/tensorstore.operator-bitwise_or-ResolveBoundsMode.html", "cpp/api/tensorstore.operator-complement-DataTypeConversionFlags.html", "cpp/api/tensorstore.operator-complement-OpenMode.html", "cpp/api/tensorstore.operator-complement-ReadWriteMode.html", "cpp/api/tensorstore.operator-logical_not-DataTypeConversionFlags.html", "cpp/api/tensorstore.operator-logical_not-DomainAlignmentOptions.html", "cpp/api/tensorstore.operator-logical_not-OpenMode.html", "cpp/api/tensorstore.operator-logical_not-ReadWriteMode.html", "cpp/api/tensorstore.operator-logical_not-ResizeMode.html", "cpp/api/tensorstore.operator-logical_not-ResolveBoundsMode.html", "cpp/api/tensorstore.operator-shift_left-ArrayOriginKind.html", "cpp/api/tensorstore.operator-shift_left-ContiguousLayoutOrder.html", "cpp/api/tensorstore.operator-shift_left-DownsampleMethod.html", "cpp/api/tensorstore.operator-shift_left-OpenMode.html", "cpp/api/tensorstore.operator-shift_left-OutputIndexMethod.html", "cpp/api/tensorstore.operator-shift_left-ReadWriteMode.html", "cpp/api/tensorstore.operator-shift_left-ResizeMode.html", "cpp/api/tensorstore.operator-shift_left-ResolveBoundsMode.html", "cpp/api/tensorstore.operator-shift_left-TransactionMode.html", "cpp/api/tensorstore.operator-shift_left-span.html", "cpp/api/tensorstore.pointee_dtype_t.html", "cpp/api/tensorstore.pow-bfloat16.html", "cpp/api/tensorstore.pow-int4padded.html", "cpp/api/tensorstore.resize_metadata_only.html", "cpp/api/tensorstore.retain_context.html", "cpp/api/tensorstore.rint-bfloat16.html", "cpp/api/tensorstore.signbit.html", "cpp/api/tensorstore.sin-bfloat16.html", "cpp/api/tensorstore.sinh-bfloat16.html", "cpp/api/tensorstore.span.html", "cpp/api/tensorstore.span.at.html", "cpp/api/tensorstore.span.back.html", "cpp/api/tensorstore.span.begin.html", "cpp/api/tensorstore.span.const_iterator.html", "cpp/api/tensorstore.span.const_pointer.html", "cpp/api/tensorstore.span.const_reference.html", "cpp/api/tensorstore.span.const_reverse_iterator.html", "cpp/api/tensorstore.span.data.html", "cpp/api/tensorstore.span.difference_type.html", "cpp/api/tensorstore.span.element_type.html", "cpp/api/tensorstore.span.empty.html", "cpp/api/tensorstore.span.extent.html", "cpp/api/tensorstore.span.first-dynamic.html", "cpp/api/tensorstore.span.first-static.html", "cpp/api/tensorstore.span.front.html", "cpp/api/tensorstore.span.index_type.html", "cpp/api/tensorstore.span.iterator.html", "cpp/api/tensorstore.span.last-dynamic.html", "cpp/api/tensorstore.span.last-static.html", "cpp/api/tensorstore.span.operator-subscript.html", "cpp/api/tensorstore.span.pointer.html", "cpp/api/tensorstore.span.rbegin.html", "cpp/api/tensorstore.span.reference.html", "cpp/api/tensorstore.span.reverse_iterator.html", "cpp/api/tensorstore.span.size.html", "cpp/api/tensorstore.span.size_bytes.html", "cpp/api/tensorstore.span.span-array.html", "cpp/api/tensorstore.span.span-begin-end.html", "cpp/api/tensorstore.span.span-container.html", "cpp/api/tensorstore.span.span-convert.html", "cpp/api/tensorstore.span.span-default.html", "cpp/api/tensorstore.span.span-pointer-count.html", "cpp/api/tensorstore.span.subspan-dynamic.html", "cpp/api/tensorstore.span.subspan-static.html", "cpp/api/tensorstore.span.value_type.html", "cpp/api/tensorstore.sqrt-bfloat16.html", "cpp/api/tensorstore.swap.html", "cpp/api/tensorstore.tan-bfloat16.html", "cpp/api/tensorstore.tanh-bfloat16.html", "cpp/api/tensorstore.to_string-ReadWriteMode.html", "cpp/api/tensorstore.trunc-bfloat16.html", "cpp/api/tensorstore.unchecked.html", "cpp/api/tensorstore.unchecked_t.html", "cpp/api/tensorstore.unspecified_order.html", "cpp/api/tensorstore.value_init.html", "cpp/api/tensorstore.view.html", "cpp/api/tensorstore.zero_origin.html", "driver/array/index.html", "driver/cast/index.html", "driver/downsample/index.html", "driver/image/avif/index.html", "driver/image/bmp/index.html", "driver/image/jpeg/index.html", "driver/image/png/index.html", "driver/image/tiff/index.html", "driver/image/webp/index.html", "driver/index.html", "driver/json/index.html", "driver/n5/index.html", "driver/neuroglancer_precomputed/index.html", "driver/stack/index.html", "driver/zarr/index.html", "driver/zarr3/index.html", "environment.html", "index.html", "index_space.html", "installation.html", "kvstore/file/index.html", "kvstore/gcs/index.html", "kvstore/http/index.html", "kvstore/index.html", "kvstore/kvstack/index.html", "kvstore/memory/index.html", "kvstore/neuroglancer_uint64_sharded/index.html", "kvstore/ocdbt/index.html", "kvstore/s3/index.html", "kvstore/tsgrpc/index.html", "kvstore/zarr3_sharding_indexed/index.html", "kvstore/zip/index.html", "python/api/index.html", "python/api/tensorstore.Batch.html", "python/api/tensorstore.Batch.__init__.html", "python/api/tensorstore.Batch.submit.html", "python/api/tensorstore.ChunkLayout.html", "python/api/tensorstore.ChunkLayout.Grid.html", "python/api/tensorstore.ChunkLayout.Grid.__eq__.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-components.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-json.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.elements.html", "python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.ndim.html", "python/api/tensorstore.ChunkLayout.Grid.rank.html", "python/api/tensorstore.ChunkLayout.Grid.shape.html", "python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.to_json.html", "python/api/tensorstore.ChunkLayout.Grid.update.html", "python/api/tensorstore.ChunkLayout.__eq__.html", "python/api/tensorstore.ChunkLayout.__init__-components.html", "python/api/tensorstore.ChunkLayout.__init__-json.html", "python/api/tensorstore.ChunkLayout.codec_chunk.html", "python/api/tensorstore.ChunkLayout.grid_origin.html", "python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html", "python/api/tensorstore.ChunkLayout.inner_order.html", "python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html", "python/api/tensorstore.ChunkLayout.ndim.html", "python/api/tensorstore.ChunkLayout.rank.html", "python/api/tensorstore.ChunkLayout.read_chunk.html", "python/api/tensorstore.ChunkLayout.read_chunk_template.html", "python/api/tensorstore.ChunkLayout.to_json.html", "python/api/tensorstore.ChunkLayout.update.html", "python/api/tensorstore.ChunkLayout.write_chunk.html", "python/api/tensorstore.ChunkLayout.write_chunk_template.html", "python/api/tensorstore.CodecSpec.html", "python/api/tensorstore.CodecSpec.__init__.html", "python/api/tensorstore.CodecSpec.to_json.html", "python/api/tensorstore.Context.html", "python/api/tensorstore.Context.Resource.html", "python/api/tensorstore.Context.Resource.to_json.html", "python/api/tensorstore.Context.Spec.html", "python/api/tensorstore.Context.Spec.__init__.html", "python/api/tensorstore.Context.Spec.to_json.html", "python/api/tensorstore.Context.__getitem__.html", "python/api/tensorstore.Context.__init__-default.html", "python/api/tensorstore.Context.__init__-json.html", "python/api/tensorstore.Context.__init__-spec.html", "python/api/tensorstore.Context.parent.html", "python/api/tensorstore.Context.spec.html", "python/api/tensorstore.Dim.html", "python/api/tensorstore.Dim.__contains__-dim.html", "python/api/tensorstore.Dim.__contains__-index.html", "python/api/tensorstore.Dim.__eq__.html", "python/api/tensorstore.Dim.__init__-exclusive_max.html", "python/api/tensorstore.Dim.__init__-inclusive_max.html", "python/api/tensorstore.Dim.__init__-size.html", "python/api/tensorstore.Dim.__init__-unbounded.html", "python/api/tensorstore.Dim.__iter__.html", "python/api/tensorstore.Dim.__len__.html", "python/api/tensorstore.Dim.__repr__.html", "python/api/tensorstore.Dim.__str__.html", "python/api/tensorstore.Dim.empty.html", "python/api/tensorstore.Dim.exclusive_max.html", "python/api/tensorstore.Dim.exclusive_min.html", "python/api/tensorstore.Dim.finite.html", "python/api/tensorstore.Dim.hull.html", "python/api/tensorstore.Dim.implicit_lower.html", "python/api/tensorstore.Dim.implicit_upper.html", "python/api/tensorstore.Dim.inclusive_max.html", "python/api/tensorstore.Dim.inclusive_min.html", "python/api/tensorstore.Dim.intersect.html", "python/api/tensorstore.Dim.label.html", "python/api/tensorstore.Dim.size.html", "python/api/tensorstore.DimExpression.html", "python/api/tensorstore.DimExpression.__getitem__.html", "python/api/tensorstore.DimExpression.diagonal.html", "python/api/tensorstore.DimExpression.label.html", "python/api/tensorstore.DimExpression.mark_bounds_implicit.html", "python/api/tensorstore.DimExpression.oindex.html", "python/api/tensorstore.DimExpression.stride.html", "python/api/tensorstore.DimExpression.translate_backward_by.html", "python/api/tensorstore.DimExpression.translate_by.html", "python/api/tensorstore.DimExpression.translate_to.html", "python/api/tensorstore.DimExpression.transpose.html", "python/api/tensorstore.DimExpression.vindex.html", "python/api/tensorstore.Future.html", "python/api/tensorstore.Future.__new__.html", "python/api/tensorstore.Future.add_done_callback.html", "python/api/tensorstore.Future.cancel.html", "python/api/tensorstore.Future.cancelled.html", "python/api/tensorstore.Future.done.html", "python/api/tensorstore.Future.exception.html", "python/api/tensorstore.Future.force.html", "python/api/tensorstore.Future.remove_done_callback.html", "python/api/tensorstore.Future.result.html", "python/api/tensorstore.FutureLike.html", "python/api/tensorstore.IndexDomain.html", "python/api/tensorstore.IndexDomain.T.html", "python/api/tensorstore.IndexDomain.__getitem__-domain.html", "python/api/tensorstore.IndexDomain.__getitem__-expr.html", "python/api/tensorstore.IndexDomain.__getitem__-identifier.html", "python/api/tensorstore.IndexDomain.__getitem__-selection.html", "python/api/tensorstore.IndexDomain.__getitem__-transform.html", "python/api/tensorstore.IndexDomain.__init__-components.html", "python/api/tensorstore.IndexDomain.__init__-dimensions.html", "python/api/tensorstore.IndexDomain.__init__-json.html", "python/api/tensorstore.IndexDomain.__len__.html", "python/api/tensorstore.IndexDomain.__repr__.html", "python/api/tensorstore.IndexDomain.exclusive_max.html", "python/api/tensorstore.IndexDomain.hull.html", "python/api/tensorstore.IndexDomain.implicit_lower_bounds.html", "python/api/tensorstore.IndexDomain.implicit_upper_bounds.html", "python/api/tensorstore.IndexDomain.inclusive_max.html", "python/api/tensorstore.IndexDomain.inclusive_min.html", "python/api/tensorstore.IndexDomain.index_exp.html", "python/api/tensorstore.IndexDomain.intersect.html", "python/api/tensorstore.IndexDomain.label.html", "python/api/tensorstore.IndexDomain.labels.html", "python/api/tensorstore.IndexDomain.mark_bounds_implicit.html", "python/api/tensorstore.IndexDomain.ndim.html", "python/api/tensorstore.IndexDomain.origin.html", "python/api/tensorstore.IndexDomain.rank.html", "python/api/tensorstore.IndexDomain.shape.html", "python/api/tensorstore.IndexDomain.size.html", "python/api/tensorstore.IndexDomain.to_json.html", "python/api/tensorstore.IndexDomain.translate_backward_by.html", "python/api/tensorstore.IndexDomain.translate_by.html", "python/api/tensorstore.IndexDomain.translate_to.html", "python/api/tensorstore.IndexDomain.transpose.html", "python/api/tensorstore.IndexTransform.html", "python/api/tensorstore.IndexTransform.T.html", "python/api/tensorstore.IndexTransform.__call__.html", "python/api/tensorstore.IndexTransform.__getitem__-domain.html", "python/api/tensorstore.IndexTransform.__getitem__-expr.html", "python/api/tensorstore.IndexTransform.__getitem__-indices.html", "python/api/tensorstore.IndexTransform.__getitem__-transform.html", "python/api/tensorstore.IndexTransform.__init__-components.html", "python/api/tensorstore.IndexTransform.__init__-domain.html", "python/api/tensorstore.IndexTransform.__init__-json.html", "python/api/tensorstore.IndexTransform.__repr__.html", "python/api/tensorstore.IndexTransform.domain.html", "python/api/tensorstore.IndexTransform.implicit_lower_bounds.html", "python/api/tensorstore.IndexTransform.implicit_upper_bounds.html", "python/api/tensorstore.IndexTransform.input_exclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_min.html", "python/api/tensorstore.IndexTransform.input_labels.html", "python/api/tensorstore.IndexTransform.input_origin.html", "python/api/tensorstore.IndexTransform.input_rank.html", "python/api/tensorstore.IndexTransform.input_shape.html", "python/api/tensorstore.IndexTransform.label.html", "python/api/tensorstore.IndexTransform.mark_bounds_implicit.html", "python/api/tensorstore.IndexTransform.ndim.html", "python/api/tensorstore.IndexTransform.oindex.html", "python/api/tensorstore.IndexTransform.origin.html", "python/api/tensorstore.IndexTransform.output.html", "python/api/tensorstore.IndexTransform.output_rank.html", "python/api/tensorstore.IndexTransform.shape.html", "python/api/tensorstore.IndexTransform.size.html", "python/api/tensorstore.IndexTransform.to_json.html", "python/api/tensorstore.IndexTransform.translate_backward_by.html", "python/api/tensorstore.IndexTransform.translate_by.html", "python/api/tensorstore.IndexTransform.translate_to.html", "python/api/tensorstore.IndexTransform.transpose.html", "python/api/tensorstore.IndexTransform.vindex.html", "python/api/tensorstore.Indexable.html", "python/api/tensorstore.KvStore.html", "python/api/tensorstore.KvStore.KeyRange.html", "python/api/tensorstore.KvStore.KeyRange.__eq__.html", "python/api/tensorstore.KvStore.KeyRange.__init__.html", "python/api/tensorstore.KvStore.KeyRange.copy.html", "python/api/tensorstore.KvStore.KeyRange.empty.html", "python/api/tensorstore.KvStore.KeyRange.exclusive_max.html", "python/api/tensorstore.KvStore.KeyRange.inclusive_min.html", "python/api/tensorstore.KvStore.ReadResult.html", "python/api/tensorstore.KvStore.ReadResult.__init__.html", "python/api/tensorstore.KvStore.ReadResult.stamp.html", "python/api/tensorstore.KvStore.ReadResult.state.html", "python/api/tensorstore.KvStore.ReadResult.value.html", "python/api/tensorstore.KvStore.Spec.html", "python/api/tensorstore.KvStore.Spec.__add__.html", "python/api/tensorstore.KvStore.Spec.__eq__.html", "python/api/tensorstore.KvStore.Spec.__new__.html", "python/api/tensorstore.KvStore.Spec.__repr__.html", "python/api/tensorstore.KvStore.Spec.__truediv__.html", "python/api/tensorstore.KvStore.Spec.base.html", "python/api/tensorstore.KvStore.Spec.copy.html", "python/api/tensorstore.KvStore.Spec.path.html", "python/api/tensorstore.KvStore.Spec.to_json.html", "python/api/tensorstore.KvStore.Spec.update.html", "python/api/tensorstore.KvStore.Spec.url.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html", "python/api/tensorstore.KvStore.__add__.html", "python/api/tensorstore.KvStore.__delitem__.html", "python/api/tensorstore.KvStore.__getitem__.html", "python/api/tensorstore.KvStore.__repr__.html", "python/api/tensorstore.KvStore.__setitem__.html", "python/api/tensorstore.KvStore.__truediv__.html", "python/api/tensorstore.KvStore.base.html", "python/api/tensorstore.KvStore.copy.html", "python/api/tensorstore.KvStore.delete_range.html", "python/api/tensorstore.KvStore.experimental_copy_range_to.html", "python/api/tensorstore.KvStore.list.html", "python/api/tensorstore.KvStore.open.html", "python/api/tensorstore.KvStore.path.html", "python/api/tensorstore.KvStore.read.html", "python/api/tensorstore.KvStore.spec.html", "python/api/tensorstore.KvStore.transaction.html", "python/api/tensorstore.KvStore.url.html", "python/api/tensorstore.KvStore.with_transaction.html", "python/api/tensorstore.KvStore.write.html", "python/api/tensorstore.OpenMode.html", "python/api/tensorstore.OpenMode.__init__.html", "python/api/tensorstore.OpenMode.assume_cached_metadata.html", "python/api/tensorstore.OpenMode.assume_metadata.html", "python/api/tensorstore.OpenMode.create.html", "python/api/tensorstore.OpenMode.delete_existing.html", "python/api/tensorstore.OpenMode.open.html", "python/api/tensorstore.OutputIndexMap.html", "python/api/tensorstore.OutputIndexMap.__init__-constant.html", "python/api/tensorstore.OutputIndexMap.__init__-index_array.html", "python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html", "python/api/tensorstore.OutputIndexMap.index_array.html", "python/api/tensorstore.OutputIndexMap.index_range.html", "python/api/tensorstore.OutputIndexMap.input_dimension.html", "python/api/tensorstore.OutputIndexMap.method.html", "python/api/tensorstore.OutputIndexMap.offset.html", "python/api/tensorstore.OutputIndexMap.stride.html", "python/api/tensorstore.OutputIndexMaps.html", "python/api/tensorstore.OutputIndexMaps.__getitem__.html", "python/api/tensorstore.OutputIndexMaps.__len__.html", "python/api/tensorstore.OutputIndexMaps.rank.html", "python/api/tensorstore.OutputIndexMethod.html", "python/api/tensorstore.OutputIndexMethod.__init__.html", "python/api/tensorstore.OutputIndexMethod.array.html", "python/api/tensorstore.OutputIndexMethod.constant.html", "python/api/tensorstore.OutputIndexMethod.name.html", "python/api/tensorstore.OutputIndexMethod.single_input_dimension.html", "python/api/tensorstore.OutputIndexMethod.value.html", "python/api/tensorstore.Promise.html", "python/api/tensorstore.Promise.new.html", "python/api/tensorstore.Promise.set_exception.html", "python/api/tensorstore.Promise.set_result.html", "python/api/tensorstore.RecheckCacheOption.html", "python/api/tensorstore.Schema.html", "python/api/tensorstore.Schema.T.html", "python/api/tensorstore.Schema.__eq__.html", "python/api/tensorstore.Schema.__getitem__-domain.html", "python/api/tensorstore.Schema.__getitem__-expr.html", "python/api/tensorstore.Schema.__getitem__-indices.html", "python/api/tensorstore.Schema.__getitem__-transform.html", "python/api/tensorstore.Schema.__init__-components.html", "python/api/tensorstore.Schema.__init__-json.html", "python/api/tensorstore.Schema.__repr__.html", "python/api/tensorstore.Schema.chunk_layout.html", "python/api/tensorstore.Schema.codec.html", "python/api/tensorstore.Schema.copy.html", "python/api/tensorstore.Schema.dimension_units.html", "python/api/tensorstore.Schema.domain.html", "python/api/tensorstore.Schema.dtype.html", "python/api/tensorstore.Schema.fill_value.html", "python/api/tensorstore.Schema.label.html", "python/api/tensorstore.Schema.mark_bounds_implicit.html", "python/api/tensorstore.Schema.ndim.html", "python/api/tensorstore.Schema.oindex.html", "python/api/tensorstore.Schema.origin.html", "python/api/tensorstore.Schema.rank.html", "python/api/tensorstore.Schema.shape.html", "python/api/tensorstore.Schema.size.html", "python/api/tensorstore.Schema.to_json.html", "python/api/tensorstore.Schema.translate_backward_by.html", "python/api/tensorstore.Schema.translate_by.html", "python/api/tensorstore.Schema.translate_to.html", "python/api/tensorstore.Schema.transpose.html", "python/api/tensorstore.Schema.update.html", "python/api/tensorstore.Schema.vindex.html", "python/api/tensorstore.Spec.html", "python/api/tensorstore.Spec.T.html", "python/api/tensorstore.Spec.__eq__.html", "python/api/tensorstore.Spec.__getitem__-domain.html", "python/api/tensorstore.Spec.__getitem__-expr.html", "python/api/tensorstore.Spec.__getitem__-indices.html", "python/api/tensorstore.Spec.__getitem__-transform.html", "python/api/tensorstore.Spec.__new__.html", "python/api/tensorstore.Spec.__repr__.html", "python/api/tensorstore.Spec.base.html", "python/api/tensorstore.Spec.chunk_layout.html", "python/api/tensorstore.Spec.codec.html", "python/api/tensorstore.Spec.copy.html", "python/api/tensorstore.Spec.dimension_units.html", "python/api/tensorstore.Spec.domain.html", "python/api/tensorstore.Spec.dtype.html", "python/api/tensorstore.Spec.fill_value.html", "python/api/tensorstore.Spec.kvstore.html", "python/api/tensorstore.Spec.label.html", "python/api/tensorstore.Spec.mark_bounds_implicit.html", "python/api/tensorstore.Spec.ndim.html", "python/api/tensorstore.Spec.oindex.html", "python/api/tensorstore.Spec.open_mode.html", "python/api/tensorstore.Spec.origin.html", "python/api/tensorstore.Spec.rank.html", "python/api/tensorstore.Spec.schema.html", "python/api/tensorstore.Spec.shape.html", "python/api/tensorstore.Spec.size.html", "python/api/tensorstore.Spec.to_json.html", "python/api/tensorstore.Spec.transform.html", "python/api/tensorstore.Spec.translate_backward_by.html", "python/api/tensorstore.Spec.translate_by.html", "python/api/tensorstore.Spec.translate_to.html", "python/api/tensorstore.Spec.transpose.html", "python/api/tensorstore.Spec.update.html", "python/api/tensorstore.Spec.vindex.html", "python/api/tensorstore.TensorStore.html", "python/api/tensorstore.TensorStore.StorageStatistics.html", "python/api/tensorstore.TensorStore.StorageStatistics.__init__.html", "python/api/tensorstore.TensorStore.StorageStatistics.fully_stored.html", "python/api/tensorstore.TensorStore.StorageStatistics.not_stored.html", "python/api/tensorstore.TensorStore.T.html", "python/api/tensorstore.TensorStore.__array__.html", "python/api/tensorstore.TensorStore.__getitem__-domain.html", "python/api/tensorstore.TensorStore.__getitem__-expr.html", "python/api/tensorstore.TensorStore.__getitem__-indices.html", "python/api/tensorstore.TensorStore.__getitem__-transform.html", "python/api/tensorstore.TensorStore.__setitem__-domain.html", "python/api/tensorstore.TensorStore.__setitem__-expr.html", "python/api/tensorstore.TensorStore.__setitem__-indices.html", "python/api/tensorstore.TensorStore.__setitem__-transform.html", "python/api/tensorstore.TensorStore.astype.html", "python/api/tensorstore.TensorStore.base.html", "python/api/tensorstore.TensorStore.chunk_layout.html", "python/api/tensorstore.TensorStore.codec.html", "python/api/tensorstore.TensorStore.dimension_units.html", "python/api/tensorstore.TensorStore.domain.html", "python/api/tensorstore.TensorStore.dtype.html", "python/api/tensorstore.TensorStore.fill_value.html", "python/api/tensorstore.TensorStore.kvstore.html", "python/api/tensorstore.TensorStore.label.html", "python/api/tensorstore.TensorStore.mark_bounds_implicit.html", "python/api/tensorstore.TensorStore.mode.html", "python/api/tensorstore.TensorStore.ndim.html", "python/api/tensorstore.TensorStore.oindex.html", "python/api/tensorstore.TensorStore.oindex.__setitem__.html", "python/api/tensorstore.TensorStore.origin.html", "python/api/tensorstore.TensorStore.rank.html", "python/api/tensorstore.TensorStore.read.html", "python/api/tensorstore.TensorStore.readable.html", "python/api/tensorstore.TensorStore.resize.html", "python/api/tensorstore.TensorStore.resolve.html", "python/api/tensorstore.TensorStore.schema.html", "python/api/tensorstore.TensorStore.shape.html", "python/api/tensorstore.TensorStore.size.html", "python/api/tensorstore.TensorStore.spec.html", "python/api/tensorstore.TensorStore.storage_statistics.html", "python/api/tensorstore.TensorStore.transaction.html", "python/api/tensorstore.TensorStore.translate_backward_by.html", "python/api/tensorstore.TensorStore.translate_by.html", "python/api/tensorstore.TensorStore.translate_to.html", "python/api/tensorstore.TensorStore.transpose.html", "python/api/tensorstore.TensorStore.vindex.html", "python/api/tensorstore.TensorStore.vindex.__setitem__.html", "python/api/tensorstore.TensorStore.with_transaction.html", "python/api/tensorstore.TensorStore.writable.html", "python/api/tensorstore.TensorStore.write.html", "python/api/tensorstore.Transaction.html", "python/api/tensorstore.Transaction.__init__.html", "python/api/tensorstore.Transaction.abort.html", "python/api/tensorstore.Transaction.aborted.html", "python/api/tensorstore.Transaction.atomic.html", "python/api/tensorstore.Transaction.commit_async.html", "python/api/tensorstore.Transaction.commit_started.html", "python/api/tensorstore.Transaction.commit_sync.html", "python/api/tensorstore.Transaction.future.html", "python/api/tensorstore.Transaction.open.html", "python/api/tensorstore.Unit.html", "python/api/tensorstore.Unit.__eq__.html", "python/api/tensorstore.Unit.__init__-components.html", "python/api/tensorstore.Unit.__init__-json.html", "python/api/tensorstore.Unit.__init__-multiplier.html", "python/api/tensorstore.Unit.__init__-pair.html", "python/api/tensorstore.Unit.__init__-unit.html", "python/api/tensorstore.Unit.__mul__.html", "python/api/tensorstore.Unit.__truediv__.html", "python/api/tensorstore.Unit.base_unit.html", "python/api/tensorstore.Unit.multiplier.html", "python/api/tensorstore.Unit.to_json.html", "python/api/tensorstore.VirtualChunkedReadParameters.html", "python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html", "python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html", "python/api/tensorstore.VirtualChunkedWriteParameters.html", "python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html", "python/api/tensorstore.WriteFutures.html", "python/api/tensorstore.WriteFutures.add_done_callback.html", "python/api/tensorstore.WriteFutures.cancel.html", "python/api/tensorstore.WriteFutures.cancelled.html", "python/api/tensorstore.WriteFutures.commit.html", "python/api/tensorstore.WriteFutures.copy.html", "python/api/tensorstore.WriteFutures.done.html", "python/api/tensorstore.WriteFutures.exception.html", "python/api/tensorstore.WriteFutures.remove_done_callback.html", "python/api/tensorstore.WriteFutures.result.html", "python/api/tensorstore.array.html", "python/api/tensorstore.bfloat16.html", "python/api/tensorstore.bool.html", "python/api/tensorstore.cast-spec.html", "python/api/tensorstore.cast-store.html", "python/api/tensorstore.complex128.html", "python/api/tensorstore.complex64.html", "python/api/tensorstore.concat.html", "python/api/tensorstore.d.html", "python/api/tensorstore.d.__class_getitem__.html", "python/api/tensorstore.downsample-spec.html", "python/api/tensorstore.downsample-store.html", "python/api/tensorstore.dtype.html", "python/api/tensorstore.dtype.__call__.html", "python/api/tensorstore.dtype.__init__-dtype.html", "python/api/tensorstore.dtype.__init__-name.html", "python/api/tensorstore.dtype.name.html", "python/api/tensorstore.dtype.numpy_dtype.html", "python/api/tensorstore.dtype.to_json.html", "python/api/tensorstore.dtype.type.html", "python/api/tensorstore.experimental_collect_matching_metrics.html", "python/api/tensorstore.experimental_collect_prometheus_format_metrics.html", "python/api/tensorstore.experimental_push_metrics_to_prometheus.html", "python/api/tensorstore.experimental_update_verbose_logging.html", "python/api/tensorstore.float16.html", "python/api/tensorstore.float32.html", "python/api/tensorstore.float64.html", "python/api/tensorstore.float8_e4m3b11fnuz.html", "python/api/tensorstore.float8_e4m3fn.html", "python/api/tensorstore.float8_e4m3fnuz.html", "python/api/tensorstore.float8_e5m2.html", "python/api/tensorstore.float8_e5m2fnuz.html", "python/api/tensorstore.inf.html", "python/api/tensorstore.int16.html", "python/api/tensorstore.int32.html", "python/api/tensorstore.int4.html", "python/api/tensorstore.int64.html", "python/api/tensorstore.int8.html", "python/api/tensorstore.json.html", "python/api/tensorstore.newaxis.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.__init__.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.port.html", "python/api/tensorstore.ocdbt.dump.html", "python/api/tensorstore.open.html", "python/api/tensorstore.overlay.html", "python/api/tensorstore.parse_tensorstore_flags.html", "python/api/tensorstore.stack.html", "python/api/tensorstore.string.html", "python/api/tensorstore.uint16.html", "python/api/tensorstore.uint32.html", "python/api/tensorstore.uint64.html", "python/api/tensorstore.uint8.html", "python/api/tensorstore.ustring.html", "python/api/tensorstore.virtual_chunked.html", "python/indexing.html", "python/tutorial.html", "schema.html", "spec.html"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "indexentries": {"all_proxy": [[1686, "envvar-all_proxy", false], [1686, "index-4", false], [1686, "index-5", false]], "archflags": [[1689, "envvar-ARCHFLAGS", false]], "aws_access_key_id": [[1698, "envvar-AWS_ACCESS_KEY_ID", false], [1698, "index-5", false], [1698, "index-8", false]], "aws_config_file": [[1698, "envvar-AWS_CONFIG_FILE", false], [1698, "index-3", false]], "aws_ec2_metadata_service_endpoint": [[1698, "envvar-AWS_EC2_METADATA_SERVICE_ENDPOINT", false]], "aws_profile": [[1698, "envvar-AWS_PROFILE", false], [1698, "index-1", false], [1698, "index-12", false], [1698, "index-2", false]], "aws_secret_access_key": [[1698, "envvar-AWS_SECRET_ACCESS_KEY", false], [1698, "index-6", false], [1698, "index-9", false]], "aws_session_token": [[1698, "envvar-AWS_SESSION_TOKEN", false], [1698, "index-10", false], [1698, "index-7", false]], "aws_shared_credentials_file": [[1698, "envvar-AWS_SHARED_CREDENTIALS_FILE", false], [1698, "index-11", false], [1698, "index-4", false]], "bazelisk_home": [[1689, "envvar-BAZELISK_HOME", false]], "environment variable": [[1686, "envvar-GOOGLE_APPLICATION_CREDENTIALS", false], [1686, "envvar-GOOGLE_CLOUD_DISABLE_DIRECT_PATH", false], [1686, "envvar-SSLKEYLOGFILE", false], [1686, "envvar-SSL_CERT_DIR", false], [1686, "envvar-SSL_CERT_FILE", false], [1686, "envvar-TENSORSTORE_CA_BUNDLE", false], [1686, "envvar-TENSORSTORE_CA_PATH", false], [1686, "envvar-TENSORSTORE_CURL_LOW_SPEED_LIMIT_BYTES", false], [1686, "envvar-TENSORSTORE_CURL_LOW_SPEED_TIME_SECONDS", false], [1686, "envvar-TENSORSTORE_CURL_VERBOSE", false], [1686, "envvar-TENSORSTORE_GCS_GRPC_CHANNELS", false], [1686, "envvar-TENSORSTORE_GCS_HTTP_URL", false], [1686, "envvar-TENSORSTORE_GCS_HTTP_VERSION", false], [1686, "envvar-TENSORSTORE_GCS_RATE_LIMITER_DOUBLING_TIME", false], [1686, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY", false], [1686, "envvar-TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS", false], [1686, "envvar-TENSORSTORE_HTTP_THREADS", false], [1686, "envvar-TENSORSTORE_USE_FALLBACK_SSL_CERTS", false], [1686, "envvar-TENSORSTORE_VERBOSE_LOGGING", false], [1686, "envvar-all_proxy", false], [1686, "envvar-http_proxy", false], [1686, "envvar-https_proxy", false], [1686, "envvar-no_proxy", false], [1686, "index-0", false], [1686, "index-1", false], [1686, "index-2", false], [1686, "index-3", false], [1686, "index-4", false], [1686, "index-5", false], [1686, "index-6", false], [1689, "envvar-ARCHFLAGS", false], [1689, "envvar-BAZELISK_HOME", false], [1689, "envvar-MACOSX_DEPLOYMENT_TARGET", false], [1689, "envvar-PYTHON_BIN_PATH", false], [1689, "envvar-TENSORSTORE_BAZELISK", false], [1689, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS", false], [1689, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE", false], [1689, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS", false], [1689, "envvar-TENSORSTORE_PREBUILT_DIR", false], [1689, "envvar-TENSORSTORE_SYSTEM_LIBS", false], [1689, "index-0", false], [1689, "index-1", false], [1691, "index-0", false], [1691, "index-1", false], [1691, "index-2", false], [1698, "envvar-AWS_ACCESS_KEY_ID", false], [1698, "envvar-AWS_CONFIG_FILE", false], [1698, "envvar-AWS_EC2_METADATA_SERVICE_ENDPOINT", false], [1698, "envvar-AWS_PROFILE", false], [1698, "envvar-AWS_SECRET_ACCESS_KEY", false], [1698, "envvar-AWS_SESSION_TOKEN", false], [1698, "envvar-AWS_SHARED_CREDENTIALS_FILE", false], [1698, "envvar-TENSORSTORE_S3_RATE_LIMITER_DOUBLING_TIME", false], [1698, "envvar-TENSORSTORE_S3_REQUEST_CONCURRENCY", false], [1698, "index-0", false], [1698, "index-1", false], [1698, "index-10", false], [1698, "index-11", false], [1698, "index-12", false], [1698, "index-2", false], [1698, "index-3", false], [1698, "index-4", false], [1698, "index-5", false], [1698, "index-6", false], [1698, "index-7", false], [1698, "index-8", false], [1698, "index-9", false]], "google_application_credentials": [[1686, "envvar-GOOGLE_APPLICATION_CREDENTIALS", false], [1691, "index-1", false]], "google_cloud_disable_direct_path": [[1686, "envvar-GOOGLE_CLOUD_DISABLE_DIRECT_PATH", false]], "http_proxy": [[1686, "envvar-http_proxy", false]], "https_proxy": [[1686, "envvar-https_proxy", false]], "macosx_deployment_target": [[1689, "envvar-MACOSX_DEPLOYMENT_TARGET", false]], "no_proxy": [[1686, "envvar-no_proxy", false]], "pep 357": [[2162, "index-0", false]], "python enhancement proposals": [[2162, "index-0", false]], "python_bin_path": [[1689, "envvar-PYTHON_BIN_PATH", false]], "rfc": [[1680, "index-0", false], [1680, "index-1", false], [1692, "index-0", false]], "rfc 6901": [[1680, "index-0", false], [1680, "index-1", false]], "rfc 7230#section-3.2": [[1692, "index-0", false]], "ssl_cert_dir": [[1686, "envvar-SSL_CERT_DIR", false], [1686, "index-6", false]], "ssl_cert_file": [[1686, "envvar-SSL_CERT_FILE", false]], "sslkeylogfile": [[1686, "envvar-SSLKEYLOGFILE", false]], "tensorstore_bazel_build_options": [[1689, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS", false]], "tensorstore_bazel_compilation_mode": [[1689, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE", false]], "tensorstore_bazel_startup_options": [[1689, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS", false], [1689, "index-0", false]], "tensorstore_bazelisk": [[1689, "envvar-TENSORSTORE_BAZELISK", false]], "tensorstore_ca_bundle": [[1686, "envvar-TENSORSTORE_CA_BUNDLE", false], [1686, "index-0", false], [1686, "index-2", false]], "tensorstore_ca_path": [[1686, "envvar-TENSORSTORE_CA_PATH", false], [1686, "index-1", false]], "tensorstore_curl_low_speed_limit_bytes": [[1686, "envvar-TENSORSTORE_CURL_LOW_SPEED_LIMIT_BYTES", false]], "tensorstore_curl_low_speed_time_seconds": [[1686, "envvar-TENSORSTORE_CURL_LOW_SPEED_TIME_SECONDS", false]], "tensorstore_curl_verbose": [[1686, "envvar-TENSORSTORE_CURL_VERBOSE", false]], "tensorstore_gcs_grpc_channels": [[1686, "envvar-TENSORSTORE_GCS_GRPC_CHANNELS", false]], "tensorstore_gcs_http_url": [[1686, "envvar-TENSORSTORE_GCS_HTTP_URL", false], [1691, "index-2", false]], "tensorstore_gcs_http_version": [[1686, "envvar-TENSORSTORE_GCS_HTTP_VERSION", false]], "tensorstore_gcs_rate_limiter_doubling_time": [[1686, "envvar-TENSORSTORE_GCS_RATE_LIMITER_DOUBLING_TIME", false]], "tensorstore_gcs_request_concurrency": [[1686, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY", false], [1691, "index-0", false]], "tensorstore_http2_max_concurrent_streams": [[1686, "envvar-TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS", false]], "tensorstore_http_threads": [[1686, "envvar-TENSORSTORE_HTTP_THREADS", false]], "tensorstore_prebuilt_dir": [[1689, "envvar-TENSORSTORE_PREBUILT_DIR", false]], "tensorstore_s3_rate_limiter_doubling_time": [[1698, "envvar-TENSORSTORE_S3_RATE_LIMITER_DOUBLING_TIME", false]], "tensorstore_s3_request_concurrency": [[1698, "envvar-TENSORSTORE_S3_REQUEST_CONCURRENCY", false], [1698, "index-0", false]], "tensorstore_system_libs": [[1686, "index-3", false], [1689, "envvar-TENSORSTORE_SYSTEM_LIBS", false], [1689, "index-1", false]], "tensorstore_use_fallback_ssl_certs": [[1686, "envvar-TENSORSTORE_USE_FALLBACK_SSL_CERTS", false]], "tensorstore_verbose_logging": [[1686, "envvar-TENSORSTORE_VERBOSE_LOGGING", false]]}, "objects": {"": [[1, 0, 1, "", "TENSORSTORE_ASSERT_OK", "Same as TENSORSTORE_EXPECT_OK, but returns in the case of an error."], [2, 0, 1, "", "TENSORSTORE_ASSERT_OK_AND_ASSIGN", "ASSERTs that expr is a tensorstore::Result with a value, and assigns the value to decl."], [3, 0, 1, "", "TENSORSTORE_ASSIGN_OR_RETURN", "Convenience macro for propagating errors when calling a function that returns a tensorstore::Result."], [4, 0, 1, "", "TENSORSTORE_CHECK_OK", "Logs an error and terminates the program if the specified absl::Status is an error status."], [5, 0, 1, "", "TENSORSTORE_CHECK_OK_AND_ASSIGN", "Convenience macro for checking errors when calling a function that returns a tensorstore::Result."], [6, 0, 1, "", "TENSORSTORE_EXPECT_OK", "EXPECT assertion that the argument, when converted to an absl::Status via tensorstore::GetStatus, has a code of absl::StatusCode::kOk."], [7, 0, 1, "", "TENSORSTORE_RETURN_IF_ERROR", "Causes the containing function to return the specified absl::Status value if it is an error status."], [9, 1, 1, "", "tensorstore::AddByteOffset", "Adds a byte offset to an ElementPointer type."], [9, 1, 1, "", "tensorstore::AddByteOffset", "Adds a byte offset to an ElementPointer type."], [10, 1, 1, "", "tensorstore::AddByteOffset", "Adds a byte offset to a raw pointer."], [11, 1, 1, "", "tensorstore::AddByteOffset", "Adds a byte offset to a shared_ptr."], [12, 1, 1, "", "tensorstore::AlignDimensionsTo", "Same as AlignDomainTo, but instead of computing the alignment transform, simply sets source_matches[i] = j, if source dimension i matches to target dimension j, and sets source_matches[i] = -1 if source dimension i is unmatched."], [12, 2, 2, "p-options", "tensorstore::AlignDimensionsTo::options", "Specifies the transformations that are permitted."], [12, 2, 2, "p-source", "tensorstore::AlignDimensionsTo::source", "Source domain."], [12, 2, 2, "p-source_matches", "tensorstore::AlignDimensionsTo::source_matches", "Array of length source.rank(), set to the matches on success."], [12, 2, 2, "p-target", "tensorstore::AlignDimensionsTo::target", "Target domain."], [13, 1, 1, "", "tensorstore::AlignDomainTo", "Attempts to align the source domain to match the target domain."], [13, 2, 2, "p-options", "tensorstore::AlignDomainTo::options", "Specifies the transformations that are permitted."], [13, 2, 2, "p-source", "tensorstore::AlignDomainTo::source", "The source domain."], [13, 2, 2, "p-target", "tensorstore::AlignDomainTo::target", "The target domain to which source should be aligned."], [14, 1, 1, "", "tensorstore::AlignTransformTo", "Returns ComposeTransforms(source_transform, alignment), where alignment is the result of AlignDomainTo(source_transform.domain(), target, options)."], [15, 1, 1, "", "tensorstore::AllDims", "Starts a DimExpression with all dimensions selected (and no operations)."], [16, 1, 1, "", "tensorstore::AllocateAndConstruct", "Allocates and initializes a contiguous 1-dimensional array of n elements of type r specified at run time."], [16, 2, 2, "p-initialization", "tensorstore::AllocateAndConstruct::initialization", "The form of initialization to use."], [16, 2, 2, "p-n", "tensorstore::AllocateAndConstruct::n", "The number of elements to allocate."], [16, 2, 2, "p-r", "tensorstore::AllocateAndConstruct::r", "The element type."], [17, 1, 1, "", "tensorstore::AllocateAndConstructShared", "Returns a shared_ptr that manages the memory returned by AllocateAndConstruct."], [17, 3, 2, "p-T", "tensorstore::AllocateAndConstructShared::T", "Optional."], [17, 2, 2, "p-initialization", "tensorstore::AllocateAndConstructShared::initialization", "Optional."], [17, 2, 2, "p-n", "tensorstore::AllocateAndConstructShared::n", "The number of elements to allocate."], [17, 2, 2, "p-r", "tensorstore::AllocateAndConstructShared::r", "The element type."], [18, 1, 1, "", "tensorstore::AllocateArray", "Allocates a contiguous array of the specified shape/domain and type."], [18, 1, 1, "", "tensorstore::AllocateArray", "Allocates a contiguous array of the specified shape/domain and type."], [18, 3, 2, "p-Element", "tensorstore::AllocateArray::Element", "Optional."], [18, 2, 2, "p-domain", "tensorstore::AllocateArray::domain", "The domain of the array."], [18, 2, 2, "p-dtype", "tensorstore::AllocateArray::dtype", "Optional."], [18, 2, 2, "p-extents", "tensorstore::AllocateArray::extents", "A span-compatible array specifying the shape of the array. The element type of extents must be convertible without narrowing to Index."], [18, 2, 2, "p-initialization", "tensorstore::AllocateArray::initialization", "Optional."], [18, 2, 2, "p-layout_order", "tensorstore::AllocateArray::layout_order", "Optional."], [19, 1, 1, "", "tensorstore::AllocateArrayElementsLike", "Allocates an array data buffer with a layout similar to an existing strided layout."], [19, 2, 2, "p-byte_strides", "tensorstore::AllocateArrayElementsLike::byte_strides", "Pointer to array of length layout.rank() where the byte strides of the new array will be stored."], [19, 2, 2, "p-constraints", "tensorstore::AllocateArrayElementsLike::constraints", "If constraints.has_order_constraint(), the returned array will use constraints.order_constraint_value()."], [19, 2, 2, "p-dtype", "tensorstore::AllocateArrayElementsLike::dtype", "Specifies the element type (optional if Element is non-void)."], [19, 2, 2, "p-initialization", "tensorstore::AllocateArrayElementsLike::initialization", "Specifies the initialization type."], [19, 2, 2, "p-layout", "tensorstore::AllocateArrayElementsLike::layout", "The existing strided layout."], [20, 1, 1, "", "tensorstore::AllocateArrayLike", "Allocates an array with a layout similar to an existing strided layout."], [20, 2, 2, "p-constraints", "tensorstore::AllocateArrayLike::constraints", "If constraints.has_order_constraint(), the returned array will use constraints.order_constraint_value()."], [20, 2, 2, "p-dtype", "tensorstore::AllocateArrayLike::dtype", "Specifies the element type (optional if Element is non-void)."], [20, 2, 2, "p-initialization", "tensorstore::AllocateArrayLike::initialization", "Specifies the initialization type."], [20, 2, 2, "p-layout", "tensorstore::AllocateArrayLike::layout", "The existing strided layout."], [21, 4, 1, "", "tensorstore::AnyFuture", "Generic consumer interface to a one-time channel."], [22, 1, 1, "", "tensorstore::AnyFuture::AnyFuture", "Constructs an null AnyFuture. :post: null()."], [23, 1, 1, "", "tensorstore::AnyFuture::Force", "Calls any Force callbacks registered on the associated Promise, if they have not already been called."], [24, 1, 1, "", "tensorstore::AnyFuture::IgnoreFuture", "Ignores the future. This method signals intent to ignore the result to suppress compiler warnings from [[nodiscard]]."], [25, 1, 1, "", "tensorstore::AnyFuture::UntypedExecuteWhenReady", "Executes callback with the signature void(AnyFuture) when this becomes ready."], [26, 1, 1, "", "tensorstore::AnyFuture::Wait", "Calls Force(), and waits until ready() == true."], [27, 1, 1, "", "tensorstore::AnyFuture::WaitFor", "Waits for up to the specified duration for the result to be ready."], [28, 1, 1, "", "tensorstore::AnyFuture::WaitUntil", "Waits until the specified time for the result to be ready."], [29, 1, 1, "", "tensorstore::AnyFuture::null", "Returns true if this Future has no shared state."], [30, 1, 1, "", "tensorstore::AnyFuture::ready", "Returns true if the result is ready."], [31, 1, 1, "", "tensorstore::AnyFuture::reset", "Resets this Future to be null."], [32, 1, 1, "", "tensorstore::AnyFuture::status", "Calls Force(), waits for the result to be ready, and returns OkStatus (when a value is present) or a copy of result.status()."], [33, 1, 1, "", "tensorstore::AppendToString", "Appends a string representation of array to *result."], [34, 1, 1, "", "tensorstore::ApplyIndexTransform", "Applies a function that operates on an IndexTransform to a strided (non-transformed) array.  The result is always a TransformedArray."], [35, 1, 1, "", "tensorstore::ApplyIndexTransform", "Applies a function that operates on an IndexTransform to a transformed array.  The result is always a TransformedArray."], [36, 1, 1, "", "tensorstore::AreArraysEqual", "Compares two arrays for equality."], [36, 1, 1, "", "tensorstore::AreArraysIdenticallyEqual", "Compares two arrays for equality."], [37, 1, 1, "", "tensorstore::AreCompatibleOrUnbounded", "Returns true if the lower and upper bounds of a \"match\" the lower and upper bounds of b."], [38, 5, 1, "", "tensorstore::AreElementTypesCompatible", "Metafunction that evaluates to whether A and B could refer to the same type, ignoring const."], [39, 4, 1, "", "tensorstore::Array", "Represents a pointer to an in-memory multi-dimensional array with an arbitrary strided layout."], [40, 1, 1, "", "tensorstore::Array::Array", "Converts from a compatible existing array."], [40, 1, 1, "", "tensorstore::Array::Array", "Converts from a compatible existing array."], [41, 1, 1, "", "tensorstore::Array::Array", "Default constructs both the element_pointer and the layout."], [42, 1, 1, "", "tensorstore::Array::Array", "Constructs a rank-0 array from an implicitly convertible element_pointer."], [43, 1, 1, "", "tensorstore::Array::Array", "Constructs an array with a contiguous layout from an implicitly convertible element_pointer and domain."], [44, 1, 1, "", "tensorstore::Array::Array", "Constructs an array from a convertible element_pointer and layout."], [45, 1, 1, "", "tensorstore::Array::Array", "Constructs an array with a contiguous layout from an implicitly convertible element_pointer and shape."], [45, 1, 1, "", "tensorstore::Array::Array", "Constructs an array with a contiguous layout from an implicitly convertible element_pointer and shape."], [46, 1, 1, "", "tensorstore::Array::Array", "Unchecked conversion."], [45, 2, 2, "p-element_pointer", "tensorstore::Array::Array::element_pointer", "The base/origin pointer of the array."], [45, 2, 2, "p-order", "tensorstore::Array::Array::order", "Specifies the layout order."], [45, 2, 2, "p-shape", "tensorstore::Array::Array::shape", "The dimensions of the array."], [45, 2, 2, "p-shape", "tensorstore::Array::Array::shape", "The dimensions of the array."], [47, 6, 1, "", "tensorstore::Array::DataType", "Static or dynamic data type of the array."], [48, 6, 1, "", "tensorstore::Array::Element", "Element type of the array, may be const qualified."], [49, 6, 1, "", "tensorstore::Array::ElementPointer", "Element pointer type."], [50, 6, 1, "", "tensorstore::Array::ElementTag", "Element tag type of the array."], [39, 3, 2, "p-ElementTagType", "tensorstore::Array::ElementTagType", "Must satisfy IsElementTag."], [51, 6, 1, "", "tensorstore::Array::Layout", "Strided layout type used by the array."], [39, 7, 2, "p-LayoutContainerKind", "tensorstore::Array::LayoutContainerKind", "Equal to container or view."], [52, 6, 1, "", "tensorstore::Array::MaybeConstIndex", "Element type of the span returned by the non-const shape and byte_strides methods."], [53, 6, 1, "", "tensorstore::Array::MaybeConstOriginIndex", "Element type of the span returned by the non-const origin method."], [39, 7, 2, "p-OriginKind", "tensorstore::Array::OriginKind", "Equal to zero_origin or offset_origin."], [54, 6, 1, "", "tensorstore::Array::Pointer", "Stored data pointer, either Element* or std::shared_ptr<Element>."], [39, 7, 2, "p-Rank", "tensorstore::Array::Rank", "The compile-time rank of the array, dynamic_rank if the rank is to be specified at run time, if LayoutContainerKind == view, dynamic_rank(n) for n >= 0 to indicate a rank specified at run time with inline layout storage for ranks k <= n."], [55, 6, 1, "", "tensorstore::Array::RankType", "Static or dynamic rank representation type."], [56, 6, 1, "", "tensorstore::Array::RawPointer", "Raw data pointer type."], [57, 6, 1, "", "tensorstore::Array::RebindElement", "Alias that evaluates to an Array type with the specified Element type rebound."], [58, 6, 1, "", "tensorstore::Array::RebindRank", "Alias that evaluates to an Array type with the static_rank rebound."], [59, 5, 1, "", "tensorstore::Array::array_origin_kind", "Origin kind of the array."], [60, 1, 1, "", "tensorstore::Array::array_view", "Returns an ArrayView that represents the same array."], [61, 1, 1, "", "tensorstore::Array::byte_strided_origin_pointer", "Returns the base address of the array data as a ByteStridedPointer."], [62, 1, 1, "", "tensorstore::Array::byte_strided_pointer", "Returns the base address of the array data as a ByteStridedPointer."], [63, 1, 1, "", "tensorstore::Array::byte_strides", "Returns the byte strides vector of size rank()."], [63, 1, 1, "", "tensorstore::Array::byte_strides", "Returns the byte strides vector of size rank()."], [64, 1, 1, "", "tensorstore::Array::data", "Returns a raw pointer to the element of the array at the zero index vector."], [65, 1, 1, "", "tensorstore::Array::domain", "Returns the domain of the array."], [66, 1, 1, "", "tensorstore::Array::dtype", "Returns the element representation type."], [67, 1, 1, "", "tensorstore::Array::element_pointer", "Returns a reference to the element pointer."], [67, 1, 1, "", "tensorstore::Array::element_pointer", "Returns a reference to the element pointer."], [67, 1, 1, "", "tensorstore::Array::element_pointer", "Returns a reference to the element pointer."], [68, 6, 1, "", "tensorstore::Array::index_type", "Array index type."], [69, 1, 1, "", "tensorstore::Array::layout", "Returns a reference to the layout."], [69, 1, 1, "", "tensorstore::Array::layout", "Returns a reference to the layout."], [69, 1, 1, "", "tensorstore::Array::layout", "Returns a reference to the layout."], [70, 5, 1, "", "tensorstore::Array::layout_container_kind", "Specified whether the Layout is stored by value or by reference."], [71, 1, 1, "", "tensorstore::Array::num_elements", "Returns the total number of element, equal to the product of the elements in shape()."], [77, 1, 1, "", "tensorstore::Array::operator!=", "Returns !(a == b)."], [74, 1, 1, "", "tensorstore::Array::operator()", "Returns a reference to the element at the specified indices."], [75, 1, 1, "", "tensorstore::Array::operator()", "Returns a reference to the element at the specified indices."], [74, 3, 2, "p-IndexType", "tensorstore::Array::operator()::IndexType", "Must be convertible without narrowing to Index."], [74, 2, 2, "p-index", "tensorstore::Array::operator()::index", "A pack of rank() indices."], [75, 2, 2, "p-indices", "tensorstore::Array::operator()::indices", "A span compatible vector of rank() indices, of type convertible to Index."], [78, 1, 1, "", "tensorstore::Array::operator&lt;&lt;", "Prints the array to an std::ostream."], [72, 1, 1, "", "tensorstore::Array::operator=", "Copy assigns from a compatible existing array."], [76, 1, 1, "", "tensorstore::Array::operator==", "Compares the contents of two arrays for equality."], [79, 1, 1, "", "tensorstore::Array::operator[]", "Returns a reference to the sub-array obtained by subscripting the first dimension."], [80, 1, 1, "", "tensorstore::Array::operator[]", "Returns a reference to the sub-array obtained by subscripting the first std::size(indices) dimensions."], [79, 2, 2, "p-index", "tensorstore::Array::operator[]::index", "The index into the first dimension."], [80, 2, 2, "p-indices", "tensorstore::Array::operator[]::indices", "A span-compatible index vector."], [73, 1, 1, "", "tensorstore::Array::operator|", "\"Pipeline\" operator."], [73, 1, 1, "", "tensorstore::Array::operator|", "\"Pipeline\" operator."], [81, 1, 1, "", "tensorstore::Array::origin", "Returns the origin vector of size rank()."], [81, 1, 1, "", "tensorstore::Array::origin", "Returns the origin vector of size rank()."], [82, 1, 1, "", "tensorstore::Array::pointer", "Returns a reference to the stored pointer."], [82, 1, 1, "", "tensorstore::Array::pointer", "Returns a reference to the stored pointer."], [83, 1, 1, "", "tensorstore::Array::rank", "Returns the rank of the array."], [84, 1, 1, "", "tensorstore::Array::shape", "Returns the shape vector of size rank()."], [84, 1, 1, "", "tensorstore::Array::shape", "Returns the shape vector of size rank()."], [85, 1, 1, "", "tensorstore::Array::shared_array", "Returns a SharedArray that represents the same array."], [86, 1, 1, "", "tensorstore::Array::shared_array_view", "Returns a SharedArrayView that represents the same array."], [87, 5, 1, "", "tensorstore::Array::static_rank", "Rank of the array, or dynamic_rank if specified at run time."], [88, 1, 1, "", "tensorstore::Array::valid", "Returns true if data() != nullptr."], [89, 6, 1, "", "tensorstore::Array::value_type", "Unqualified element type."], [90, 4, 1, "", "tensorstore::ArrayFormatOptions", "Specifies options for formatting an array."], [91, 1, 1, "", "tensorstore::ArrayFormatOptions::Default", "Returns a reference to a default-constructed instance of ArrayFormatOptions."], [92, 5, 1, "", "tensorstore::ArrayFormatOptions::prefix", "Prefix printed at the start of each dimension."], [93, 5, 1, "", "tensorstore::ArrayFormatOptions::separator", "Separator printed between consecutive elements/sub-arrays."], [94, 5, 1, "", "tensorstore::ArrayFormatOptions::suffix", "Suffix printed at the end of each dimension."], [95, 5, 1, "", "tensorstore::ArrayFormatOptions::summary_edge_items", "Number of items at the beginning and end of each dimension to include in the summary representation.  If the number of elements in a given dimension is <= 2 * summary_edge_items, the full representation of that dimension will be shown."], [96, 5, 1, "", "tensorstore::ArrayFormatOptions::summary_ellipses", "Separator printed between the first summary_edge_items and the last summary_edge_items when printing a summary of a dimension."], [97, 5, 1, "", "tensorstore::ArrayFormatOptions::summary_threshold", "If the total number of elements in the array (product of all dimensions) exceeds this threshold, a summary is printed rather than the full representation."], [98, 1, 1, "", "tensorstore::ArrayOriginCast", "Converts an array to the specified origin kind."], [98, 1, 1, "", "tensorstore::ArrayOriginCast", "Converts an array to the specified origin kind."], [98, 7, 2, "p-LayoutContainerKind", "tensorstore::ArrayOriginCast::LayoutContainerKind", "Specifies the new layout container kind."], [98, 7, 2, "p-TargetOriginKind", "tensorstore::ArrayOriginCast::TargetOriginKind", "Specifies the new origin kind."], [99, 8, 1, "", "tensorstore::ArrayOriginKind", "Specifies whether array indices start at zero, or at an arbitrary origin vector."], [99, 9, 1, "e-offset", "tensorstore::ArrayOriginKind::offset", "Non-zero origin is permitted."], [99, 9, 1, "e-zero", "tensorstore::ArrayOriginKind::zero", "Origin is always at 0."], [100, 4, 1, "", "tensorstore::ArrayStorageStatistics", "Response from a storage statistics query."], [101, 8, 1, "", "tensorstore::ArrayStorageStatistics::Mask", "Indicates the information to request."], [101, 9, 1, "e-query_fully_stored", "tensorstore::ArrayStorageStatistics::Mask::query_fully_stored", "Query if data is stored for all elements in the requested domain."], [101, 9, 1, "e-query_not_stored", "tensorstore::ArrayStorageStatistics::Mask::query_not_stored", "Query if no data is stored."], [102, 5, 1, "", "tensorstore::ArrayStorageStatistics::fully_stored", "Indicates whether the requested domain is fully stored."], [103, 5, 1, "", "tensorstore::ArrayStorageStatistics::mask", "Indicates which fields are valid."], [104, 5, 1, "", "tensorstore::ArrayStorageStatistics::not_stored", "Set to true if no data is stored within the requested domain."], [106, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator!=", "Comparison operators."], [105, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator&amp;", "Set operations."], [105, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator&amp;=", "Set operations."], [107, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator&lt;&lt;", "Prints a debug representation."], [106, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator==", "Comparison operators."], [105, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator|", "Set operations."], [105, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator|=", "Set operations."], [105, 1, 1, "", "tensorstore::ArrayStorageStatistics::operator~", "Set operations."], [108, 6, 1, "", "tensorstore::ArrayView", "Convenience alias for an unowned reference to an in-memory multi-dimensional array with an arbitrary strided layout."], [108, 3, 2, "p-Element", "tensorstore::ArrayView::Element", "Specifies the compile-time element type."], [108, 7, 2, "p-Rank", "tensorstore::ArrayView::Rank", "Specifies the compile-time rank of the array."], [109, 1, 1, "", "tensorstore::ArraysHaveSameShapes", "Checks that all array arguments have the same shape."], [110, 4, 1, "", "tensorstore::BFloat16", "Storage-only bfloat16 type."], [111, 1, 1, "", "tensorstore::BFloat16::BFloat16", "Possibly lossy conversion from any type convertible to float."], [112, 1, 1, "", "tensorstore::BFloat16::BFloat16", "Zero initialization."], [116, 1, 1, "", "tensorstore::BFloat16::operator float", "Lossless conversion to float."], [121, 1, 1, "", "tensorstore::BFloat16::operator*", "Multiplication operator."], [122, 1, 1, "", "tensorstore::BFloat16::operator*=", "Multiplication assignment operator."], [124, 1, 1, "", "tensorstore::BFloat16::operator+", "Addition operator."], [130, 1, 1, "", "tensorstore::BFloat16::operator+", "Unary plus."], [127, 1, 1, "", "tensorstore::BFloat16::operator++", "Post-increment."], [129, 1, 1, "", "tensorstore::BFloat16::operator++", "Pre-increment."], [125, 1, 1, "", "tensorstore::BFloat16::operator+=", "Addition assignment operator."], [119, 1, 1, "", "tensorstore::BFloat16::operator-", "Subtraction operator."], [123, 1, 1, "", "tensorstore::BFloat16::operator-", "Unary negation."], [126, 1, 1, "", "tensorstore::BFloat16::operator--", "Post-decrement."], [128, 1, 1, "", "tensorstore::BFloat16::operator--", "Pre-decrement."], [120, 1, 1, "", "tensorstore::BFloat16::operator-=", "Subtraction assignment operator."], [117, 1, 1, "", "tensorstore::BFloat16::operator/", "Division operator."], [118, 1, 1, "", "tensorstore::BFloat16::operator/=", "Division assignment operator."], [113, 1, 1, "", "tensorstore::BFloat16::operator=", "Bool assignment."], [114, 1, 1, "", "tensorstore::BFloat16::operator=", "Possibly lossy conversion from float."], [115, 1, 1, "", "tensorstore::BFloat16::operator=", "Possibly lossy conversion from any integer type."], [131, 4, 1, "", "tensorstore::Batch", "Batch provides a mechanism for defining a batch of asynchronous operations that will potentially be deferred until all references to the batch are released."], [132, 1, 1, "", "tensorstore::Batch::New", "Creates a new batch."], [133, 1, 1, "", "tensorstore::Batch::Release", "Releases this reference to the batch."], [134, 4, 1, "", "tensorstore::Batch::View", "Unowned reference to an optional batch."], [135, 1, 1, "", "tensorstore::Batch::View::View", "Constructs a view that refers to an existing batch."], [136, 1, 1, "", "tensorstore::Batch::View::View", "Constructs a view that refers to no_batch."], [136, 1, 1, "", "tensorstore::Batch::View::View", "Constructs a view that refers to no_batch."], [137, 1, 1, "", "tensorstore::Batch::View::deferred", "Returns true if this refers to a batch that has not yet been submitted."], [138, 1, 1, "", "tensorstore::Batch::View::operator bool", "Returns true if this refers to a batch (as opposed to no_batch)."], [139, 1, 1, "", "tensorstore::Batch::deferred", "Returns true if this refers to a batch that has not yet been submitted."], [140, 5, 1, "", "tensorstore::Batch::no_batch", "Special value that indicates not to use a batch."], [141, 4, 1, "", "tensorstore::Batch::no_batch_t", "Tag type used for no_batch."], [142, 1, 1, "", "tensorstore::Batch::operator bool", "Returns true if this refers to a batch (as opposed to no_batch)."], [143, 4, 1, "", "tensorstore::BitIterator", "Iterator within a packed bit sequence."], [144, 1, 1, "", "tensorstore::BitIterator::BitIterator", "Constructs from a base pointer and offset."], [145, 1, 1, "", "tensorstore::BitIterator::BitIterator", "Converts from a non-const iterator."], [146, 1, 1, "", "tensorstore::BitIterator::BitIterator", "Constructs an invalid iterator."], [143, 3, 2, "p-T", "tensorstore::BitIterator::T", "The unsigned integer \"block\" type used to store the packed bits. If const-qualified, the iterator cannot be used to modify the sequence."], [147, 1, 1, "", "tensorstore::BitIterator::base", "Returns the base pointer."], [162, 6, 1, "", "tensorstore::BitIterator::const_pointer", "Proxy pointer type."], [163, 6, 1, "", "tensorstore::BitIterator::const_reference", "Proxy reference type."], [148, 6, 1, "", "tensorstore::BitIterator::difference_type", "Difference type."], [149, 6, 1, "", "tensorstore::BitIterator::iterator_category", "Iterator category."], [150, 5, 1, "", "tensorstore::BitIterator::kBitsPerBlock", "Number of bits stored per block of type T."], [151, 1, 1, "", "tensorstore::BitIterator::offset", "Returns the bit offset relative to base."], [153, 1, 1, "", "tensorstore::BitIterator::operator!=", "Compares the positions of two iterators."], [152, 1, 1, "", "tensorstore::BitIterator::operator*", "Returns a proxy reference to the bit referenced by this iterator."], [156, 1, 1, "", "tensorstore::BitIterator::operator+", "Adds an offset to an iterator."], [156, 1, 1, "", "tensorstore::BitIterator::operator+", "Adds an offset to an iterator."], [158, 1, 1, "", "tensorstore::BitIterator::operator++", "Post-increment operator."], [160, 1, 1, "", "tensorstore::BitIterator::operator++", "Pre-increment operator."], [156, 1, 1, "", "tensorstore::BitIterator::operator+=", "Adds an offset to an iterator."], [154, 1, 1, "", "tensorstore::BitIterator::operator-", "Returns the distance from b to a."], [155, 1, 1, "", "tensorstore::BitIterator::operator-", "Subtracts an offset from an iterator."], [157, 1, 1, "", "tensorstore::BitIterator::operator--", "Post-decrement operator."], [159, 1, 1, "", "tensorstore::BitIterator::operator--", "Pre-decrement operator."], [155, 1, 1, "", "tensorstore::BitIterator::operator-=", "Subtracts an offset from an iterator."], [153, 1, 1, "", "tensorstore::BitIterator::operator&lt;", "Compares the positions of two iterators."], [153, 1, 1, "", "tensorstore::BitIterator::operator&lt;=", "Compares the positions of two iterators."], [153, 1, 1, "", "tensorstore::BitIterator::operator==", "Compares the positions of two iterators."], [153, 1, 1, "", "tensorstore::BitIterator::operator&gt;", "Compares the positions of two iterators."], [153, 1, 1, "", "tensorstore::BitIterator::operator&gt;=", "Compares the positions of two iterators."], [161, 1, 1, "", "tensorstore::BitIterator::operator[]", "Returns a proxy reference to the bit at the specified offset."], [162, 6, 1, "", "tensorstore::BitIterator::pointer", "Proxy pointer type."], [163, 6, 1, "", "tensorstore::BitIterator::reference", "Proxy reference type."], [164, 6, 1, "", "tensorstore::BitIterator::value_type", "Value type of iterator."], [165, 4, 1, "", "tensorstore::BitRef", "Mutable or constant reference to a single bit of a packed bit sequence."], [166, 1, 1, "", "tensorstore::BitRef::BitRef", "Binds to bit offset % kBitsPerBlock of *block."], [165, 3, 2, "p-T", "tensorstore::BitRef::T", "The unsigned integer \"block\" type used to store the packed bits. A mutable reference is indicated by an unqualified type, e.g."], [167, 6, 1, "", "tensorstore::BitRef::block_type", "Block type used to represent the bits."], [173, 6, 1, "", "tensorstore::BitRef::element_type", "Element type of the reference."], [168, 5, 1, "", "tensorstore::BitRef::kBitsPerBlock", "Number of bits stored per T value."], [171, 1, 1, "", "tensorstore::BitRef::operator bool", "Returns the value of the bound bit."], [169, 1, 1, "", "tensorstore::BitRef::operator=", "Equivalent to *this = static_cast<bool>(value)."], [170, 1, 1, "", "tensorstore::BitRef::operator=", "Sets the bound bit to value, leaving all other bits unchanged."], [172, 1, 1, "", "tensorstore::BitRef::swap", "Swaps the referenced bit with a bool value."], [172, 1, 1, "", "tensorstore::BitRef::swap", "Swaps the referenced bit with a bool value."], [173, 6, 1, "", "tensorstore::BitRef::value_type", "Element type of the reference."], [174, 4, 1, "", "tensorstore::Box", "Value type representing an n-dimensional hyperrectangle."], [175, 1, 1, "", "tensorstore::Box::Box", "Unchecked conversion."], [176, 1, 1, "", "tensorstore::Box::Box", "Constructs from another Box-like type with a compatible rank."], [177, 1, 1, "", "tensorstore::Box::Box", "Constructs a rank-0 box (if static_rank == dynamic_rank), or otherwise an unbounded box of rank static_rank."], [178, 1, 1, "", "tensorstore::Box::Box", "Constructs from an origin array and shape array."], [178, 1, 1, "", "tensorstore::Box::Box", "Constructs from an origin array and shape array."], [179, 1, 1, "", "tensorstore::Box::Box", "Constructs an unbounded box of the specified rank."], [180, 1, 1, "", "tensorstore::Box::Box", "Constructs from a rank, an origin base pointer, and a shape base pointer."], [181, 1, 1, "", "tensorstore::Box::Box", "Constructs from a shape vector."], [181, 1, 1, "", "tensorstore::Box::Box", "Constructs from a shape vector."], [182, 1, 1, "", "tensorstore::Box::Box", "Unchecked conversion."], [178, 2, 2, "p-origin", "tensorstore::Box::Box::origin", "Array of origin values."], [178, 2, 2, "p-origin", "tensorstore::Box::Box::origin", "Array of origin values."], [180, 2, 2, "p-origin", "tensorstore::Box::Box::origin", "Pointer to array of length rank."], [180, 2, 2, "p-rank", "tensorstore::Box::Box::rank", "The rank of the index space."], [178, 2, 2, "p-shape", "tensorstore::Box::Box::shape", "Array of extents."], [178, 2, 2, "p-shape", "tensorstore::Box::Box::shape", "Array of extents."], [180, 2, 2, "p-shape", "tensorstore::Box::Box::shape", "Pointer to array of length rank."], [183, 1, 1, "", "tensorstore::Box::Fill", "Fills origin() with interval.inclusive_min() and shape with interval.size()."], [174, 7, 2, "p-Rank", "tensorstore::Box::Rank", "If non-negative, specifies the number of dimensions at compile time."], [184, 6, 1, "", "tensorstore::Box::RankType", "Type that represents the static or dynamic rank."], [185, 1, 1, "", "tensorstore::Box::is_empty", "Returns true if num_elements() == 0."], [186, 1, 1, "", "tensorstore::Box::num_elements", "Returns the product of the extents."], [188, 1, 1, "", "tensorstore::Box::operator()", "Slices a type with an index domain a box."], [189, 1, 1, "", "tensorstore::Box::operator&lt;&lt;", "Prints to an std::ostream."], [187, 1, 1, "", "tensorstore::Box::operator=", "Assigns from another Box-like type with a compatible rank."], [190, 1, 1, "", "tensorstore::Box::operator[]", "Returns a copy/reference to the index interval for dimension i."], [190, 1, 1, "", "tensorstore::Box::operator[]", "Returns a copy/reference to the index interval for dimension i."], [191, 1, 1, "", "tensorstore::Box::origin", "Returns the origin array of length rank()."], [191, 1, 1, "", "tensorstore::Box::origin", "Returns the origin array of length rank()."], [192, 1, 1, "", "tensorstore::Box::rank", "Returns the rank of the box."], [193, 1, 1, "", "tensorstore::Box::set_rank", "Resets *this to an unbounded box of the specified rank."], [194, 1, 1, "", "tensorstore::Box::shape", "Returns the shape array of length rank()."], [194, 1, 1, "", "tensorstore::Box::shape", "Returns the shape array of length rank()."], [195, 5, 1, "", "tensorstore::Box::static_rank", "Compile-time rank, or dynamic_rank if the rank is specified at run time."], [196, 4, 1, "", "tensorstore::BoxView", "Represents an unowned view of a Rank-dimensional hyperrectangle."], [197, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs a box view that refers to the origin and shape vectors of an existing box."], [198, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs an unbounded box view of rank RankType()."], [199, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs from an origin and shape vector."], [199, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs from an origin and shape vector."], [200, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs an unbounded box view of the given rank."], [201, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs from a rank, an origin base pointer, and a shape base pointer."], [202, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs from a shape vector and an all-zero origin vector."], [202, 1, 1, "", "tensorstore::BoxView::BoxView", "Constructs from a shape vector and an all-zero origin vector."], [203, 1, 1, "", "tensorstore::BoxView::BoxView", "Unchecked conversion."], [201, 2, 2, "p-origin", "tensorstore::BoxView::BoxView::origin", "Pointer to array of length rank."], [201, 2, 2, "p-rank", "tensorstore::BoxView::BoxView::rank", "The rank of the index space."], [201, 2, 2, "p-shape", "tensorstore::BoxView::BoxView::shape", "Pointer to array of length rank."], [204, 1, 1, "", "tensorstore::BoxView::DeepAssign", "Copies the contents of other.origin() and other.shape() to origin() and shape(), respectively."], [205, 1, 1, "", "tensorstore::BoxView::Fill", "Fills origin() with interval.inclusive_min() and shape with interval.size()."], [206, 6, 1, "", "tensorstore::BoxView::IndexIntervalType", "Return type of operator[] representing an interval."], [207, 6, 1, "", "tensorstore::BoxView::IndexType", "Element type of origin and shape."], [196, 7, 2, "p-Mutable", "tensorstore::BoxView::Mutable", "Specifies whether the view is mutable (rather than const)."], [196, 7, 2, "p-Rank", "tensorstore::BoxView::Rank", "Specifies the number of dimensions at compile time, or equal to dynamic_rank to indicate that the number of dimensions will be specified at run time."], [208, 6, 1, "", "tensorstore::BoxView::RankType", "Type representing a static or dynamic rank."], [209, 1, 1, "", "tensorstore::BoxView::is_empty", "Returns true if num_elements() == 0."], [210, 1, 1, "", "tensorstore::BoxView::num_elements", "Returns the product of the extents."], [212, 1, 1, "", "tensorstore::BoxView::operator()", "Slices a supported type by a box."], [211, 1, 1, "", "tensorstore::BoxView::operator=", "Rebinds this box view to refer to the origin and shape vectors of another box."], [213, 1, 1, "", "tensorstore::BoxView::operator[]", "Returns the index interval for dimension i."], [214, 1, 1, "", "tensorstore::BoxView::origin", "Returns the origin array of length rank()."], [215, 1, 1, "", "tensorstore::BoxView::rank", "Returns the rank of the box."], [216, 1, 1, "", "tensorstore::BoxView::shape", "Returns the shape array of length rank()."], [217, 5, 1, "", "tensorstore::BoxView::static_rank", "Compile-time rank, or dynamic_rank if the rank is specified at runtime."], [218, 1, 1, "", "tensorstore::BroadcastArray", "Broadcasts source to target_shape."], [218, 1, 1, "", "tensorstore::BroadcastArray", "Broadcasts source to target_shape."], [218, 2, 2, "p-source", "tensorstore::BroadcastArray::source", "Source array to broadcast."], [218, 2, 2, "p-source", "tensorstore::BroadcastArray::source", "Source array to broadcast."], [218, 2, 2, "p-target_domain", "tensorstore::BroadcastArray::target_domain", "Target domain to which source should be broadcast. The origin of source is translated to target_domain.origin()."], [218, 2, 2, "p-target_shape", "tensorstore::BroadcastArray::target_shape", "Target shape to which source should be broadcast."], [219, 1, 1, "", "tensorstore::BroadcastStridedLayout", "Broadcasts source to target_shape."], [219, 1, 1, "", "tensorstore::BroadcastStridedLayout", "Broadcasts source to target_shape."], [219, 1, 1, "", "tensorstore::BroadcastStridedLayout", "Broadcasts source to target_shape."], [219, 2, 2, "p-source", "tensorstore::BroadcastStridedLayout::source", "Source layout to broadcast."], [219, 2, 2, "p-source", "tensorstore::BroadcastStridedLayout::source", "Source layout to broadcast."], [219, 2, 2, "p-target", "tensorstore::BroadcastStridedLayout::target", "Target layout to assign."], [219, 2, 2, "p-target", "tensorstore::BroadcastStridedLayout::target", "Target layout to assign."], [219, 2, 2, "p-target_byte_strides", "tensorstore::BroadcastStridedLayout::target_byte_strides", "Pointer to array of length target_shape.size()."], [219, 2, 2, "p-target_shape", "tensorstore::BroadcastStridedLayout::target_shape", "Target shape to which source will be broadcast."], [220, 4, 1, "", "tensorstore::ByteRange", "Specifies a range of bytes within a stored value."], [221, 1, 1, "", "tensorstore::ByteRange::SatisfiesInvariants", "Checks that this byte range is valid."], [222, 5, 1, "", "tensorstore::ByteRange::exclusive_max", "Specifies the ending byte (exclusive)."], [223, 5, 1, "", "tensorstore::ByteRange::inclusive_min", "Specifies the starting byte (inclusive)."], [224, 1, 1, "", "tensorstore::ByteRange::operator!=", "Compares two byte ranges for equality."], [225, 1, 1, "", "tensorstore::ByteRange::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [224, 1, 1, "", "tensorstore::ByteRange::operator==", "Compares two byte ranges for equality."], [226, 1, 1, "", "tensorstore::ByteRange::size", "Returns the number of bytes contained in the range."], [227, 4, 1, "", "tensorstore::ByteStridedPointer", "Wrapper type for a raw pointer for which pointer arithmetic operates with a stride of 1 byte, rather than a stride of sizeof(T) bytes."], [228, 1, 1, "", "tensorstore::ByteStridedPointer::ByteStridedPointer", "Converts from a compatible ByteStridedPointer type."], [228, 1, 1, "", "tensorstore::ByteStridedPointer::ByteStridedPointer", "Converts from a compatible ByteStridedPointer type."], [229, 1, 1, "", "tensorstore::ByteStridedPointer::ByteStridedPointer", "Default initialization, leaves the wrapped raw pointer in an uninitialized state."], [230, 1, 1, "", "tensorstore::ByteStridedPointer::ByteStridedPointer", "Constructs from a compatible raw pointer."], [230, 1, 1, "", "tensorstore::ByteStridedPointer::ByteStridedPointer", "Constructs from a compatible raw pointer."], [227, 3, 2, "p-T", "tensorstore::ByteStridedPointer::T", "The (possibly const-qualified) type of the pointee."], [231, 5, 1, "", "tensorstore::ByteStridedPointer::alignment", "Alignment required by T, or 1 if T is void."], [232, 6, 1, "", "tensorstore::ByteStridedPointer::difference_type", "Pointer difference type, in bytes."], [233, 6, 1, "", "tensorstore::ByteStridedPointer::element_type", "Pointee type."], [234, 1, 1, "", "tensorstore::ByteStridedPointer::get", "Converts to a raw pointer."], [236, 1, 1, "", "tensorstore::ByteStridedPointer::operator T*", "Converts to a raw pointer."], [236, 1, 1, "", "tensorstore::ByteStridedPointer::operator U*", "Converts to a raw pointer."], [237, 1, 1, "", "tensorstore::ByteStridedPointer::operator*", "Dereferences the raw pointer."], [241, 1, 1, "", "tensorstore::ByteStridedPointer::operator+", "Adds a byte offset to a pointer."], [241, 1, 1, "", "tensorstore::ByteStridedPointer::operator+", "Adds a byte offset to a pointer."], [242, 1, 1, "", "tensorstore::ByteStridedPointer::operator+=", "Increments the raw pointer by byte_offset bytes."], [238, 1, 1, "", "tensorstore::ByteStridedPointer::operator-", "Subtracts a byte offset from a pointer."], [239, 1, 1, "", "tensorstore::ByteStridedPointer::operator-", "Computes the byte offset between two pointers."], [240, 1, 1, "", "tensorstore::ByteStridedPointer::operator-=", "Decrements the raw pointer by byte_offset bytes."], [235, 1, 1, "", "tensorstore::ByteStridedPointer::operator-&gt;", "Enables member access to the pointee."], [243, 1, 1, "", "tensorstore::ByteStridedPointer::operator[]", "Returns a reference to the element starting at the specified byte_offset relative to get()."], [244, 5, 1, "", "tensorstore::CanCopyTensorStoreToTensorStore", "Evaluates whether the constraints required for tensorstore::Copy are satisfied."], [245, 5, 1, "", "tensorstore::CanReadTensorstoreToArray", "Evaluates whether the constraints required for tensorstore::Read are satisfied."], [246, 5, 1, "", "tensorstore::CanWriteArrayToTensorStore", "Evaluates whether the constraints required for tensorstore::Write are satisfied."], [247, 6, 1, "", "tensorstore::CanonicalElementType", "Metafunction that maps an unqualified type T to the equivalent canonical element type, if there is one."], [248, 1, 1, "", "tensorstore::Cast", "Returns a view of a Spec with a converted data type."], [249, 1, 1, "", "tensorstore::Cast", "Returns a view of a TensorStore with a converted data type."], [249, 1, 1, "", "tensorstore::Cast", "Returns a view of a TensorStore with a converted data type."], [249, 3, 2, "p-TargetElementType", "tensorstore::Cast::TargetElementType", "The target element type, must be unqualified."], [248, 2, 2, "p-base_spec", "tensorstore::Cast::base_spec", "The Spec to convert."], [249, 2, 2, "p-store", "tensorstore::Cast::store", "The TensorStore to convert."], [248, 2, 2, "p-target_dtype", "tensorstore::Cast::target_dtype", "Target data type."], [249, 2, 2, "p-target_dtype", "tensorstore::Cast::target_dtype", "May be specified in order to allow TargetElementType to be inferred."], [249, 2, 2, "p-target_dtype", "tensorstore::Cast::target_dtype", "May be specified in order to allow TargetElementType to be inferred."], [250, 8, 1, "", "tensorstore::CastChecking", "Enum type used as a template parameter to casts to choose between an unchecked cast (that returns the bare value T) and a checked cast that returns Result<T>."], [250, 9, 1, "e-checked", "tensorstore::CastChecking::checked", "Indicates that the cast is checked at runtime and returns a Result<T>."], [250, 9, 1, "e-unchecked", "tensorstore::CastChecking::unchecked", "Indicates that the cast is unchecked and returns a bare value T."], [251, 1, 1, "", "tensorstore::ChainResult", "Applies a sequence of functions, which may optionally return Result-wrapped values, to an optionally Result-wrapped value."], [251, 1, 1, "", "tensorstore::ChainResult", "Applies a sequence of functions, which may optionally return Result-wrapped values, to an optionally Result-wrapped value."], [252, 1, 1, "", "tensorstore::CheckContains", "Checks that interval.Contains(index)."], [253, 4, 1, "", "tensorstore::ChunkLayout", "Specifies a precise chunk layout or constraints on a chunk layout."], [254, 1, 1, "", "tensorstore::ChunkLayout::ApplyIndexTransform", "Transforms a ChunkLayout object by a DimExpression."], [255, 1, 1, "", "tensorstore::ChunkLayout::ApplyIndexTransform", "Transforms a chunk layout for the output space of a transform to a corresponding chunk layout for the input space of the transform."], [256, 1, 1, "", "tensorstore::ChunkLayout::ApplyInverseIndexTransform", "Transforms a chunk layout for the input space of a transform to a corresponding chunk layout for the output space of the transform."], [257, 6, 1, "", "tensorstore::ChunkLayout::Chunk", "Aliases of GridViewFor that provide access to parameters specific to a particular Usage."], [258, 6, 1, "", "tensorstore::ChunkLayout::ChunkAspectRatio", "Specifies the desired aspect ratio for all chunk shapes (codec, read, and write)."], [259, 4, 1, "", "tensorstore::ChunkLayout::ChunkAspectRatioBase", "Base type for specifying constraints on the aspect ratio of the write/read/codec chunk shape."], [260, 4, 1, "", "tensorstore::ChunkLayout::ChunkAspectRatioFor", "Constrains the aspect ratio of the chunk shape for the specified usage U."], [261, 6, 1, "", "tensorstore::ChunkLayout::ChunkElements", "Target number of elements for both write and read chunks."], [262, 4, 1, "", "tensorstore::ChunkLayout::ChunkElementsBase", "Base type for specifying the target number of elements for a write/read/codec chunk."], [263, 4, 1, "", "tensorstore::ChunkLayout::ChunkElementsFor", "Target number of elements in a chunk for the specified usage U."], [264, 6, 1, "", "tensorstore::ChunkLayout::ChunkShape", "Constrains the shape for both write and read chunks."], [265, 4, 1, "", "tensorstore::ChunkLayout::ChunkShapeBase", "Base type for specifying explicit constraints on the write/read/codec chunk shape."], [266, 4, 1, "", "tensorstore::ChunkLayout::ChunkShapeFor", "Constrains the chunk shape for the specified usage U."], [257, 6, 1, "", "tensorstore::ChunkLayout::CodecChunk", "Aliases of GridViewFor that provide access to parameters specific to a particular Usage."], [258, 6, 1, "", "tensorstore::ChunkLayout::CodecChunkAspectRatio", "Specifies the desired aspect ratio for all chunk shapes (codec, read, and write)."], [267, 6, 1, "", "tensorstore::ChunkLayout::CodecChunkElements", "Target number of elements for codec chunks."], [268, 6, 1, "", "tensorstore::ChunkLayout::CodecChunkShape", "Constrains the shape for codec chunks."], [269, 1, 1, "", "tensorstore::ChunkLayout::Finalize", "Validates and converts this layout into a precise chunk layout."], [270, 1, 1, "", "tensorstore::ChunkLayout::GetChunkTemplate", "Sets box to the precise write/read chunk template."], [270, 2, 2, "p-box", "tensorstore::ChunkLayout::GetChunkTemplate::box", "Set to the chunk template."], [270, 2, 2, "p-usage", "tensorstore::ChunkLayout::GetChunkTemplate::usage", "Must be either kWrite or kRead."], [271, 4, 1, "", "tensorstore::ChunkLayout::Grid", "Owned mutable representation of shape, aspect_ratio and elements constraints for a write/read/codec grid."], [272, 6, 1, "", "tensorstore::ChunkLayout::Grid::AspectRatio", "Represents the aspect ratio constraint."], [273, 6, 1, "", "tensorstore::ChunkLayout::Grid::Elements", "Represents the target number of elements constraint."], [274, 1, 1, "", "tensorstore::ChunkLayout::Grid::Set", "Merges in constraints from another Grid or GridView."], [276, 1, 1, "", "tensorstore::ChunkLayout::Grid::Set", "Specifies the aspect ratio constraint."], [277, 1, 1, "", "tensorstore::ChunkLayout::Grid::Set", "Specifies the target number of elements."], [280, 1, 1, "", "tensorstore::ChunkLayout::Grid::Set", "Specifies the rank constraint."], [281, 1, 1, "", "tensorstore::ChunkLayout::Grid::Set", "Specifies the shape constraint."], [275, 6, 1, "", "tensorstore::ChunkLayout::Grid::Shape", "Represents the shape constraint."], [276, 1, 1, "", "tensorstore::ChunkLayout::Grid::aspect_ratio", "Specifies the aspect ratio constraint."], [277, 1, 1, "", "tensorstore::ChunkLayout::Grid::elements", "Specifies the target number of elements."], [276, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator AspectRatio", "Specifies the aspect ratio constraint."], [277, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator Elements", "Specifies the target number of elements."], [281, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator Shape", "Specifies the shape constraint."], [279, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator!=", "Compares two chunk grid constraints for equality."], [278, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator=", "Assigns from another grid."], [278, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator=", "Assigns from another grid."], [279, 1, 1, "", "tensorstore::ChunkLayout::Grid::operator==", "Compares two chunk grid constraints for equality."], [280, 1, 1, "", "tensorstore::ChunkLayout::Grid::rank", "Specifies the rank constraint."], [281, 1, 1, "", "tensorstore::ChunkLayout::Grid::shape", "Specifies the shape constraint."], [282, 4, 1, "", "tensorstore::ChunkLayout::GridOrigin", "Specifies the base origin/offset of the chunk grid."], [283, 4, 1, "", "tensorstore::ChunkLayout::GridView", "Base type for constraints applicable to a read/write/codec chunk grid."], [284, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from individual constraints."], [284, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from individual constraints."], [284, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from individual constraints."], [284, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from individual constraints."], [285, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs a view of an unconstrained rank-0 grid."], [286, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from an existing grid, optionally converting to hard constraints."], [286, 1, 1, "", "tensorstore::ChunkLayout::GridView::GridView", "Constructs from an existing grid, optionally converting to hard constraints."], [287, 1, 1, "", "tensorstore::ChunkLayout::GridView::aspect_ratio", "Returns the aspect ratio constraint."], [288, 1, 1, "", "tensorstore::ChunkLayout::GridView::elements", "Returns the target number of elements."], [289, 1, 1, "", "tensorstore::ChunkLayout::GridView::shape", "Returns the shape constraint."], [290, 4, 1, "", "tensorstore::ChunkLayout::GridViewFor", "Strongly-typed view that provides access to parameters specific to a particular Usage."], [292, 6, 1, "", "tensorstore::ChunkLayout::GridViewFor::AspectRatio", "Representation of the aspect ratio constraint."], [293, 6, 1, "", "tensorstore::ChunkLayout::GridViewFor::Elements", "Representation of the target number of elements constraint."], [294, 1, 1, "", "tensorstore::ChunkLayout::GridViewFor::GridViewFor", "Constructs from an existing grid."], [295, 6, 1, "", "tensorstore::ChunkLayout::GridViewFor::Shape", "Representation of the shape constraint."], [296, 1, 1, "", "tensorstore::ChunkLayout::GridViewFor::aspect_ratio", "Returns the aspect ratio constraint."], [297, 1, 1, "", "tensorstore::ChunkLayout::GridViewFor::elements", "Returns the target number of elements."], [298, 1, 1, "", "tensorstore::ChunkLayout::GridViewFor::shape", "Returns the shape constraint."], [291, 4, 1, "", "tensorstore::ChunkLayout::GridViewFor&lt;ChunkLayout::kUnspecifiedUsage&gt;", "Specifies chunk layout constraints for a single usage specified at run time."], [299, 1, 1, "", "tensorstore::ChunkLayout::HasHardConstraints", "Returns true if any hard constraints, other than rank, are specified."], [300, 4, 1, "", "tensorstore::ChunkLayout::InnerOrder", "Specifies the data storage order within innermost chunks as a permutation of [0, ..., rank-1]."], [301, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::InnerOrder", "Constructs an unspecified order."], [302, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::InnerOrder", "Constructs from the specified order."], [302, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::InnerOrder", "Constructs from the specified order."], [303, 5, 1, "", "tensorstore::ChunkLayout::InnerOrder::hard_constraint", "Indicates whether the data storage order is a hard constraint."], [304, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::operator!=", "Compares two order constraints for equality."], [304, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::operator==", "Compares two order constraints for equality."], [305, 1, 1, "", "tensorstore::ChunkLayout::InnerOrder::valid", "Returns true if this specifies an order constraint."], [306, 5, 1, "", "tensorstore::ChunkLayout::IsOption", "Evaluates to true for option types compatible with Set.  Supported types are:"], [307, 1, 1, "", "tensorstore::ChunkLayout::ParseUsage", "Parses a string representation."], [257, 6, 1, "", "tensorstore::ChunkLayout::ReadChunk", "Aliases of GridViewFor that provide access to parameters specific to a particular Usage."], [258, 6, 1, "", "tensorstore::ChunkLayout::ReadChunkAspectRatio", "Specifies the desired aspect ratio for all chunk shapes (codec, read, and write)."], [308, 6, 1, "", "tensorstore::ChunkLayout::ReadChunkElements", "Target number of elements for read chunks."], [309, 6, 1, "", "tensorstore::ChunkLayout::ReadChunkShape", "Constrains the shape for read chunks."], [310, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets/updates the chunk aspect ratio constraints for the given usage U."], [311, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets/updates the chunk target number of elements constraint for the given usage U."], [312, 1, 1, "", "tensorstore::ChunkLayout::Set", "Merges in additional chunk layout constraints.  Soft constraints of *this take precedence over soft constraints of value."], [313, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets/updates the chunk shape constraints for the given usage U."], [314, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets/updates the grid origin constraint."], [315, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets the grid constraints for the specified usage."], [316, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets the inner order constraint."], [317, 1, 1, "", "tensorstore::ChunkLayout::Set", "Sets the rank."], [318, 8, 1, "", "tensorstore::ChunkLayout::Usage", "Specifies the type of operation to which a chunk grid applies."], [318, 9, 1, "e-kCodec", "tensorstore::ChunkLayout::Usage::kCodec", "Chunk shape used by the codec, may affect compression ratio (e.g. the compression_segmentation_block_size for neuroglancer_precomputed format)."], [318, 9, 1, "e-kRead", "tensorstore::ChunkLayout::Usage::kRead", "Chunk shape is efficient for reading."], [318, 9, 1, "e-kWrite", "tensorstore::ChunkLayout::Usage::kWrite", "Chunk is efficient for read and write operations."], [257, 6, 1, "", "tensorstore::ChunkLayout::WriteChunk", "Aliases of GridViewFor that provide access to parameters specific to a particular Usage."], [258, 6, 1, "", "tensorstore::ChunkLayout::WriteChunkAspectRatio", "Specifies the desired aspect ratio for all chunk shapes (codec, read, and write)."], [319, 6, 1, "", "tensorstore::ChunkLayout::WriteChunkElements", "Target number of elements for write chunks."], [320, 6, 1, "", "tensorstore::ChunkLayout::WriteChunkShape", "Constrains the shape for write chunks."], [321, 1, 1, "", "tensorstore::ChunkLayout::codec_chunk", "Returns the read chunk constraints."], [322, 1, 1, "", "tensorstore::ChunkLayout::codec_chunk_aspect_ratio", "Returns the codec chunk aspect ratio constraints."], [323, 1, 1, "", "tensorstore::ChunkLayout::codec_chunk_elements", "Returns the codec chunk target number of elements constraint."], [324, 1, 1, "", "tensorstore::ChunkLayout::codec_chunk_shape", "Returns the codec chunk shape constraints."], [325, 1, 1, "", "tensorstore::ChunkLayout::grid_origin", "Returns the grid origin constraint."], [326, 1, 1, "", "tensorstore::ChunkLayout::inner_order", "Returns the inner order constraint."], [327, 5, 1, "", "tensorstore::ChunkLayout::kUnspecifiedUsage", "Identifies parameters that apply to multiple Usage values."], [321, 1, 1, "", "tensorstore::ChunkLayout::operator CodecChunk", "Returns the read chunk constraints."], [322, 1, 1, "", "tensorstore::ChunkLayout::operator CodecChunkAspectRatio", "Returns the codec chunk aspect ratio constraints."], [323, 1, 1, "", "tensorstore::ChunkLayout::operator CodecChunkElements", "Returns the codec chunk target number of elements constraint."], [324, 1, 1, "", "tensorstore::ChunkLayout::operator CodecChunkShape", "Returns the codec chunk shape constraints."], [325, 1, 1, "", "tensorstore::ChunkLayout::operator GridOrigin", "Returns the grid origin constraint."], [326, 1, 1, "", "tensorstore::ChunkLayout::operator InnerOrder", "Returns the inner order constraint."], [332, 1, 1, "", "tensorstore::ChunkLayout::operator ReadChunk", "Returns the read chunk constraints."], [333, 1, 1, "", "tensorstore::ChunkLayout::operator ReadChunkAspectRatio", "Returns the read chunk aspect ratio constraints."], [334, 1, 1, "", "tensorstore::ChunkLayout::operator ReadChunkElements", "Returns the read chunk target number of elements constraint."], [335, 1, 1, "", "tensorstore::ChunkLayout::operator ReadChunkShape", "Returns the read chunk shape constraints."], [336, 1, 1, "", "tensorstore::ChunkLayout::operator WriteChunk", "Returns the write chunk constraints."], [337, 1, 1, "", "tensorstore::ChunkLayout::operator WriteChunkAspectRatio", "Returns the write chunk aspect ratio constraints."], [338, 1, 1, "", "tensorstore::ChunkLayout::operator WriteChunkElements", "Returns the write chunk target number of elements constraint."], [339, 1, 1, "", "tensorstore::ChunkLayout::operator WriteChunkShape", "Returns the write chunk shape constraints."], [329, 1, 1, "", "tensorstore::ChunkLayout::operator&lt;&lt;", "Prints a string representation to an std::ostream."], [330, 1, 1, "", "tensorstore::ChunkLayout::operator[]", "Returns the chunk constraints for the given usage."], [330, 2, 2, "p-usage", "tensorstore::ChunkLayout::operator[]::usage", "Must be one of Usage::kWrite, Usage::kRead, or Usage::kRead."], [328, 1, 1, "", "tensorstore::ChunkLayout::operator|", "\"Pipeline\" operator."], [331, 1, 1, "", "tensorstore::ChunkLayout::rank", "Returns the rank constraint, or dynamic_rank if unspecified."], [332, 1, 1, "", "tensorstore::ChunkLayout::read_chunk", "Returns the read chunk constraints."], [333, 1, 1, "", "tensorstore::ChunkLayout::read_chunk_aspect_ratio", "Returns the read chunk aspect ratio constraints."], [334, 1, 1, "", "tensorstore::ChunkLayout::read_chunk_elements", "Returns the read chunk target number of elements constraint."], [335, 1, 1, "", "tensorstore::ChunkLayout::read_chunk_shape", "Returns the read chunk shape constraints."], [336, 1, 1, "", "tensorstore::ChunkLayout::write_chunk", "Returns the write chunk constraints."], [337, 1, 1, "", "tensorstore::ChunkLayout::write_chunk_aspect_ratio", "Returns the write chunk aspect ratio constraints."], [338, 1, 1, "", "tensorstore::ChunkLayout::write_chunk_elements", "Returns the write chunk target number of elements constraint."], [339, 1, 1, "", "tensorstore::ChunkLayout::write_chunk_shape", "Returns the write chunk shape constraints."], [340, 4, 1, "", "tensorstore::CodecSpec", "Specifies compression and other encoding/decoding parameters for a TensorStore driver."], [341, 1, 1, "", "tensorstore::CodecSpec::CodecSpec", "Constructs a null codec spec."], [344, 6, 1, "", "tensorstore::CodecSpec::FromJsonOptions", "JSON serialization options."], [342, 1, 1, "", "tensorstore::CodecSpec::Merge", "Merges two codec specs."], [343, 1, 1, "", "tensorstore::CodecSpec::MergeFrom", "Merges this codec spec with another codec spec."], [344, 6, 1, "", "tensorstore::CodecSpec::ToJsonOptions", "JSON serialization options."], [345, 1, 1, "", "tensorstore::CodecSpec::operator!=", "Compares two codec specs for equality by value."], [346, 1, 1, "", "tensorstore::CodecSpec::operator&lt;&lt;", "Writes the JSON representation of codec to os."], [346, 2, 2, "p-codec", "tensorstore::CodecSpec::operator&lt;&lt;::codec", "Codec to write, may be null."], [346, 2, 2, "p-os", "tensorstore::CodecSpec::operator&lt;&lt;::os", "Output stream."], [345, 1, 1, "", "tensorstore::CodecSpec::operator==", "Compares two codec specs for equality by value."], [347, 1, 1, "", "tensorstore::CodecSpec::valid", "Returns true if not null."], [348, 1, 1, "", "tensorstore::ComposeLayoutAndTransform", "Returns an index transform composed from a strided layout and an existing index transform."], [349, 1, 1, "", "tensorstore::ComposeOptionalTransforms", "Composes two index transforms, which may be null."], [350, 1, 1, "", "tensorstore::ComposeTransforms", "Composes two index transforms."], [350, 2, 2, "p-a_to_b", "tensorstore::ComposeTransforms::a_to_b", "Index transform from index space \"a\" to index space \"b\"."], [350, 2, 2, "p-b_to_c", "tensorstore::ComposeTransforms::b_to_c", "Index transform from index space \"b\" to index space \"c\"."], [351, 1, 1, "", "tensorstore::ComputeStridedSliceMap", "Computes a mapping from the specified interval back to the original domain."], [351, 2, 2, "p-interval_form", "tensorstore::ComputeStridedSliceMap::interval_form", "Form of the interval."], [351, 2, 2, "p-new_domain", "tensorstore::ComputeStridedSliceMap::new_domain", "Non-null pointer to result interval set to the new domain computed by ExtractStridedSlice, except that it is translated according to the value of translate_origin_to."], [351, 2, 2, "p-orig", "tensorstore::ComputeStridedSliceMap::orig", "The original domain."], [351, 2, 2, "p-output_offset", "tensorstore::ComputeStridedSliceMap::output_offset", "Non-null pointer set to the value such that *output_offset + stride * i maps each value i in the resultant *new_domain to the corresponding index in orig."], [351, 2, 2, "p-start", "tensorstore::ComputeStridedSliceMap::start", "The index within orig corresponding to the inclusive_min in the resultant value of *new_domain."], [351, 2, 2, "p-stop_or_size", "tensorstore::ComputeStridedSliceMap::stop_or_size", "Specifies the inclusive/exclusive stop index or size of the resultant *new_domain."], [351, 2, 2, "p-stride", "tensorstore::ComputeStridedSliceMap::stride", "Specifies the stride value."], [351, 2, 2, "p-translate_origin_to", "tensorstore::ComputeStridedSliceMap::translate_origin_to", "If not equal to kImplicit, the resultant *new_domain is translated to the specified origin."], [352, 1, 1, "", "tensorstore::ComputeStrides", "Computes strides for the specified layout order."], [352, 1, 1, "", "tensorstore::ComputeStrides", "Computes strides for the specified layout order."], [352, 2, 2, "p-element_stride", "tensorstore::ComputeStrides::element_stride", "The stride of the innermost dimension."], [352, 2, 2, "p-order", "tensorstore::ComputeStrides::order", "The layout order."], [352, 2, 2, "p-shape", "tensorstore::ComputeStrides::shape", "The extents of the array."], [352, 2, 2, "p-strides", "tensorstore::ComputeStrides::strides", "The output strides array."], [353, 1, 1, "", "tensorstore::ConstDataTypeCast", "Casts source to a specified target element type which must differ from the existing element type only in const qualification."], [353, 3, 2, "p-TargetElement", "tensorstore::ConstDataTypeCast::TargetElement", "Target element type."], [354, 1, 1, "", "tensorstore::ConstrainIndexDomain", "Constrains index domain a by b."], [355, 8, 1, "", "tensorstore::ContainerKind", "Specifies whether an object (e.g. strided layout) is stored by value or view/reference."], [355, 9, 1, "e-container", "tensorstore::ContainerKind::container", "Object is stored by value."], [355, 9, 1, "e-view", "tensorstore::ContainerKind::view", "Object is stored by reference."], [356, 1, 1, "", "tensorstore::Contains", "Returns true if haystack fully contains the range needle."], [357, 1, 1, "", "tensorstore::Contains", "Returns true if haystack contains the key needle."], [358, 1, 1, "", "tensorstore::Contains", "Returns true if inner is a subset of outer."], [359, 1, 1, "", "tensorstore::Contains", "Returns true if the index vector indices is contained within the box, i.e. its length is equal to the rank of the box and each component indices[i] is contained within box[i]."], [359, 1, 1, "", "tensorstore::Contains", "Returns true if the index vector indices is contained within the box, i.e. its length is equal to the rank of the box and each component indices[i] is contained within box[i]."], [360, 1, 1, "", "tensorstore::Contains", "Returns true if index is contained within the interval."], [361, 1, 1, "", "tensorstore::Contains", "Returns true if outer is a superset of inner."], [359, 2, 2, "p-box", "tensorstore::Contains::box", "A Box-like type or a type with a Box domain."], [359, 2, 2, "p-indices", "tensorstore::Contains::indices", "A span-compatible sequence with span::value_type convertible without narrowing to Index."], [359, 2, 2, "p-indices", "tensorstore::Contains::indices", "A span-compatible sequence with span::value_type convertible without narrowing to Index."], [362, 1, 1, "", "tensorstore::ContainsOrUnbounded", "Returns true if the lower and upper bound of inner is either unbounded or contained with the lower and upper bound, respectively, of outer."], [363, 1, 1, "", "tensorstore::ContainsPartial", "Returns true if the partial index vector indices is contained within the box, i.e. its length is less than or equal to the rank of the box and each component indices[i] is contained within box[i]."], [363, 1, 1, "", "tensorstore::ContainsPartial", "Returns true if the partial index vector indices is contained within the box, i.e. its length is less than or equal to the rank of the box and each component indices[i] is contained within box[i]."], [363, 2, 2, "p-box", "tensorstore::ContainsPartial::box", "A Box-like type or a type with a Box domain."], [363, 2, 2, "p-indices", "tensorstore::ContainsPartial::indices", "A span-compatible sequence with span::value_type convertible without narrowing to Index."], [363, 2, 2, "p-indices", "tensorstore::ContainsPartial::indices", "A span-compatible sequence with span::value_type convertible without narrowing to Index."], [364, 1, 1, "", "tensorstore::ContainsPrefix", "Returns Contains(haystack, KeyRange::Prefix(prefix))."], [365, 4, 1, "", "tensorstore::Context", "Immutable collection of lazily-constructed \"resources\"."], [366, 1, 1, "", "tensorstore::Context::Context", "Constructs a null context."], [367, 1, 1, "", "tensorstore::Context::Context", "Constructs a context from a Spec."], [367, 2, 2, "p-parent", "tensorstore::Context::Context::parent", "The parent context to extend."], [367, 2, 2, "p-spec", "tensorstore::Context::Context::spec", "The context spec."], [368, 1, 1, "", "tensorstore::Context::Default", "Constructs a new default context."], [369, 1, 1, "", "tensorstore::Context::FromJson", "Constructs a context from a JSON spec."], [369, 2, 2, "p-json_spec", "tensorstore::Context::FromJson::json_spec", "The JSON spec."], [369, 2, 2, "p-options", "tensorstore::Context::FromJson::options", "Options for parsing json_spec."], [369, 2, 2, "p-parent", "tensorstore::Context::FromJson::parent", "The parent context to extend."], [385, 6, 1, "", "tensorstore::Context::FromJsonOptions", "JSON serialization options."], [370, 1, 1, "", "tensorstore::Context::GetResource", "Returns a resource or the default resource for a given provider."], [370, 1, 1, "", "tensorstore::Context::GetResource", "Returns a resource or the default resource for a given provider."], [370, 1, 1, "", "tensorstore::Context::GetResource", "Returns a resource or the default resource for a given provider."], [370, 3, 2, "p-Provider", "tensorstore::Context::GetResource::Provider", "Context resource provider type."], [370, 2, 2, "p-json_spec", "tensorstore::Context::GetResource::json_spec", "The JSON resource spec."], [370, 2, 2, "p-resource_spec", "tensorstore::Context::GetResource::resource_spec", "The resource spec."], [371, 4, 1, "", "tensorstore::Context::Resource", "Variant type that either specifies an unresolved context resource, or holds a shared handle to a context resource."], [372, 1, 1, "", "tensorstore::Context::Resource::BindContext", "If !this->has_resource(), resolves this to a resource using the specified context.  Otherwise, does nothing."], [373, 1, 1, "", "tensorstore::Context::Resource::DefaultSpec", "Returns a resource spec that refers to the default value within the Context."], [374, 1, 1, "", "tensorstore::Context::Resource::FromJson", "Returns a resource spec from a JSON representation."], [378, 6, 1, "", "tensorstore::Context::Resource::FromJsonOptions", "JSON serialization options."], [375, 1, 1, "", "tensorstore::Context::Resource::Resource", "Constructs an invalid handle."], [376, 1, 1, "", "tensorstore::Context::Resource::StripContext", "If this is non-null, resets it to DefaultSpec().  If this is null, it remains null."], [377, 1, 1, "", "tensorstore::Context::Resource::ToJson", "Converts to a JSON representation."], [378, 6, 1, "", "tensorstore::Context::Resource::ToJsonOptions", "JSON serialization options."], [379, 1, 1, "", "tensorstore::Context::Resource::get", "Returns a pointer to the resource object of type Provider::Resource, or nullptr if no resource is bound."], [380, 1, 1, "", "tensorstore::Context::Resource::has_resource", "Returns true if this is not null and corresponds to a bound resource (rather than a resource spec)."], [381, 1, 1, "", "tensorstore::Context::Resource::operator!=", "Checks if a and b refer to the same resource or resource spec."], [379, 1, 1, "", "tensorstore::Context::Resource::operator*", "Returns a pointer to the resource object of type Provider::Resource, or nullptr if no resource is bound."], [379, 1, 1, "", "tensorstore::Context::Resource::operator-&gt;", "Returns a pointer to the resource object of type Provider::Resource, or nullptr if no resource is bound."], [381, 1, 1, "", "tensorstore::Context::Resource::operator==", "Checks if a and b refer to the same resource or resource spec."], [382, 1, 1, "", "tensorstore::Context::Resource::valid", "Returns true if this corresponds to a resource spec or bound resource."], [383, 4, 1, "", "tensorstore::Context::Spec", "Parsed specification of a collection of context resources."], [384, 1, 1, "", "tensorstore::Context::Spec::Spec", "Constructs an empty context spec."], [385, 6, 1, "", "tensorstore::Context::ToJsonOptions", "JSON serialization options."], [386, 1, 1, "", "tensorstore::Context::operator bool", "Returns true if this is not a null context."], [387, 1, 1, "", "tensorstore::Context::operator!=", "Returns true if the two context objects refer to the same underlying shared state."], [387, 1, 1, "", "tensorstore::Context::operator==", "Returns true if the two context objects refer to the same underlying shared state."], [388, 1, 1, "", "tensorstore::Context::parent", "Returns the parent Context, if any."], [389, 1, 1, "", "tensorstore::Context::spec", "Returns the Spec used to create this context."], [390, 8, 1, "", "tensorstore::ContextBindingMode", "Specifies how context bindings should be handled for Spec-like types, such as tensorstore::kvstore::Spec and tensorstore::Spec."], [390, 9, 1, "e-retain", "tensorstore::ContextBindingMode::retain", "Retain all bound context resources and unbound context resource specs."], [390, 9, 1, "e-strip", "tensorstore::ContextBindingMode::strip", "Any bound context resources and unbound context resource specs are replaced by default context resource specs.  If the resultant spec is re-opened with/re-bound to a new context, it will use the default context resources specified by that context."], [390, 9, 1, "e-unbind", "tensorstore::ContextBindingMode::unbind", "Any bound context resources are converted to context resource specs that fully capture the graph of shared context resources and interdependencies. Re-binding/re-opening the resultant spec will result in a new graph of new context resources that is isomorphic to the original graph of context resources.  The resultant spec will not refer to any external context resources; consequently, binding it to any specific context will have the same effect as binding it to a default context."], [390, 9, 1, "e-unspecified", "tensorstore::ContextBindingMode::unspecified", "Context binding mode is unspecified."], [391, 8, 1, "", "tensorstore::ContextBindingState", "Indicates the binding state of context resources within a Spec-like type, such as tensorstore::Spec and tensorstore::kvstore::Spec."], [391, 9, 1, "e-bound", "tensorstore::ContextBindingState::bound", "All resources are bound."], [391, 9, 1, "e-unbound", "tensorstore::ContextBindingState::unbound", "All resources are unbound."], [391, 9, 1, "e-unknown", "tensorstore::ContextBindingState::unknown", "Binding state is unknown, some resources may be bound and some may be unbound."], [392, 8, 1, "", "tensorstore::ContiguousLayoutOrder", "Specifies a C-order or Fortran-order contiguous array layout."], [392, 9, 1, "e-c", "tensorstore::ContiguousLayoutOrder::c", ""], [392, 9, 1, "e-column_major", "tensorstore::ContiguousLayoutOrder::column_major", ""], [392, 9, 1, "e-fortran", "tensorstore::ContiguousLayoutOrder::fortran", ""], [392, 9, 1, "e-left", "tensorstore::ContiguousLayoutOrder::left", ""], [392, 9, 1, "e-right", "tensorstore::ContiguousLayoutOrder::right", ""], [392, 9, 1, "e-row_major", "tensorstore::ContiguousLayoutOrder::row_major", ""], [393, 4, 1, "", "tensorstore::ContiguousLayoutPermutation", "Specifies a contiguous layout order as a permutation."], [394, 1, 1, "", "tensorstore::ContiguousLayoutPermutation::ContiguousLayoutPermutation", "Constructs a rank-0 (empty) permutation."], [395, 1, 1, "", "tensorstore::ContiguousLayoutPermutation::ContiguousLayoutPermutation", "Converts from another ContiguousLayoutPermutation with compatible rank."], [396, 1, 1, "", "tensorstore::ContiguousLayoutPermutation::ContiguousLayoutPermutation", "Constructs from a span."], [397, 1, 1, "", "tensorstore::ConvertToContiguousLayoutPermutation", "Normalizes source to a permutation if it is not already a permutation."], [398, 1, 1, "", "tensorstore::Copy", "Copies from source TensorStore to target TensorStore."], [398, 1, 1, "", "tensorstore::Copy", "Copies from source TensorStore to target TensorStore."], [398, 2, 2, "p-options", "tensorstore::Copy::options", "Any option compatible with CopyOptions."], [398, 2, 2, "p-source", "tensorstore::Copy::source", "The source TensorStore that supports reading."], [398, 2, 2, "p-target", "tensorstore::Copy::target", "The target TensorStore that supports writing."], [399, 1, 1, "", "tensorstore::CopyArray", "Copies the contents of source to dest."], [400, 1, 1, "", "tensorstore::CopyConvertedArray", "Copies the contents of source to dest, with optional data type conversion."], [401, 4, 1, "", "tensorstore::CopyOptions", "Options for tensorstore::Copy."], [402, 5, 1, "", "tensorstore::CopyOptions::alignment_options", "Constrains how the source TensorStore may be aligned to the target TensorStore."], [403, 5, 1, "", "tensorstore::CopyOptions::batch", "Optional batch for reading."], [404, 5, 1, "", "tensorstore::CopyOptions::progress_function", "Optional progress callback."], [405, 5, 1, "", "tensorstore::CopyOptions::source_data_reference_restriction", "Specifies restrictions on how the source data may be referenced (as opposed to copied)."], [406, 4, 1, "", "tensorstore::CopyProgress", "Specifies progress statistics for Copy operations."], [407, 5, 1, "", "tensorstore::CopyProgress::committed_elements", "Number of elements that have been committed."], [408, 5, 1, "", "tensorstore::CopyProgress::copied_elements", "Number of elements that have been completed."], [409, 1, 1, "", "tensorstore::CopyProgress::operator!=", "Compares two progress states for equality."], [410, 1, 1, "", "tensorstore::CopyProgress::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [409, 1, 1, "", "tensorstore::CopyProgress::operator==", "Compares two progress states for equality."], [411, 5, 1, "", "tensorstore::CopyProgress::read_elements", "Number of elements that are ready for reading."], [412, 5, 1, "", "tensorstore::CopyProgress::total_elements", "Total number of elements to be copied."], [413, 4, 1, "", "tensorstore::CopyProgressFunction", "Specifies a copy progress function for use with tensorstore::Copy."], [414, 6, 1, "", "tensorstore::CopyProgressFunction::Function", "Type-erased movable function with signature void(CopyProgress)."], [415, 1, 1, "", "tensorstore::CopyTransformedArray", "Copies from one transformed array to another, possibly converting the data type."], [415, 2, 2, "p-dest", "tensorstore::CopyTransformedArray::dest", "The destination transformed array."], [415, 2, 2, "p-source", "tensorstore::CopyTransformedArray::source", "The source transformed array."], [416, 4, 1, "", "tensorstore::DataType", "Run-time representation of a C++ type used as the element type for a multi-dimensional array."], [417, 1, 1, "", "tensorstore::DataType::AbslHashValue", "Abseil hash support."], [418, 1, 1, "", "tensorstore::DataType::DataType", "Initializes to an invalid data type."], [419, 1, 1, "", "tensorstore::DataType::alignment", "Returns the alignment required by the data type."], [420, 1, 1, "", "tensorstore::DataType::name", "Returns the data type name, e.g. \"bool\" or \"uint32\"."], [421, 1, 1, "", "tensorstore::DataType::operator!=", "Comparison operators."], [421, 1, 1, "", "tensorstore::DataType::operator!=", "Comparison operators."], [421, 1, 1, "", "tensorstore::DataType::operator!=", "Comparison operators."], [422, 1, 1, "", "tensorstore::DataType::operator&lt;&lt;", "Prints name() if valid() == true, otherwise prints \"<unspecified>\"."], [421, 1, 1, "", "tensorstore::DataType::operator==", "Comparison operators."], [421, 1, 1, "", "tensorstore::DataType::operator==", "Comparison operators."], [421, 1, 1, "", "tensorstore::DataType::operator==", "Comparison operators."], [423, 1, 1, "", "tensorstore::DataType::size", "Returns the size in bytes of the data type."], [424, 1, 1, "", "tensorstore::DataType::valid", "Returns true if this represents a valid data type."], [425, 8, 1, "", "tensorstore::DataTypeConversionFlags", "Specifies traits for the conversion from one data type to another."], [425, 9, 1, "e-kCanReinterpretCast", "tensorstore::DataTypeConversionFlags::kCanReinterpretCast", "The conversion requires no change to the in-memory representation. (i.e. conversion from intN_t -> uintN_t and vice versa)."], [425, 9, 1, "e-kIdentity", "tensorstore::DataTypeConversionFlags::kIdentity", "Conversion is from a given data type to itself (i.e. no conversion)."], [425, 9, 1, "e-kSafeAndImplicit", "tensorstore::DataTypeConversionFlags::kSafeAndImplicit", "The conversion is guaranteed to succeed without any loss of information. These conversions are performed implicitly when needed.  Examples include float64 -> float32, int32 -> int16, int32 -> uint16, float32 -> complex64. As a special case, conversions from numeric to string types are not marked safe even though there is no loss of information, in order to prevent this implicit conversion."], [425, 9, 1, "e-kSupported", "tensorstore::DataTypeConversionFlags::kSupported", "Conversion is possible.  If not set, no other flags should be specified."], [426, 1, 1, "", "tensorstore::DestroyAndFree", "Frees memory allocated by AllocateAndConsruct."], [427, 4, 1, "", "tensorstore::DimExpression", "A DimExpression represents an ordered \"selection\" of dimensions of an index space and a sequence of \"operations\" to apply to those dimensions."], [428, 1, 1, "", "tensorstore::DimExpression::AddNew", "Adds new inert input dimensions that have no effect on the output indices."], [429, 1, 1, "", "tensorstore::DimExpression::BoxSlice", "Extracts a box from the selected dimensions."], [429, 2, 2, "p-box", "tensorstore::DimExpression::BoxSlice::box", "The box to extract."], [430, 1, 1, "", "tensorstore::DimExpression::ClosedInterval", "Extracts a closed interval from the selected dimensions with optional striding."], [430, 2, 2, "p-start", "tensorstore::DimExpression::ClosedInterval::start", "The index vector specifying the start indices for each selected dimension."], [430, 2, 2, "p-stop", "tensorstore::DimExpression::ClosedInterval::stop", "The index vector specifying the stop indices for each selected dimension."], [430, 2, 2, "p-strides", "tensorstore::DimExpression::ClosedInterval::strides", "The index vector specifying the stride value for each selected dimension."], [431, 1, 1, "", "tensorstore::DimExpression::Diagonal", "Extracts the diagonal of the selected dimensions."], [432, 1, 1, "", "tensorstore::DimExpression::HalfOpenInterval", "Extracts a half-open interval from the selected dimensions with optional striding."], [432, 2, 2, "p-start", "tensorstore::DimExpression::HalfOpenInterval::start", "The index vector specifying the start indices for each selected dimension."], [432, 2, 2, "p-stop", "tensorstore::DimExpression::HalfOpenInterval::stop", "The index vector specifying the stop indices for each selected dimension."], [432, 2, 2, "p-strides", "tensorstore::DimExpression::HalfOpenInterval::strides", "The index vector specifying the stride value for each selected dimension."], [433, 1, 1, "", "tensorstore::DimExpression::IndexArraySlice", "Jointly slices the selected dimensions using index arrays."], [433, 1, 1, "", "tensorstore::DimExpression::IndexArraySlice", "Jointly slices the selected dimensions using index arrays."], [433, 2, 2, "p-index_arrays", "tensorstore::DimExpression::IndexArraySlice::index_arrays", "The index arrays used to index into each selected dimension."], [433, 2, 2, "p-index_arrays", "tensorstore::DimExpression::IndexArraySlice::index_arrays", "The index arrays used to index into each selected dimension."], [434, 1, 1, "", "tensorstore::DimExpression::IndexSlice", "Extracts a single-index slice of the selected dimensions using the specified index vector."], [434, 2, 2, "p-indices", "tensorstore::DimExpression::IndexSlice::indices", "The index vector specifying the index to slice from each selected dimension."], [435, 1, 1, "", "tensorstore::DimExpression::IndexVectorArraySlice", "Jointly slices the selected dimensions using the specified array of index vectors."], [435, 2, 2, "p-index_vector_array", "tensorstore::DimExpression::IndexVectorArraySlice::index_vector_array", "The array of index vectors used to index the selected dimension."], [435, 2, 2, "p-vector_dimension", "tensorstore::DimExpression::IndexVectorArraySlice::vector_dimension", "Optional."], [436, 1, 1, "", "tensorstore::DimExpression::Label", "Sets (or changes) the labels of the selected dimensions."], [436, 1, 1, "", "tensorstore::DimExpression::Label", "Sets (or changes) the labels of the selected dimensions."], [436, 2, 2, "p-labels", "tensorstore::DimExpression::Label::labels", "The new labels for each of the selected dimensions."], [436, 2, 2, "p-labels", "tensorstore::DimExpression::Label::labels", "The new labels for each of the selected dimensions."], [437, 1, 1, "", "tensorstore::DimExpression::MarkBoundsExplicit", "Marks the lower and/or upper bounds of the selected dimensions as explicit."], [437, 2, 2, "p-lower", "tensorstore::DimExpression::MarkBoundsExplicit::lower", "If true (the default), mark the lower bounds as explicit."], [437, 2, 2, "p-upper", "tensorstore::DimExpression::MarkBoundsExplicit::upper", "If true (the default), mark the upper bounds as explicit."], [438, 1, 1, "", "tensorstore::DimExpression::MoveTo", "Transposes the input dimensions such that the selected dimensions are consecutive starting or ending at the specified target position."], [438, 2, 2, "p-target", "tensorstore::DimExpression::MoveTo::target", "Must be in the range [-input_rank + selection_rank - 1, input_rank - selection_rank]. If target >= 0, target is the new index of the first selected dimension."], [439, 1, 1, "", "tensorstore::DimExpression::MoveToBack", "Equivalent to MoveTo(-1)."], [440, 1, 1, "", "tensorstore::DimExpression::MoveToFront", "Equivalent to MoveTo(0)."], [441, 1, 1, "", "tensorstore::DimExpression::OuterIndexArraySlice", "Independently slices the selected dimensions using index arrays."], [441, 1, 1, "", "tensorstore::DimExpression::OuterIndexArraySlice", "Independently slices the selected dimensions using index arrays."], [441, 2, 2, "p-index_arrays", "tensorstore::DimExpression::OuterIndexArraySlice::index_arrays", "The index arrays used to index into each selected dimension."], [441, 2, 2, "p-index_arrays", "tensorstore::DimExpression::OuterIndexArraySlice::index_arrays", "The index arrays used to index into each selected dimension."], [442, 1, 1, "", "tensorstore::DimExpression::Resolve", "Resolves a dimension selection to dimension indices."], [442, 2, 2, "p-domain", "tensorstore::DimExpression::Resolve::domain", "The domain for which to resolve the dimension selection."], [442, 2, 2, "p-selection_output", "tensorstore::DimExpression::Resolve::selection_output", "Non-null pointer to buffer that will be filled with dimension indices."], [443, 1, 1, "", "tensorstore::DimExpression::SizedInterval", "Extracts a sized interval from the selected dimensions with optional striding."], [443, 2, 2, "p-size", "tensorstore::DimExpression::SizedInterval::size", "The size vector specifying the size of the domain for each selected dimension."], [443, 2, 2, "p-start", "tensorstore::DimExpression::SizedInterval::start", "The index vector specifying the start indices for each selected dimension."], [443, 2, 2, "p-strides", "tensorstore::DimExpression::SizedInterval::strides", "The index vector specifying the stride value for each selected dimension."], [444, 1, 1, "", "tensorstore::DimExpression::Stride", "Strides the domains of the selected input dimensions by the specified strides vector."], [444, 2, 2, "p-strides", "tensorstore::DimExpression::Stride::strides", "Index vector specifying the stride for each selected dimension."], [445, 1, 1, "", "tensorstore::DimExpression::TranslateBackwardBy", "Translates (shifts) the domains of the selected input dimensions backwards by the specified offsets vector; the output range remains the same."], [445, 2, 2, "p-offsets", "tensorstore::DimExpression::TranslateBackwardBy::offsets", "The offset vector by which to shift the input domains of the selected dimensions."], [446, 1, 1, "", "tensorstore::DimExpression::TranslateBoxSlice", "Extracts a box from the selected dimensions, and translates its origin to 0."], [446, 2, 2, "p-box", "tensorstore::DimExpression::TranslateBoxSlice::box", "The box to extract."], [447, 1, 1, "", "tensorstore::DimExpression::TranslateBy", "Translates (shifts) the domains of the selected input dimensions by the specified offsets vector; the output range remains the same."], [447, 2, 2, "p-offsets", "tensorstore::DimExpression::TranslateBy::offsets", "The offset vector by which to shift the input domains of the selected dimensions."], [448, 1, 1, "", "tensorstore::DimExpression::TranslateClosedInterval", "Equivalent to ClosedInterval(start, stop, strides).TranslateTo(0)."], [449, 1, 1, "", "tensorstore::DimExpression::TranslateHalfOpenInterval", "Equivalent to HalfOpenInterval(start, stop, strides).TranslateTo(0)."], [450, 1, 1, "", "tensorstore::DimExpression::TranslateSizedInterval", "Equivalent to SizedInterval(start, size, strides).TranslateTo(0)."], [451, 1, 1, "", "tensorstore::DimExpression::TranslateTo", "Translates the domain of the selected input dimensions to the specified origin vector without affecting the output range."], [451, 2, 2, "p-origins", "tensorstore::DimExpression::TranslateTo::origins", "The origin vector to which to shift the input domains of the selected dimensions."], [452, 1, 1, "", "tensorstore::DimExpression::Transpose", "Transposes the input dimensions such that the selected dimensions are consecutive."], [453, 1, 1, "", "tensorstore::DimExpression::Transpose", "Transposes the input dimensions such that the selected dimensions have the specified indices.  Dimensions not in the selection retain their relative order and fill in the dimension indices not in target_dimensions."], [453, 2, 2, "p-target_dimensions", "tensorstore::DimExpression::Transpose::target_dimensions", "The new dimension indices corresponding to each selected dimension."], [454, 1, 1, "", "tensorstore::DimExpression::UnsafeMarkBoundsImplicit", "Marks the lower and/or upper bounds of the selected dimensions as implicit."], [454, 2, 2, "p-lower", "tensorstore::DimExpression::UnsafeMarkBoundsImplicit::lower", "If true (the default), mark the lower bounds as implicit."], [454, 2, 2, "p-upper", "tensorstore::DimExpression::UnsafeMarkBoundsImplicit::upper", "If true (the default), mark the upper bounds as implicit."], [455, 1, 1, "", "tensorstore::DimExpression::operator()", "Applies this DimExpression to the specified index domain."], [456, 1, 1, "", "tensorstore::DimExpression::operator()", "Applies this DimExpression to the specified index transform."], [457, 1, 1, "", "tensorstore::DimExpression::operator()", "Applies this DimExpression to an object with an associated index space that supports ApplyIndexTransform."], [455, 2, 2, "p-domain", "tensorstore::DimExpression::operator()::domain", "The index domain to which this DimExpression is applied."], [455, 2, 2, "p-selection_output", "tensorstore::DimExpression::operator()::selection_output", "Optional."], [456, 2, 2, "p-selection_output", "tensorstore::DimExpression::operator()::selection_output", "Optional."], [456, 2, 2, "p-transform", "tensorstore::DimExpression::operator()::transform", "The index transform to which this DimExpression is applied."], [458, 1, 1, "", "tensorstore::DimRange", "Starts a DimExpression with a range of dimensions."], [459, 4, 1, "", "tensorstore::DimRangeSpec", "Represents a range of dimension indices."], [460, 5, 1, "", "tensorstore::DimRangeSpec::exclusive_stop", "Exclusive stop index."], [461, 5, 1, "", "tensorstore::DimRangeSpec::inclusive_start", "Inclusive start index."], [462, 1, 1, "", "tensorstore::DimRangeSpec::operator!=", "Compares two DimRangeSpec objects for equality."], [463, 1, 1, "", "tensorstore::DimRangeSpec::operator&lt;&lt;", "Returns a Python-style inclusive_start:inclusive_stop or inclusive_start:exclusive_stop:step slice expression, where inclusive_start and exclusive_stop are omitted if equal to std::nullopt and step is omitted if equal to 1."], [462, 1, 1, "", "tensorstore::DimRangeSpec::operator==", "Compares two DimRangeSpec objects for equality."], [464, 5, 1, "", "tensorstore::DimRangeSpec::step", "Step size, must not equal 0."], [465, 4, 1, "", "tensorstore::DimensionIdentifier", "Specifies a dimension of an index space by index or by label."], [466, 1, 1, "", "tensorstore::DimensionIdentifier::DimensionIdentifier", "Constructs an invalid dimension identifier."], [467, 1, 1, "", "tensorstore::DimensionIdentifier::DimensionIdentifier", "Constructs from a dimension index."], [468, 1, 1, "", "tensorstore::DimensionIdentifier::DimensionIdentifier", "Constructs from a label."], [469, 1, 1, "", "tensorstore::DimensionIdentifier::index", "Returns the specified dimension index, or std::numeric_limits<DimensionIndex>::max() if a dimension label was specified."], [470, 1, 1, "", "tensorstore::DimensionIdentifier::label", "Returns the dimension label, or a label with data() == nullptr if a dimension index was specified."], [471, 1, 1, "", "tensorstore::DimensionIdentifier::operator!=", "Compares two dimension identifiers."], [472, 1, 1, "", "tensorstore::DimensionIdentifier::operator&lt;&lt;", "Prints to an std::ostream."], [471, 1, 1, "", "tensorstore::DimensionIdentifier::operator==", "Compares two dimension identifiers."], [473, 6, 1, "", "tensorstore::DimensionIndex", "Type for representing a dimension index or rank."], [474, 6, 1, "", "tensorstore::DimensionIndexBuffer", "Specifies a sequence of DimensionIndex values."], [475, 6, 1, "", "tensorstore::DimensionSet", "Represents a set of dimension indices."], [476, 1, 1, "", "tensorstore::DimensionUnitsToString", "Converts a dimension unit vector to a string for use in error messages."], [477, 6, 1, "", "tensorstore::DimensionUnitsVector", "Vector specifying optional units for each dimension of an index space."], [478, 1, 1, "", "tensorstore::Dims", "Starts a DimExpression with the specified dimensions selected (and no operations)."], [478, 1, 1, "", "tensorstore::Dims", "Starts a DimExpression with the specified dimensions selected (and no operations)."], [478, 2, 2, "p-dimensions", "tensorstore::Dims::dimensions", "The dimension identifiers."], [478, 2, 2, "p-dimensions", "tensorstore::Dims::dimensions", "The dimension identifiers."], [479, 1, 1, "", "tensorstore::DividePositiveRoundOut", "Divides the lower and upper bounds of interval by divisor, rounding out (expanding the interval) to the nearest integer."], [480, 8, 1, "", "tensorstore::DomainAlignmentOptions", "Specifies options for aligning index domains."], [480, 9, 1, "e-all", "tensorstore::DomainAlignmentOptions::all", "Dimensions may be permuted, translated, or broadcast to align the source domain to the target domain."], [480, 9, 1, "e-broadcast", "tensorstore::DomainAlignmentOptions::broadcast", "Source dimensions of size 1 do not have to match a target dimension, and not all target dimensions must match a source dimension."], [480, 9, 1, "e-none", "tensorstore::DomainAlignmentOptions::none", "Source and target domains must be equal (labels are ignored)."], [480, 9, 1, "e-permute", "tensorstore::DomainAlignmentOptions::permute", "Source dimensions may be permuted based on their labels in order to align the source domain to the target domain."], [480, 9, 1, "e-translate", "tensorstore::DomainAlignmentOptions::translate", "Source dimensions may be translated in order to align the source domain to the target domain."], [481, 1, 1, "", "tensorstore::Downsample", "Returns a downsampled view of a Spec."], [482, 1, 1, "", "tensorstore::Downsample", "Returns a downsampled view of a TensorStore."], [481, 2, 2, "p-base_spec", "tensorstore::Downsample::base_spec", "Base spec to downsample."], [481, 2, 2, "p-downsample_factors", "tensorstore::Downsample::downsample_factors", "Factors by which to downsample each dimension. Must have length compatible with base_spec.rank() and all factors must be positive."], [482, 2, 2, "p-downsample_factors", "tensorstore::Downsample::downsample_factors", "Factors by which to downsample each dimension of store."], [481, 2, 2, "p-downsample_method", "tensorstore::Downsample::downsample_method", "The downsampling method."], [482, 2, 2, "p-downsample_method", "tensorstore::Downsample::downsample_method", "The downsampling method."], [482, 2, 2, "p-store", "tensorstore::Downsample::store", "Base view to downsample, must support reading."], [483, 8, 1, "", "tensorstore::DownsampleMethod", "Specifies the method by which downsampling is performed."], [483, 9, 1, "e-kMax", "tensorstore::DownsampleMethod::kMax", ""], [483, 9, 1, "e-kMean", "tensorstore::DownsampleMethod::kMean", ""], [483, 9, 1, "e-kMedian", "tensorstore::DownsampleMethod::kMedian", ""], [483, 9, 1, "e-kMin", "tensorstore::DownsampleMethod::kMin", ""], [483, 9, 1, "e-kMode", "tensorstore::DownsampleMethod::kMode", ""], [483, 9, 1, "e-kStride", "tensorstore::DownsampleMethod::kStride", ""], [484, 6, 1, "", "tensorstore::DynamicDimSpec", "Specifies a dimension by index or label or a range of dimensions."], [485, 1, 1, "", "tensorstore::DynamicDims", "Starts a DimExpression with a variable number of dimensions."], [486, 4, 1, "", "tensorstore::DynamicRank", "Type of the special dynamic_rank constant."], [488, 1, 1, "", "tensorstore::DynamicRank::operator DimensionIndex", "Enables the use of dynamic_rank below as a constant argument for DimensionIndex Rank template parameters to indicate a dynamic rank (with inline buffer disabled, if applicable)."], [487, 1, 1, "", "tensorstore::DynamicRank::operator()", "Enables the use of dynamic_rank(n) as an argument for DimensionIndex Rank template parameters to indicate a dynamic rank with an inline buffer of size n."], [489, 8, 1, "", "tensorstore::ElementInitialization", "Specifies the form of initialization to use when allocating an array."], [489, 9, 1, "e-default_init", "tensorstore::ElementInitialization::default_init", "Specifies default initialization.  For primitive types, or class types for which the default constructor leaves some members uninitialized, this results in indeterminate values."], [489, 9, 1, "e-value_init", "tensorstore::ElementInitialization::value_init", "Specifies value initialization."], [490, 4, 1, "", "tensorstore::ElementPointer", "Pairs an array base pointer (either an Element* or an std::shared_ptr<Element>) with a DataType in order to support a dynamic element type determined at run time."], [491, 6, 1, "", "tensorstore::ElementPointer::DataType", "Static or dynamic data type representation."], [501, 6, 1, "", "tensorstore::ElementPointer::Element", "Underlying element type."], [492, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Initializes to a null pointer."], [492, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Initializes to a null pointer."], [493, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Constructs from a compatible ElementPointer type."], [494, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Constructs from another compatible pointer and optional data type."], [494, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Constructs from another compatible pointer and optional data type."], [495, 1, 1, "", "tensorstore::ElementPointer::ElementPointer", "Unchecked conversion."], [494, 2, 2, "p-dtype", "tensorstore::ElementPointer::ElementPointer::dtype", "The data type, must be specified if SourcePointer has an element type of void."], [494, 2, 2, "p-pointer", "tensorstore::ElementPointer::ElementPointer::pointer", "The element pointer."], [496, 6, 1, "", "tensorstore::ElementPointer::ElementTag", "Element tag type."], [490, 3, 2, "p-ElementTagType", "tensorstore::ElementPointer::ElementTagType", "An ElementTag type that is either Element (to represent unowned array data) or Shared<Element> (to represent array data with shared ownership)."], [497, 6, 1, "", "tensorstore::ElementPointer::Pointer", "Underlying data pointer type, either Element* or std::shared_ptr<Element>."], [498, 1, 1, "", "tensorstore::ElementPointer::byte_strided_pointer", "Returns the raw pointer value as a ByteStridedPointer."], [499, 1, 1, "", "tensorstore::ElementPointer::data", "Returns the raw pointer value."], [500, 1, 1, "", "tensorstore::ElementPointer::dtype", "Returns the data type."], [501, 6, 1, "", "tensorstore::ElementPointer::element_type", "Underlying element type."], [503, 1, 1, "", "tensorstore::ElementPointer::operator bool", "Returns data() != nullptr."], [504, 1, 1, "", "tensorstore::ElementPointer::operator!=", "Compares the data pointers and data types."], [502, 1, 1, "", "tensorstore::ElementPointer::operator=", "Assigns from a nullptr, pointer type, or ElementPointer type."], [504, 1, 1, "", "tensorstore::ElementPointer::operator==", "Compares the data pointers and data types."], [505, 1, 1, "", "tensorstore::ElementPointer::operator==", "Checks if the data pointer is null."], [506, 1, 1, "", "tensorstore::ElementPointer::pointer", "Returns a reference to the stored pointer."], [506, 1, 1, "", "tensorstore::ElementPointer::pointer", "Returns a reference to the stored pointer."], [506, 1, 1, "", "tensorstore::ElementPointer::pointer", "Returns a reference to the stored pointer."], [507, 4, 1, "", "tensorstore::ElementTagTraits", "Traits for element tag types."], [508, 6, 1, "", "tensorstore::ElementTagTraits::Element", "Element type of Pointer."], [509, 6, 1, "", "tensorstore::ElementTagTraits::Pointer", "Pointer type."], [507, 3, 2, "p-T", "tensorstore::ElementTagTraits::T", "Type satisfying IsElementTag<T>."], [510, 6, 1, "", "tensorstore::ElementTagTraits::rebind", "Same kind of tag type, but for another element type U."], [511, 8, 1, "", "tensorstore::EqualityComparisonKind", "Specifies an equality comparison method."], [511, 9, 1, "e-equal", "tensorstore::EqualityComparisonKind::equal", "Compare using regular equality (operator==).  For floating point types, this considers positive and negative zero equal, and NaN unequal to itself."], [511, 9, 1, "e-identical", "tensorstore::EqualityComparisonKind::identical", "Checks if two arrays are identical."], [512, 6, 1, "", "tensorstore::Executor", "Function object that is callable with nullary noexcept functions."], [513, 4, 1, "", "tensorstore::ExecutorBoundFunction", "Function object that invokes a given function using a given executor.  Any arguments are forwarded to the contained function."], [514, 6, 1, "", "tensorstore::ExecutorBoundFunction::Executor", "Executor type."], [515, 6, 1, "", "tensorstore::ExecutorBoundFunction::Function", "Function type."], [516, 6, 1, "", "tensorstore::ExecutorTask", "Type-erased nullary function type that supports move construction."], [517, 1, 1, "", "tensorstore::ExplicitIndexOr", "Returns index if index != kImplicit, or default_value otherwise."], [518, 1, 1, "", "tensorstore::ExtractClosedStridedSlice", "Extracts a strided closed interval from a containing interval."], [518, 2, 2, "p-orig", "tensorstore::ExtractClosedStridedSlice::orig", "The original interval from which to extract a strided slice."], [518, 2, 2, "p-start", "tensorstore::ExtractClosedStridedSlice::start", "The index within orig corresponding to the inclusive_min value in the result interval."], [518, 2, 2, "p-stop", "tensorstore::ExtractClosedStridedSlice::stop", "Specifies the inclusive stop index within orig."], [518, 2, 2, "p-stride", "tensorstore::ExtractClosedStridedSlice::stride", "Specifies the stride value."], [519, 1, 1, "", "tensorstore::ExtractHalfOpenStridedSlice", "Extracts a strided half-open interval from a containing interval."], [519, 2, 2, "p-orig", "tensorstore::ExtractHalfOpenStridedSlice::orig", "The original interval from which to extract a strided slice."], [519, 2, 2, "p-start", "tensorstore::ExtractHalfOpenStridedSlice::start", "The index in orig corresponding to the inclusive_min value in the result interval."], [519, 2, 2, "p-stop", "tensorstore::ExtractHalfOpenStridedSlice::stop", "Specifies the exclusive stop index in orig."], [519, 2, 2, "p-stride", "tensorstore::ExtractHalfOpenStridedSlice::stride", "Specifies the stride value."], [520, 1, 1, "", "tensorstore::ExtractSizedStridedSlice", "Extracts a strided interval of the specified size from a containing interval."], [520, 2, 2, "p-orig", "tensorstore::ExtractSizedStridedSlice::orig", "The original interval from which to extract a strided slice."], [520, 2, 2, "p-size", "tensorstore::ExtractSizedStridedSlice::size", "Specifies the size of the result interval."], [520, 2, 2, "p-start", "tensorstore::ExtractSizedStridedSlice::start", "The index within orig corresponding to the inclusive_min value in the result interval."], [520, 2, 2, "p-stride", "tensorstore::ExtractSizedStridedSlice::stride", "Specifies the stride value."], [521, 1, 1, "", "tensorstore::ExtractStridedSlice", "Equivalent to ExtractHalfOpenStridedSlice, ExtractHalfOpenStridedSlice, or ExtractHalfOpenStridedSlice depending on the value of interval_form."], [522, 1, 1, "", "tensorstore::FiniteSubset", "Returns Intersect(interval, IndexInterval::FiniteRange())."], [523, 6, 1, "", "tensorstore::FlatMapResultType", "Type alias that maps Result<T> to Result<U>, where U = MapType<U>."], [524, 6, 1, "", "tensorstore::FlatResult", "FlatResult<T> maps"], [525, 6, 1, "", "tensorstore::Float8e4m3b11fnuz", "Storage-only 8-bit floating-point data types."], [525, 6, 1, "", "tensorstore::Float8e4m3fn", "Storage-only 8-bit floating-point data types."], [525, 6, 1, "", "tensorstore::Float8e4m3fnuz", "Storage-only 8-bit floating-point data types."], [525, 6, 1, "", "tensorstore::Float8e5m2", "Storage-only 8-bit floating-point data types."], [525, 6, 1, "", "tensorstore::Float8e5m2fnuz", "Storage-only 8-bit floating-point data types."], [526, 4, 1, "", "tensorstore::Future", "\"Consumer\" interface to a one-time channel."], [527, 1, 1, "", "tensorstore::Future::ExecuteWhenReady", "Registers a callback to invoke when ready() becomes true."], [527, 1, 1, "", "tensorstore::Future::ExecuteWhenReady", "Registers a callback to invoke when ready() becomes true."], [527, 2, 2, "p-callback", "tensorstore::Future::ExecuteWhenReady::callback", "A function object to be invoked with a ReadyFuture<T> referring to the same shared state as *this."], [528, 1, 1, "", "tensorstore::Future::Future", "Constructs from a compatible Future."], [529, 1, 1, "", "tensorstore::Future::Future", "Constructs an null Future."], [530, 1, 1, "", "tensorstore::Future::Future", "Construct a Future<T> from a Result<U>."], [530, 1, 1, "", "tensorstore::Future::Future", "Construct a Future<T> from a Result<U>."], [531, 1, 1, "", "tensorstore::Future::Future", "Construct a Future<T> with an an absl::Status code."], [531, 1, 1, "", "tensorstore::Future::Future", "Construct a Future<T> with an an absl::Status code."], [532, 1, 1, "", "tensorstore::Future::Future", "Constructs a Future from a Result<Future<U>>, where U is T or const U is T."], [533, 1, 1, "", "tensorstore::Future::Future", "Construct a Future<T> from a value convertible to a Result<T>."], [528, 3, 2, "p-U", "tensorstore::Future::Future::U", "The source value type."], [534, 1, 1, "", "tensorstore::Future::IgnoreFuture", "Ignores the future. This method signals intent to ignore the result to suppress compiler warnings from [[nodiscard]]."], [526, 3, 2, "p-T", "tensorstore::Future::T", "Specifies the type of the value to be transmitted."], [535, 1, 1, "", "tensorstore::Future::operator=", "Assigns from a compatible Future."], [535, 3, 2, "p-U", "tensorstore::Future::operator=::U", "The source value type."], [536, 1, 1, "", "tensorstore::Future::result", "Calls Force(), waits for the result to be ready, and returns a reference to the result."], [537, 6, 1, "", "tensorstore::Future::result_type", "The result type transmitted by the channel."], [538, 1, 1, "", "tensorstore::Future::value", "Equivalent to result().value()."], [539, 6, 1, "", "tensorstore::Future::value_type", "The value type contained in the result_type."], [540, 4, 1, "", "tensorstore::FutureCallbackRegistration", "Handle to a registered Future or Promise callback, that may be used to unregister it."], [541, 1, 1, "", "tensorstore::FutureCallbackRegistration::FutureCallbackRegistration", "Constructs a null handle."], [542, 1, 1, "", "tensorstore::FutureCallbackRegistration::Unregister", "Unregisters the associated callback."], [543, 1, 1, "", "tensorstore::FutureCallbackRegistration::UnregisterNonBlocking", "Same as Unregister, except that in the case that the callback is executing concurrently in another thread, this method does not block until it completes."], [544, 1, 1, "", "tensorstore::FutureCallbackRegistration::operator()", "Equivalent to Unregister()."], [545, 1, 1, "", "tensorstore::GetAffineTransformDomain", "Computes the largest possible domain such that the affine-transformed range is contained within interval."], [546, 1, 1, "", "tensorstore::GetAffineTransformDomain", "Same as above, but also propagates interval.implicit_lower() and interval.implicit_upper() to the input space."], [545, 2, 2, "p-divisor", "tensorstore::GetAffineTransformDomain::divisor", "The multiplier of the affine transform."], [545, 2, 2, "p-interval", "tensorstore::GetAffineTransformDomain::interval", "The range of the affine transform."], [545, 2, 2, "p-offset", "tensorstore::GetAffineTransformDomain::offset", "The offset of the affine transform."], [547, 1, 1, "", "tensorstore::GetAffineTransformInverseDomain", "Computes the interval containing all indices x for which (x - offset) / divisor is in interval, where / rounds towards 0."], [547, 2, 2, "p-divisor", "tensorstore::GetAffineTransformInverseDomain::divisor", "The multiplier of the affine transform."], [547, 2, 2, "p-interval", "tensorstore::GetAffineTransformInverseDomain::interval", "The domain of the affine transform."], [547, 2, 2, "p-offset", "tensorstore::GetAffineTransformInverseDomain::offset", "The offset of the affine transform."], [548, 1, 1, "", "tensorstore::GetAffineTransformRange", "Computes the range of the affine-transformed domain interval."], [549, 1, 1, "", "tensorstore::GetAffineTransformRange", "Same as above, but also propagates interval.implicit_lower() and interval.implicit_upper() to the output space."], [548, 2, 2, "p-interval", "tensorstore::GetAffineTransformRange::interval", "The domain to be transformed."], [548, 2, 2, "p-multiplier", "tensorstore::GetAffineTransformRange::multiplier", "The multiplier by which to multiply interval."], [548, 2, 2, "p-offset", "tensorstore::GetAffineTransformRange::offset", "The offset by which to shift the multiplied interval."], [550, 4, 1, "", "tensorstore::GetArrayStorageStatisticsOptions", "Specifies options for computing array storage statistics."], [551, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for IndexDomain."], [552, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for IndexTransform."], [553, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for TransformedArray."], [554, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for Array."], [555, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for Box and BoxView."], [555, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for Box and BoxView."], [556, 1, 1, "", "tensorstore::GetBoxDomainOf", "Implements the HasBoxDomain concept for StridedLayout."], [557, 1, 1, "", "tensorstore::GetByteExtent", "Returns minimum number of contiguous bytes into which the array fits."], [558, 1, 1, "", "tensorstore::GetByteExtent", "Returns smallest number of contiguous bytes into which the specified layout fits."], [559, 1, 1, "", "tensorstore::GetContiguousIndices", "Computes the indices corresponding to a given linear offset for the specified shape and Order."], [559, 2, 2, "p-indices", "tensorstore::GetContiguousIndices::indices", "Indices to be set."], [559, 2, 2, "p-offset", "tensorstore::GetContiguousIndices::offset", "Offset for which to the compute the indices."], [559, 2, 2, "p-shape", "tensorstore::GetContiguousIndices::shape", "Shape for which to compute the indices."], [560, 1, 1, "", "tensorstore::GetContiguousOffset", "Computes the offset of a given index vector in C or Fortran order."], [560, 2, 2, "p-indices", "tensorstore::GetContiguousOffset::indices", "Indices for which to compute the offset."], [560, 2, 2, "p-shape", "tensorstore::GetContiguousOffset::shape", "Shape for which to compute the offset."], [561, 1, 1, "", "tensorstore::GetDataType", "Returns the DataType with DataType::name equal to id."], [562, 1, 1, "", "tensorstore::GetDefaultRank", "If Rank == dynamic_rank, returns dynamic_rank.  Otherwise, returns StaticRank<Rank>{}."], [563, 1, 1, "", "tensorstore::GetOutputRange", "Computes a hyperrectangle bound on the output range of transform."], [563, 2, 2, "p-output_range", "tensorstore::GetOutputRange::output_range", "Reference to box of rank transform.output_rank()."], [563, 2, 2, "p-transform", "tensorstore::GetOutputRange::transform", "The index transform for which to compute the output range."], [564, 1, 1, "", "tensorstore::GetStaticOrDynamicExtent", "Returns the size of span as an std::integral_constant or DimensionIndex."], [564, 1, 1, "", "tensorstore::GetStaticOrDynamicExtent", "Returns the size of span as an std::integral_constant or DimensionIndex."], [565, 1, 1, "", "tensorstore::GetStatus", "Waits for the future to be ready and returns the status."], [566, 1, 1, "", "tensorstore::GetStatus", "Waits for future.commit_future to be ready and returns the status."], [567, 1, 1, "", "tensorstore::GetStatus", "Returns the error status of Result, or absl::OkStatus() if Result has a value."], [567, 1, 1, "", "tensorstore::GetStatus", "Returns the error status of Result, or absl::OkStatus() if Result has a value."], [568, 1, 1, "", "tensorstore::GetStatus", "Overload for the case of a bare absl::Status argument."], [568, 1, 1, "", "tensorstore::GetStatus", "Overload for the case of a bare absl::Status argument."], [569, 1, 1, "", "tensorstore::GetStorageStatistics", "Retrieves statistics of the data stored within the given array region."], [569, 1, 1, "", "tensorstore::GetStorageStatistics", "Retrieves statistics of the data stored within the given array region."], [569, 2, 2, "p-option", "tensorstore::GetStorageStatistics::option", "Any option compatible with GetArrayStorageStatisticsOptions."], [569, 2, 2, "p-options", "tensorstore::GetStorageStatistics::options", "Specifies which statistics to compute."], [569, 2, 2, "p-store", "tensorstore::GetStorageStatistics::store", "The TensorStore to query."], [570, 1, 1, "", "tensorstore::GetSubLayoutView", "Returns a view with the leading sub_rank dimensions of layout removed."], [570, 1, 1, "", "tensorstore::GetSubLayoutView", "Returns a view with the leading sub_rank dimensions of layout removed."], [570, 7, 2, "p-SubRank", "tensorstore::GetSubLayoutView::SubRank", "Specifies the number of leading dimensions to remove at compile time, or dynamic_rank to specify the number of dimensions at run time."], [570, 7, 2, "p-SubRank", "tensorstore::GetSubLayoutView::SubRank", "Specifies the number of leading dimensions to remove at compile time, or dynamic_rank to specify the number of dimensions at run time."], [570, 2, 2, "p-layout", "tensorstore::GetSubLayoutView::layout", "The existing layout."], [570, 2, 2, "p-sub_rank", "tensorstore::GetSubLayoutView::sub_rank", "Specifies the number of leading dimensions to remove. Optional if SubRank != dynamic_rank."], [570, 2, 2, "p-sub_rank", "tensorstore::GetSubLayoutView::sub_rank", "Specifies the number of leading dimensions to remove. Optional if SubRank != dynamic_rank."], [571, 5, 1, "", "tensorstore::HasBoxDomain", "Metafunction that is specialized to return true for types T for which tensorstore::GetBoxDomainOf when called with a parameter of type const T& returns a Box-like type."], [572, 1, 1, "", "tensorstore::HaveSameSharedState", "Returns true if both futures refer to the same shared state, or are both null."], [573, 1, 1, "", "tensorstore::Hull", "Returns the smallest interval that contains a and b."], [574, 1, 1, "", "tensorstore::Hull", "Computes the hull of two index intervals."], [574, 2, 2, "p-a", "tensorstore::Hull::a", "OptionallyImplicitIndexInterval to hull."], [574, 2, 2, "p-b", "tensorstore::Hull::b", "Other OptionallyImplicitIndexInterval to hull."], [575, 1, 1, "", "tensorstore::HullIndexDomains", "Computes the hull of two index domains."], [576, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform over the specified box."], [577, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform over the specified index domain."], [578, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform with the specified dimension labels."], [578, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform with the specified dimension labels."], [579, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform of the specified rank."], [579, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform of the specified rank."], [580, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform with an origin of 0 and the specified shape."], [580, 1, 1, "", "tensorstore::IdentityTransform", "Returns an identity transform with an origin of 0 and the specified shape."], [579, 7, 2, "p-Rank", "tensorstore::IdentityTransform::Rank", "Optional."], [581, 1, 1, "", "tensorstore::IdentityTransformLike", "Returns an identity transform over the input domain of an array."], [582, 1, 1, "", "tensorstore::IdentityTransformLike", "Returns an identity transform over the input domain of an existing transform."], [583, 1, 1, "", "tensorstore::ImplicitOrEqual", "Returns true if index is either kImplicit or expected."], [584, 4, 1, "", "tensorstore::IncludeDefaults", "Specifies whether members equal to their default values are included when converting to JSON."], [585, 6, 1, "", "tensorstore::Index", "Type for representing a coordinate in, or a extent of, a multi-dimensional array."], [586, 4, 1, "", "tensorstore::IndexDomain", "Represents an index domain."], [587, 1, 1, "", "tensorstore::IndexDomain::ApplyIndexTransform", "Restricts an index domain by a box of the same rank."], [587, 2, 2, "p-box", "tensorstore::IndexDomain::ApplyIndexTransform::box", "The box to apply."], [587, 2, 2, "p-domain", "tensorstore::IndexDomain::ApplyIndexTransform::domain", "The existing index domain to restrict."], [586, 7, 2, "p-CKind", "tensorstore::IndexDomain::CKind", "Specifies whether this owns an index domain (container), or merely holds an unowned reference to one (view)."], [588, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs a domain with the specified box."], [589, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Converts from another compatible domain."], [589, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Converts from another compatible domain."], [590, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an invalid index domain."], [591, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an unbounded domain with the specified labels."], [591, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an unbounded domain with the specified labels."], [591, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an unbounded domain with the specified labels."], [591, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an unbounded domain with the specified labels."], [592, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs an unbounded domain with the specified rank."], [593, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs a domain with the specified shape."], [593, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Constructs a domain with the specified shape."], [594, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Converts from another domain (unchecked)."], [594, 1, 1, "", "tensorstore::IndexDomain::IndexDomain", "Converts from another domain (unchecked)."], [586, 7, 2, "p-Rank", "tensorstore::IndexDomain::Rank", "Specifies the rank at compile time, or dynamic_rank to indicate that the rank is determined at run time."], [595, 6, 1, "", "tensorstore::IndexDomain::RankType", "Type that represents the static or dynamic rank."], [596, 1, 1, "", "tensorstore::IndexDomain::Transpose", "Returns a new domain with the dimension order reversed."], [596, 1, 1, "", "tensorstore::IndexDomain::Transpose", "Returns a new domain with the dimension order reversed."], [597, 1, 1, "", "tensorstore::IndexDomain::Transpose", "Returns a new domain with the dimension order permuted."], [597, 1, 1, "", "tensorstore::IndexDomain::Transpose", "Returns a new domain with the dimension order permuted."], [597, 2, 2, "p-permutation", "tensorstore::IndexDomain::Transpose::permutation", "Permutation of 0, ..., rank()-1, where permutation[i] specifies the dimension of the existing domain that corresponds to dimension i of the new domain."], [598, 1, 1, "", "tensorstore::IndexDomain::box", "Returns the bounds of the domain."], [599, 5, 1, "", "tensorstore::IndexDomain::container_kind", "Specifies whether this owns an index domain (container), or merely holds an unowned reference to one (view)."], [600, 1, 1, "", "tensorstore::IndexDomain::implicit_lower_bounds", "Returns the bit vector specifying for each dimension whether its lower bound is \"implicit\" (1) or \"explicit\" (0)."], [601, 1, 1, "", "tensorstore::IndexDomain::implicit_upper_bounds", "Returns the bit vector specifying for each dimension whether its upper bound is \"implicit\" (1) or \"explicit\" (0)."], [602, 1, 1, "", "tensorstore::IndexDomain::labels", "Returns the vector of length rank() specifying the dimension labels."], [603, 1, 1, "", "tensorstore::IndexDomain::num_elements", "Returns the number of elements in the domain."], [607, 1, 1, "", "tensorstore::IndexDomain::operator!=", "Compares two index domains for equality."], [605, 1, 1, "", "tensorstore::IndexDomain::operator()", "Slices an index transform by this index domain."], [606, 1, 1, "", "tensorstore::IndexDomain::operator()", "Applies the slicing operation defined by the overload of operator() defined above to an object with an associated index space that supports ApplyIndexTransform."], [605, 2, 2, "p-transform", "tensorstore::IndexDomain::operator()::transform", "The transform to slice.."], [607, 1, 1, "", "tensorstore::IndexDomain::operator==", "Compares two index domains for equality."], [608, 1, 1, "", "tensorstore::IndexDomain::operator[]", "Returns the domain of dimension i."], [609, 1, 1, "", "tensorstore::IndexDomain::operator[]", "Returns a new domain in which dimension i is equal to dimension dims[i] of this domain."], [609, 1, 1, "", "tensorstore::IndexDomain::operator[]", "Returns a new domain in which dimension i is equal to dimension dims[i] of this domain."], [609, 2, 2, "p-dims", "tensorstore::IndexDomain::operator[]::dims", "Sequence of dimensions to include in the new domain."], [609, 2, 2, "p-dims", "tensorstore::IndexDomain::operator[]::dims", "Sequence of dimensions to include in the new domain."], [604, 1, 1, "", "tensorstore::IndexDomain::operator|", "\"Pipeline\" operator."], [610, 1, 1, "", "tensorstore::IndexDomain::origin", "Returns the vector of length rank() specifying the inclusive lower bound of each dimension."], [611, 1, 1, "", "tensorstore::IndexDomain::rank", "Returns the number of dimensions."], [612, 1, 1, "", "tensorstore::IndexDomain::shape", "Returns the vector of length rank() specifying the extent of each dimension."], [613, 5, 1, "", "tensorstore::IndexDomain::static_rank", "Compile-time rank, or dynamic_rank if the rank is specified at run time."], [614, 1, 1, "", "tensorstore::IndexDomain::valid", "Returns true if this refers to a valid index domain."], [615, 4, 1, "", "tensorstore::IndexDomainDimension", "Represents an index interval with optionally-implicit bounds and an optionally dimension label."], [616, 1, 1, "", "tensorstore::IndexDomainDimension::IndexDomainDimension", "Converts the label storage kind."], [617, 1, 1, "", "tensorstore::IndexDomainDimension::IndexDomainDimension", "Constructs an unlabeled dimension with infinite, implicit bounds."], [618, 1, 1, "", "tensorstore::IndexDomainDimension::IndexDomainDimension", "Constructs an unlabeled dimension with the specified bounds."], [619, 1, 1, "", "tensorstore::IndexDomainDimension::IndexDomainDimension", "Constructs a dimension with the given bounds and label."], [620, 6, 1, "", "tensorstore::IndexDomainDimension::Label", "Dimension label representation."], [615, 7, 2, "p-LabelCKind", "tensorstore::IndexDomainDimension::LabelCKind", "Specifies how the dimension label is stored."], [621, 1, 1, "", "tensorstore::IndexDomainDimension::label", "Returns the dimension label."], [621, 1, 1, "", "tensorstore::IndexDomainDimension::label", "Returns the dimension label."], [622, 1, 1, "", "tensorstore::IndexDomainDimension::operator=", "Assigns the label and bounds."], [623, 1, 1, "", "tensorstore::IndexDomainDimension::operator==", "Compares the bounds and labels."], [623, 1, 1, "", "tensorstore::IndexDomainDimension::operator==", "Compares the bounds and labels."], [623, 1, 1, "", "tensorstore::IndexDomainDimension::operator==", "Compares the bounds and labels."], [623, 1, 1, "", "tensorstore::IndexDomainDimension::operator==", "Compares the bounds and labels."], [624, 1, 1, "", "tensorstore::IndexDomainDimension::optionally_implicit_interval", "Returns the dimension bounds."], [624, 1, 1, "", "tensorstore::IndexDomainDimension::optionally_implicit_interval", "Returns the dimension bounds."], [625, 6, 1, "", "tensorstore::IndexDomainView", "Unowned view of an index domain."], [626, 1, 1, "", "tensorstore::IndexInnerProduct", "Returns the inner product of a and b, wrapping on overflow."], [626, 1, 1, "", "tensorstore::IndexInnerProduct", "Returns the inner product of a and b, wrapping on overflow."], [626, 1, 1, "", "tensorstore::IndexInnerProduct", "Returns the inner product of a and b, wrapping on overflow."], [626, 2, 2, "p-a", "tensorstore::IndexInnerProduct::a", "Array of length n, or the same length as b if specified as a span."], [626, 2, 2, "p-a", "tensorstore::IndexInnerProduct::a", "Array of length n, or the same length as b if specified as a span."], [626, 2, 2, "p-b", "tensorstore::IndexInnerProduct::b", "Array of length n, or the same length as a if specified as a span."], [626, 2, 2, "p-b", "tensorstore::IndexInnerProduct::b", "Array of length n, or the same length as a if specified as a span."], [626, 2, 2, "p-n", "tensorstore::IndexInnerProduct::n", "The length of a and b, if they are specified as pointers."], [627, 4, 1, "", "tensorstore::IndexInterval", "Represents an interval of index values, with support for +/-inf bounds."], [628, 1, 1, "", "tensorstore::IndexInterval::Closed", "Tries to construct an interval from inclusive lower and upper bounds."], [629, 1, 1, "", "tensorstore::IndexInterval::FiniteRange", "Returns the full range of all valid finite index values."], [630, 1, 1, "", "tensorstore::IndexInterval::HalfOpen", "Tries to construct an interval from an inclusive lower bound and exclusive upper bound."], [631, 1, 1, "", "tensorstore::IndexInterval::IndexInterval", "Constructs an interval corresponding to (-inf, +inf)."], [632, 1, 1, "", "tensorstore::IndexInterval::Infinite", "Returns an interval corresponding to (-inf, +inf)."], [633, 1, 1, "", "tensorstore::IndexInterval::Sized", "Tries to construct an interval from the specified inclusive lower bound and size."], [634, 1, 1, "", "tensorstore::IndexInterval::UncheckedClosed", "Constructs an interval from inclusive lower and upper bounds."], [635, 1, 1, "", "tensorstore::IndexInterval::UncheckedHalfOpen", "Constructs an interval from an inclusive lower bound and exclusive upper bound."], [636, 1, 1, "", "tensorstore::IndexInterval::UncheckedSized", "Constructs an interval from the specified inclusive lower bound and size."], [637, 1, 1, "", "tensorstore::IndexInterval::ValidClosed", "Returns true if inclusive_min and inclusive_max specify a valid closed interval."], [638, 1, 1, "", "tensorstore::IndexInterval::ValidHalfOpen", "Returns true if inclusive_min and exclusive_max specify a valid interval."], [639, 1, 1, "", "tensorstore::IndexInterval::ValidSized", "Returns true if inclusive_min and size specify a valid interval."], [640, 1, 1, "", "tensorstore::IndexInterval::empty", "Returns size() == 0."], [641, 1, 1, "", "tensorstore::IndexInterval::exclusive_max", "Returns the inclusive upper bound of the interval."], [642, 1, 1, "", "tensorstore::IndexInterval::exclusive_min", "Returns the exclusive lower bound."], [643, 1, 1, "", "tensorstore::IndexInterval::inclusive_max", "Returns the inclusive upper bound of the interval."], [644, 1, 1, "", "tensorstore::IndexInterval::inclusive_min", "Returns the inclusive lower bound of the interval."], [646, 1, 1, "", "tensorstore::IndexInterval::operator-", "Returns the negated interval."], [647, 1, 1, "", "tensorstore::IndexInterval::operator&lt;&lt;", "Writes a string representation of an interval to an ostream."], [645, 1, 1, "", "tensorstore::IndexInterval::operator==", "Compares two intervals for equality."], [648, 1, 1, "", "tensorstore::IndexInterval::size", "Returns the size of the interval."], [649, 4, 1, "", "tensorstore::IndexIntervalRef", "Represents a mutable reference to an index interval stored as an inclusive_min, size pair."], [650, 1, 1, "", "tensorstore::IndexIntervalRef::UncheckedSized", "Returns an IndexIntervalRef that refers to the specified inclusive_min and size values."], [651, 1, 1, "", "tensorstore::IndexIntervalRef::empty", "Returns size() == 0."], [652, 1, 1, "", "tensorstore::IndexIntervalRef::exclusive_max", "Returns the inclusive upper bound of the interval. :returns: inclusive_min() + size()."], [653, 1, 1, "", "tensorstore::IndexIntervalRef::exclusive_min", "Returns the exclusive lower bound."], [654, 1, 1, "", "tensorstore::IndexIntervalRef::inclusive_max", "Returns the inclusive upper bound of the interval."], [655, 1, 1, "", "tensorstore::IndexIntervalRef::inclusive_min", "Returns the inclusive lower bound."], [657, 1, 1, "", "tensorstore::IndexIntervalRef::operator IndexInterval", "Converts to an IndexInterval."], [659, 1, 1, "", "tensorstore::IndexIntervalRef::operator&lt;&lt;", "Prints a string representation."], [656, 1, 1, "", "tensorstore::IndexIntervalRef::operator=", "Assigns the referenced inclusive_min and size values."], [656, 1, 1, "", "tensorstore::IndexIntervalRef::operator=", "Assigns the referenced inclusive_min and size values."], [658, 1, 1, "", "tensorstore::IndexIntervalRef::operator==", "Compares two intervals for equality."], [660, 1, 1, "", "tensorstore::IndexIntervalRef::size", "Returns the size of the interval."], [661, 4, 1, "", "tensorstore::IndexTransform", "Transform from an input index space to an output index space."], [662, 1, 1, "", "tensorstore::IndexTransform::ApplyIndexTransform", "Restricts the domain of an index transform by a box of the same rank."], [662, 2, 2, "p-box", "tensorstore::IndexTransform::ApplyIndexTransform::box", "The box to apply."], [662, 2, 2, "p-transform", "tensorstore::IndexTransform::ApplyIndexTransform::transform", "The index transform to restrict."], [661, 7, 2, "p-CKind", "tensorstore::IndexTransform::CKind", "If equal to container (the default), this object owns a shared reference to the (immutable) transform."], [663, 1, 1, "", "tensorstore::IndexTransform::IndexTransform", "Construct from a compatible existing index transform."], [663, 1, 1, "", "tensorstore::IndexTransform::IndexTransform", "Construct from a compatible existing index transform."], [664, 1, 1, "", "tensorstore::IndexTransform::IndexTransform", "Constructs a null index transform."], [665, 1, 1, "", "tensorstore::IndexTransform::IndexTransform", "Unchecked conversion from a potentially compatible existing index transform."], [665, 1, 1, "", "tensorstore::IndexTransform::IndexTransform", "Unchecked conversion from a potentially compatible existing index transform."], [661, 7, 2, "p-InputRank", "tensorstore::IndexTransform::InputRank", "Compile-time rank of input space, or dynamic_rank (the default) to indicate a run-time rank."], [661, 7, 2, "p-OutputRank", "tensorstore::IndexTransform::OutputRank", "Compile-time rank of output space, or dynamic_rank (the default) to indicate a run-time rank."], [666, 1, 1, "", "tensorstore::IndexTransform::TransformIndices", "Computes the output_indices corresponding to the given input_indices."], [667, 1, 1, "", "tensorstore::IndexTransform::Transpose", "Returns a new transform with the input dimension order reversed."], [667, 1, 1, "", "tensorstore::IndexTransform::Transpose", "Returns a new transform with the input dimension order reversed."], [668, 1, 1, "", "tensorstore::IndexTransform::Transpose", "Returns a new transform with the input dimension order permuted."], [668, 1, 1, "", "tensorstore::IndexTransform::Transpose", "Returns a new transform with the input dimension order permuted."], [668, 2, 2, "p-permutation", "tensorstore::IndexTransform::Transpose::permutation", "Permutation of 0, ..., input_rank()-1, where permutation[i] specifies the dimension of the existing transform that corresponds to input dimension i of the new transform."], [669, 1, 1, "", "tensorstore::IndexTransform::TransposeOutput", "Returns a new transform with the output dimension order reversed."], [669, 1, 1, "", "tensorstore::IndexTransform::TransposeOutput", "Returns a new transform with the output dimension order reversed."], [670, 1, 1, "", "tensorstore::IndexTransform::TransposeOutput", "Returns a new transform with the output dimension order permuted."], [670, 1, 1, "", "tensorstore::IndexTransform::TransposeOutput", "Returns a new transform with the output dimension order permuted."], [670, 2, 2, "p-permutation", "tensorstore::IndexTransform::TransposeOutput::permutation", "Permutation of 0, ..., output_rank()-1, where permutation[i] specifies the dimension of the existing transform that corresponds to output dimension i of the new transform."], [671, 5, 1, "", "tensorstore::IndexTransform::container_kind", "Specifies whether this owns an index transform (container), or merely holds an unowned reference to one (view)."], [674, 1, 1, "", "tensorstore::IndexTransform::domain", "Returns the input domain."], [674, 1, 1, "", "tensorstore::IndexTransform::domain", "Returns the input domain."], [672, 1, 1, "", "tensorstore::IndexTransform::implicit_lower_bounds", "Returns a bit-vector indicating for each input dimension whether the lower bound is implicit rather than explicit."], [673, 1, 1, "", "tensorstore::IndexTransform::implicit_upper_bounds", "Returns a bit-vector indicating for each input dimension whether the upper bound is implicit."], [674, 1, 1, "", "tensorstore::IndexTransform::input_domain", "Returns the input domain."], [675, 1, 1, "", "tensorstore::IndexTransform::input_labels", "Returns the array of labels for the input dimensions."], [676, 1, 1, "", "tensorstore::IndexTransform::input_origin", "Returns the array of inclusive lower bounds for the input dimensions."], [677, 1, 1, "", "tensorstore::IndexTransform::input_rank", "Returns the input rank."], [678, 1, 1, "", "tensorstore::IndexTransform::input_shape", "Returns the array of extents for the input dimensions."], [683, 1, 1, "", "tensorstore::IndexTransform::operator bool", "Returns true if this is not a null transform."], [684, 1, 1, "", "tensorstore::IndexTransform::operator!=", "Checks if two index transforms have identical representations."], [681, 1, 1, "", "tensorstore::IndexTransform::operator()", "Returns ComposeTransforms(other, *this)."], [682, 1, 1, "", "tensorstore::IndexTransform::operator()", "Enables IndexTransform to be be applied to TransformedArray, TensorStore, and other types that support ApplyIndexTransform."], [685, 1, 1, "", "tensorstore::IndexTransform::operator&lt;&lt;", "Prints a string representation of an index space transform."], [679, 1, 1, "", "tensorstore::IndexTransform::operator=", "Assign from a compatible existing index transform."], [679, 1, 1, "", "tensorstore::IndexTransform::operator=", "Assign from a compatible existing index transform."], [684, 1, 1, "", "tensorstore::IndexTransform::operator==", "Checks if two index transforms have identical representations."], [680, 1, 1, "", "tensorstore::IndexTransform::operator|", "\"Pipeline\" operator."], [686, 1, 1, "", "tensorstore::IndexTransform::output_index_map", "Returns the output index map for a given output_dim."], [687, 1, 1, "", "tensorstore::IndexTransform::output_index_maps", "Returns a range representing the output index maps."], [688, 1, 1, "", "tensorstore::IndexTransform::output_rank", "Returns the output rank."], [690, 5, 1, "", "tensorstore::IndexTransform::static_input_rank", "Static input rank, or dynamic_rank if the input rank is determined at run time."], [689, 5, 1, "", "tensorstore::IndexTransform::static_output_rank", "Static output rank, or dynamic_rank if the input rank is determined at run time."], [690, 5, 1, "", "tensorstore::IndexTransform::static_rank", "Static input rank, or dynamic_rank if the input rank is determined at run time."], [683, 1, 1, "", "tensorstore::IndexTransform::valid", "Returns true if this is not a null transform."], [691, 6, 1, "", "tensorstore::IndexTransformView", "Unowned view of an index transform."], [692, 1, 1, "", "tensorstore::InitializeArray", "Assigns all elements of an array to the result of value initialization."], [693, 1, 1, "", "tensorstore::InitializeContiguousLayout", "Initializes *layout to a contiguous layout over the specified domain."], [694, 1, 1, "", "tensorstore::InitializeContiguousLayout", "Assigns layout->byte_strides() to correspond to a contiguous layout that matches the existing value of layout->shape()."], [695, 1, 1, "", "tensorstore::InitializeContiguousLayout", "Initializes *layout to a contiguous layout with the specified shape."], [693, 2, 2, "p-domain", "tensorstore::InitializeContiguousLayout::domain", "The domain to assign to *layout."], [693, 2, 2, "p-element_stride", "tensorstore::InitializeContiguousLayout::element_stride", "The byte stride for the innermost dimension."], [694, 2, 2, "p-element_stride", "tensorstore::InitializeContiguousLayout::element_stride", "The byte stride for the innermost dimension."], [695, 2, 2, "p-element_stride", "tensorstore::InitializeContiguousLayout::element_stride", "The byte stride for the last dimension if order == c_order, or for the first dimension if order == fortran_order."], [693, 2, 2, "p-layout", "tensorstore::InitializeContiguousLayout::layout", "Layout to update."], [694, 2, 2, "p-layout", "tensorstore::InitializeContiguousLayout::layout", "The layout to update."], [695, 2, 2, "p-layout", "tensorstore::InitializeContiguousLayout::layout", "Layout to update."], [693, 2, 2, "p-order", "tensorstore::InitializeContiguousLayout::order", "The layout order to use."], [694, 2, 2, "p-order", "tensorstore::InitializeContiguousLayout::order", "The layout order to use."], [695, 2, 2, "p-order", "tensorstore::InitializeContiguousLayout::order", "The layout order to use."], [695, 2, 2, "p-shape", "tensorstore::InitializeContiguousLayout::shape", "The shape to assign to *layout."], [696, 4, 1, "", "tensorstore::InlineExecutor", "Executor that simply executes functions immediately in the current thread."], [697, 6, 1, "", "tensorstore::InlineRank", "Specifies a fixed compile-time rank, or a run-time rank with an optional inline storage limit."], [698, 1, 1, "", "tensorstore::InlineRankLimit", "Returns the inline rank limit of a rank spec."], [699, 4, 1, "", "tensorstore::Int4Padded", "Int4 type padded to int8."], [700, 1, 1, "", "tensorstore::Int4Padded::Int4Padded", "Possibly lossy conversion from any type convertible to int8_t."], [701, 1, 1, "", "tensorstore::Int4Padded::Int4Padded", "Zero initialization."], [710, 1, 1, "", "tensorstore::Int4Padded::operator int8_t", "Lossless conversion to int8_t."], [716, 1, 1, "", "tensorstore::Int4Padded::operator%", "Modulo operator."], [717, 1, 1, "", "tensorstore::Int4Padded::operator%=", "Modulo assignment operator."], [704, 1, 1, "", "tensorstore::Int4Padded::operator&amp;", "Bitwise and operator."], [705, 1, 1, "", "tensorstore::Int4Padded::operator&amp;=", "Bitwise and assignment operator."], [718, 1, 1, "", "tensorstore::Int4Padded::operator*", "Multiplication operator."], [719, 1, 1, "", "tensorstore::Int4Padded::operator*=", "Multiplication assignment operator."], [721, 1, 1, "", "tensorstore::Int4Padded::operator+", "Addition operator."], [731, 1, 1, "", "tensorstore::Int4Padded::operator+", "Unary plus."], [724, 1, 1, "", "tensorstore::Int4Padded::operator++", "Post-increment."], [726, 1, 1, "", "tensorstore::Int4Padded::operator++", "Pre-increment."], [722, 1, 1, "", "tensorstore::Int4Padded::operator+=", "Addition assignment operator."], [714, 1, 1, "", "tensorstore::Int4Padded::operator-", "Subtraction operator."], [720, 1, 1, "", "tensorstore::Int4Padded::operator-", "Unary negation."], [723, 1, 1, "", "tensorstore::Int4Padded::operator--", "Post-decrement."], [725, 1, 1, "", "tensorstore::Int4Padded::operator--", "Pre-decrement."], [715, 1, 1, "", "tensorstore::Int4Padded::operator-=", "Subtraction assignment operator."], [712, 1, 1, "", "tensorstore::Int4Padded::operator/", "Division operator."], [713, 1, 1, "", "tensorstore::Int4Padded::operator/=", "Division assignment operator."], [727, 1, 1, "", "tensorstore::Int4Padded::operator&lt;&lt;", "Bitwise left shift operator."], [728, 1, 1, "", "tensorstore::Int4Padded::operator&lt;&lt;=", "Bitwise left shift assignment operator."], [702, 1, 1, "", "tensorstore::Int4Padded::operator=", "Bool assignment."], [703, 1, 1, "", "tensorstore::Int4Padded::operator=", "Possibly lossy conversion from any integer type."], [729, 1, 1, "", "tensorstore::Int4Padded::operator&gt;&gt;", "Bitwise right shift operator."], [730, 1, 1, "", "tensorstore::Int4Padded::operator&gt;&gt;=", "Bitwise right shift assignment operator."], [708, 1, 1, "", "tensorstore::Int4Padded::operator^", "Bitwise xor operator."], [709, 1, 1, "", "tensorstore::Int4Padded::operator^=", "Bitwise xor assignment operator."], [706, 1, 1, "", "tensorstore::Int4Padded::operator|", "Bitwise or operator."], [707, 1, 1, "", "tensorstore::Int4Padded::operator|=", "Bitwise or assignment operator."], [711, 1, 1, "", "tensorstore::Int4Padded::operator~", "Unary inverse."], [732, 1, 1, "", "tensorstore::Intersect", "Returns the intersection of two intervals."], [733, 1, 1, "", "tensorstore::Intersect", "Returns the intersection of a and b."], [734, 1, 1, "", "tensorstore::Intersect", "Intersects two index intervals."], [734, 2, 2, "p-a", "tensorstore::Intersect::a", "OptionallyImplicitIndexInterval to intersect."], [734, 2, 2, "p-b", "tensorstore::Intersect::b", "Other OptionallyImplicitIndexInterval to intersect."], [735, 1, 1, "", "tensorstore::IntersectIndexDomains", "Intersects two index domains."], [736, 1, 1, "", "tensorstore::IntersectPreferringExplicit", "Intersects two index intervals, preferring explicit bounds when implicit flags mismatch."], [736, 2, 2, "p-a", "tensorstore::IntersectPreferringExplicit::a", "OptionallyImplicitIndexInterval to intersect."], [736, 2, 2, "p-b", "tensorstore::IntersectPreferringExplicit::b", "Other OptionallyImplicitIndexInterval to intersect."], [737, 1, 1, "", "tensorstore::Intersects", "Returns !Intersect(a, b).empty()."], [738, 1, 1, "", "tensorstore::IntersectsPrefix", "Returns Intersects(a, KeyRange::Prefix(prefix))."], [739, 8, 1, "", "tensorstore::IntervalForm", "Indicates how the interval bounds are specified to slicing operations."], [739, 9, 1, "e-closed", "tensorstore::IntervalForm::closed", "Interval is specified by inclusive lower and upper bounds."], [739, 9, 1, "e-half_open", "tensorstore::IntervalForm::half_open", "Interval is specified by an inclusive lower bound and an exclusive upper bound."], [739, 9, 1, "e-sized", "tensorstore::IntervalForm::sized", "Interval is specified by an inclusive lower bound and a size."], [740, 1, 1, "", "tensorstore::InverseTransform", "Returns the inverse transform if one exists."], [740, 2, 2, "p-transform", "tensorstore::InverseTransform::transform", "The transform to invert."], [741, 1, 1, "", "tensorstore::InvertPermutation", "Sets inverse_perm to the inverse permutation of perm."], [741, 2, 2, "p-inverse_perm", "tensorstore::InvertPermutation::inverse_perm", "Pointer to array of length rank."], [741, 2, 2, "p-perm", "tensorstore::InvertPermutation::perm", "Pointer to array of length rank."], [742, 5, 1, "", "tensorstore::IsArray", "Bool-valued metafunction that is true if T is an instance of Array."], [743, 5, 1, "", "tensorstore::IsArrayBasePointerConvertible", "bool-valued metafunction that evaluates to true if SourcePointer may be converted to TargetPointer when used as an array base pointer."], [744, 5, 1, "", "tensorstore::IsArrayExplicitlyConvertible", "Bool-valued metafunction that determines whether a (SourceElement, SourceRank, SourceOriginKind) tuple is potentially convertible to a (DestElement, DestRank, DestOriginKind) tuple, based on IsElementTypeExplicitlyConvertible, RankConstraint::EqualOrUnspecified and IsArrayOriginKindConvertible."], [745, 1, 1, "", "tensorstore::IsArrayOriginKindConvertible", "Returns true iff an array with origin kind source can be converted to an array with origin kind target."], [746, 5, 1, "", "tensorstore::IsBoxLike", "Metafunction that evaluates to true if, and only if, T is an optionally cvref-qualified Box or BoxView instance."], [747, 5, 1, "", "tensorstore::IsBoxLikeExplicitlyConvertibleToRank", "Metafunction that evaluates to true if, and only if, T is a Box-like type with Box::static_rank explicitly convertible to Rank."], [748, 5, 1, "", "tensorstore::IsBoxLikeImplicitlyConvertibleToRank", "Metafunction that evaluates to true if, and only if, T is a Box-like type with Box::static_rank implicitly convertible to Rank."], [749, 1, 1, "", "tensorstore::IsBroadcastScalar", "Checks if array has at most a single distinct element."], [750, 1, 1, "", "tensorstore::IsBroadcastScalar", "Checks if layout contains at most a single distinct element."], [751, 5, 1, "", "tensorstore::IsCompatibleFullIndexPack", "Bool-valued metafunction that evaluates to true if every IndexType is convertible without narrowing to Index, and sizeof...(IndexType) is compatible with Rank."], [752, 5, 1, "", "tensorstore::IsCompatibleFullIndexVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::value_type convertible without narrowing to Index and a static span::extent compatible with Rank."], [753, 5, 1, "", "tensorstore::IsCompatibleOptionSequence", "Checks if every Option is compatible with the specified Options type."], [754, 5, 1, "", "tensorstore::IsCompatiblePartialIndexVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::value_type convertible without narrowing to Index and a static span::extent <= Rank."], [755, 1, 1, "", "tensorstore::IsContiguousLayout", "Checks if array has a contiguous layout with the specified order."], [756, 1, 1, "", "tensorstore::IsContiguousLayout", "Checks if layout is a contiguous layout with the specified order and element size."], [757, 5, 1, "", "tensorstore::IsContiguousLayoutOrder", "Bool-valued metafunction that is true if T is ContiguousLayoutOrder or ContiguousLayoutPermutation compatible with Rank."], [757, 7, 2, "p-Rank", "tensorstore::IsContiguousLayoutOrder::Rank", "Rank with which the order must be compatible, or dynamic_rank for no constraint."], [758, 5, 1, "", "tensorstore::IsDataTypeConversionSupported", "bool-valued metafunction that specifies whether a conversion is allowed from a compile-time data type of From to a compile-time data type of To."], [758, 7, 2, "p-AdditionalFlags", "tensorstore::IsDataTypeConversionSupported::AdditionalFlags", "Additional flags required, e.g."], [758, 3, 2, "p-From", "tensorstore::IsDataTypeConversionSupported::From", "Unqualified element type, or void if unknown."], [758, 3, 2, "p-To", "tensorstore::IsDataTypeConversionSupported::To", "Unqualified element type, or void if unknown."], [759, 5, 1, "", "tensorstore::IsElementPointer", "bool-valued metafunction that evaluates to true if T is an instance of ElementPointer."], [760, 5, 1, "", "tensorstore::IsElementPointerCastConvertible", "Determine if Source and Target are instances of ElementPointer and Source is (explicitly) convertible to Target."], [761, 5, 1, "", "tensorstore::IsElementTag", "An ElementTag type is a type T or Shared<T> where T satisfies IsElementType<T>.  It specifies a pointer type of T* or std::shared_ptr<T>, respectively."], [762, 5, 1, "", "tensorstore::IsElementType", "An ElementType is any optionally const-qualified fundamental type (including void), pointer type, member pointer type, class/union type, or enumeration type.  A type of void or const void indicates a type-erased element type."], [763, 5, 1, "", "tensorstore::IsElementTypeExplicitlyConvertible", "Metafunction that evaluates to whether an array of Source-type elements is implicitly or explicitly convertible to an array of Dest-type elements."], [764, 5, 1, "", "tensorstore::IsElementTypeImplicitlyConvertible", "Metafunction that evaluates to true if an array of Source-type elements is implicitly convertible to an array of Dest-type elements."], [765, 5, 1, "", "tensorstore::IsElementTypeOnlyExplicitlyConvertible", "Metafunction that evaluates true if an array of Source-type elements is explicitly BUT NOT implicitly convertible to an array of Dest-type elements."], [766, 1, 1, "", "tensorstore::IsFinite", "Returns true if all dimensions of domain have finite bounds."], [767, 1, 1, "", "tensorstore::IsFinite", "Returns true if all dimensions of box have finite bounds."], [768, 1, 1, "", "tensorstore::IsFinite", "Returns true if interval is bounded below and above."], [767, 2, 2, "p-box", "tensorstore::IsFinite::box", "A Box-like type or a type with a Box domain."], [769, 1, 1, "", "tensorstore::IsFiniteIndex", "Returns true if index is within the finite range: [kMinFiniteIndex, kMaxFiniteIndex]."], [770, 5, 1, "", "tensorstore::IsFuture", "Evaluates to true if T is an instance of Future."], [771, 5, 1, "", "tensorstore::IsFutureConvertible", "Bool-valued metafunction equal to true if, and only if, Future<SourceT> is convertible to Future<DestT>."], [772, 5, 1, "", "tensorstore::IsImplicitlyCompatibleFullIndexVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::value_type convertible without narrowing to Index and a static span::extent implicitly compatible with Rank."], [773, 5, 1, "", "tensorstore::IsIndexArray", "Bool-valued metafunction that evaluates to true if T is an array type convertible to SharedArrayView<const Index>."], [774, 5, 1, "", "tensorstore::IsIndexConvertibleVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::value_type convertible without narrowing to Index."], [775, 5, 1, "", "tensorstore::IsIndexDomain", "Bool-valued metafunction that evaluates to true if T is an instance of IndexDomain."], [776, 5, 1, "", "tensorstore::IsIndexTransform", "Bool-valued metafunction that evaluates to true if T is an instance of IndexTransform."], [777, 5, 1, "", "tensorstore::IsIndexVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::value_type of Index."], [778, 4, 1, "", "tensorstore::IsIndexVectorOrScalar", "A type T satisfies the IsIndexVectorOrScalar concept if it is either:"], [779, 5, 1, "", "tensorstore::IsIndexVectorOrScalar::extent", "Compile-time length of the vector, or dynamic_rank if T represents a scalar or the length is specified at run time."], [780, 6, 1, "", "tensorstore::IsIndexVectorOrScalar::normalized_type", "Normalized scalar/vector type, equal to Index or span<Index, extent>."], [781, 5, 1, "", "tensorstore::IsIndexVectorOrScalar::value", "Indicates whether T satisfies the concept."], [782, 1, 1, "", "tensorstore::IsModeExplicitlyConvertible", "Checks if source is potentially compatible with target."], [783, 5, 1, "", "tensorstore::IsMutableBoxLike", "Metafunction that evaluates to true if, and only if, T is an optionally ref-qualified non-const Box or MutableBoxView instance."], [784, 5, 1, "", "tensorstore::IsMutableIndexVector", "Bool-valued metafunction that evaluates to true if Indices is span-compatible with a span::element_type of Index."], [785, 5, 1, "", "tensorstore::IsNonVoidArrayBasePointer", "bool-valued metafunction that evaluates to true if T is Element* or std::shared_ptr<Element>, where Element is non-void."], [786, 1, 1, "", "tensorstore::IsPossiblySameDataType", "Checks if both data types are equal or at least one is unspecified."], [786, 1, 1, "", "tensorstore::IsPossiblySameDataType", "Checks if both data types are equal or at least one is unspecified."], [787, 5, 1, "", "tensorstore::IsResult", "IsResult evaluates to true if T is an instance of Result."], [788, 5, 1, "", "tensorstore::IsShared", "bool-valued metafunction that evaluates to true if T is an instance of Shared."], [789, 5, 1, "", "tensorstore::IsSharedArrayLike", "Bool-valued metafunction that evaluates to true if IsTransformedArrayLike<ArrayLike> and the associated element tag of the array satisfies IsShared."], [790, 5, 1, "", "tensorstore::IsStaticCastConstructible", "bool-valued metafunction that evaluates to true if a value of type SourceRef&& can be converted to a type of Target using StaticCast."], [791, 5, 1, "", "tensorstore::IsStridedLayout", "Metafunction that checks whether a given type is convertible to StridedLayoutView."], [792, 5, 1, "", "tensorstore::IsTransformedArray", "Bool-valued metafunction that evaluates to true if T is an instance of TransformedArray."], [793, 5, 1, "", "tensorstore::IsTransformedArrayLike", "Bool-valued metafunction that evaluates to true if T satisfies IsArray or IsTransformedArray."], [794, 1, 1, "", "tensorstore::IsValidIndex", "Return true if index is within the valid range: [-kInfIndex, +kInfIndex]."], [795, 1, 1, "", "tensorstore::IsValidInlineRank", "Checks if inline_rank is a valid compile-time rank constraint."], [796, 1, 1, "", "tensorstore::IsValidPermutation", "Returns true if permutation is a valid permutation of {0, 1, ..., permutation.size()-1}."], [797, 1, 1, "", "tensorstore::IsValidRank", "Checks if rank is a valid rank value."], [798, 1, 1, "", "tensorstore::IterateOverArrays", "Iterates over one array or jointly iterates over multiple arrays."], [798, 2, 2, "p-array", "tensorstore::IterateOverArrays::array", "The arrays over which to iterate, which must all have the same shape."], [798, 2, 2, "p-constraints", "tensorstore::IterateOverArrays::constraints", "Specifies constraints on the iteration order, and whether repeated elements may be skipped."], [798, 2, 2, "p-func", "tensorstore::IterateOverArrays::func", "The element-wise function."], [799, 1, 1, "", "tensorstore::IterateOverTransformedArrays", "Jointly iterates over one or more transformed arrays with compatible domains."], [799, 2, 2, "p-arrays", "tensorstore::IterateOverTransformedArrays::arrays", "The transformed arrays over which to iterate, which must all have compatible input domains."], [799, 2, 2, "p-constraints", "tensorstore::IterateOverTransformedArrays::constraints", "Specifies constraints on the iteration order, and whether repeated elements may be skipped."], [799, 2, 2, "p-func", "tensorstore::IterateOverTransformedArrays::func", "The element-wise function."], [800, 4, 1, "", "tensorstore::IterationConstraints", "Specifies constraints on how multi-dimensional iteration can be performed."], [801, 4, 1, "", "tensorstore::JsonSerializationOptions", "Defines options for conversion to/from JSON."], [802, 5, 1, "", "tensorstore::JsonSerializationOptions::IsOption", "Indicates if a given type is a supported option."], [803, 1, 1, "", "tensorstore::JsonSerializationOptions::JsonSerializationOptions", "Combines any number of supported options."], [804, 1, 1, "", "tensorstore::JsonSerializationOptions::Set", "Overrides all options."], [805, 1, 1, "", "tensorstore::JsonSerializationOptions::Set", "Sets the data type constraint."], [805, 1, 1, "", "tensorstore::JsonSerializationOptions::Set", "Sets the data type constraint."], [806, 1, 1, "", "tensorstore::JsonSerializationOptions::Set", "Sets the IncludeDefaults option."], [807, 1, 1, "", "tensorstore::JsonSerializationOptions::Set", "Sets the rank constraint."], [808, 1, 1, "", "tensorstore::JsonSerializationOptions::dtype", "Returns the data type constraint."], [808, 1, 1, "", "tensorstore::JsonSerializationOptions::operator DataType", "Returns the data type constraint."], [809, 1, 1, "", "tensorstore::JsonSerializationOptions::operator IncludeDefaults", "Returns the IncludeDefaults constraint."], [810, 1, 1, "", "tensorstore::JsonSerializationOptions::operator RankConstraint", "Returns the rank constraint."], [810, 1, 1, "", "tensorstore::JsonSerializationOptions::rank", "Returns the rank constraint."], [811, 4, 1, "", "tensorstore::KeyRange", "Specifies a range of keys according to their unsigned lexicographical order."], [812, 1, 1, "", "tensorstore::KeyRange::AddPrefix", "Adds a prefix to both inclusive_min and exclusive_max."], [813, 1, 1, "", "tensorstore::KeyRange::CompareExclusiveMax", "Returns the three-way comparison result between two exclusive_max values."], [814, 1, 1, "", "tensorstore::KeyRange::CompareExclusiveMaxAndKey", "Returns the three-way comparison result between a key and an exclusive max bound."], [814, 1, 1, "", "tensorstore::KeyRange::CompareKeyAndExclusiveMax", "Returns the three-way comparison result between a key and an exclusive max bound."], [815, 1, 1, "", "tensorstore::KeyRange::EmptyRange", "Returns a range that contains no keys."], [816, 1, 1, "", "tensorstore::KeyRange::KeyRange", "Constructs the range containing all keys."], [817, 1, 1, "", "tensorstore::KeyRange::KeyRange", "Constructs the specified range."], [818, 1, 1, "", "tensorstore::KeyRange::Prefix", "Returns the range that contains all keys that start with prefix."], [819, 1, 1, "", "tensorstore::KeyRange::PrefixExclusiveMax", "Returns the exclusive_max value representing the upper bound for keys that start with prefix."], [820, 1, 1, "", "tensorstore::KeyRange::RemovePrefix", "Returns the range corresponding to the set of keys k for which prefix + k is a member of range."], [821, 1, 1, "", "tensorstore::KeyRange::RemovePrefixLength", "Removes n characters from the prefix of range."], [822, 1, 1, "", "tensorstore::KeyRange::Singleton", "Returns a range containing the single specified key."], [823, 1, 1, "", "tensorstore::KeyRange::Successor", "Returns the key that occurs immediately after key."], [824, 1, 1, "", "tensorstore::KeyRange::empty", "Returns true if the range contains no keys."], [825, 5, 1, "", "tensorstore::KeyRange::exclusive_max", "Exclusive upper bound of the range, or an empty string to indicate no upper bound."], [826, 1, 1, "", "tensorstore::KeyRange::full", "Returns true if the range contains all keys."], [827, 5, 1, "", "tensorstore::KeyRange::inclusive_min", "Inclusive lower bound of the range."], [828, 1, 1, "", "tensorstore::KeyRange::is_non_empty_prefix", "Returns true if the key range is a non-empty prefix."], [829, 1, 1, "", "tensorstore::KeyRange::is_singleton", "Returns true if the key range is a singleton."], [830, 1, 1, "", "tensorstore::KeyRange::operator!=", "Compares two ranges for equality."], [831, 1, 1, "", "tensorstore::KeyRange::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [830, 1, 1, "", "tensorstore::KeyRange::operator==", "Compares two ranges for equality."], [832, 6, 1, "", "tensorstore::KvStore", "Convenience alias of kvstore::KvStore."], [833, 4, 1, "", "tensorstore::LayoutOrderConstraint", "Specifies an order constraint on a strided layout/iteration order, equivalent to an algebraic sum of ContiguousLayoutOrder and unspecified_order."], [834, 1, 1, "", "tensorstore::LayoutOrderConstraint::operator bool", "Returns true if the order is constrained."], [835, 1, 1, "", "tensorstore::LayoutOrderConstraint::order", "Returns the order."], [835, 1, 1, "", "tensorstore::LayoutOrderConstraint::value", "Returns the order."], [836, 1, 1, "", "tensorstore::Link", "Creates a \"link\", which ties a promise to one or more future objects and a callback."], [836, 2, 2, "p-callback", "tensorstore::Link::callback", "The function to be called when the future objects are ready."], [836, 2, 2, "p-future", "tensorstore::Link::future", "The futures to be linked."], [836, 2, 2, "p-promise", "tensorstore::Link::promise", "The promise to be linked."], [837, 1, 1, "", "tensorstore::LinkError", "Creates a \"link\", which ties a promise to one or more future objects."], [837, 2, 2, "p-future", "tensorstore::LinkError::future", "The futures to be linked."], [837, 2, 2, "p-promise", "tensorstore::LinkError::promise", "The promise to be linked."], [838, 1, 1, "", "tensorstore::LinkResult", "Creates a Link that moves a single Future's result to a Promise."], [838, 2, 2, "p-future", "tensorstore::LinkResult::future", "The future to be linked."], [838, 2, 2, "p-promise", "tensorstore::LinkResult::promise", "The promise to be linked."], [839, 1, 1, "", "tensorstore::LinkValue", "Creates a \"link\", which ties a promise to one or more future objects and a callback."], [839, 2, 2, "p-callback", "tensorstore::LinkValue::callback", "The function to be invoked."], [839, 2, 2, "p-future", "tensorstore::LinkValue::future", "The futures to be linked."], [839, 2, 2, "p-promise", "tensorstore::LinkValue::promise", "The promise to be linked."], [840, 1, 1, "", "tensorstore::LongestPrefix", "Returns the longest string prefix that satisfies Contains(range, KeyRange::Prefix(prefix))."], [841, 1, 1, "", "tensorstore::MakeArray", "Returns a SharedArray containing a copy of the specified C array."], [841, 1, 1, "", "tensorstore::MakeArray", "Returns a SharedArray containing a copy of the specified C array."], [841, 1, 1, "", "tensorstore::MakeArray", "Returns a SharedArray containing a copy of the specified C array."], [841, 1, 1, "", "tensorstore::MakeArray", "Returns a SharedArray containing a copy of the specified C array."], [841, 2, 2, "p-array", "tensorstore::MakeArray::array", "The C array to be copied."], [841, 2, 2, "p-array", "tensorstore::MakeArray::array", "The C array to be copied."], [841, 2, 2, "p-array", "tensorstore::MakeArray::array", "The C array to be copied."], [841, 2, 2, "p-array", "tensorstore::MakeArray::array", "The C array to be copied."], [842, 1, 1, "", "tensorstore::MakeArrayView", "Returns an ArrayView that points to the specified C array."], [842, 1, 1, "", "tensorstore::MakeArrayView", "Returns an ArrayView that points to the specified C array."], [842, 1, 1, "", "tensorstore::MakeArrayView", "Returns an ArrayView that points to the specified C array."], [842, 1, 1, "", "tensorstore::MakeArrayView", "Returns an ArrayView that points to the specified C array."], [843, 1, 1, "", "tensorstore::MakeArrayView", "Returns a rank-1 array that references (but does not copy) the specified span-compatible array/container."], [842, 2, 2, "p-array", "tensorstore::MakeArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [842, 2, 2, "p-array", "tensorstore::MakeArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [842, 2, 2, "p-array", "tensorstore::MakeArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [842, 2, 2, "p-array", "tensorstore::MakeArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [843, 2, 2, "p-source", "tensorstore::MakeArrayView::source", "The source to be converted to a span."], [844, 1, 1, "", "tensorstore::MakeCopy", "Equivalent to TransformArray, but always returns a newly allocated array with a non-const element type."], [845, 1, 1, "", "tensorstore::MakeCopy", "Returns a copy of the contents of an array, with the data type converted."], [845, 1, 1, "", "tensorstore::MakeCopy", "Returns a copy of the contents of an array, with the data type converted."], [846, 1, 1, "", "tensorstore::MakeCopy", "Returns a copy of the contents of an array."], [847, 1, 1, "", "tensorstore::MakeCopy", "Returns a copy of a transformed array as a strided array."], [847, 7, 2, "p-OriginKind", "tensorstore::MakeCopy::OriginKind", "Origin kind of the returned array."], [845, 3, 2, "p-TargetElement", "tensorstore::MakeCopy::TargetElement", "Optional."], [845, 2, 2, "p-constraints", "tensorstore::MakeCopy::constraints", "Constrains the layout of the newly allocated array."], [845, 2, 2, "p-constraints", "tensorstore::MakeCopy::constraints", "Constrains the layout of the newly allocated array."], [846, 2, 2, "p-constraints", "tensorstore::MakeCopy::constraints", "If constraints.has_order_constraint(), the array will be allocated in constraints.order_constraint() order."], [847, 2, 2, "p-constraints", "tensorstore::MakeCopy::constraints", "The constraints on the layout of the returned array."], [845, 2, 2, "p-source", "tensorstore::MakeCopy::source", "The source array to copy."], [845, 2, 2, "p-target_dtype", "tensorstore::MakeCopy::target_dtype", "Specifies the target data type at run time."], [845, 2, 2, "p-target_dtype", "tensorstore::MakeCopy::target_dtype", "Specifies the target data type at run time."], [847, 2, 2, "p-transformed_array", "tensorstore::MakeCopy::transformed_array", "The transformed array to copy."], [848, 1, 1, "", "tensorstore::MakeOffsetArray", "Returns a SharedArray containing a copy of the specified C array."], [848, 1, 1, "", "tensorstore::MakeOffsetArray", "Returns a SharedArray containing a copy of the specified C array."], [848, 1, 1, "", "tensorstore::MakeOffsetArray", "Returns a SharedArray containing a copy of the specified C array."], [848, 1, 1, "", "tensorstore::MakeOffsetArray", "Returns a SharedArray containing a copy of the specified C array."], [848, 2, 2, "p-array", "tensorstore::MakeOffsetArray::array", "The C array to be copied."], [848, 2, 2, "p-array", "tensorstore::MakeOffsetArray::array", "The C array to be copied."], [848, 2, 2, "p-array", "tensorstore::MakeOffsetArray::array", "The C array to be copied."], [848, 2, 2, "p-array", "tensorstore::MakeOffsetArray::array", "The C array to be copied."], [848, 2, 2, "p-origin", "tensorstore::MakeOffsetArray::origin", "The origin vector of the array."], [848, 2, 2, "p-origin", "tensorstore::MakeOffsetArray::origin", "The origin vector of the array."], [849, 1, 1, "", "tensorstore::MakeOffsetArrayView", "Returns an ArrayView that points to the specified C array."], [849, 1, 1, "", "tensorstore::MakeOffsetArrayView", "Returns an ArrayView that points to the specified C array."], [849, 1, 1, "", "tensorstore::MakeOffsetArrayView", "Returns an ArrayView that points to the specified C array."], [849, 1, 1, "", "tensorstore::MakeOffsetArrayView", "Returns an ArrayView that points to the specified C array."], [849, 2, 2, "p-array", "tensorstore::MakeOffsetArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [849, 2, 2, "p-array", "tensorstore::MakeOffsetArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [849, 2, 2, "p-array", "tensorstore::MakeOffsetArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [849, 2, 2, "p-array", "tensorstore::MakeOffsetArrayView::array", "The C array to which the returned ArrayView will point. May be specified as a (nested) braced list, e.g. MakeArrayView({{1, 2, 3}, {4, 5, 6}}), in which case the inferred Element type will be const-qualified."], [849, 2, 2, "p-origin", "tensorstore::MakeOffsetArrayView::origin", "The origin vector of the array."], [849, 2, 2, "p-origin", "tensorstore::MakeOffsetArrayView::origin", "The origin vector of the array."], [850, 1, 1, "", "tensorstore::MakeReadyFuture", "Creates a Future in a ready state."], [850, 1, 1, "", "tensorstore::MakeReadyFuture", "Creates a Future in a ready state."], [850, 3, 2, "p-T", "tensorstore::MakeReadyFuture::T", "The value type."], [851, 1, 1, "", "tensorstore::MakeResult", "Returns a Result corresponding to a success or error status."], [851, 1, 1, "", "tensorstore::MakeResult", "Returns a Result corresponding to a success or error status."], [852, 1, 1, "", "tensorstore::MakeResult", "Returns a Result<T> with a (possibly-default) value."], [852, 1, 1, "", "tensorstore::MakeResult", "Returns a Result<T> with a (possibly-default) value."], [852, 1, 1, "", "tensorstore::MakeResult", "Returns a Result<T> with a (possibly-default) value."], [853, 1, 1, "", "tensorstore::MakeScalarArray", "Returns a rank-0 array containing a copy of the specified value."], [854, 1, 1, "", "tensorstore::MakeScalarArrayView", "Returns a rank-0 array that points to (but does not copy) the specified value."], [854, 2, 2, "p-x", "tensorstore::MakeScalarArrayView::x", "A reference specifying the memory location to which the array will point."], [855, 1, 1, "", "tensorstore::MakeTransformedArray", "Returns a transformed array representing transform applied to array."], [856, 1, 1, "", "tensorstore::MapFuture", "Returns a Future that resolves to the result of calling callback(future.result()...) when all of the specified future objects become ready.  The callback is invoked using the specified executor."], [856, 2, 2, "p-callback", "tensorstore::MapFuture::callback", "Callback function to be invoked as callback(future.result()...) when all of the future objects become ready."], [856, 2, 2, "p-executor", "tensorstore::MapFuture::executor", "Executor with which to invoke the callback callback."], [856, 2, 2, "p-future", "tensorstore::MapFuture::future", "The Future objects to link."], [857, 1, 1, "", "tensorstore::MapFutureError", "Transforms the error status of a Future."], [857, 2, 2, "p-executor", "tensorstore::MapFutureError::executor", "Executor to use to run func."], [857, 2, 2, "p-func", "tensorstore::MapFutureError::func", "Unary function to apply to the error status of future."], [857, 2, 2, "p-future", "tensorstore::MapFutureError::future", "The future to transform."], [858, 1, 1, "", "tensorstore::MapFutureValue", "Returns a Future that resolves to callback(future.value()...) when all of the specified future objects become ready with non-error results.  The callback is invoked using the specified executor."], [858, 2, 2, "p-callback", "tensorstore::MapFutureValue::callback", "Callback function to be invoked as callback(future.result().value()...) when all of the future objects become ready with non-error results."], [858, 2, 2, "p-executor", "tensorstore::MapFutureValue::executor", "Executor with which to invoke the callback callback."], [858, 2, 2, "p-future", "tensorstore::MapFutureValue::future", "The Future objects to link."], [859, 1, 1, "", "tensorstore::MapResult", "Tries to call func with Result-wrapped arguments."], [860, 1, 1, "", "tensorstore::Materialize", "Materializes the transformed array as a strided array."], [860, 7, 2, "p-OriginKind", "tensorstore::Materialize::OriginKind", "Specifies whether to retain the origin offset."], [860, 2, 2, "p-constraints", "tensorstore::Materialize::constraints", "If constraints == std::nullopt, the returned array may refer to the existing array data."], [861, 1, 1, "", "tensorstore::MaybeAnnotateStatus", "If status is not absl::StatusCode::kOk, then annotate the status message."], [861, 1, 1, "", "tensorstore::MaybeAnnotateStatus", "If status is not absl::StatusCode::kOk, then annotate the status message."], [862, 4, 1, "", "tensorstore::MaybeHardConstraintIndex", "Combines an Index (which defaults to kImplicit) with a bool indicating whether the value is a hard constraint as opposed to a default value."], [863, 1, 1, "", "tensorstore::MaybeHardConstraintIndex::MaybeHardConstraintIndex", "Constructs from a value."], [864, 5, 1, "", "tensorstore::MaybeHardConstraintIndex::hard_constraint", "Indicates whether value should be treated as a hard constraint."], [865, 1, 1, "", "tensorstore::MaybeHardConstraintIndex::operator Index", "Implicitly converts to the Index value."], [866, 1, 1, "", "tensorstore::MaybeHardConstraintIndex::operator!=", "Compares two constraints for equality."], [866, 1, 1, "", "tensorstore::MaybeHardConstraintIndex::operator==", "Compares two constraints for equality."], [867, 1, 1, "", "tensorstore::MaybeHardConstraintIndex::valid", "Checks if the constraint is specified, i.e. value != kImplicit."], [868, 5, 1, "", "tensorstore::MaybeHardConstraintIndex::value", "Index value."], [869, 4, 1, "", "tensorstore::MaybeHardConstraintSpan", "Combines a span (with length assumed to be a valid rank) with a bit vector indicating which values are hard constraints as opposed to soft constraints."], [870, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::MaybeHardConstraintSpan", "Constructs a zero-length span with no hard constraints."], [871, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::MaybeHardConstraintSpan", "Constructs from a vector and hard constraint dimension set."], [871, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::MaybeHardConstraintSpan", "Constructs from a vector and hard constraint dimension set."], [872, 5, 1, "", "tensorstore::MaybeHardConstraintSpan::hard_constraint", "Set of dimensions for which the corresponding constraint value should be treated as a hard constraint."], [873, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::operator!=", "Compares two constraints for equality."], [873, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::operator==", "Compares two constraints for equality."], [874, 1, 1, "", "tensorstore::MaybeHardConstraintSpan::valid", "Checks if the span has non-zero length."], [875, 1, 1, "", "tensorstore::MergeDimensionLabels", "Merges two dimension labels."], [875, 2, 2, "p-a", "tensorstore::MergeDimensionLabels::a", "Label to merge."], [875, 2, 2, "p-b", "tensorstore::MergeDimensionLabels::b", "Other label to merge."], [876, 1, 1, "", "tensorstore::MergeDimensionUnits", "Merges new dimension units with existing dimension units."], [877, 1, 1, "", "tensorstore::MergeIndexDomains", "Merges two index domains."], [877, 2, 2, "p-a", "tensorstore::MergeIndexDomains::a", "Domain to merge."], [877, 2, 2, "p-b", "tensorstore::MergeIndexDomains::b", "Other domain to merge."], [878, 1, 1, "", "tensorstore::MergeOptionallyImplicitIndexIntervals", "Merges two index intervals."], [878, 2, 2, "p-a", "tensorstore::MergeOptionallyImplicitIndexIntervals::a", "Interval to merge."], [878, 2, 2, "p-b", "tensorstore::MergeOptionallyImplicitIndexIntervals::b", "Other interval to merge."], [879, 4, 1, "", "tensorstore::MinimalSpec", "Indicates a minimal spec, i.e. missing information necessary to recreate."], [880, 1, 1, "", "tensorstore::ModeCast", "Casts source to have a static ReadWriteMode of TargetMode."], [881, 1, 1, "", "tensorstore::ModeCast", "Changes the ReadWriteMode of store to the specified new_mode."], [882, 8, 1, "", "tensorstore::MustAllocateConstraint", "Specifies whether a new array must be allocated."], [882, 9, 1, "e-may_allocate", "tensorstore::MustAllocateConstraint::may_allocate", "A reference to the existing array may be returned, or a new array may be allocated if necessary."], [882, 9, 1, "e-must_allocate", "tensorstore::MustAllocateConstraint::must_allocate", "A new array will always be allocated."], [883, 6, 1, "", "tensorstore::MutableBoxView", "Mutable view of a Box."], [884, 1, 1, "", "tensorstore::NormalizeDimRangeSpec", "Appends to *result the dimensions corresponding to spec."], [884, 2, 2, "p-rank", "tensorstore::NormalizeDimRangeSpec::rank", "Number of dimensions."], [884, 2, 2, "p-result", "tensorstore::NormalizeDimRangeSpec::result", "Non-null pointer to result vector."], [884, 2, 2, "p-spec", "tensorstore::NormalizeDimRangeSpec::spec", "The dimension range specification."], [885, 1, 1, "", "tensorstore::NormalizeDimensionIdentifier", "Normalizes a dimension identifier to a dimension index in the range [0, rank)."], [885, 2, 2, "p-identifier", "tensorstore::NormalizeDimensionIdentifier::identifier", "The dimension identifier to normalize."], [885, 2, 2, "p-labels", "tensorstore::NormalizeDimensionIdentifier::labels", "Vector of length rank specifying the dimension labels."], [886, 1, 1, "", "tensorstore::NormalizeDimensionIndex", "Normalizes a dimension index in the range (-rank, rank) to the range [0, rank)."], [886, 2, 2, "p-index", "tensorstore::NormalizeDimensionIndex::index", "The dimension index to normalize."], [886, 2, 2, "p-rank", "tensorstore::NormalizeDimensionIndex::rank", "The rank of the index space."], [887, 1, 1, "", "tensorstore::NormalizeDimensionLabel", "Converts a dimension label to a dimension index."], [887, 1, 1, "", "tensorstore::NormalizeDimensionLabel", "Converts a dimension label to a dimension index."], [887, 2, 2, "p-label", "tensorstore::NormalizeDimensionLabel::label", "The dimension label to convert."], [887, 2, 2, "p-labels", "tensorstore::NormalizeDimensionLabel::labels", "The dimension labels."], [887, 2, 2, "p-labels", "tensorstore::NormalizeDimensionLabel::labels", "The dimension labels."], [888, 1, 1, "", "tensorstore::NormalizeDynamicDimSpec", "Appends to *result the dimensions corresponding to spec."], [888, 2, 2, "p-labels", "tensorstore::NormalizeDynamicDimSpec::labels", "Vector of length ` rank` specifying the dimension labels."], [888, 2, 2, "p-result", "tensorstore::NormalizeDynamicDimSpec::result", "Non-null pointer to result vector."], [888, 2, 2, "p-spec", "tensorstore::NormalizeDynamicDimSpec::spec", "The dimension specification."], [889, 1, 1, "", "tensorstore::NormalizeDynamicDimSpecs", "Equivalent to calling NormalizeDynamicDimSpec(spec, labels, result) for each spec in specs."], [890, 6, 1, "", "tensorstore::OffsetArrayView", "Same as ArrayView but supports an arbitrary Array::origin vector."], [891, 1, 1, "", "tensorstore::Open", "Opens a TensorStore from a Spec."], [891, 1, 1, "", "tensorstore::Open", "Opens a TensorStore from a Spec."], [891, 1, 1, "", "tensorstore::Open", "Opens a TensorStore from a Spec."], [891, 1, 1, "", "tensorstore::Open", "Opens a TensorStore from a Spec."], [891, 3, 2, "p-Element", "tensorstore::Open::Element", "Constrains data type at compile time, defaults to void (no constraint)."], [891, 7, 2, "p-Mode", "tensorstore::Open::Mode", "Constrains read-write mode at compile-time, defaults to ReadWriteMode::dynamic."], [891, 7, 2, "p-Rank", "tensorstore::Open::Rank", "Constrains rank at compile time, defaults to dynamic_rank."], [891, 2, 2, "p-option", "tensorstore::Open::option", "Any option compatible with TransactionalOpenOptions."], [891, 2, 2, "p-spec", "tensorstore::Open::spec", "The Spec to open."], [892, 8, 1, "", "tensorstore::OpenMode", "Specifies the mode to use when opening a TensorStore."], [892, 9, 1, "e-assume_cached_metadata", "tensorstore::OpenMode::assume_cached_metadata", "Skip reading the metadata when opening.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore. The stored metadata may still be accessed by subsequent operations that need to re-validate or modify the metadata."], [892, 9, 1, "e-assume_metadata", "tensorstore::OpenMode::assume_metadata", "Neither read nor write stored metadata.  Instead, just assume any necessary metadata based on constraints in the spec and any defaults used by TensorStore.  This option requires care as it can lead to data corruption if the assumed metadata does not match the stored metadata, or multiple concurrent writers use different assumed metadata.  The stored metadata need not even exist.  Operations such as resizing that modify the stored metadata will fail with an error."], [892, 9, 1, "e-create", "tensorstore::OpenMode::create", "Create a new TensorStore.  Unless open is also specified, an existing TensorStore will result in an error."], [892, 9, 1, "e-delete_existing", "tensorstore::OpenMode::delete_existing", "If the TensorStore already exists, delete it.  This is only valid in conjunction with create."], [892, 9, 1, "e-open", "tensorstore::OpenMode::open", "Open an existing TensorStore.  Unless create is also specified, a non-existent TensorStore will result in an error."], [892, 9, 1, "e-open_or_create", "tensorstore::OpenMode::open_or_create", "Open an existing TensorStore or create a new TensorStore if it does not exist."], [892, 9, 1, "e-unknown", "tensorstore::OpenMode::unknown", "Open mode is not known."], [893, 4, 1, "", "tensorstore::OpenOptions", "Options for opening a Spec."], [894, 4, 1, "", "tensorstore::OptionalByteRangeRequest", "Specifies an optional byte range request."], [895, 1, 1, "", "tensorstore::OptionalByteRangeRequest::AsByteRange", "Converts to a ByteRange."], [896, 1, 1, "", "tensorstore::OptionalByteRangeRequest::IsFull", "Checks if no byte range restriction is specified."], [897, 1, 1, "", "tensorstore::OptionalByteRangeRequest::IsRange", "Checks if this request specifies an explicit range with both inclusive_min and exclusive_max."], [898, 1, 1, "", "tensorstore::OptionalByteRangeRequest::IsStat", "Checks if this is a \"stat\" request."], [899, 1, 1, "", "tensorstore::OptionalByteRangeRequest::IsSuffix", "Checks if this request specifies a suffix, with only inclusive_min specified."], [900, 1, 1, "", "tensorstore::OptionalByteRangeRequest::IsSuffixLength", "Check if this request specifies a suffix length."], [901, 1, 1, "", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest", "Constructs from an existing byte range."], [902, 1, 1, "", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest", "Constructs a request for a full (unconstrained) byte range."], [903, 1, 1, "", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest", "Constructs from the specified bounds."], [904, 1, 1, "", "tensorstore::OptionalByteRangeRequest::Range", "Constructs a request for an explicit range."], [905, 1, 1, "", "tensorstore::OptionalByteRangeRequest::SatisfiesInvariants", "Checks that this byte range is valid."], [906, 1, 1, "", "tensorstore::OptionalByteRangeRequest::Stat", "Constructs a request for a zero-byte range, i.e. a \"stat\" request used to check only if a key exists."], [907, 1, 1, "", "tensorstore::OptionalByteRangeRequest::Suffix", "Constructs a request for a suffix starting at the specified inclusive_min."], [908, 1, 1, "", "tensorstore::OptionalByteRangeRequest::SuffixLength", "Constructs a request for a suffix of the specified length."], [909, 1, 1, "", "tensorstore::OptionalByteRangeRequest::Validate", "Returns a ByteRange for an object of size."], [910, 5, 1, "", "tensorstore::OptionalByteRangeRequest::exclusive_max", "Specifies the exclusive max, or -1 to indicate no upper bound."], [911, 5, 1, "", "tensorstore::OptionalByteRangeRequest::inclusive_min", "Specifies the starting byte if non-negative, or suffix length if negative."], [912, 1, 1, "", "tensorstore::OptionalByteRangeRequest::operator!=", "Compares for equality."], [913, 1, 1, "", "tensorstore::OptionalByteRangeRequest::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [912, 1, 1, "", "tensorstore::OptionalByteRangeRequest::operator==", "Compares for equality."], [914, 1, 1, "", "tensorstore::OptionalByteRangeRequest::size", "Returns the number of bytes contained in the range, or -1 if unknown."], [915, 4, 1, "", "tensorstore::OptionallyImplicitIndexInterval", "Represents an IndexInterval where the lower/upper bounds may be \"implicit\"."], [916, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::OptionallyImplicitIndexInterval", "Constructs an infinite interval with implicit bounds."], [917, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::OptionallyImplicitIndexInterval", "Constructs an interval with the specified bounds."], [918, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::effective_interval", "Returns the interval containing the effective bounds."], [919, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::implicit_lower", "Indicates if the lower bound of interval is \"implicit\"."], [919, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::implicit_lower", "Indicates if the lower bound of interval is \"implicit\"."], [920, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::implicit_upper", "Indicates if the upper bound of interval is \"implicit\"."], [920, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::implicit_upper", "Indicates if the upper bound of interval is \"implicit\"."], [921, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::interval", "Returns the base interval."], [921, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::interval", "Returns the base interval."], [922, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::operator!=", "Compares two intervals for equality."], [923, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::operator&lt;&lt;", "Prints a string representation of x to os."], [922, 1, 1, "", "tensorstore::OptionallyImplicitIndexInterval::operator==", "Compares two intervals for equality."], [924, 4, 1, "", "tensorstore::OutputIndexMapIterator", "Iterator type for OutputIndexMapRange."], [925, 1, 1, "", "tensorstore::OutputIndexMapIterator::OutputIndexMapIterator", "Constructs an invalid iterator."], [926, 6, 1, "", "tensorstore::OutputIndexMapIterator::difference_type", "Iterator difference type."], [927, 6, 1, "", "tensorstore::OutputIndexMapIterator::iterator_category", "Iterator category."], [928, 6, 1, "", "tensorstore::OutputIndexMapIterator::pointer", "Pointer type."], [929, 6, 1, "", "tensorstore::OutputIndexMapIterator::reference", "Proxy reference to output index map."], [929, 6, 1, "", "tensorstore::OutputIndexMapIterator::value_type", "Proxy reference to output index map."], [930, 4, 1, "", "tensorstore::OutputIndexMapRange", "Represents a const range view of the output index maps for an index transform."], [931, 1, 1, "", "tensorstore::OutputIndexMapRange::OutputIndexMapRange", "Converts from a compatible OutputIndexMapRange type."], [932, 1, 1, "", "tensorstore::OutputIndexMapRange::OutputIndexMapRange", "Constructs an invalid output index map range."], [933, 1, 1, "", "tensorstore::OutputIndexMapRange::OutputIndexMapRange", "Constructs from an index transform."], [934, 1, 1, "", "tensorstore::OutputIndexMapRange::begin", "Returns the begin/end iterators."], [935, 6, 1, "", "tensorstore::OutputIndexMapRange::difference_type", "Iterator difference type."], [936, 1, 1, "", "tensorstore::OutputIndexMapRange::empty", "Returns true if size() == 0."], [934, 1, 1, "", "tensorstore::OutputIndexMapRange::end", "Returns the begin/end iterators."], [937, 5, 1, "", "tensorstore::OutputIndexMapRange::extent", "The static extent of this range, equal to the static output rank of the transform."], [938, 1, 1, "", "tensorstore::OutputIndexMapRange::input_rank", "Returns the input rank of the index transform."], [939, 6, 1, "", "tensorstore::OutputIndexMapRange::iterator", "Iterator over output index maps."], [940, 1, 1, "", "tensorstore::OutputIndexMapRange::operator[]", "Returns the output index map for dimension output_dim."], [942, 6, 1, "", "tensorstore::OutputIndexMapRange::reference", "Proxy reference to an output index map."], [941, 1, 1, "", "tensorstore::OutputIndexMapRange::size", "Returns the output rank of the transform."], [942, 6, 1, "", "tensorstore::OutputIndexMapRange::value_type", "Proxy reference to an output index map."], [943, 4, 1, "", "tensorstore::OutputIndexMapRef", "Represents a const unowned view of an output index map for an index transform, which specifies the how the index for a given output dimension is computed from the input indices."], [944, 4, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView", "Represents a const view of an index array and associated bounds."], [945, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::array_ref", "Returns an ArrayView representing the index array."], [946, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::byte_strides", "Returns layout().byte_strides()."], [947, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::element_pointer", "Returns the element pointer to the 0 position (not necessarily the origin) of the index array."], [948, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::index_range", "Returns the bounding interval on the index array values."], [949, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::layout", "Returns the strided layout of the index array."], [950, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::rank", "Returns the rank of the index array, which is equal to the input rank of the index transform."], [951, 1, 1, "", "tensorstore::OutputIndexMapRef::IndexArrayView::shared_array_ref", "Returns a SharedArrayView representing the index array."], [952, 1, 1, "", "tensorstore::OutputIndexMapRef::OutputIndexMapRef", "Constructs an invalid reference."], [953, 1, 1, "", "tensorstore::OutputIndexMapRef::index_array", "Returns the index array and bounds. :dchecks: method() == OutputIndexMethod::array"], [954, 1, 1, "", "tensorstore::OutputIndexMapRef::input_dimension", "Returns the single input dimension used to compute the output index. :dchecks: method() == OutputIndexMethod::single_input_dimension"], [955, 1, 1, "", "tensorstore::OutputIndexMapRef::input_rank", "Returns the input rank of the index transform."], [956, 1, 1, "", "tensorstore::OutputIndexMapRef::method", "Returns the mapping method."], [957, 1, 1, "", "tensorstore::OutputIndexMapRef::offset", "Returns the offset."], [958, 1, 1, "", "tensorstore::OutputIndexMapRef::operator=", "Rebinds to another output index map."], [959, 1, 1, "", "tensorstore::OutputIndexMapRef::stride", "Returns the stride.  This is ignored if method() == OutputIndexMethod::constant."], [960, 8, 1, "", "tensorstore::OutputIndexMethod", "Specifies the method by which the index into a given output dimension of an index transform is computed from the input indices."], [960, 9, 1, "e-array", "tensorstore::OutputIndexMethod::array", "Output index is equal to offset + stride * array(input)."], [960, 9, 1, "e-constant", "tensorstore::OutputIndexMethod::constant", "Output index is equal to the constant offset and does not depend on any input dimensions."], [960, 9, 1, "e-single_input_dimension", "tensorstore::OutputIndexMethod::single_input_dimension", "Output index is equal to offset + stride * input[input_dimension]."], [961, 1, 1, "", "tensorstore::PermutationMatchesOrder", "Returns true if permutation is {0, 1, ..., permutation.size()-1} if order == c_order, or {permutation.size() - 1, ..., 1, 0} if order == fortran_order."], [962, 6, 1, "", "tensorstore::PipelineResultType", "Type alias used by initial overloads of the \"Pipeline\" operator|."], [963, 6, 1, "", "tensorstore::PointerElementTag", "Element tag type corresponding to a given pointer type."], [963, 3, 2, "p-T", "tensorstore::PointerElementTag::T", "Pointer type corresponding to an element tag."], [964, 1, 1, "", "tensorstore::ProductOfExtents", "Computes the product of the elements of the given span."], [964, 2, 2, "p-s", "tensorstore::ProductOfExtents::s", "A contiguous sequence of numbers to multiply."], [965, 4, 1, "", "tensorstore::Promise", "\"Producer\" interface to a one-time channel."], [966, 1, 1, "", "tensorstore::Promise::ExecuteWhenForced", "Registers a callback to be invoked when Future::Force is called on an associated Future."], [966, 2, 2, "p-callback", "tensorstore::Promise::ExecuteWhenForced::callback", "A function object to be invoked with a copy of *this. The return value of the callback is ignored."], [967, 1, 1, "", "tensorstore::Promise::ExecuteWhenNotNeeded", "Registers a callback to be invoked when result_needed() becomes false."], [967, 2, 2, "p-callback", "tensorstore::Promise::ExecuteWhenNotNeeded::callback", "A function object to be invoked with no arguments."], [968, 1, 1, "", "tensorstore::Promise::Promise", "Constructs from a compatible Promise."], [969, 1, 1, "", "tensorstore::Promise::Promise", "Constructs an null Promise."], [970, 1, 1, "", "tensorstore::Promise::SetReady", "Marks result as ready without modifying it."], [971, 1, 1, "", "tensorstore::Promise::SetResult", "Sets the result if it has not already been set."], [965, 3, 2, "p-T", "tensorstore::Promise::T", "Specifies the type of the value to be transmitted."], [972, 1, 1, "", "tensorstore::Promise::future", "Returns an associated Future, if one can be obtained without affecting the value of result_needed() (which would violate an invariant)."], [973, 1, 1, "", "tensorstore::Promise::null", "Returns true if this Promise has no shared state."], [974, 1, 1, "", "tensorstore::Promise::operator=", "Assigns from a compatible Promise."], [975, 1, 1, "", "tensorstore::Promise::raw_result", "Returns a reference to the result value stored in the shared state."], [976, 1, 1, "", "tensorstore::Promise::ready", "Returns true if the result is ready."], [977, 1, 1, "", "tensorstore::Promise::reset", "Resets this Promise to be null. :post: null()."], [978, 1, 1, "", "tensorstore::Promise::result_needed", "Returns true if this future has not been cancelled."], [979, 6, 1, "", "tensorstore::Promise::result_type", "The result type transmitted by the channel."], [980, 6, 1, "", "tensorstore::Promise::value_type", "The value type contained in the result type."], [981, 4, 1, "", "tensorstore::PromiseFuturePair", "Pairs a Promise with a Future."], [982, 6, 1, "", "tensorstore::PromiseFuturePair::FutureType", "Future type."], [983, 1, 1, "", "tensorstore::PromiseFuturePair::Link", "Creates a new PromiseFuturePair and links the newly created promise with the specified future objects as if by calling tensorstore::Link."], [983, 1, 1, "", "tensorstore::PromiseFuturePair::Link", "Creates a new PromiseFuturePair and links the newly created promise with the specified future objects as if by calling tensorstore::Link."], [983, 2, 2, "p-callback", "tensorstore::PromiseFuturePair::Link::callback", "The callback to be invoked with the newly created promise and the specified future objects once they become ready."], [983, 2, 2, "p-future", "tensorstore::PromiseFuturePair::Link::future", "The future objects to link."], [984, 1, 1, "", "tensorstore::PromiseFuturePair::LinkError", "Creates a new PromiseFuturePair with the Future result initialized using result_init.  Links the specified future objects to the newly created promise as if by calling tensorstore::LinkError."], [985, 1, 1, "", "tensorstore::PromiseFuturePair::LinkValue", "Same as Link, except that the behavior matches tensorstore::LinkValue instead of tensorstore::Link."], [985, 1, 1, "", "tensorstore::PromiseFuturePair::LinkValue", "Same as Link, except that the behavior matches tensorstore::LinkValue instead of tensorstore::Link."], [986, 1, 1, "", "tensorstore::PromiseFuturePair::Make", "Makes a new Promise/Future pair."], [987, 6, 1, "", "tensorstore::PromiseFuturePair::PromiseType", "Promise type."], [981, 3, 2, "p-T", "tensorstore::PromiseFuturePair::T", "The contained value type."], [988, 5, 1, "", "tensorstore::PromiseFuturePair::future", "Future object."], [989, 5, 1, "", "tensorstore::PromiseFuturePair::promise", "Promise object."], [990, 1, 1, "", "tensorstore::PropagateBounds", "Propagates bounds on an output index space b back to each input dimension input_dim of the input index space a as follows:"], [990, 1, 1, "", "tensorstore::PropagateBounds", "Propagates bounds on an output index space b back to each input dimension input_dim of the input index space a as follows:"], [990, 2, 2, "p-a_domain", "tensorstore::PropagateBounds::a_domain", "The propagated bounds in the a index space."], [990, 2, 2, "p-a_implicit_lower_bounds", "tensorstore::PropagateBounds::a_implicit_lower_bounds", "Propagated implicit indicators for each lower bound of a."], [990, 2, 2, "p-a_implicit_upper_bounds", "tensorstore::PropagateBounds::a_implicit_upper_bounds", "Propagated implicit indicators for each upper bound of a."], [990, 2, 2, "p-a_to_b", "tensorstore::PropagateBounds::a_to_b", "The transform."], [990, 2, 2, "p-b_domain", "tensorstore::PropagateBounds::b_domain", "The bounds in the b index space."], [990, 2, 2, "p-b_implicit_lower_bounds", "tensorstore::PropagateBounds::b_implicit_lower_bounds", "Implicit indicator for each lower bound of b."], [990, 2, 2, "p-b_implicit_upper_bounds", "tensorstore::PropagateBounds::b_implicit_upper_bounds", "Implicit indicator for each upper bound of b."], [991, 1, 1, "", "tensorstore::PropagateBoundsToTransform", "Returns a new transform that represents the same mapping as a_to_b but may have a reduced input domain:"], [991, 1, 1, "", "tensorstore::PropagateBoundsToTransform", "Returns a new transform that represents the same mapping as a_to_b but may have a reduced input domain:"], [991, 2, 2, "p-a_to_b", "tensorstore::PropagateBoundsToTransform::a_to_b", "The transform from a to b."], [991, 2, 2, "p-b_domain", "tensorstore::PropagateBoundsToTransform::b_domain", "The bounds in the \"b\" index space."], [991, 2, 2, "p-b_domain", "tensorstore::PropagateBoundsToTransform::b_domain", "The bounds in the \"b\" index space."], [991, 2, 2, "p-b_implicit_lower_bounds", "tensorstore::PropagateBoundsToTransform::b_implicit_lower_bounds", "Implicit indicator for each lower bound of b."], [991, 2, 2, "p-b_implicit_upper_bounds", "tensorstore::PropagateBoundsToTransform::b_implicit_upper_bounds", "Implicit indicator for each upper bound of b."], [992, 1, 1, "", "tensorstore::PropagateExplicitBounds", "Equivalent to PropagateBounds, except that b_implicit_lower_bounds and b_implicit_upper_bounds are assumed to be all false."], [993, 1, 1, "", "tensorstore::PropagateExplicitBoundsToTransform", "Same as PropagateBoundsToTransform, except that PropagateBoundsToTransform::b_implicit_lower_bounds and PropagateBoundsToTransform::b_implicit_upper_bounds assumed to be all false, with the effect that IndexTransform::implicit_lower_bounds and IndexTransform::implicit_upper_bounds of the returned transform are all false."], [994, 1, 1, "", "tensorstore::PropagateInputDomainResizeToOutput", "Propagates a resize request on the input domain to the output space."], [994, 2, 2, "p-can_resize_tied_bounds", "tensorstore::PropagateInputDomainResizeToOutput::can_resize_tied_bounds", "If true, fails if the resize would potentially affect any positions not within the output range of transform."], [994, 2, 2, "p-is_noop", "tensorstore::PropagateInputDomainResizeToOutput::is_noop", "Must be non-null."], [994, 2, 2, "p-new_output_inclusive_min", "tensorstore::PropagateInputDomainResizeToOutput::new_output_inclusive_min", "Set to the new IndexInterval::exclusive_max bounds for the output space."], [994, 2, 2, "p-output_exclusive_max_constraint", "tensorstore::PropagateInputDomainResizeToOutput::output_exclusive_max_constraint", "Set to constraints on the exclusive_max bounds of the output space that must be satisfied in order for the resize to not affect positions outside the output range of transform."], [994, 2, 2, "p-output_inclusive_min_constraint", "tensorstore::PropagateInputDomainResizeToOutput::output_inclusive_min_constraint", "Set to constraints on the inclusive_min bounds of the output space that must be satisfied in order for the resize to not affect positions outside the output range of transform."], [994, 2, 2, "p-requested_input_exclusive_max", "tensorstore::PropagateInputDomainResizeToOutput::requested_input_exclusive_max", "Requested new exclusive max bounds on the input domain."], [994, 2, 2, "p-requested_input_inclusive_min", "tensorstore::PropagateInputDomainResizeToOutput::requested_input_inclusive_min", "Requested new inclusive min bounds on the input domain."], [994, 2, 2, "p-transform", "tensorstore::PropagateInputDomainResizeToOutput::transform", "The index transform."], [995, 4, 1, "", "tensorstore::RankConstraint", "Represents an optional rank value and provides related operations."], [996, 1, 1, "", "tensorstore::RankConstraint::Add", "Adds the rank constraints."], [996, 1, 1, "", "tensorstore::RankConstraint::Add", "Adds the rank constraints."], [997, 1, 1, "", "tensorstore::RankConstraint::And", "Returns the intersection of the rank constraints."], [997, 1, 1, "", "tensorstore::RankConstraint::And", "Returns the intersection of the rank constraints."], [998, 1, 1, "", "tensorstore::RankConstraint::EqualOrUnspecified", "Returns true if there is at least one rank satisfying all constraints."], [998, 1, 1, "", "tensorstore::RankConstraint::EqualOrUnspecified", "Returns true if there is at least one rank satisfying all constraints."], [999, 1, 1, "", "tensorstore::RankConstraint::FromInlineRank", "Constructs from an InlineRank value, ignoring the inline buffer size."], [1000, 1, 1, "", "tensorstore::RankConstraint::GreaterEqualOrUnspecified", "Returns true if some rank satisfying a is greater than or equal to some rank satisfying b."], [1001, 1, 1, "", "tensorstore::RankConstraint::GreaterOrUnspecified", "Returns true if some rank satisfying a is greater than some rank satisfying b."], [1002, 1, 1, "", "tensorstore::RankConstraint::Implies", "Returns true if any rank satisfying inner also satisfies outer."], [1003, 1, 1, "", "tensorstore::RankConstraint::LessEqualOrUnspecified", "Returns true if some rank satisfying a is less than or equal to some rank satisfying b."], [1004, 1, 1, "", "tensorstore::RankConstraint::LessOrUnspecified", "Returns true if some rank satisfying a is less than some rank satisfying b."], [1005, 1, 1, "", "tensorstore::RankConstraint::RankConstraint", "Constructs with an unspecified rank value (dynamic_rank)."], [1005, 1, 1, "", "tensorstore::RankConstraint::RankConstraint", "Constructs with an unspecified rank value (dynamic_rank)."], [1006, 1, 1, "", "tensorstore::RankConstraint::RankConstraint", "Constructs with the specified rank value."], [1007, 1, 1, "", "tensorstore::RankConstraint::Subtract", "Subtracts the rank constraints."], [1008, 1, 1, "", "tensorstore::RankConstraint::operator DimensionIndex", "Returns rank."], [1009, 5, 1, "", "tensorstore::RankConstraint::rank", "Indicates the rank, or equal to dynamic_rank if unknown."], [1010, 1, 1, "", "tensorstore::RankConstraint::valid", "Returns true if this is a valid rank constraint."], [1011, 1, 1, "", "tensorstore::Read", "Copies from a source TensorStore to a newly-allocated target Array."], [1011, 1, 1, "", "tensorstore::Read", "Copies from a source TensorStore to a newly-allocated target Array."], [1012, 1, 1, "", "tensorstore::Read", "Copies from source TensorStore to target array."], [1012, 1, 1, "", "tensorstore::Read", "Copies from source TensorStore to target array."], [1011, 7, 2, "p-OriginKind", "tensorstore::Read::OriginKind", "If equal to offset_origin (the default), the returned array has the same origin as source."], [1011, 2, 2, "p-options", "tensorstore::Read::options", "Any option compatible with ReadIntoNewArrayOptions."], [1012, 2, 2, "p-options", "tensorstore::Read::options", "Any option compatible with ReadOptions."], [1011, 2, 2, "p-source", "tensorstore::Read::source", "Source TensorStore object that supports reading."], [1012, 2, 2, "p-source", "tensorstore::Read::source", "Source TensorStore object that supports reading."], [1012, 2, 2, "p-target", "tensorstore::Read::target", "Array or TransformedArray with a non-const element type."], [1013, 4, 1, "", "tensorstore::ReadIntoNewArrayOptions", "Options for tensorstore::Read into new array."], [1014, 5, 1, "", "tensorstore::ReadIntoNewArrayOptions::batch", "Optional batch."], [1015, 5, 1, "", "tensorstore::ReadIntoNewArrayOptions::layout_order", "Specifies the layout order of the newly-allocated array.  Defaults to c_order."], [1016, 5, 1, "", "tensorstore::ReadIntoNewArrayOptions::progress_function", "Optional progress callback."], [1017, 4, 1, "", "tensorstore::ReadOptions", "Options for tensorstore::Read into an existing target array."], [1018, 5, 1, "", "tensorstore::ReadOptions::alignment_options", "Constrains how the source TensorStore may be aligned to the target array."], [1019, 5, 1, "", "tensorstore::ReadOptions::batch", "Optional batch."], [1020, 5, 1, "", "tensorstore::ReadOptions::progress_function", "Optional progress callback."], [1021, 4, 1, "", "tensorstore::ReadProgress", "Specifies progress statistics for Read operations."], [1022, 5, 1, "", "tensorstore::ReadProgress::copied_elements", "Number of elements that have been copied."], [1023, 1, 1, "", "tensorstore::ReadProgress::operator!=", "Compares two progress states for equality."], [1024, 1, 1, "", "tensorstore::ReadProgress::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1023, 1, 1, "", "tensorstore::ReadProgress::operator==", "Compares two progress states for equality."], [1025, 5, 1, "", "tensorstore::ReadProgress::total_elements", "Total number of elements to be read."], [1026, 4, 1, "", "tensorstore::ReadProgressFunction", "Specifies a read progress function for use with tensorstore::Read."], [1027, 6, 1, "", "tensorstore::ReadProgressFunction::Function", "Type-erased movable function with signature void(ReadProgress)."], [1028, 8, 1, "", "tensorstore::ReadWriteMode", "Specifies whether reading and/or writing is permitted."], [1028, 9, 1, "e-dynamic", "tensorstore::ReadWriteMode::dynamic", "Indicates that the mode is unspecified (only used at compile time)."], [1028, 9, 1, "e-read", "tensorstore::ReadWriteMode::read", "Indicates that reading is supported."], [1028, 9, 1, "e-read_write", "tensorstore::ReadWriteMode::read_write", "Indicates that reading and writing are supported."], [1028, 9, 1, "e-write", "tensorstore::ReadWriteMode::write", "Indicates that writing is supported."], [1029, 4, 1, "", "tensorstore::ReadyFuture", "Future that is guaranteed to be ready."], [1030, 1, 1, "", "tensorstore::ReadyFuture::ReadyFuture", "Constructs a ReadyFuture from an existing ReadyFuture."], [1031, 1, 1, "", "tensorstore::ReadyFuture::ReadyFuture", "Constructs an null ReadyFuture."], [1032, 1, 1, "", "tensorstore::ReadyFuture::ReadyFuture", "Constructs a ReadyFuture from an existing Future, which must either be null or ready."], [1033, 1, 1, "", "tensorstore::ReadyFuture::operator=", "Assigns a ReadyFuture from an existing ReadyFuture."], [1034, 1, 1, "", "tensorstore::ReadyFuture::result", "Returns a reference to the result, guaranteed not to block."], [1035, 6, 1, "", "tensorstore::ReadyFuture::result_type", "Associated result type."], [1036, 1, 1, "", "tensorstore::ReadyFuture::value", "Returns a reference to the value contained in the result, guaranteed not to block."], [1037, 6, 1, "", "tensorstore::RebindDataType", "Evaluates to a type similar to SourceRef but with a static data type of TargetElement."], [1037, 3, 2, "p-SourceRef", "tensorstore::RebindDataType::SourceRef", "Optionally const- and/or reference-qualified source type."], [1037, 3, 2, "p-TargetElement", "tensorstore::RebindDataType::TargetElement", "Target element type."], [1038, 6, 1, "", "tensorstore::RebindMode", "Evaluates to a type similar to SourceRef but with a ReadWriteMode of TargetMode."], [1039, 6, 1, "", "tensorstore::RebindRank", "Evaluates to a type similar to SourceRef but with a static rank of TargetRank."], [1039, 3, 2, "p-SourceRef", "tensorstore::RebindRank::SourceRef", "Optionally const- and/or reference-qualified source type."], [1039, 7, 2, "p-TargetRank", "tensorstore::RebindRank::TargetRank", "Target rank value."], [1040, 4, 1, "", "tensorstore::RecheckCacheOption", "Specifies time bound on cached data that may be used without revalidation."], [1041, 1, 1, "", "tensorstore::RecheckCacheOption::AtOpen", "Special time bound equal to the time the TensorStore is opened."], [1042, 8, 1, "", "tensorstore::RecheckCacheOption::Flags", "Specifies the kind of time bound."], [1042, 9, 1, "e-kAtOpen", "tensorstore::RecheckCacheOption::Flags::kAtOpen", "Data must not be older than the time at which the Spec is opened."], [1042, 9, 1, "e-kSpecified", "tensorstore::RecheckCacheOption::Flags::kSpecified", "Data must not be older than the specified time."], [1042, 9, 1, "e-kUnspecified", "tensorstore::RecheckCacheOption::Flags::kUnspecified", "No bound has been specified."], [1043, 1, 1, "", "tensorstore::RecheckCacheOption::RecheckCacheOption", "Constructs a bound that either always or never revalidates cached data."], [1044, 1, 1, "", "tensorstore::RecheckCacheOption::RecheckCacheOption", "Constructs an unspecified bound."], [1045, 1, 1, "", "tensorstore::RecheckCacheOption::RecheckCacheOption", "Constructs from the specified bound."], [1043, 2, 2, "p-value", "tensorstore::RecheckCacheOption::RecheckCacheOption::value", "If true, always revalidate cached data regardless of how old it is."], [1046, 5, 1, "", "tensorstore::RecheckCacheOption::flags", "Specifies the interpretation of time."], [1047, 1, 1, "", "tensorstore::RecheckCacheOption::specified", "Checks if a bound has been specified."], [1048, 5, 1, "", "tensorstore::RecheckCacheOption::time", "Specifies the time bound."], [1049, 4, 1, "", "tensorstore::RecheckCached", "Specifies the same time bound for both cached array data and metadata."], [1050, 1, 1, "", "tensorstore::RecheckCached::AtOpen", "Special time bound equal to the time the TensorStore is opened."], [1051, 4, 1, "", "tensorstore::RecheckCachedData", "Specifies time bound on cached array data (as opposed to metadata)."], [1052, 1, 1, "", "tensorstore::RecheckCachedData::AtOpen", "Special time bound equal to the time the TensorStore is opened."], [1053, 4, 1, "", "tensorstore::RecheckCachedMetadata", "Specifies time bound on cached metadata (as opposed to actual array data)."], [1054, 8, 1, "", "tensorstore::RepeatedElementsConstraint", "Specifies whether repeated elements may be skipped."], [1054, 9, 1, "e-include_repeated_elements", "tensorstore::RepeatedElementsConstraint::include_repeated_elements", ""], [1054, 9, 1, "e-skip_repeated_elements", "tensorstore::RepeatedElementsConstraint::skip_repeated_elements", ""], [1055, 1, 1, "", "tensorstore::Resize", "Resizes a TensorStore to have the specified inclusive_min and exclusive_max bounds."], [1055, 1, 1, "", "tensorstore::Resize", "Resizes a TensorStore to have the specified inclusive_min and exclusive_max bounds."], [1055, 2, 2, "p-exclusive_max", "tensorstore::Resize::exclusive_max", "Vector of length store.rank() specifying the new exclusive max bounds."], [1055, 2, 2, "p-inclusive_min", "tensorstore::Resize::inclusive_min", "Vector of length store.rank() specifying the new inclusive min bounds."], [1055, 2, 2, "p-options", "tensorstore::Resize::options", "Any option compatible with ResizeOptions."], [1055, 2, 2, "p-store", "tensorstore::Resize::store", "The TensorStore to resize."], [1056, 8, 1, "", "tensorstore::ResizeMode", "Bitvector specifying resize options."], [1056, 9, 1, "e-expand_only", "tensorstore::ResizeMode::expand_only", "Fail if any bounds would be reduced."], [1056, 9, 1, "e-resize_metadata_only", "tensorstore::ResizeMode::resize_metadata_only", "Requests that, if applicable, the resize operation affect only the metadata but not delete data chunks that are outside of the new bounds."], [1056, 9, 1, "e-resize_tied_bounds", "tensorstore::ResizeMode::resize_tied_bounds", "Requests that the resize be permitted even if other bounds tied to the specified bounds must also be resized.  This option should be used with caution."], [1056, 9, 1, "e-shrink_only", "tensorstore::ResizeMode::shrink_only", "Fail if any bounds would be increased."], [1057, 4, 1, "", "tensorstore::ResizeOptions", "Specifies options for resize operations."], [1058, 5, 1, "", "tensorstore::ResizeOptions::mode", "Specifies the resize mode."], [1059, 1, 1, "", "tensorstore::ResolveBounds", "Returns a new TensorStore that is equivalent to store but has implicit bounds resolved if possible, and explicit bounds checked."], [1059, 1, 1, "", "tensorstore::ResolveBounds", "Returns a new TensorStore that is equivalent to store but has implicit bounds resolved if possible, and explicit bounds checked."], [1059, 2, 2, "p-options", "tensorstore::ResolveBounds::options", "Any option compatible with ResolveBoundsOptions."], [1059, 2, 2, "p-store", "tensorstore::ResolveBounds::store", "The TensorStore to resolve."], [1060, 8, 1, "", "tensorstore::ResolveBoundsMode", "Bitvector specifying options for resolving TensorStore bounds."], [1060, 9, 1, "e-fix_resizable_bounds", "tensorstore::ResolveBoundsMode::fix_resizable_bounds", "Requests that any resizable (implicit) bounds of the underlying TensorStore are fixed (treated as explicit).  If this flag is not specified, implicit bounds are propagated to existing implicit bounds of the input domain but do not constrain existing explicit bounds of the input domain."], [1061, 4, 1, "", "tensorstore::ResolveBoundsOptions", "Specifies options for TensorStore ResolveBounds operations."], [1062, 5, 1, "", "tensorstore::ResolveBoundsOptions::batch", "Optional batch."], [1063, 4, 1, "", "tensorstore::Result", "Result<T> implements a value-or-error concept providing a discriminated union of a usable value, T, or an absl::Status error describing why the value is not present. Result<void> is permitted, which becomes a wrapper for absl::Status, and which enables use of Result<T> in a wide variety of template contexts."], [1064, 1, 1, "", "tensorstore::Result::IgnoreResult", "Ignores the result. This method signals intent to ignore the result to suppress compiler warnings from [[nodiscard]]."], [1065, 1, 1, "", "tensorstore::Result::Result", "Constructs from an existing result with a convertible value type."], [1065, 1, 1, "", "tensorstore::Result::Result", "Constructs from an existing result with a convertible value type."], [1066, 1, 1, "", "tensorstore::Result::Result", "Constructs from an existing result."], [1066, 1, 1, "", "tensorstore::Result::Result", "Constructs from an existing result."], [1067, 1, 1, "", "tensorstore::Result::Result", "Constructs an error Result with a code of absl::StatusCode::kUnknown."], [1068, 1, 1, "", "tensorstore::Result::Result", "Directly constructs the contained value from the specified arguments."], [1068, 1, 1, "", "tensorstore::Result::Result", "Directly constructs the contained value from the specified arguments."], [1069, 1, 1, "", "tensorstore::Result::Result", "Constructs from a status object."], [1069, 1, 1, "", "tensorstore::Result::Result", "Constructs from a status object."], [1070, 1, 1, "", "tensorstore::Result::Result", "Constructs the contained value from a convertible value."], [1063, 3, 2, "p-T", "tensorstore::Result::T", "Contained value type, or void to indicate no contained value. Must not be a reference type or cv-qualified."], [1071, 6, 1, "", "tensorstore::Result::const_reference_type", "Equal to const T&, or void if T is void."], [1072, 1, 1, "", "tensorstore::Result::emplace", "Reconstructs the contained value in-place with the given forwarded arguments."], [1072, 1, 1, "", "tensorstore::Result::emplace", "Reconstructs the contained value in-place with the given forwarded arguments."], [1073, 6, 1, "", "tensorstore::Result::error_type", "Always equal to absl::Status."], [1074, 1, 1, "", "tensorstore::Result::has_value", "Returns true if this represents a success state, false for a failure state."], [1074, 1, 1, "", "tensorstore::Result::ok", "Returns true if this represents a success state, false for a failure state."], [1074, 1, 1, "", "tensorstore::Result::operator bool", "Returns true if this represents a success state, false for a failure state."], [1083, 1, 1, "", "tensorstore::Result::operator!=", "Checks if two Result values are not equal."], [1083, 1, 1, "", "tensorstore::Result::operator!=", "Checks if two Result values are not equal."], [1083, 1, 1, "", "tensorstore::Result::operator!=", "Checks if two Result values are not equal."], [1081, 1, 1, "", "tensorstore::Result::operator*", "Returns a reference to the contained value."], [1081, 1, 1, "", "tensorstore::Result::operator*", "Returns a reference to the contained value."], [1081, 1, 1, "", "tensorstore::Result::operator*", "Returns a reference to the contained value."], [1081, 1, 1, "", "tensorstore::Result::operator*", "Returns a reference to the contained value."], [1075, 1, 1, "", "tensorstore::Result::operator-&gt;", "Returns a pointer to the contained value."], [1075, 1, 1, "", "tensorstore::Result::operator-&gt;", "Returns a pointer to the contained value."], [1076, 1, 1, "", "tensorstore::Result::operator=", "Assigns from an existing result with a convertible value type."], [1076, 1, 1, "", "tensorstore::Result::operator=", "Assigns from an existing result with a convertible value type."], [1077, 1, 1, "", "tensorstore::Result::operator=", "Assigns from an existing result."], [1077, 1, 1, "", "tensorstore::Result::operator=", "Assigns from an existing result."], [1078, 1, 1, "", "tensorstore::Result::operator=", "Assigns from a status object."], [1078, 1, 1, "", "tensorstore::Result::operator=", "Assigns from a status object."], [1079, 1, 1, "", "tensorstore::Result::operator=", "Assigns the contained value from a convertible value."], [1082, 1, 1, "", "tensorstore::Result::operator==", "Compares two results for equality."], [1082, 1, 1, "", "tensorstore::Result::operator==", "Compares two results for equality."], [1082, 1, 1, "", "tensorstore::Result::operator==", "Compares two results for equality."], [1080, 1, 1, "", "tensorstore::Result::operator|", "\"Pipeline\" operator for Result."], [1080, 1, 1, "", "tensorstore::Result::operator|", "\"Pipeline\" operator for Result."], [1084, 6, 1, "", "tensorstore::Result::reference_type", "Equal to T&, or void if T is void."], [1085, 1, 1, "", "tensorstore::Result::status", "Returns the error status."], [1085, 1, 1, "", "tensorstore::Result::status", "Returns the error status."], [1086, 1, 1, "", "tensorstore::Result::value", "Checked value accessor."], [1086, 1, 1, "", "tensorstore::Result::value", "Checked value accessor."], [1086, 1, 1, "", "tensorstore::Result::value", "Checked value accessor."], [1086, 1, 1, "", "tensorstore::Result::value", "Checked value accessor."], [1087, 1, 1, "", "tensorstore::Result::value_or", "Returns the contained value, or default_value if *this is in an error state."], [1087, 1, 1, "", "tensorstore::Result::value_or", "Returns the contained value, or default_value if *this is in an error state."], [1088, 6, 1, "", "tensorstore::Result::value_type", "The type of the contained success value."], [1089, 4, 1, "", "tensorstore::Schema", "Collection of constraints for a TensorStore schema."], [1090, 1, 1, "", "tensorstore::Schema::ApplyIndexTransform", "Transforms a Schema object by a DimExpression."], [1091, 4, 1, "", "tensorstore::Schema::DimensionUnits", "Strongly-typed alias of span<const std::optional<Unit>> for representing dimension unit constraints."], [1092, 4, 1, "", "tensorstore::Schema::FillValue", "Strongly-typed alias of SharedArrayView<const void> for representing a fill_value constraint."], [1093, 1, 1, "", "tensorstore::Schema::FillValue::operator!=", "Compares two fill values for equality."], [1093, 1, 1, "", "tensorstore::Schema::FillValue::operator==", "Compares two fill values for equality."], [1094, 5, 1, "", "tensorstore::Schema::IsOption", "Evaluates to true for option types compatible with Set.  Supported types are:"], [1095, 1, 1, "", "tensorstore::Schema::Override", "Overrides the data type."], [1096, 1, 1, "", "tensorstore::Schema::Override", "Overrides the domain."], [1097, 1, 1, "", "tensorstore::Schema::Set", "Specifies the zero-origin bounds for the domain."], [1098, 1, 1, "", "tensorstore::Schema::Set", "Merges in constraints from an existing schema."], [1101, 1, 1, "", "tensorstore::Schema::Set", "Specifies the data storage layout."], [1102, 1, 1, "", "tensorstore::Schema::Set", "Specifies the data codec."], [1103, 1, 1, "", "tensorstore::Schema::Set", "Specifies the physical quantity corresponding to a single index increment along each dimension."], [1104, 1, 1, "", "tensorstore::Schema::Set", "Specifies the domain."], [1105, 1, 1, "", "tensorstore::Schema::Set", "Specifies the data type."], [1106, 1, 1, "", "tensorstore::Schema::Set", "Specifies the fill value."], [1108, 1, 1, "", "tensorstore::Schema::Set", "Specifies the rank (dynamic_rank indicates unspecified)."], [1099, 4, 1, "", "tensorstore::Schema::Shape", "Strongly-typed alias of span<const Index> for representing a shape constraint."], [1100, 1, 1, "", "tensorstore::Schema::TransformInputSpaceSchema", "Transforms a Schema by an index transform."], [1101, 1, 1, "", "tensorstore::Schema::chunk_layout", "Specifies the data storage layout."], [1102, 1, 1, "", "tensorstore::Schema::codec", "Specifies the data codec."], [1103, 1, 1, "", "tensorstore::Schema::dimension_units", "Specifies the physical quantity corresponding to a single index increment along each dimension."], [1104, 1, 1, "", "tensorstore::Schema::domain", "Specifies the domain."], [1105, 1, 1, "", "tensorstore::Schema::dtype", "Specifies the data type."], [1106, 1, 1, "", "tensorstore::Schema::fill_value", "Specifies the fill value."], [1101, 1, 1, "", "tensorstore::Schema::operator ChunkLayout", "Specifies the data storage layout."], [1102, 1, 1, "", "tensorstore::Schema::operator CodecSpec", "Specifies the data codec."], [1105, 1, 1, "", "tensorstore::Schema::operator DataType", "Specifies the data type."], [1103, 1, 1, "", "tensorstore::Schema::operator DimensionUnits", "Specifies the physical quantity corresponding to a single index increment along each dimension."], [1106, 1, 1, "", "tensorstore::Schema::operator FillValue", "Specifies the fill value."], [1104, 1, 1, "", "tensorstore::Schema::operator IndexDomain&lt;&gt;", "Specifies the domain."], [1108, 1, 1, "", "tensorstore::Schema::operator tensorstore::RankConstraint", "Specifies the rank (dynamic_rank indicates unspecified)."], [1107, 1, 1, "", "tensorstore::Schema::operator|", "\"Pipeline\" operator."], [1108, 1, 1, "", "tensorstore::Schema::rank", "Specifies the rank (dynamic_rank indicates unspecified)."], [1109, 1, 1, "", "tensorstore::SetDeferredResult", "If promise does not already have a result set, sets its result to result and sets promise.result_needed() = false."], [1110, 1, 1, "", "tensorstore::SetPermutation", "Sets permutation to ascending or descending order."], [1111, 1, 1, "", "tensorstore::SetPermutationFromStrides", "Sets permutation to a permutation that matches the dimension order of strides."], [1112, 4, 1, "", "tensorstore::Shared", "Tag type that represents an Element type to be held via an std::shared_ptr rather than a raw, unowned pointer."], [1113, 6, 1, "", "tensorstore::SharedArray", "Convenience alias for an in-memory multi-dimensional array with an arbitrary strided layout with optional shared ownership semantics."], [1113, 3, 2, "p-Element", "tensorstore::SharedArray::Element", "Specifies the optionally const-qualified compile-time element type of the array."], [1113, 7, 2, "p-LayoutContainerKind", "tensorstore::SharedArray::LayoutContainerKind", "Specifies whether the layout (shape, byte strides, and optional origin) is stored by value or by reference."], [1113, 7, 2, "p-OriginKind", "tensorstore::SharedArray::OriginKind", "Specifies whether the origin for each dimension is fixed at 0, or may be offset."], [1113, 7, 2, "p-Rank", "tensorstore::SharedArray::Rank", "Specifies the compile-time rank."], [1114, 6, 1, "", "tensorstore::SharedArrayView", "Convenience alias for a reference to an in-memory multi-dimensional array with an arbitrary strided layout and optional shared ownership semantics."], [1114, 3, 2, "p-Element", "tensorstore::SharedArrayView::Element", "Specifies the compile-time element type."], [1114, 7, 2, "p-Rank", "tensorstore::SharedArrayView::Rank", "Specifies the compile-time rank of the array."], [1115, 6, 1, "", "tensorstore::SharedElementPointer", "Represents a pointer to array data with shared ownership."], [1116, 6, 1, "", "tensorstore::SharedOffsetArray", "Same as SharedArray but supports an arbitrary Array::origin vector."], [1117, 6, 1, "", "tensorstore::SharedOffsetArrayView", "Same as SharedArrayView but supports an arbitrary Array::origin vector."], [1236, 1, 1, "", "tensorstore::SharedSubArray", "Returns a reference to the sub-array obtained by subscripting the first tensorstore::span(indices).size() dimensions of array."], [1236, 2, 2, "p-array", "tensorstore::SharedSubArray::array", "The source array."], [1118, 1, 1, "", "tensorstore::ShiftInterval", "Adds an offset to the min and max bounds of an interval."], [1118, 1, 1, "", "tensorstore::ShiftInterval", "Adds an offset to the min and max bounds of an interval."], [1118, 2, 2, "p-interval", "tensorstore::ShiftInterval::interval", "Original interval to shift."], [1118, 2, 2, "p-max_offset", "tensorstore::ShiftInterval::max_offset", "Amount to add to interval.inclusive_max()."], [1118, 2, 2, "p-min_offset", "tensorstore::ShiftInterval::min_offset", "Amount to add to interval.inclusive_min()."], [1118, 2, 2, "p-offset", "tensorstore::ShiftInterval::offset", "Amount to add to interval.inclusive_min() and interval.inclusive_max()."], [1119, 1, 1, "", "tensorstore::ShiftIntervalBackward", "Subtracts an offset from the min and max bounds of an interval."], [1119, 1, 1, "", "tensorstore::ShiftIntervalBackward", "Subtracts an offset from the min and max bounds of an interval."], [1120, 1, 1, "", "tensorstore::ShiftIntervalTo", "Shifts interval.inclusive_min() to origin."], [1120, 2, 2, "p-interval", "tensorstore::ShiftIntervalTo::interval", "The existing interval to shift."], [1120, 2, 2, "p-origin", "tensorstore::ShiftIntervalTo::origin", "The new inclusive_min value."], [1121, 4, 1, "", "tensorstore::SmallBitSet", "Bit set that fits in a single unsigned integer."], [1122, 6, 1, "", "tensorstore::SmallBitSet::BoolsView", "Mutable view of SmallBitSet bits."], [1123, 6, 1, "", "tensorstore::SmallBitSet::ConstBoolsView", "Immutable view of SmallBitSet bits."], [1124, 1, 1, "", "tensorstore::SmallBitSet::FromBoolRange", "Constructs the set containing bools provided by the range."], [1124, 1, 1, "", "tensorstore::SmallBitSet::FromBoolRange", "Constructs the set containing bools provided by the range."], [1125, 1, 1, "", "tensorstore::SmallBitSet::FromBools", "Constructs from an array of bool values."], [1126, 1, 1, "", "tensorstore::SmallBitSet::FromIndexRange", "Constructs the set containing bits at the indices specified by the range."], [1126, 1, 1, "", "tensorstore::SmallBitSet::FromIndexRange", "Constructs the set containing bits at the indices specified by the range."], [1127, 1, 1, "", "tensorstore::SmallBitSet::FromIndices", "Constructs the set containing bits at the specified indices."], [1128, 1, 1, "", "tensorstore::SmallBitSet::FromUint", "Constructs from an unsigned integer as a bit vector."], [1129, 6, 1, "", "tensorstore::SmallBitSet::IndexView", "Immutable view of SmallBitSet indices."], [1130, 1, 1, "", "tensorstore::SmallBitSet::SmallBitSet", "Constructs a vector with all bits set to value."], [1131, 1, 1, "", "tensorstore::SmallBitSet::SmallBitSet", "Constructs an all-zero vector."], [1132, 6, 1, "", "tensorstore::SmallBitSet::Uint", "N-bit unsigned integer type used to represent the bit set."], [1133, 1, 1, "", "tensorstore::SmallBitSet::UpTo", "Constructs the set [0, k)."], [1134, 1, 1, "", "tensorstore::SmallBitSet::all", "Returns true if all bits are set."], [1135, 1, 1, "", "tensorstore::SmallBitSet::any", "Returns true if the set is not empty."], [1148, 1, 1, "", "tensorstore::SmallBitSet::count", "Returns the static size, N."], [1136, 1, 1, "", "tensorstore::SmallBitSet::none", "Returns true if the set is empty."], [1141, 1, 1, "", "tensorstore::SmallBitSet::operator bool", "Returns true if any bit is set."], [1143, 1, 1, "", "tensorstore::SmallBitSet::operator!=", "Compares two sets for equality."], [1138, 1, 1, "", "tensorstore::SmallBitSet::operator&amp;", "Computes the intersection of two sets."], [1138, 1, 1, "", "tensorstore::SmallBitSet::operator&amp;=", "Computes the intersection of two sets."], [1144, 1, 1, "", "tensorstore::SmallBitSet::operator&lt;&lt;", "Prints to an output stream."], [1137, 1, 1, "", "tensorstore::SmallBitSet::operator=", "Sets all bits to the specified value."], [1143, 1, 1, "", "tensorstore::SmallBitSet::operator==", "Compares two sets for equality."], [1145, 1, 1, "", "tensorstore::SmallBitSet::operator[]", "Returns a reference to an individual bit."], [1145, 1, 1, "", "tensorstore::SmallBitSet::operator[]", "Returns a reference to an individual bit."], [1140, 1, 1, "", "tensorstore::SmallBitSet::operator^", "Computes the exclusive OR of two sets."], [1140, 1, 1, "", "tensorstore::SmallBitSet::operator^=", "Computes the exclusive OR of two sets."], [1139, 1, 1, "", "tensorstore::SmallBitSet::operator|", "Computes the union of two sets."], [1139, 1, 1, "", "tensorstore::SmallBitSet::operator|=", "Computes the union of two sets."], [1142, 1, 1, "", "tensorstore::SmallBitSet::operator~", "Computes the complement of the set."], [1146, 6, 1, "", "tensorstore::SmallBitSet::reference", "Proxy reference type."], [1147, 1, 1, "", "tensorstore::SmallBitSet::set", "Add the specified bit to the set."], [1148, 1, 1, "", "tensorstore::SmallBitSet::size", "Returns the static size, N."], [1149, 1, 1, "", "tensorstore::SmallBitSet::test", "Returns true if the specified bit is present in the set."], [1150, 1, 1, "", "tensorstore::SmallBitSet::to_uint", "Returns the contents of the bitset as an unsigned integer."], [1151, 6, 1, "", "tensorstore::SmallBitSet::value_type", "Container value type."], [1152, 8, 1, "", "tensorstore::SourceDataReferenceRestriction", "Specifies restrictions on how references to the source array/source TensorStore may be used by write operations."], [1152, 9, 1, "e-can_reference_source_data_indefinitely", "tensorstore::SourceDataReferenceRestriction::can_reference_source_data_indefinitely", "References to the source data may be retained indefinitely, even after the write is committed.  The source data must not be modified until all references are released."], [1152, 9, 1, "e-cannot_reference_source_data", "tensorstore::SourceDataReferenceRestriction::cannot_reference_source_data", "References to the source data must be released as soon as possible, which may result in additional copies."], [1153, 6, 1, "", "tensorstore::SpanStaticExtent", "ptrdiff_t-valued metafunction with a static constexpr ptrdiff_t value member that is equal to the common static extent of X0, Xs... if X0, Xs... are all span-compatible types with the same static extent."], [1154, 4, 1, "", "tensorstore::Spec", "Specifies the parameters necessary to open or create a TensorStore."], [1155, 1, 1, "", "tensorstore::Spec::ApplyIndexTransform", "Applies a function that operates on an IndexTransform to a Spec."], [1156, 1, 1, "", "tensorstore::Spec::ApplyIndexTransform", "Applies an index transform to a Spec."], [1156, 2, 2, "p-spec", "tensorstore::Spec::ApplyIndexTransform::spec", "The spec to transform."], [1156, 2, 2, "p-transform", "tensorstore::Spec::ApplyIndexTransform::transform", "Index transform to apply."], [1157, 1, 1, "", "tensorstore::Spec::BindContext", "Binds any unbound context resources using the specified context.  Any already-bound context resources remain unmodified."], [1158, 1, 1, "", "tensorstore::Spec::GetTransformForIndexingOperation", "Returns a transform that may be used for apply a DimExpression."], [1159, 1, 1, "", "tensorstore::Spec::Set", "Applies the specified options in place."], [1159, 1, 1, "", "tensorstore::Spec::Set", "Applies the specified options in place."], [1160, 1, 1, "", "tensorstore::Spec::Spec", "Constructs an invalid specification."], [1161, 1, 1, "", "tensorstore::Spec::StripContext", "Replaces any context resources with a default context resource spec."], [1162, 1, 1, "", "tensorstore::Spec::UnbindContext", "Unbinds any bound context resources, replacing them with context resource specs that may be used to recreate the context resources.  Any already-unbound context resources remain unmodified."], [1163, 1, 1, "", "tensorstore::Spec::base", "Returns the underlying Spec, if this is an adapter."], [1164, 1, 1, "", "tensorstore::Spec::chunk_layout", "Returns the effective chunk layout, which includes all known information, propagated to the transformed space."], [1165, 1, 1, "", "tensorstore::Spec::codec", "Returns the effective codec, propagated to the transformed space."], [1166, 1, 1, "", "tensorstore::Spec::context_binding_state", "Indicates the context binding state of the spec."], [1167, 1, 1, "", "tensorstore::Spec::dimension_units", "Returns the effective dimension units, propagated to the transformed space."], [1168, 1, 1, "", "tensorstore::Spec::domain", "Returns the effective domain, based on the schema constraints as well as any driver-specific constraints.  If the domain cannot be determined, returns a null index domain."], [1169, 1, 1, "", "tensorstore::Spec::dtype", "Returns the data type."], [1170, 1, 1, "", "tensorstore::Spec::fill_value", "Returns the effective fill value, propagated to the transformed space."], [1171, 1, 1, "", "tensorstore::Spec::kvstore", "Returns the associated key-value store used as the underlying storage.  If unspecified or not applicable, returns a null (invalid) spec."], [1172, 1, 1, "", "tensorstore::Spec::open_mode", "Returns the mode with which the driver will be opened."], [1173, 1, 1, "", "tensorstore::Spec::operator!=", "Compares for equality via JSON representation, except that bound context resources are compared by identity."], [1173, 1, 1, "", "tensorstore::Spec::operator==", "Compares for equality via JSON representation, except that bound context resources are compared by identity."], [1174, 1, 1, "", "tensorstore::Spec::rank", "Returns the rank of the TensorStore, or dynamic_rank if unknown."], [1175, 1, 1, "", "tensorstore::Spec::schema", "Returns the effective schema, which includes all known information, propagated to the transformed space."], [1176, 1, 1, "", "tensorstore::Spec::transform", "Returns the transform applied on top of the driver."], [1177, 1, 1, "", "tensorstore::Spec::valid", "Returns true if this is a valid spec."], [1178, 4, 1, "", "tensorstore::SpecConvertOptions", "Options for converting an existing Spec."], [1179, 4, 1, "", "tensorstore::SpecOptions", "Options for mutating Spec objects."], [1180, 4, 1, "", "tensorstore::SpecRequestOptions", "Options for requesting a Spec from an open TensorStore."], [1181, 1, 1, "", "tensorstore::StaticCast", "Type-erasure-aware conversion of source to the specified Target type."], [1181, 7, 2, "p-Checking", "tensorstore::StaticCast::Checking", "Specifies whether to validate the cast at run time."], [1181, 3, 2, "p-Target", "tensorstore::StaticCast::Target", "Target type."], [1181, 2, 2, "p-source", "tensorstore::StaticCast::source", "Source value."], [1182, 6, 1, "", "tensorstore::StaticCastResultType", "Evaluates to the result of casting a value of type SourceRef&& to Target with a checking mode of Checking."], [1183, 4, 1, "", "tensorstore::StaticDataType", "Empty/monostate type that represents a statically known element type."], [1184, 1, 1, "", "tensorstore::StaticDataTypeCast", "Casts source to have a static data type of TargetElement."], [1184, 7, 2, "p-Checking", "tensorstore::StaticDataTypeCast::Checking", "Specifies whether the cast is checked or unchecked."], [1184, 3, 2, "p-TargetElement", "tensorstore::StaticDataTypeCast::TargetElement", "Target element type."], [1184, 2, 2, "p-source", "tensorstore::StaticDataTypeCast::source", "Source value."], [1185, 6, 1, "", "tensorstore::StaticOrDynamicRank", "Template alias that evaluates to the type used for representing a static or dynamic rank."], [1186, 6, 1, "", "tensorstore::StaticRank", "Template alias that evaluates to the type used for representing a static rank."], [1187, 1, 1, "", "tensorstore::StaticRankCast", "Casts source to have a static rank of TargetRank."], [1187, 7, 2, "p-Checking", "tensorstore::StaticRankCast::Checking", "Specifies whether the cast is checked or unchecked."], [1187, 7, 2, "p-TargetRank", "tensorstore::StaticRankCast::TargetRank", "Target rank value."], [1187, 2, 2, "p-source", "tensorstore::StaticRankCast::source", "Source value."], [1188, 4, 1, "", "tensorstore::StorageGeneration", "Represents a generation identifier associated with a stored object."], [1189, 1, 1, "", "tensorstore::StorageGeneration::DebugString", "Returns a debug representation of the storage generation."], [1190, 1, 1, "", "tensorstore::StorageGeneration::EqualOrUnspecified", "Checks if if_equal is unspecified, or equal to generation."], [1191, 1, 1, "", "tensorstore::StorageGeneration::Invalid", "Returns the invalid generation value guaranteed not to equal any valid generation."], [1192, 1, 1, "", "tensorstore::StorageGeneration::IsClean", "Returns true if generation represents a \"clean\" state without any uncommitted modifications within a transaction."], [1193, 1, 1, "", "tensorstore::StorageGeneration::IsNoValue", "Returns true if generation is equal to the special NoValue() generation."], [1194, 1, 1, "", "tensorstore::StorageGeneration::IsUnknown", "Returns true if generation is equal to the special StorageGeneration::Unknown() value, i.e. an empty string."], [1195, 1, 1, "", "tensorstore::StorageGeneration::IsValid", "Check if the generation is valid, i.e. not derived from Invalid()."], [1196, 1, 1, "", "tensorstore::StorageGeneration::NoValue", "Returns the special generation value that corresponds to an object not being present."], [1197, 1, 1, "", "tensorstore::StorageGeneration::NotEqualOrUnspecified", "Checks if if_not_equal is unspecified, or not equal to generation."], [1198, 1, 1, "", "tensorstore::StorageGeneration::Unknown", "Returns the special generation value that indicates the StorageGeneration is unspecified."], [1199, 1, 1, "", "tensorstore::StorageGeneration::operator bool", "Indicates whether a generation is specified."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator!=", "Checks if two generations are equivalent."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator!=", "Checks if two generations are equivalent."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator!=", "Checks if two generations are equivalent."], [1201, 1, 1, "", "tensorstore::StorageGeneration::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator==", "Checks if two generations are equivalent."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator==", "Checks if two generations are equivalent."], [1200, 1, 1, "", "tensorstore::StorageGeneration::operator==", "Checks if two generations are equivalent."], [1202, 5, 1, "", "tensorstore::StorageGeneration::value", "A storage generation is encoded as a variable-length that specifies an optional \"base generation\" and information about uncommitted modifications made within a transaction."], [1203, 1, 1, "", "tensorstore::StrAppend", "Appends a string representation of arg... to *result."], [1204, 1, 1, "", "tensorstore::StrCat", "Concatenates the string representation of arg... and returns the result."], [1205, 4, 1, "", "tensorstore::StridedLayout", "A StridedLayout specifies the layout of a multi-dimensional array in terms of an origin vector, a shape vector, and a byte_strides vector, all of length equal to the rank of the multi-dimensional array.  The origin and shape vectors specify the domain of the array, and the byte_strides vector specifies the offset in bytes between consecutive elements in each dimension."], [1205, 7, 2, "p-CKind", "tensorstore::StridedLayout::CKind", "Either container (for value semantics) or view (for unowned view semantics)."], [1206, 6, 1, "", "tensorstore::StridedLayout::MaybeConstIndex", "Conditionally const-qualified element type of shape vector."], [1207, 6, 1, "", "tensorstore::StridedLayout::MaybeConstOriginIndex", "Conditionally const-qualified element type of origin vector."], [1205, 7, 2, "p-OriginKind", "tensorstore::StridedLayout::OriginKind", "Either zero_origin (to indicate a constant all-zero origin vector) or offset_origin (to allow an arbitrary origin vector)."], [1205, 7, 2, "p-Rank", "tensorstore::StridedLayout::Rank", "The compile time rank (must be >= 0), dynamic_rank to specify a rank at run time, or if CKind == container, dynamic_rank(n) for n >= 0 to specify a rank at run time with inline storage for ranks <= n."], [1208, 6, 1, "", "tensorstore::StridedLayout::RankType", "Representation of static or dynamic rank value."], [1209, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from a layout with a compatible static_rank and array_origin_kind."], [1210, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs a default layout of rank equal to static_rank (if static_rank >= 0) or rank 0 (if static_rank == dynamic_rank)."], [1211, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified domain and byte_strides."], [1212, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs a contiguous layout with the specified domain and element stride."], [1212, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs a contiguous layout with the specified domain and element stride."], [1212, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs a contiguous layout with the specified domain and element stride."], [1213, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified origin, shape and byte_strides."], [1213, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified origin, shape and byte_strides."], [1214, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs an uninitialized layout of the specified rank."], [1215, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified rank and origin/shape/byte_strides arrays."], [1215, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified rank and origin/shape/byte_strides arrays."], [1216, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified shape and byte_strides."], [1216, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Constructs from the specified shape and byte_strides."], [1217, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Unchecked conversion."], [1217, 1, 1, "", "tensorstore::StridedLayout::StridedLayout", "Unchecked conversion."], [1215, 2, 2, "p-byte_strides", "tensorstore::StridedLayout::StridedLayout::byte_strides", "Pointer to array of size rank specifying the byte_strides."], [1215, 2, 2, "p-origin", "tensorstore::StridedLayout::StridedLayout::origin", "Pointer to array of size rank specifying the origin."], [1215, 2, 2, "p-rank", "tensorstore::StridedLayout::StridedLayout::rank", "Number of dimensions in the layout."], [1215, 2, 2, "p-shape", "tensorstore::StridedLayout::StridedLayout::shape", "Pointer to array of size rank specifying the shape."], [1218, 5, 1, "", "tensorstore::StridedLayout::array_origin_kind", "Origin kind of the layout."], [1219, 1, 1, "", "tensorstore::StridedLayout::byte_strides", "Returns the byte strides vector of size rank()."], [1219, 1, 1, "", "tensorstore::StridedLayout::byte_strides", "Returns the byte strides vector of size rank()."], [1220, 5, 1, "", "tensorstore::StridedLayout::container_kind", "Indicates whether this represents a layout by value (container) or by unowned reference (view)."], [1221, 1, 1, "", "tensorstore::StridedLayout::domain", "Returns the domain of the layout."], [1222, 1, 1, "", "tensorstore::StridedLayout::num_elements", "Returns the total number of elements (product of extents in shape())."], [1226, 1, 1, "", "tensorstore::StridedLayout::operator!=", "Compares the domain and byte_strides."], [1224, 1, 1, "", "tensorstore::StridedLayout::operator()", "Returns (*this)({index...}), or 0 if index is an empty pack."], [1225, 1, 1, "", "tensorstore::StridedLayout::operator()", "Returns the byte offset corresponding to a list of rank() indices into the layout."], [1225, 1, 1, "", "tensorstore::StridedLayout::operator()", "Returns the byte offset corresponding to a list of rank() indices into the layout."], [1225, 2, 2, "p-indices", "tensorstore::StridedLayout::operator()::indices", "A list of rank() indices."], [1225, 2, 2, "p-indices", "tensorstore::StridedLayout::operator()::indices", "A list of rank() indices."], [1227, 1, 1, "", "tensorstore::StridedLayout::operator&lt;&lt;", "Writes a string representation to os."], [1223, 1, 1, "", "tensorstore::StridedLayout::operator=", "Assigns from a layout with a compatible static_rank and array_origin_kind."], [1226, 1, 1, "", "tensorstore::StridedLayout::operator==", "Compares the domain and byte_strides."], [1228, 1, 1, "", "tensorstore::StridedLayout::operator[]", "Returns the byte offset corresponding to a list of N <= rank() indices into the layout."], [1228, 1, 1, "", "tensorstore::StridedLayout::operator[]", "Returns the byte offset corresponding to a list of N <= rank() indices into the layout."], [1228, 2, 2, "p-indices", "tensorstore::StridedLayout::operator[]::indices", "A list of N <= rank() indices."], [1228, 2, 2, "p-indices", "tensorstore::StridedLayout::operator[]::indices", "A list of N <= rank() indices."], [1229, 1, 1, "", "tensorstore::StridedLayout::origin", "Returns the origin vector of size rank()."], [1229, 1, 1, "", "tensorstore::StridedLayout::origin", "Returns the origin vector of size rank()."], [1230, 1, 1, "", "tensorstore::StridedLayout::origin_byte_offset", "Returns the byte offset of the origin."], [1231, 1, 1, "", "tensorstore::StridedLayout::rank", "Returns the number of dimensions in the layout."], [1232, 1, 1, "", "tensorstore::StridedLayout::set_rank", "Sets the rank to the specified value."], [1233, 1, 1, "", "tensorstore::StridedLayout::shape", "Returns the shape vector of size rank()."], [1233, 1, 1, "", "tensorstore::StridedLayout::shape", "Returns the shape vector of size rank()."], [1234, 5, 1, "", "tensorstore::StridedLayout::static_rank", "Rank of the layout, or dynamic_rank if specified at run time."], [1235, 6, 1, "", "tensorstore::StridedLayoutView", "Specifies an unowned strided layout."], [1236, 1, 1, "", "tensorstore::SubArray", "Returns a reference to the sub-array obtained by subscripting the first tensorstore::span(indices).size() dimensions of array."], [1236, 7, 2, "p-LayoutCKind", "tensorstore::SubArray::LayoutCKind", "Specifies whether to return a copy or view of the sub-array layout."], [1236, 2, 2, "p-array", "tensorstore::SubArray::array", "The source array."], [1236, 2, 2, "p-indices", "tensorstore::SubArray::indices", "A span-compatible index array."], [1237, 5, 1, "", "tensorstore::SubArrayStaticRank", "Metafunction that computes the static rank of the sub-array obtained by indexing an array of the given Rank with an index vector of type Indices."], [1238, 1, 1, "", "tensorstore::SubBoxView", "Returns a view of the sub-box corresponding to the specified dimension range."], [1238, 2, 2, "p-begin", "tensorstore::SubBoxView::begin", "Inclusive start dimension of the sub-box."], [1238, 2, 2, "p-box", "tensorstore::SubBoxView::box", "The existing box from which to extract the sub-box."], [1238, 2, 2, "p-end", "tensorstore::SubBoxView::end", "Exclusive end dimension of the sub-box. The default value of -1 is treated the same as box.rank()."], [1239, 6, 1, "", "tensorstore::TensorReader", "Read-only TensorStore alias."], [1240, 4, 1, "", "tensorstore::TensorStore", "Open handle to an asynchronous multi-dimensional array."], [1241, 1, 1, "", "tensorstore::TensorStore::ApplyIndexTransform", "Applies a function that operates on an IndexTransform to a TensorStore."], [1242, 1, 1, "", "tensorstore::TensorStore::ApplyTensorStoreTransaction", "Changes to a new transaction."], [1243, 6, 1, "", "tensorstore::TensorStore::DataType", "Static or dynamic data type representation."], [1244, 6, 1, "", "tensorstore::TensorStore::Element", "Element type."], [1240, 3, 2, "p-ElementType", "tensorstore::TensorStore::ElementType", "Compile-time element type constraint."], [1240, 7, 2, "p-Mode", "tensorstore::TensorStore::Mode", "Compile-time read/write mode constraint."], [1240, 7, 2, "p-Rank", "tensorstore::TensorStore::Rank", "Compile-time rank constraint."], [1245, 6, 1, "", "tensorstore::TensorStore::RankType", "Static or dynamic rank type representation."], [1246, 1, 1, "", "tensorstore::TensorStore::TensorStore", "Constructs from a compatible existing TensorStore."], [1247, 1, 1, "", "tensorstore::TensorStore::TensorStore", "Constructs an invalid TensorStore."], [1248, 1, 1, "", "tensorstore::TensorStore::TensorStore", "Unchecked conversion from an existing TensorStore."], [1249, 1, 1, "", "tensorstore::TensorStore::base", "Returns the underlying TensorStore, if this is an adapter."], [1250, 1, 1, "", "tensorstore::TensorStore::chunk_layout", "Returns the storage layout of this TensorStore, which can be used to determine efficient read/write access patterns."], [1251, 1, 1, "", "tensorstore::TensorStore::codec", "Returns the codec spec."], [1252, 1, 1, "", "tensorstore::TensorStore::dimension_units", "Returns the dimension units."], [1253, 1, 1, "", "tensorstore::TensorStore::domain", "Returns the domain."], [1254, 1, 1, "", "tensorstore::TensorStore::dtype", "Returns the data type."], [1255, 1, 1, "", "tensorstore::TensorStore::fill_value", "Returns the fill value."], [1256, 1, 1, "", "tensorstore::TensorStore::kvstore", "Returns the associated key-value store."], [1257, 1, 1, "", "tensorstore::TensorStore::operator=", "Assigns from an existing implicitly compatible TensorStore."], [1258, 1, 1, "", "tensorstore::TensorStore::operator|", "\"Pipeline\" operator."], [1258, 1, 1, "", "tensorstore::TensorStore::operator|", "\"Pipeline\" operator."], [1259, 1, 1, "", "tensorstore::TensorStore::rank", "Returns the rank."], [1260, 1, 1, "", "tensorstore::TensorStore::read_write_mode", "Returns the read-write mode."], [1261, 1, 1, "", "tensorstore::TensorStore::schema", "Returns the schema for this TensorStore."], [1262, 1, 1, "", "tensorstore::TensorStore::spec", "Returns a Spec that may be used to open/recreate this TensorStore."], [1262, 1, 1, "", "tensorstore::TensorStore::spec", "Returns a Spec that may be used to open/recreate this TensorStore."], [1262, 2, 2, "p-option", "tensorstore::TensorStore::spec::option", "Any option compatible with SpecRequestOptions."], [1263, 5, 1, "", "tensorstore::TensorStore::static_mode", "Compile-time read-write mode, or ReadWriteMode::dynamic if the mode is determined at run time."], [1264, 5, 1, "", "tensorstore::TensorStore::static_rank", "Compile-time rank, or dynamic_rank if the rank is determined at run time."], [1265, 1, 1, "", "tensorstore::TensorStore::transaction", "Returns the associated transaction."], [1266, 1, 1, "", "tensorstore::TensorStore::valid", "Returns true if this is a valid handle to a TensorStore."], [1267, 6, 1, "", "tensorstore::TensorWriter", "Write-only TensorStore alias."], [1268, 4, 1, "", "tensorstore::TimestampedStorageGeneration", "Combines a local timestamp with a StorageGeneration indicating the local time for which the generation is known to be current."], [1269, 1, 1, "", "tensorstore::TimestampedStorageGeneration::TimestampedStorageGeneration", "Constructs with an unspecified generation and infinite past timestamp."], [1270, 1, 1, "", "tensorstore::TimestampedStorageGeneration::TimestampedStorageGeneration", "Constructs from the specified generation and time."], [1271, 1, 1, "", "tensorstore::TimestampedStorageGeneration::Unconditional", "Returns a timestamped generation with unspecified generation and infinite future timestamp."], [1272, 5, 1, "", "tensorstore::TimestampedStorageGeneration::generation", "Storage generation."], [1273, 1, 1, "", "tensorstore::TimestampedStorageGeneration::operator!=", "Compares two timestamped generations for equality."], [1274, 1, 1, "", "tensorstore::TimestampedStorageGeneration::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1273, 1, 1, "", "tensorstore::TimestampedStorageGeneration::operator==", "Compares two timestamped generations for equality."], [1275, 5, 1, "", "tensorstore::TimestampedStorageGeneration::time", "Timestamp associated with generation."], [1276, 1, 1, "", "tensorstore::TimestampedStorageGeneration::unconditional", "Checks if time is equal to the infinite future value."], [1277, 1, 1, "", "tensorstore::ToString", "Returns a string representation of array (same representation as AppendToString)."], [1278, 4, 1, "", "tensorstore::Transaction", "Shared handle to a transaction."], [1279, 1, 1, "", "tensorstore::Transaction::Abort", "Aborts the transaction (has no effect if already aborted or committed)."], [1280, 1, 1, "", "tensorstore::Transaction::Barrier", "Creates a write barrier.  Guarantees that subsequent writes are not committed before any prior write."], [1281, 1, 1, "", "tensorstore::Transaction::Commit", "Synchronously commits.  Blocks until the commit completes successfully or with an error."], [1282, 1, 1, "", "tensorstore::Transaction::CommitAsync", "Commits the transaction (has no effect if already committed or aborted)."], [1283, 1, 1, "", "tensorstore::Transaction::Transaction", "Creates a new transaction with the specified mode."], [1284, 1, 1, "", "tensorstore::Transaction::Transaction", "Creates a null transaction."], [1285, 1, 1, "", "tensorstore::Transaction::aborted", "Returns true if the transaction has been aborted."], [1286, 1, 1, "", "tensorstore::Transaction::atomic", "Returns true if this transaction guarantees atomicity."], [1287, 1, 1, "", "tensorstore::Transaction::commit_started", "Returns true if the transaction commit has started."], [1288, 1, 1, "", "tensorstore::Transaction::future", "Returns a Future that becomes ready when the transaction is committed or aborted.  Forcing the returned Future is equivalent to calling CommitAsync."], [1289, 1, 1, "", "tensorstore::Transaction::mode", "Returns the transaction mode."], [1290, 4, 1, "", "tensorstore::Transaction::no_transaction_t", "Special type that indicates a null transaction."], [1291, 1, 1, "", "tensorstore::Transaction::no_transaction_t::operator TransactionMode", "Implicitly converts to TransactionMode::no_transaction_mode."], [1292, 1, 1, "", "tensorstore::Transaction::operator!=", "Checks if a and b refer to the same transaction state, or are both null."], [1292, 1, 1, "", "tensorstore::Transaction::operator!=", "Checks if a and b refer to the same transaction state, or are both null."], [1292, 1, 1, "", "tensorstore::Transaction::operator!=", "Checks if a and b refer to the same transaction state, or are both null."], [1292, 1, 1, "", "tensorstore::Transaction::operator==", "Checks if a and b refer to the same transaction state, or are both null."], [1292, 1, 1, "", "tensorstore::Transaction::operator==", "Checks if a and b refer to the same transaction state, or are both null."], [1292, 1, 1, "", "tensorstore::Transaction::operator==", "Checks if a and b refer to the same transaction state, or are both null."], [1293, 1, 1, "", "tensorstore::Transaction::total_bytes", "Returns an estimate of the number of bytes of memory currently consumed by the transaction."], [1294, 8, 1, "", "tensorstore::TransactionMode", "Specifies the transaction mode."], [1294, 9, 1, "e-atomic_isolated", "tensorstore::TransactionMode::atomic_isolated", "In addition to the properties of isolated, writes are guaranteed to be committed atomically.  If an operation cannot satisfy this guarantee, it returns an error (immediately while the transaction is being prepared)."], [1294, 9, 1, "e-isolated", "tensorstore::TransactionMode::isolated", "Writes are isolated and will not be visible to other readers until the transaction is committed."], [1294, 9, 1, "e-no_transaction_mode", "tensorstore::TransactionMode::no_transaction_mode", "Indicates non-transactional semantics.  This is the default for operations performed without an explicit transaction."], [1294, 9, 1, "e-repeatable_read", "tensorstore::TransactionMode::repeatable_read", "Repeated reads are guaranteed to return the same result.  If a concurrent change occurs, the transaction will fail to commit.  Whether concurrent changes lead to transaction failure prior to commit is unspecified."], [1295, 4, 1, "", "tensorstore::TransactionalOpenOptions", "Options for opening a Spec with optional transaction and optional batch."], [1296, 1, 1, "", "tensorstore::TransformArray", "Returns a strided array that represents the result of applying transform to array."], [1296, 7, 2, "p-OriginKind", "tensorstore::TransformArray::OriginKind", "If equal to offset_origin (the default), the returned array will have an offset_origin and retain the resolved input origin. If equal to zero_origin, the returned array will have a zero_origin."], [1296, 2, 2, "p-array", "tensorstore::TransformArray::array", "The existing array to transform with transform."], [1296, 2, 2, "p-constraints", "tensorstore::TransformArray::constraints", "Specifies constraints on the returned array, as the sum of an optional MustAllocateConstraint and an optional IterationConstraints value."], [1296, 2, 2, "p-transform", "tensorstore::TransformArray::transform", "The index transform to apply to array."], [1297, 4, 1, "", "tensorstore::TransformArrayConstraints", "Specifies constraints on the array returned from TransformArray."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1298, 1, 1, "", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "Constructs from various combinations of constraints."], [1299, 1, 1, "", "tensorstore::TransformArrayConstraints::allocate_constraint", "Returns the allocation constraint."], [1300, 1, 1, "", "tensorstore::TransformArrayConstraints::iteration_constraints", "Returns the iteration constraints."], [1301, 1, 1, "", "tensorstore::TransformArrayConstraints::operator!=", "Compares two constraints."], [1301, 1, 1, "", "tensorstore::TransformArrayConstraints::operator==", "Compares two constraints."], [1302, 1, 1, "", "tensorstore::TransformArrayConstraints::order_constraint", "Returns the order constraint."], [1303, 1, 1, "", "tensorstore::TransformArrayConstraints::repeated_elements_constraint", "Returns the repeated elements constraint."], [1304, 1, 1, "", "tensorstore::TransformInputDimensionUnits", "Converts dimension units for the input space to dimension units for the output space."], [1304, 2, 2, "p-input_units", "tensorstore::TransformInputDimensionUnits::input_units", "Units for each input dimension of transform."], [1304, 2, 2, "p-transform", "tensorstore::TransformInputDimensionUnits::transform", "Index transform."], [1305, 1, 1, "", "tensorstore::TransformOutputDimensionUnits", "Converts dimension units for the output space to dimension units for the input space."], [1305, 2, 2, "p-output_units", "tensorstore::TransformOutputDimensionUnits::output_units", "Units for each output dimension of transform."], [1305, 2, 2, "p-transform", "tensorstore::TransformOutputDimensionUnits::transform", "Index transform."], [1306, 4, 1, "", "tensorstore::TransformedArray", "View through an index transform of an in-memory array."], [1307, 6, 1, "", "tensorstore::TransformedArray::DataType", "Data type representation."], [1308, 6, 1, "", "tensorstore::TransformedArray::Element", "Element type."], [1309, 6, 1, "", "tensorstore::TransformedArray::ElementPointer", "Element pointer type."], [1310, 6, 1, "", "tensorstore::TransformedArray::ElementTag", "Element tag type of the array."], [1306, 3, 2, "p-ElementTagType", "tensorstore::TransformedArray::ElementTagType", "Must satisfy IsElementTag."], [1306, 7, 2, "p-LayoutCKind", "tensorstore::TransformedArray::LayoutCKind", "Either container or view."], [1311, 1, 1, "", "tensorstore::TransformedArray::Materialize", "Materializes the transformed array as a strided array."], [1311, 7, 2, "p-OriginKind", "tensorstore::TransformedArray::Materialize::OriginKind", "Specifies whether to retain the origin offset."], [1311, 2, 2, "p-constraints", "tensorstore::TransformedArray::Materialize::constraints", "If constraints.allocate_constraint() == may_allocate, the returned array may refer to element_pointer."], [1312, 6, 1, "", "tensorstore::TransformedArray::Pointer", "Data pointer type."], [1306, 7, 2, "p-Rank", "tensorstore::TransformedArray::Rank", "The static rank of the transformed array."], [1313, 6, 1, "", "tensorstore::TransformedArray::RankType", "Static or dynamic rank representation type."], [1314, 6, 1, "", "tensorstore::TransformedArray::RebindTransform", "Alias that evaluates to the TransformedArray type with the same ElementTag but with the IndexTransform::static_input_rank of OtherTransform, and a layout container kind of container."], [1314, 3, 2, "p-OtherTransform", "tensorstore::TransformedArray::RebindTransform::OtherTransform", "The new transform type."], [1315, 6, 1, "", "tensorstore::TransformedArray::Transform", "Index transform type."], [1316, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Constructs a transformed array from a regular strided Array."], [1317, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Copy or move constructs from another normalized transformed array."], [1318, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Constructs an invalid transformed array."], [1319, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Constructs a normalized transformed array from an element pointer and an index transform."], [1320, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Unchecked conversion from an existing TransformedArray."], [1321, 1, 1, "", "tensorstore::TransformedArray::TransformedArray", "Unchecked conversion from an existing Array."], [1322, 1, 1, "", "tensorstore::TransformedArray::base_array", "Returns a fake \"base array\" such that this transformed array is equivalent to applying transform() to base_array()."], [1323, 1, 1, "", "tensorstore::TransformedArray::data", "Returns a raw pointer to the first element of the array."], [1324, 1, 1, "", "tensorstore::TransformedArray::domain", "Returns the domain of the transformed array."], [1325, 1, 1, "", "tensorstore::TransformedArray::dtype", "Returns the element representation."], [1326, 1, 1, "", "tensorstore::TransformedArray::element_pointer", "Returns the base element pointer."], [1326, 1, 1, "", "tensorstore::TransformedArray::element_pointer", "Returns the base element pointer."], [1326, 1, 1, "", "tensorstore::TransformedArray::element_pointer", "Returns the base element pointer."], [1327, 1, 1, "", "tensorstore::TransformedArray::labels", "Returns the dimension label vector."], [1328, 5, 1, "", "tensorstore::TransformedArray::layout_container_kind", "Layout container kind."], [1329, 1, 1, "", "tensorstore::TransformedArray::operator=", "Copy or move assigns from another Array."], [1330, 1, 1, "", "tensorstore::TransformedArray::operator=", "Copy or move assigns from another normalized transformed array."], [1331, 1, 1, "", "tensorstore::TransformedArray::operator|", "\"Pipeline\" operator."], [1331, 1, 1, "", "tensorstore::TransformedArray::operator|", "\"Pipeline\" operator."], [1332, 1, 1, "", "tensorstore::TransformedArray::origin", "Returns the origin vector of the transformed array."], [1333, 1, 1, "", "tensorstore::TransformedArray::rank", "Returns the rank of the transformed array."], [1334, 1, 1, "", "tensorstore::TransformedArray::shape", "Returns the shape vector of the transformed array."], [1335, 5, 1, "", "tensorstore::TransformedArray::static_rank", "Compile-time rank constraint, or dynamic_rank if the rank is determined at run time."], [1336, 1, 1, "", "tensorstore::TransformedArray::transform", "Returns the transform."], [1336, 1, 1, "", "tensorstore::TransformedArray::transform", "Returns the transform."], [1336, 1, 1, "", "tensorstore::TransformedArray::transform", "Returns the transform."], [1337, 6, 1, "", "tensorstore::TransformedArrayTypeFromArray", "Alias that evaluates to the transformed array type corresponding to a strided array type."], [1338, 6, 1, "", "tensorstore::TransformedArrayTypeFromArrayAndTransform", "Alias that evaluates to the transformed array type corresponding to the normalized combination of a strided array type and an index transform."], [1339, 6, 1, "", "tensorstore::TransformedArrayView", "Alias for a TransformedArray where the IndexTransform is stored by unowned reference."], [1340, 6, 1, "", "tensorstore::TransformedSharedArray", "Alias for a TransformedArray where the data pointer is stored as an std::shared_ptr."], [1341, 6, 1, "", "tensorstore::TransformedSharedArrayView", "Alias for a TransformedArray where the data pointer is stored as an std::shared_ptr and the IndexTransform is stored by unowned reference."], [1342, 1, 1, "", "tensorstore::TryConvertToArray", "Returns a view of the array as a regular strided Array."], [1342, 1, 1, "", "tensorstore::TryConvertToArray", "Returns a view of the array as a regular strided Array."], [1342, 1, 1, "", "tensorstore::TryConvertToArray", "Returns a view of the array as a regular strided Array."], [1342, 7, 2, "p-OriginKind", "tensorstore::TryConvertToArray::OriginKind", "Specifies whether to retain the origin offset."], [1343, 1, 1, "", "tensorstore::UnbroadcastArray", "Converts zero-stride dimensions (with non-zero size) to have an extent of 1, removes leading singleton dimensions, and translates the origin to 0."], [1344, 1, 1, "", "tensorstore::UnbroadcastArrayPreserveRank", "Converts zero-stride dimensions (with non-zero size) to have an extent of 1, and translates the origin to 0."], [1345, 4, 1, "", "tensorstore::Unit", "Represents a physical unit, such as \"nm\" or \"3nm\" or \"3 m/s\"."], [1346, 1, 1, "", "tensorstore::Unit::AbslStringify", "Abseil formatting support."], [1347, 1, 1, "", "tensorstore::Unit::Unit", "Constructs a unit with an empty string as the base unit and a multiplier of 1."], [1348, 1, 1, "", "tensorstore::Unit::Unit", "Constructs from a multiplier and base unit."], [1349, 1, 1, "", "tensorstore::Unit::Unit", "Parses a combined multiplier and base unit from unit."], [1349, 1, 1, "", "tensorstore::Unit::Unit", "Parses a combined multiplier and base unit from unit."], [1349, 1, 1, "", "tensorstore::Unit::Unit", "Parses a combined multiplier and base unit from unit."], [1350, 5, 1, "", "tensorstore::Unit::base_unit", "Base unit specification."], [1351, 5, 1, "", "tensorstore::Unit::multiplier", "Multiplier relative to the base_unit."], [1353, 1, 1, "", "tensorstore::Unit::operator!=", "Compares two units for equality."], [1354, 1, 1, "", "tensorstore::Unit::operator*", "Multiplies the multiplier."], [1354, 1, 1, "", "tensorstore::Unit::operator*", "Multiplies the multiplier."], [1354, 1, 1, "", "tensorstore::Unit::operator*=", "Multiplies the multiplier."], [1352, 1, 1, "", "tensorstore::Unit::operator/", "Divides the multiplier."], [1352, 1, 1, "", "tensorstore::Unit::operator/=", "Divides the multiplier."], [1355, 1, 1, "", "tensorstore::Unit::operator&lt;&lt;", "Prints a string representation to an std::ostream."], [1353, 1, 1, "", "tensorstore::Unit::operator==", "Compares two units for equality."], [1356, 1, 1, "", "tensorstore::Unit::to_string", "Converts to the string representation."], [1357, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary TransformedArray to a TransformedSharedArray."], [1357, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary TransformedArray to a TransformedSharedArray."], [1357, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary TransformedArray to a TransformedSharedArray."], [1358, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary array to a SharedArray."], [1358, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary array to a SharedArray."], [1358, 1, 1, "", "tensorstore::UnownedToShared", "Converts an arbitrary array to a SharedArray."], [1359, 1, 1, "", "tensorstore::UnownedToShared", "Converts a non-Shared ElementPointer to a SharedElementPointer that does not manage ownership."], [1360, 1, 1, "", "tensorstore::UnownedToShared", "Converts a non-Shared ElementPointer to a SharedElementPointer that shares ownership of the specified owned pointer, in the same way as the std::shared_ptr aliasing constructor."], [1357, 2, 2, "p-array", "tensorstore::UnownedToShared::array", "Existing array to return."], [1357, 2, 2, "p-array", "tensorstore::UnownedToShared::array", "Existing array to return."], [1358, 2, 2, "p-array", "tensorstore::UnownedToShared::array", "Existing array to return."], [1358, 2, 2, "p-array", "tensorstore::UnownedToShared::array", "Existing array to return."], [1357, 2, 2, "p-owned", "tensorstore::UnownedToShared::owned", "If specified, the returned array shares ownership with the owned pointer, in the same way as the std::shared_ptr aliasing constructor."], [1358, 2, 2, "p-owned", "tensorstore::UnownedToShared::owned", "If specified, the returned array shares ownership with the owned pointer, in the same way as the std::shared_ptr aliasing constructor."], [1361, 8, 1, "", "tensorstore::UnspecifiedLayoutOrder", "Specifies that the iteration order is unconstrained."], [1361, 9, 1, "e-unspecified_order", "tensorstore::UnspecifiedLayoutOrder::unspecified_order", ""], [1362, 6, 1, "", "tensorstore::UnwrapFutureType", "Alias that maps Future<T>->T, Result<T>->T, or otherwise T->T."], [1363, 6, 1, "", "tensorstore::UnwrapQualifiedResultType", "As above, preserving const / volatile / reference qualifiers."], [1364, 1, 1, "", "tensorstore::UnwrapResult", "UnwrapResult returns the value contained by the Result<T> instance, *t, or the value, t."], [1364, 1, 1, "", "tensorstore::UnwrapResult", "UnwrapResult returns the value contained by the Result<T> instance, *t, or the value, t."], [1364, 1, 1, "", "tensorstore::UnwrapResult", "UnwrapResult returns the value contained by the Result<T> instance, *t, or the value, t."], [1364, 1, 1, "", "tensorstore::UnwrapResult", "UnwrapResult returns the value contained by the Result<T> instance, *t, or the value, t."], [1365, 6, 1, "", "tensorstore::UnwrapResultType", "UnwrapResultType<T> maps"], [1366, 4, 1, "", "tensorstore::Utf8String", "Wrapper around std::string to indicate a UTF-8 encoded string."], [1367, 1, 1, "", "tensorstore::Utf8String::operator!=", "Comparison operators."], [1367, 1, 1, "", "tensorstore::Utf8String::operator&lt;", "Comparison operators."], [1368, 1, 1, "", "tensorstore::Utf8String::operator&lt;&lt;", "Prints the UTF-8 value to an std::ostream."], [1367, 1, 1, "", "tensorstore::Utf8String::operator&lt;=", "Comparison operators."], [1367, 1, 1, "", "tensorstore::Utf8String::operator==", "Comparison operators."], [1367, 1, 1, "", "tensorstore::Utf8String::operator&gt;", "Comparison operators."], [1367, 1, 1, "", "tensorstore::Utf8String::operator&gt;=", "Comparison operators."], [1369, 5, 1, "", "tensorstore::Utf8String::utf8", "Underlying string encoded as UTF-8."], [1370, 1, 1, "", "tensorstore::ValidateIndexArrayBounds", "Checks that bounds.Contains(index) for all values of index in index_array."], [1371, 1, 1, "", "tensorstore::ValidateRank", "Validates that 0 <= rank <= kMaxRank."], [1372, 1, 1, "", "tensorstore::ValidateShapeBroadcast", "Validates that source_shape can be broadcast to target_shape."], [1373, 1, 1, "", "tensorstore::WaitAllFuture", "Creates a Future tied to the completion of all the provided futures objects."], [1374, 1, 1, "", "tensorstore::WaitAllFuture", "Creates a future tied to the completion of all the provided future objects."], [1374, 2, 2, "p-future", "tensorstore::WaitAllFuture::future", "The futures to be linked."], [1373, 2, 2, "p-futures", "tensorstore::WaitAllFuture::futures", "The futures to be linked."], [1375, 1, 1, "", "tensorstore::WithExecutor", "Returns an instance of ExecutorBoundFunction that invokes the given function function in the specified executor."], [1375, 1, 1, "", "tensorstore::WithExecutor", "Returns an instance of ExecutorBoundFunction that invokes the given function function in the specified executor."], [1376, 1, 1, "", "tensorstore::WithImplicitDimensions", "Returns a copy of domain with implicit_lower_bounds and implicit_upper_bounds set to the specified values."], [1377, 1, 1, "", "tensorstore::WithImplicitDimensions", "Returns a copy of transform with implicit_lower_bounds and implicit_upper_bounds set to the specified values."], [1378, 1, 1, "", "tensorstore::Write", "Copies from a source array to target TensorStore."], [1378, 1, 1, "", "tensorstore::Write", "Copies from a source array to target TensorStore."], [1378, 2, 2, "p-options", "tensorstore::Write::options", "Any option compatible with WriteOptions."], [1378, 2, 2, "p-source", "tensorstore::Write::source", "The source Array or TransformedArray."], [1378, 2, 2, "p-target", "tensorstore::Write::target", "The target TensorStore."], [1379, 4, 1, "", "tensorstore::WriteFutures", "Handle for consuming the result of an asynchronous write operation."], [1380, 1, 1, "", "tensorstore::WriteFutures::Force", "Requests that writeback begins immediately."], [1381, 1, 1, "", "tensorstore::WriteFutures::WriteFutures", "Constructs from a copy_future and commit_future."], [1382, 1, 1, "", "tensorstore::WriteFutures::WriteFutures", "Constructs a null handle."], [1383, 1, 1, "", "tensorstore::WriteFutures::WriteFutures", "Unwraps a Result<WriteFutures>."], [1384, 1, 1, "", "tensorstore::WriteFutures::WriteFutures", "Constructs from an absl::Status."], [1385, 5, 1, "", "tensorstore::WriteFutures::commit_future", "Becomes ready when the write has been committed (or failed)."], [1386, 5, 1, "", "tensorstore::WriteFutures::copy_future", "Becomes ready when the source is no longer needed."], [1387, 1, 1, "", "tensorstore::WriteFutures::result", "Returns the Future::result of the commit_future."], [1388, 1, 1, "", "tensorstore::WriteFutures::status", "Returns the Future::status of the commit_future."], [1389, 1, 1, "", "tensorstore::WriteFutures::value", "Returns the Future::value of the commit_future."], [1390, 4, 1, "", "tensorstore::WriteOptions", "Options for tensorstore::Write."], [1391, 5, 1, "", "tensorstore::WriteOptions::alignment_options", "Constrains how the source array may be aligned to the target TensorStore."], [1392, 5, 1, "", "tensorstore::WriteOptions::progress_function", "Optional progress callback."], [1393, 5, 1, "", "tensorstore::WriteOptions::source_data_reference_restriction", "Specifies restrictions on how the source data may be referenced (as opposed to copied)."], [1394, 4, 1, "", "tensorstore::WriteProgress", "Specifies progress statistics for Write operations."], [1395, 5, 1, "", "tensorstore::WriteProgress::committed_elements", "Number of elements that have been committed."], [1396, 5, 1, "", "tensorstore::WriteProgress::copied_elements", "Number of elements that have been copied."], [1397, 1, 1, "", "tensorstore::WriteProgress::operator!=", "Compares two progress states for equality."], [1398, 1, 1, "", "tensorstore::WriteProgress::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1397, 1, 1, "", "tensorstore::WriteProgress::operator==", "Compares two progress states for equality."], [1399, 5, 1, "", "tensorstore::WriteProgress::total_elements", "Total number of elements to be written."], [1400, 4, 1, "", "tensorstore::WriteProgressFunction", "Specifies a write progress function for use with tensorstore::Write."], [1401, 6, 1, "", "tensorstore::WriteProgressFunction::Function", "Type-erased movable function with signature void(WriteProgress)."], [1402, 1, 1, "", "tensorstore::abs", "Returns the absolute value of x."], [1403, 1, 1, "", "tensorstore::abs", "Returns the absolute value of x."], [1404, 1, 1, "", "tensorstore::acos", "Computes the inverse cosine."], [1405, 1, 1, "", "tensorstore::acosh", "Computes the inverse hyperbolic cosine."], [1406, 1, 1, "", "tensorstore::asin", "Computes the inverse sine."], [1407, 1, 1, "", "tensorstore::asinh", "Computes the inverse hyperbolic sine."], [1408, 1, 1, "", "tensorstore::atan", "Computes the inverse tangent."], [1409, 1, 1, "", "tensorstore::atanh", "Computes the inverse hyperbolic tangent."], [1410, 5, 1, "", "tensorstore::c_order", ""], [1411, 1, 1, "", "tensorstore::ceil", "Computes the nearest integer not less than the given value."], [1410, 5, 1, "", "tensorstore::column_major_order", ""], [1412, 5, 1, "", "tensorstore::container", ""], [1413, 1, 1, "", "tensorstore::cos", "Computes the cosine of the given number (cos x)."], [1414, 1, 1, "", "tensorstore::cosh", "Computes the hyperbolic cosine."], [1415, 5, 1, "", "tensorstore::default_init", ""], [1416, 6, 1, "", "tensorstore::dtype_t", "Alias for the StaticDataType representing T if T is not void, or DataType if T is void."], [1417, 5, 1, "", "tensorstore::dtype_v", "Data type object representing the data type for T, convertible to DataType."], [1418, 6, 1, "", "tensorstore::dtypes::bfloat16_t", ""], [1419, 6, 1, "", "tensorstore::dtypes::bool_t", "Boolean value (always represented as 0 or 1)."], [1420, 6, 1, "", "tensorstore::dtypes::byte_t", "Opaque byte value.  Intended to represent opaque binary data."], [1421, 6, 1, "", "tensorstore::dtypes::char_t", "Single ASCII/UTF-8 code unit.  Primarily intended to represent fixed-width ASCII fields."], [1422, 6, 1, "", "tensorstore::dtypes::complex128_t", "Complex number based on float64_t."], [1423, 6, 1, "", "tensorstore::dtypes::complex64_t", "Complex number based on float32_t."], [1424, 6, 1, "", "tensorstore::dtypes::float16_t", "IEEE 754 binary16 half-precision floating-point data type."], [1425, 6, 1, "", "tensorstore::dtypes::float32_t", "IEEE 754 binary32 single-precision floating-point data type."], [1426, 6, 1, "", "tensorstore::dtypes::float64_t", "IEEE 754 binary64 double-precision floating-point data type."], [1427, 6, 1, "", "tensorstore::dtypes::float8_e4m3b11fnuz_t", ""], [1428, 6, 1, "", "tensorstore::dtypes::float8_e4m3fn_t", ""], [1429, 6, 1, "", "tensorstore::dtypes::float8_e4m3fnuz_t", ""], [1430, 6, 1, "", "tensorstore::dtypes::float8_e5m2_t", ""], [1431, 6, 1, "", "tensorstore::dtypes::float8_e5m2fnuz_t", ""], [1432, 6, 1, "", "tensorstore::dtypes::int16_t", ""], [1433, 6, 1, "", "tensorstore::dtypes::int32_t", ""], [1434, 6, 1, "", "tensorstore::dtypes::int4_t", "Signed and unsigned integer types."], [1435, 6, 1, "", "tensorstore::dtypes::int64_t", ""], [1436, 6, 1, "", "tensorstore::dtypes::int8_t", ""], [1437, 6, 1, "", "tensorstore::dtypes::json_t", "JSON value."], [1438, 6, 1, "", "tensorstore::dtypes::string_t", "Byte string."], [1439, 6, 1, "", "tensorstore::dtypes::uint16_t", ""], [1440, 6, 1, "", "tensorstore::dtypes::uint32_t", ""], [1441, 6, 1, "", "tensorstore::dtypes::uint64_t", ""], [1442, 6, 1, "", "tensorstore::dtypes::uint8_t", ""], [1443, 6, 1, "", "tensorstore::dtypes::ustring_t", "Unicode string, represented in memory as UTF-8."], [1444, 5, 1, "", "tensorstore::dynamic_extent", "Indicates that the extent is specified at run time."], [1445, 5, 1, "", "tensorstore::dynamic_rank", "Special rank value indicating a rank specified at run time."], [1446, 1, 1, "", "tensorstore::exp", "Computes e raised to the given power (e^x)."], [1447, 1, 1, "", "tensorstore::exp2", "Computes 2 raised to the given power (2^x)."], [1616, 5, 1, "", "tensorstore::expand_only", ""], [1448, 1, 1, "", "tensorstore::expm1", "Computes e raised to the given power, minus 1 (e^x-1)."], [1449, 5, 1, "", "tensorstore::fix_resizable_bounds", ""], [1450, 1, 1, "", "tensorstore::floor", "Computes the nearest integer not less than the given value."], [1451, 1, 1, "", "tensorstore::fmax", "Computes the maximum of two values."], [1452, 1, 1, "", "tensorstore::fmin", "Computes the minimum of two values."], [1453, 1, 1, "", "tensorstore::fmod", "Computes the floating-point remainder of the division operation x / y."], [1410, 5, 1, "", "tensorstore::fortran_order", ""], [1454, 5, 1, "", "tensorstore::include_repeated_elements", ""], [1455, 1, 1, "", "tensorstore::isfinite", "Returns true if x is finite."], [1456, 1, 1, "", "tensorstore::isinf", "Returns true if x is +/-infinity."], [1457, 1, 1, "", "tensorstore::isnan", "Returns true if x is NaN."], [1458, 5, 1, "", "tensorstore::kImplicit", "Special index value that indicates an implicit bound."], [1459, 5, 1, "", "tensorstore::kInfIndex", "Special Index value representing positive infinity."], [1460, 5, 1, "", "tensorstore::kInfSize", "Special Index value representing an infinite extent for a dimension."], [1461, 5, 1, "", "tensorstore::kMaxFiniteIndex", "Maximum supported finite Index value."], [1462, 5, 1, "", "tensorstore::kMaxFiniteSize", "Maximum supported finite Index value."], [1463, 5, 1, "", "tensorstore::kMaxRank", "Maximum supported rank."], [1464, 5, 1, "", "tensorstore::kMinFiniteIndex", "Minimum supported finite Index value."], [1465, 4, 1, "", "tensorstore::kvstore::CopyRangeOptions", "Options for ExperimentalCopyRange."], [1466, 5, 1, "", "tensorstore::kvstore::CopyRangeOptions::source_range", "Only keys in this range are copied."], [1467, 5, 1, "", "tensorstore::kvstore::CopyRangeOptions::source_staleness_bound", "Staleness bound for reading from source."], [1468, 1, 1, "", "tensorstore::kvstore::Delete", "Performs an optionally-conditional delete."], [1468, 2, 2, "p-key", "tensorstore::kvstore::Delete::key", "Key to delete, interpreted as a suffix to be appended to store.path."], [1468, 2, 2, "p-options", "tensorstore::kvstore::Delete::options", "Specifies options for deleting."], [1468, 2, 2, "p-store", "tensorstore::kvstore::Delete::store", "KvStore from which to delete the key."], [1468, 1, 1, "", "tensorstore::kvstore::DeleteCommitted", "Performs an optionally-conditional delete."], [1469, 1, 1, "", "tensorstore::kvstore::DeleteRange", "Deletes all keys in the specified range."], [1469, 2, 2, "p-range", "tensorstore::kvstore::DeleteRange::range", "Range of keys to delete, relative to store.path."], [1469, 2, 2, "p-store", "tensorstore::kvstore::DeleteRange::store", "KvStore from which to delete keys."], [1470, 4, 1, "", "tensorstore::kvstore::DriverOpenOptions", "Driver-agnostic options that may be specified when opening a DriverPtr."], [1471, 6, 1, "", "tensorstore::kvstore::DriverPtr", "Handle to an open kvstore driver."], [1472, 4, 1, "", "tensorstore::kvstore::DriverSpecOptions", "Options for mutating Spec objects that are handled directly by drivers."], [1473, 5, 1, "", "tensorstore::kvstore::DriverSpecOptions::IsOption", "Indicates which option types are supported."], [1474, 4, 1, "", "tensorstore::kvstore::DriverSpecPtr", "Smart pointer that represents a driver-specific kvstore spec."], [1475, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::BindContext", "Binds any unbound context resources using the specified context.  Any already-bound context resources remain unmodified."], [1476, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::Set", "Mutates this spec according to the specified options."], [1476, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::Set", "Mutates this spec according to the specified options."], [1476, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::Set", "Mutates this spec according to the specified options."], [1476, 2, 2, "p-option", "tensorstore::kvstore::DriverSpecPtr::Set::option", "Any option type supported by SpecConvertOptions."], [1477, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::StripContext", "Replaces any context resources with a default context resource spec."], [1478, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::UnbindContext", "Unbinds any bound context resources, replacing them with context resource specs that may be used to recreate the context resources.  Any already-unbound context resources remain unmodified."], [1479, 1, 1, "", "tensorstore::kvstore::DriverSpecPtr::context_binding_state", "Indicates the context binding state of the spec."], [1480, 1, 1, "", "tensorstore::kvstore::ExperimentalCopyRange", "Copies a range from source to target."], [1480, 2, 2, "p-options", "tensorstore::kvstore::ExperimentalCopyRange::options", "Specifies options for copying."], [1480, 2, 2, "p-source", "tensorstore::kvstore::ExperimentalCopyRange::source", "Source store."], [1480, 2, 2, "p-target", "tensorstore::kvstore::ExperimentalCopyRange::target", "Target store."], [1481, 6, 1, "", "tensorstore::kvstore::Key", "Key-value store key type."], [1482, 4, 1, "", "tensorstore::kvstore::KvStore", "Combines a DriverPtr with a string path that serves as a key prefix, and an optional transaction."], [1483, 1, 1, "", "tensorstore::kvstore::KvStore::AppendPathComponent", "Joins a '/'-separated path component to the end path."], [1484, 1, 1, "", "tensorstore::kvstore::KvStore::AppendSuffix", "Appends suffix to the path."], [1485, 1, 1, "", "tensorstore::kvstore::KvStore::ApplyTensorStoreTransaction", "Changes to a new transaction."], [1486, 1, 1, "", "tensorstore::kvstore::KvStore::KvStore", "Constructs an invalid (null) kvstore."], [1487, 1, 1, "", "tensorstore::kvstore::KvStore::KvStore", "Constructs from a driver, and optional path and transaction."], [1487, 1, 1, "", "tensorstore::kvstore::KvStore::KvStore", "Constructs from a driver, and optional path and transaction."], [1487, 1, 1, "", "tensorstore::kvstore::KvStore::KvStore", "Constructs from a driver, and optional path and transaction."], [1488, 1, 1, "", "tensorstore::kvstore::KvStore::ToUrl", "Returns the URL representation if available."], [1489, 1, 1, "", "tensorstore::kvstore::KvStore::base", "Returns the underlying KvStore if this is an adapter, such as OCDBT or neuroglancer_uint64_sharded.  Otherwise returns a null kvstore."], [1490, 5, 1, "", "tensorstore::kvstore::KvStore::driver", "Driver spec."], [1491, 1, 1, "", "tensorstore::kvstore::KvStore::non_transactional", "Returns the corresponding non-transactional KvStore."], [1491, 1, 1, "", "tensorstore::kvstore::KvStore::non_transactional", "Returns the corresponding non-transactional KvStore."], [1493, 1, 1, "", "tensorstore::kvstore::KvStore::operator!=", "Checks if the driver, path, and transaction are identical."], [1493, 1, 1, "", "tensorstore::kvstore::KvStore::operator==", "Checks if the driver, path, and transaction are identical."], [1492, 1, 1, "", "tensorstore::kvstore::KvStore::operator|", "\"Pipeline\" operator."], [1492, 1, 1, "", "tensorstore::kvstore::KvStore::operator|", "\"Pipeline\" operator."], [1494, 5, 1, "", "tensorstore::kvstore::KvStore::path", "Path within the driver."], [1495, 1, 1, "", "tensorstore::kvstore::KvStore::spec", "Returns a Spec that can be used to re-open this KvStore."], [1495, 1, 1, "", "tensorstore::kvstore::KvStore::spec", "Returns a Spec that can be used to re-open this KvStore."], [1495, 2, 2, "p-option", "tensorstore::kvstore::KvStore::spec::option", "Any option compatible with SpecRequestOptions."], [1496, 5, 1, "", "tensorstore::kvstore::KvStore::transaction", "Bound transaction to use for I/O."], [1497, 1, 1, "", "tensorstore::kvstore::KvStore::valid", "Returns true if this is a valid (non-null) kvstore."], [1498, 4, 1, "", "tensorstore::kvstore::ListEntry", "Information for a single key returned from a ListFuture operation."], [1499, 1, 1, "", "tensorstore::kvstore::ListFuture", "Lists the keys in a kvstore."], [1499, 2, 2, "p-options", "tensorstore::kvstore::ListFuture::options", "List options."], [1499, 2, 2, "p-store", "tensorstore::kvstore::ListFuture::store", "KvStore from which to list keys."], [1500, 4, 1, "", "tensorstore::kvstore::ListOptions", "Options for ListFuture."], [1501, 5, 1, "", "tensorstore::kvstore::ListOptions::range", "Only keys in this range are emitted."], [1502, 5, 1, "", "tensorstore::kvstore::ListOptions::staleness_bound", "Staleness bound on list results."], [1503, 5, 1, "", "tensorstore::kvstore::ListOptions::strip_prefix_length", "Length of prefix to strip from keys."], [1504, 1, 1, "", "tensorstore::kvstore::Open", "Opens a KvStore based on an already-parsed kvstore::Spec and an optional sequence of options."], [1504, 1, 1, "", "tensorstore::kvstore::Open", "Opens a KvStore based on an already-parsed kvstore::Spec and an optional sequence of options."], [1504, 1, 1, "", "tensorstore::kvstore::Open", "Opens a KvStore based on an already-parsed kvstore::Spec and an optional sequence of options."], [1504, 1, 1, "", "tensorstore::kvstore::Open", "Opens a KvStore based on an already-parsed kvstore::Spec and an optional sequence of options."], [1504, 2, 2, "p-json_spec", "tensorstore::kvstore::Open::json_spec", "JSON value (which may be a string URL) to be parsed as a Spec."], [1504, 2, 2, "p-option", "tensorstore::kvstore::Open::option", "Any option compatible with OpenOptions."], [1504, 2, 2, "p-options", "tensorstore::kvstore::Open::options", "Options for opening the spec."], [1504, 2, 2, "p-spec", "tensorstore::kvstore::Open::spec", "KvStore specification."], [1505, 4, 1, "", "tensorstore::kvstore::OpenOptions", "Driver-agnostic options that may be specified when opening a KvStore."], [1506, 1, 1, "", "tensorstore::kvstore::Read", "Attempts to read the value for the key store.path + key."], [1506, 2, 2, "p-key", "tensorstore::kvstore::Read::key", "The key to read, interpreted as a suffix to be appended to store.path."], [1506, 2, 2, "p-options", "tensorstore::kvstore::Read::options", "Specifies options for reading."], [1506, 2, 2, "p-store", "tensorstore::kvstore::Read::store", "KvStore from which to read."], [1507, 4, 1, "", "tensorstore::kvstore::ReadGenerationConditions", "Specifies constraints on the generation for read operations."], [1508, 1, 1, "", "tensorstore::kvstore::ReadGenerationConditions::Matches", "Returns true if generation satisfies the constraints."], [1509, 5, 1, "", "tensorstore::kvstore::ReadGenerationConditions::if_equal", "The read is aborted if the generation associated with the stored key does not match if_equal.  This is primarily useful in conjunction with a ReadOptions::byte_range request to ensure consistency."], [1510, 5, 1, "", "tensorstore::kvstore::ReadGenerationConditions::if_not_equal", "The read is aborted if the generation associated with the stored key matches if_not_equal.  The special values of StorageGeneration::Unknown() (the default) or StorageGeneration::NoValue() disable this condition."], [1511, 1, 1, "", "tensorstore::kvstore::ReadGenerationConditions::operator bool", "Indicates if any constraints are specified."], [1512, 4, 1, "", "tensorstore::kvstore::ReadOptions", "Read options for non-transactional reads."], [1513, 5, 1, "", "tensorstore::kvstore::ReadOptions::batch", "Optional batch to use."], [1514, 5, 1, "", "tensorstore::kvstore::ReadOptions::byte_range", "Specifies the byte range."], [1515, 5, 1, "", "tensorstore::kvstore::ReadOptions::generation_conditions", "Specifies conditions for the read."], [1516, 5, 1, "", "tensorstore::kvstore::ReadOptions::staleness_bound", "Cached data may be used without validation if not older than staleness_bound.  Cached data older than staleness_bound must be validated before being returned.  A value of absl::InfiniteFuture() (the default) indicates that the result must be current as of the time the Read request was made, i.e. it is equivalent to specifying the value of absl::Now() just before invoking Read."], [1517, 4, 1, "", "tensorstore::kvstore::ReadResult", "Result of a Read operation."], [1518, 1, 1, "", "tensorstore::kvstore::ReadResult::Missing", "Constructs a read result for a missing value."], [1518, 1, 1, "", "tensorstore::kvstore::ReadResult::Missing", "Constructs a read result for a missing value."], [1519, 8, 1, "", "tensorstore::kvstore::ReadResult::State", "Specifies the interpretation of value."], [1519, 9, 1, "e-kMissing", "tensorstore::kvstore::ReadResult::State::kMissing", "Indicates a missing value (not an error).  The value member must be empty."], [1519, 9, 1, "e-kUnspecified", "tensorstore::kvstore::ReadResult::State::kUnspecified", "Indicates an unspecified value, used when a conditional read was requested and the condition was not satisfied.  The value member must be empty."], [1519, 9, 1, "e-kValue", "tensorstore::kvstore::ReadResult::State::kValue", "Indicates a value is present."], [1520, 1, 1, "", "tensorstore::kvstore::ReadResult::Unspecified", "Constructs a read result with unspecified value and generation."], [1521, 1, 1, "", "tensorstore::kvstore::ReadResult::Value", "Constructs a read result for a value."], [1522, 1, 1, "", "tensorstore::kvstore::ReadResult::aborted", "Returns true if the read was aborted because the conditions were not satisfied."], [1523, 1, 1, "", "tensorstore::kvstore::ReadResult::has_value", "Returns true if a value is available."], [1524, 5, 1, "", "tensorstore::kvstore::ReadResult::kMissing", ""], [1524, 5, 1, "", "tensorstore::kvstore::ReadResult::kUnspecified", ""], [1524, 5, 1, "", "tensorstore::kvstore::ReadResult::kValue", ""], [1525, 1, 1, "", "tensorstore::kvstore::ReadResult::not_found", "Returns true if the key was not found."], [1526, 1, 1, "", "tensorstore::kvstore::ReadResult::operator!=", "Compares two read results for equality."], [1527, 1, 1, "", "tensorstore::kvstore::ReadResult::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1528, 1, 1, "", "tensorstore::kvstore::ReadResult::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1526, 1, 1, "", "tensorstore::kvstore::ReadResult::operator==", "Compares two read results for equality."], [1529, 1, 1, "", "tensorstore::kvstore::ReadResult::optional_value", "Returns the value, or std::nullopt if not available."], [1529, 1, 1, "", "tensorstore::kvstore::ReadResult::optional_value", "Returns the value, or std::nullopt if not available."], [1530, 5, 1, "", "tensorstore::kvstore::ReadResult::stamp", "Generation and timestamp associated with value and state."], [1531, 5, 1, "", "tensorstore::kvstore::ReadResult::state", "Indicates the interpretation of value."], [1532, 5, 1, "", "tensorstore::kvstore::ReadResult::value", "Specifies the value if state == kValue.  Otherwise must be empty."], [1533, 4, 1, "", "tensorstore::kvstore::Spec", "Combines a driver-specific kvstore spec with a string path that serves as a key prefix."], [1534, 1, 1, "", "tensorstore::kvstore::Spec::AppendPathComponent", "Joins a '/'-separated path component to the end path."], [1535, 1, 1, "", "tensorstore::kvstore::Spec::AppendSuffix", "Appends suffix to the path."], [1536, 1, 1, "", "tensorstore::kvstore::Spec::BindContext", "Binds any unbound context resources using the specified context.  Any already-bound context resources remain unmodified."], [1537, 1, 1, "", "tensorstore::kvstore::Spec::FromUrl", "Parses a kvstore::Spec from its URL representation."], [1538, 1, 1, "", "tensorstore::kvstore::Spec::Set", "Mutates this spec according to the specified options."], [1538, 1, 1, "", "tensorstore::kvstore::Spec::Set", "Mutates this spec according to the specified options."], [1538, 2, 2, "p-option", "tensorstore::kvstore::Spec::Set::option", "Any option type supported by SpecConvertOptions."], [1539, 1, 1, "", "tensorstore::kvstore::Spec::Spec", "Constructs an invalid (null) spec."], [1540, 1, 1, "", "tensorstore::kvstore::Spec::Spec", "Constructs from a driver with empty path."], [1541, 1, 1, "", "tensorstore::kvstore::Spec::Spec", "Constructs a path from the specified driver and key prefix."], [1542, 1, 1, "", "tensorstore::kvstore::Spec::StripContext", "Replaces any context resources with a default context resource spec."], [1543, 1, 1, "", "tensorstore::kvstore::Spec::ToUrl", "Returns the URL representation of this spec, if supported."], [1544, 1, 1, "", "tensorstore::kvstore::Spec::UnbindContext", "Unbinds any bound context resources, replacing them with context resource specs that may be used to recreate the context resources."], [1545, 1, 1, "", "tensorstore::kvstore::Spec::base", "Returns the underlying kvstore spec, if this is an adapter (such as OCDBT or neuroglancer_uint64_sharded)."], [1546, 1, 1, "", "tensorstore::kvstore::Spec::context_binding_state", "Returns the context binding state of the spec."], [1547, 5, 1, "", "tensorstore::kvstore::Spec::driver", "Driver spec."], [1548, 1, 1, "", "tensorstore::kvstore::Spec::operator!=", "Compares for equality via JSON representation, except that bound context resources are compared by identity."], [1548, 1, 1, "", "tensorstore::kvstore::Spec::operator==", "Compares for equality via JSON representation, except that bound context resources are compared by identity."], [1549, 5, 1, "", "tensorstore::kvstore::Spec::path", "Path within the driver."], [1550, 1, 1, "", "tensorstore::kvstore::Spec::valid", "Returns true if this is a valid (non-null) spec."], [1551, 4, 1, "", "tensorstore::kvstore::SpecConvertOptions", "Options that may be specified for modifying an existing Spec."], [1552, 5, 1, "", "tensorstore::kvstore::SpecConvertOptions::IsOption", "Indicates which option types are supported."], [1553, 5, 1, "", "tensorstore::kvstore::SpecConvertOptions::context", "Specifies the context to bind."], [1554, 5, 1, "", "tensorstore::kvstore::SpecConvertOptions::context_binding_mode", "Specifies the context binding mode."], [1555, 4, 1, "", "tensorstore::kvstore::SpecRequestOptions", "Options that may be specified when requesting the Spec for an open KvStore."], [1556, 4, 1, "", "tensorstore::kvstore::TransactionalReadGenerationConditions", "Conditions on the existing generation for transactional read operations."], [1557, 1, 1, "", "tensorstore::kvstore::TransactionalReadGenerationConditions::Matches", "Returns true if generation satisfies the constraints."], [1558, 5, 1, "", "tensorstore::kvstore::TransactionalReadGenerationConditions::if_not_equal", "The read is aborted if the generation associated with the stored key matches if_not_equal.  The special values of StorageGeneration::Unknown() (the default) or StorageGeneration::NoValue() disable this condition."], [1559, 4, 1, "", "tensorstore::kvstore::TransactionalReadOptions", "Read options for transactional reads."], [1560, 5, 1, "", "tensorstore::kvstore::TransactionalReadOptions::batch", "Optional batch to use."], [1561, 5, 1, "", "tensorstore::kvstore::TransactionalReadOptions::byte_range", "Specifies the byte range."], [1562, 5, 1, "", "tensorstore::kvstore::TransactionalReadOptions::generation_conditions", "Specifies conditions for the read."], [1563, 5, 1, "", "tensorstore::kvstore::TransactionalReadOptions::staleness_bound", "Cached data may be used without validation if not older than staleness_bound.  Cached data older than staleness_bound must be validated before being returned.  A value of absl::InfiniteFuture() (the default) indicates that the result must be current as of the time the Read request was made, i.e. it is equivalent to specifying the value of absl::Now() just before invoking Read."], [1564, 6, 1, "", "tensorstore::kvstore::Value", "Key-value store value type."], [1565, 1, 1, "", "tensorstore::kvstore::Write", "Performs an optionally-conditional write."], [1565, 2, 2, "p-key", "tensorstore::kvstore::Write::key", "The key to write or delete, interpreted as a suffix to be appended to store.path."], [1565, 2, 2, "p-options", "tensorstore::kvstore::Write::options", "Specifies options for writing."], [1565, 2, 2, "p-store", "tensorstore::kvstore::Write::store", "KvStore into which to perform the write operation."], [1565, 2, 2, "p-value", "tensorstore::kvstore::Write::value", "The value to write, or std::nullopt to delete."], [1565, 1, 1, "", "tensorstore::kvstore::WriteCommitted", "Performs an optionally-conditional write."], [1566, 4, 1, "", "tensorstore::kvstore::WriteGenerationConditions", "Conditions on the existing generation for write operations."], [1567, 1, 1, "", "tensorstore::kvstore::WriteGenerationConditions::Matches", "Returns true if generation matches the constraint."], [1568, 1, 1, "", "tensorstore::kvstore::WriteGenerationConditions::MatchesNoValue", "Equivalent to Matches(StorageGeneration::NoValue())."], [1569, 5, 1, "", "tensorstore::kvstore::WriteGenerationConditions::if_equal", "The write is aborted if the existing generation associated with the stored key does not match if_equal."], [1570, 4, 1, "", "tensorstore::kvstore::WriteOptions", "Options for Write."], [1571, 5, 1, "", "tensorstore::kvstore::WriteOptions::generation_conditions", "Specifies conditions for the write."], [1572, 1, 1, "", "tensorstore::log", "Computes the natural (base e) logarithm (\\ln x)"], [1573, 1, 1, "", "tensorstore::log10", "Computes the base-10 logarithm of the given number (\\log_{10} x)."], [1574, 1, 1, "", "tensorstore::log1p", "Computes the natural (base e) logarithm of 1 plus the given number (\\ln (1 + x))."], [1575, 1, 1, "", "tensorstore::log2", "Computes the base-2 logarithm of the given number (\\log_2 x)."], [1576, 5, 1, "", "tensorstore::may_allocate", ""], [1576, 5, 1, "", "tensorstore::must_allocate", ""], [1577, 1, 1, "", "tensorstore::nextafter", "Next representable value towards the given value."], [1578, 5, 1, "", "tensorstore::no_batch", "Alias for indicating not to use a batch."], [1579, 5, 1, "", "tensorstore::no_transaction", "Special value that indicates non-transactional semantics."], [1580, 5, 1, "", "tensorstore::offset_origin", ""], [1597, 1, 1, "", "tensorstore::operator!", "Checks if any flags are set."], [1598, 1, 1, "", "tensorstore::operator!", "Checks if no options are set."], [1599, 1, 1, "", "tensorstore::operator!", "Checks if any open mode has been set."], [1600, 1, 1, "", "tensorstore::operator!", "Checks if the mode is not equal to ReadWriteMode::dynamic."], [1601, 1, 1, "", "tensorstore::operator!", "Checks if any mode has been set."], [1602, 1, 1, "", "tensorstore::operator!", "Checks if any mode has been set."], [1581, 1, 1, "", "tensorstore::operator&amp;", "Computes the intersection of the flag sets."], [1582, 1, 1, "", "tensorstore::operator&amp;", "Computes the intersection of the options."], [1583, 1, 1, "", "tensorstore::operator&amp;", "Returns the intersection of two open modes."], [1584, 1, 1, "", "tensorstore::operator&amp;", "Computes the intersection of two modes."], [1585, 1, 1, "", "tensorstore::operator&amp;", "Computes the intersection of two mode sets."], [1586, 1, 1, "", "tensorstore::operator&amp;", "Computes the intersection of two mode sets."], [1584, 1, 1, "", "tensorstore::operator&amp;=", "Computes the intersection of two modes."], [1603, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a string representation of the origin kind."], [1604, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints to an std::ostream."], [1605, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1606, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a string representation the mode to an std::ostream."], [1607, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints to an output stream."], [1608, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a string representation of the mode to an std::ostream."], [1609, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1610, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a debugging string representation to an std::ostream."], [1611, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a string representation of the transaction mode to an std::ostream."], [1612, 1, 1, "", "tensorstore::operator&lt;&lt;", "Prints a string representation of a span."], [1587, 1, 1, "", "tensorstore::operator|", "Unions the requirements of two transaction modes."], [1588, 1, 1, "", "tensorstore::operator|", "Computes the union of the flag sets."], [1589, 1, 1, "", "tensorstore::operator|", "Computes the union of the options."], [1590, 1, 1, "", "tensorstore::operator|", "Returns the union of two open modes."], [1591, 1, 1, "", "tensorstore::operator|", "Computes the union of two modes."], [1592, 1, 1, "", "tensorstore::operator|", "Computes the union of two mode sets."], [1593, 1, 1, "", "tensorstore::operator|", "Computes the union of two mode sets."], [1587, 1, 1, "", "tensorstore::operator|=", "Unions the requirements of two transaction modes."], [1591, 1, 1, "", "tensorstore::operator|=", "Computes the union of two modes."], [1594, 1, 1, "", "tensorstore::operator~", "Computes the complement of the flag set."], [1595, 1, 1, "", "tensorstore::operator~", "Returns the complement of a mode."], [1596, 1, 1, "", "tensorstore::operator~", "Returns the complement of a mode."], [1613, 6, 1, "", "tensorstore::pointee_dtype_t", "StaticDataType corresponding to the element type of Pointer, or DataType if the element type is void."], [1614, 1, 1, "", "tensorstore::pow", "Raises a number to the given power (x^y)."], [1615, 1, 1, "", "tensorstore::pow", "Raises a number to the given power (x^y)."], [1616, 5, 1, "", "tensorstore::resize_metadata_only", ""], [1616, 5, 1, "", "tensorstore::resize_tied_bounds", ""], [1617, 5, 1, "", "tensorstore::retain_context", ""], [1618, 1, 1, "", "tensorstore::rint", "Computes the nearest integer using the current rounding mode."], [1410, 5, 1, "", "tensorstore::row_major_order", ""], [1616, 5, 1, "", "tensorstore::shrink_only", ""], [1619, 1, 1, "", "tensorstore::signbit", "Returns true if x is negative."], [1620, 1, 1, "", "tensorstore::sin", "Computes the sine of the given number (\\sin x)."], [1621, 1, 1, "", "tensorstore::sinh", "Computes the hyperbolic sine."], [1454, 5, 1, "", "tensorstore::skip_repeated_elements", ""], [1622, 4, 1, "", "tensorstore::span", "Unowned view of a contiguous 1-d array of elements, similar to std::span."], [1622, 7, 2, "p-Extent", "tensorstore::span::Extent", "Static extent of the array, or dynamic_extent to indicate that the extent is specified at run time."], [1622, 3, 2, "p-T", "tensorstore::span::T", "Element type, must be a valid array element type."], [1623, 1, 1, "", "tensorstore::span::at", "Returns a reference to the element at the specified index."], [1624, 1, 1, "", "tensorstore::span::back", "Returns a reference to the last element."], [1625, 1, 1, "", "tensorstore::span::begin", "Returns begin/end iterators."], [1625, 1, 1, "", "tensorstore::span::cbegin", "Returns begin/end iterators."], [1625, 1, 1, "", "tensorstore::span::cend", "Returns begin/end iterators."], [1626, 6, 1, "", "tensorstore::span::const_iterator", "Constant iterator type."], [1627, 6, 1, "", "tensorstore::span::const_pointer", "Pointer to a const-qualified element."], [1628, 6, 1, "", "tensorstore::span::const_reference", "Reference to a const-qualified element."], [1629, 6, 1, "", "tensorstore::span::const_reverse_iterator", "Constant reverse iterator type."], [1644, 1, 1, "", "tensorstore::span::crbegin", "Returns begin/end reverse iterators."], [1644, 1, 1, "", "tensorstore::span::crend", "Returns begin/end reverse iterators."], [1630, 1, 1, "", "tensorstore::span::data", "Returns a pointer to the first element."], [1631, 6, 1, "", "tensorstore::span::difference_type", "Type used for indexing."], [1632, 6, 1, "", "tensorstore::span::element_type", "Element type of the array."], [1633, 1, 1, "", "tensorstore::span::empty", "Returns true if the span is empty."], [1625, 1, 1, "", "tensorstore::span::end", "Returns begin/end iterators."], [1634, 5, 1, "", "tensorstore::span::extent", "Static extent."], [1635, 1, 1, "", "tensorstore::span::first", "Returns a dynamic extent subspan of the first count elements."], [1636, 1, 1, "", "tensorstore::span::first", "Returns a static extent subspan of the first Count elements."], [1637, 1, 1, "", "tensorstore::span::front", "Returns a reference to the first element."], [1638, 6, 1, "", "tensorstore::span::index_type", "Type used for indexing."], [1639, 6, 1, "", "tensorstore::span::iterator", "Iterator type."], [1640, 1, 1, "", "tensorstore::span::last", "Returns a dynamic extent subspan of the last count elements."], [1641, 1, 1, "", "tensorstore::span::last", "Returns a static extent subspan of the last Count elements."], [1642, 1, 1, "", "tensorstore::span::operator[]", "Returns a reference to the element at the specified index."], [1643, 6, 1, "", "tensorstore::span::pointer", "Pointer to an element."], [1644, 1, 1, "", "tensorstore::span::rbegin", "Returns begin/end reverse iterators."], [1645, 6, 1, "", "tensorstore::span::reference", "Reference to an element."], [1644, 1, 1, "", "tensorstore::span::rend", "Returns begin/end reverse iterators."], [1646, 6, 1, "", "tensorstore::span::reverse_iterator", "Reverse iterator type."], [1647, 1, 1, "", "tensorstore::span::size", "Returns the size."], [1648, 1, 1, "", "tensorstore::span::size_bytes", "Returns the size in bytes."], [1649, 1, 1, "", "tensorstore::span::span", "Constructs from an array or std::array."], [1649, 1, 1, "", "tensorstore::span::span", "Constructs from an array or std::array."], [1649, 1, 1, "", "tensorstore::span::span", "Constructs from an array or std::array."], [1650, 1, 1, "", "tensorstore::span::span", "Constructs from begin and end pointers."], [1651, 1, 1, "", "tensorstore::span::span", "Constructs from a container with data and size methods."], [1651, 1, 1, "", "tensorstore::span::span", "Constructs from a container with data and size methods."], [1652, 1, 1, "", "tensorstore::span::span", "Converts from a compatible span type."], [1653, 1, 1, "", "tensorstore::span::span", "Constructs an empty/invalid array."], [1654, 1, 1, "", "tensorstore::span::span", "Constructs from the specified pointer and length."], [1655, 1, 1, "", "tensorstore::span::subspan", "Returns a dynamic extent subspan from the starting offset and specified count."], [1656, 1, 1, "", "tensorstore::span::subspan", "Returns a subspan from the starting offset Offset with the specified Count."], [1657, 6, 1, "", "tensorstore::span::value_type", "Unqualified element type."], [1658, 1, 1, "", "tensorstore::sqrt", "Computes the square root of the given number (\\sqrt{x})."], [1617, 5, 1, "", "tensorstore::strip_context", ""], [1659, 1, 1, "", "tensorstore::swap", "Swaps the contents of the bit to which a refers with the contents of the bit to which b refers (does not rebind a or b)."], [1660, 1, 1, "", "tensorstore::tan", "Computes the tangent."], [1661, 1, 1, "", "tensorstore::tanh", "Computes the hyperbolic tangent."], [1662, 1, 1, "", "tensorstore::to_string", "Returns a string representation of the mode."], [1663, 1, 1, "", "tensorstore::trunc", "Computes the nearest integer not greater in absolute value."], [1617, 5, 1, "", "tensorstore::unbind_context", ""], [1664, 5, 1, "", "tensorstore::unchecked", "Tag value to indicate that an unchecked cast is requested."], [1665, 4, 1, "", "tensorstore::unchecked_t", "Tag type used as the first parameter of some constructors to request an unchecked conversion (e.g. from dynamic rank to a compile-time rank)."], [1666, 5, 1, "", "tensorstore::unspecified_order", ""], [1667, 5, 1, "", "tensorstore::value_init", ""], [1668, 5, 1, "", "tensorstore::view", ""], [1669, 5, 1, "", "tensorstore::zero_origin", ""], [1679, 10, 1, "json-CacheRevalidationBound", "CacheRevalidationBound", ""], [2164, 10, 1, "json-ChunkLayout", "ChunkLayout", ""], [2164, 10, 1, "json-ChunkLayout/Grid", "ChunkLayout/Grid", "Constraints on the write/read/codec chunk grids."], [2164, 10, 1, "json-Codec", "Codec", ""], [0, 10, 1, "json-Context", "Context", ""], [0, 10, 1, "json-ContextResource", "ContextResource", ""], [1672, 10, 1, "json-DownsampleMethod", "DownsampleMethod", "Downsample method"], [1688, 10, 1, "json-IndexDomain", "IndexDomain", ""], [1688, 10, 1, "json-IndexInterval", "IndexInterval", "Specifies a closed interval of integer index values."], [1688, 10, 1, "json-IndexTransform", "IndexTransform", ""], [1679, 10, 1, "json-KeyValueStoreBackedChunkDriver", "KeyValueStoreBackedChunkDriver", ""], [1693, 10, 1, "json-KvStore", "KvStore", "Key-value store specification."], [1693, 10, 1, "json-KvStoreUrl", "KvStoreUrl", "URL representation of a key-value store."], [1690, 10, 1, "json-KvStoreUrl/file", "KvStoreUrl/file", "file:// KvStore URL scheme"], [1691, 10, 1, "json-KvStoreUrl/gs", "KvStoreUrl/gs", "gs:// KvStore URL scheme"], [1692, 10, 1, "json-KvStoreUrl/http", "KvStoreUrl/http", "http:// and https:// KvStore URL scheme"], [1695, 10, 1, "json-KvStoreUrl/memory", "KvStoreUrl/memory", "memory:// KvStore URL scheme"], [1698, 10, 1, "json-KvStoreUrl/s3", "KvStoreUrl/s3", "s3:// KvStore URL scheme"], [1688, 10, 1, "json-OutputIndexMap", "OutputIndexMap", "Specifies a transform from an input space to a single output index."], [2164, 10, 1, "json-Schema", "Schema", ""], [2165, 10, 1, "json-TensorStore", "TensorStore", "Specifies a TensorStore to open/create."], [2164, 10, 1, "json-Unit", "Unit", "Specifies a physical quantity/unit."], [1670, 10, 1, "json-driver/array", "driver/array", ""], [1673, 10, 1, "json-driver/avif", "driver/avif", ""], [1674, 10, 1, "json-driver/bmp", "driver/bmp", ""], [1671, 10, 1, "json-driver/cast", "driver/cast", ""], [1672, 10, 1, "json-driver/downsample", "driver/downsample", ""], [1675, 10, 1, "json-driver/jpeg", "driver/jpeg", ""], [1680, 10, 1, "json-driver/json", "driver/json", ""], [1681, 10, 1, "json-driver/n5", "driver/n5", ""], [1681, 10, 1, "json-driver/n5/Codec", "driver/n5/Codec", ""], [1681, 10, 1, "json-driver/n5/Compression", "driver/n5/Compression", ""], [1681, 10, 1, "json-driver/n5/Compression/blosc", "driver/n5/Compression/blosc", ""], [1681, 10, 1, "json-driver/n5/Compression/bzip2", "driver/n5/Compression/bzip2", ""], [1681, 10, 1, "json-driver/n5/Compression/gzip", "driver/n5/Compression/gzip", ""], [1681, 10, 1, "json-driver/n5/Compression/raw", "driver/n5/Compression/raw", ""], [1681, 10, 1, "json-driver/n5/Compression/xz", "driver/n5/Compression/xz", ""], [1681, 10, 1, "json-driver/n5/Compression/zstd", "driver/n5/Compression/zstd", ""], [1682, 10, 1, "json-driver/neuroglancer_precomputed", "driver/neuroglancer_precomputed", ""], [1682, 10, 1, "json-driver/neuroglancer_precomputed/Codec", "driver/neuroglancer_precomputed/Codec", "Neuroglancer Precomputed Codec"], [1676, 10, 1, "json-driver/png", "driver/png", ""], [1683, 10, 1, "json-driver/stack", "driver/stack", ""], [1677, 10, 1, "json-driver/tiff", "driver/tiff", ""], [1678, 10, 1, "json-driver/webp", "driver/webp", ""], [1684, 10, 1, "json-driver/zarr", "driver/zarr", ""], [1684, 10, 1, "json-driver/zarr/Codec", "driver/zarr/Codec", ""], [1684, 10, 1, "json-driver/zarr/Compressor", "driver/zarr/Compressor", "Compressor"], [1684, 10, 1, "json-driver/zarr/Compressor/blosc", "driver/zarr/Compressor/blosc", ""], [1684, 10, 1, "json-driver/zarr/Compressor/bz2", "driver/zarr/Compressor/bz2", ""], [1684, 10, 1, "json-driver/zarr/Compressor/zlib", "driver/zarr/Compressor/zlib", ""], [1684, 10, 1, "json-driver/zarr/Compressor/zstd", "driver/zarr/Compressor/zstd", ""], [1685, 10, 1, "json-driver/zarr3", "driver/zarr3", ""], [1685, 10, 1, "json-driver/zarr3/ChunkKeyEncoding", "driver/zarr3/ChunkKeyEncoding", "Specifies the encoding of chunk grid positions as keys in the underlying kvstore."], [1685, 10, 1, "json-driver/zarr3/Codec", "driver/zarr3/Codec", ""], [1685, 10, 1, "json-driver/zarr3/Codec/blosc", "driver/zarr3/Codec/blosc", "Specifies Blosc compression."], [1685, 10, 1, "json-driver/zarr3/Codec/bytes", "driver/zarr3/Codec/bytes", "Fixed-size encoding for numeric types."], [1685, 10, 1, "json-driver/zarr3/Codec/crc32c", "driver/zarr3/Codec/crc32c", "Appends a CRC-32C checksum to detect data corruption."], [1685, 10, 1, "json-driver/zarr3/Codec/gzip", "driver/zarr3/Codec/gzip", "Specifies gzip compression."], [1685, 10, 1, "json-driver/zarr3/Codec/sharding_indexed", "driver/zarr3/Codec/sharding_indexed", "Sharding codec that enables hierarchical chunking."], [1685, 10, 1, "json-driver/zarr3/Codec/transpose", "driver/zarr3/Codec/transpose", "Transposes the dimensions of an array."], [1685, 10, 1, "json-driver/zarr3/Codec/zstd", "driver/zarr3/Codec/zstd", "Specifies Zstd compression."], [1685, 10, 1, "json-driver/zarr3/CodecChain", "driver/zarr3/CodecChain", "Specifies a chain of codecs."], [1685, 10, 1, "json-driver/zarr3/DataType", "driver/zarr3/DataType", "Specifies the zarr data type."], [1685, 10, 1, "json-driver/zarr3/Metadata", "driver/zarr3/Metadata", ""], [1685, 10, 1, "json-driver/zarr3/SingleCodec", "driver/zarr3/SingleCodec", "Specifies a single codec."], [2165, 10, 1, "json-dtype", "dtype", "Specifies a TensorStore data type."], [1690, 10, 1, "json-kvstore/file", "kvstore/file", "Read/write access to the local filesystem."], [1691, 10, 1, "json-kvstore/gcs", "kvstore/gcs", "Read/write access to Google Cloud Storage (GCS)."], [1692, 10, 1, "json-kvstore/http", "kvstore/http", "Read-only access to arbitrary HTTP servers."], [1694, 10, 1, "json-kvstore/kvstack", "kvstore/kvstack", "Stack (overlay) driver for key value store mapping."], [1695, 10, 1, "json-kvstore/memory", "kvstore/memory", "Read/write, non-persistent in-memory storage."], [1696, 10, 1, "json-kvstore/neuroglancer_uint64_sharded", "kvstore/neuroglancer_uint64_sharded", "Read/write adapter for the Neuroglancer Precomputed sharded format."], [1696, 10, 1, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec", "kvstore/neuroglancer_uint64_sharded/ShardingSpec", "Sharding metadata"], [1697, 10, 1, "json-kvstore/ocdbt", "kvstore/ocdbt", "Read/write adapter for the OCDBT format."], [1697, 10, 1, "json-kvstore/ocdbt/Compression/zstd", "kvstore/ocdbt/Compression/zstd", "Specifies Zstandard compression."], [1698, 10, 1, "json-kvstore/s3", "kvstore/s3", "Read/write access to Amazon S3-compatible object stores."], [1699, 10, 1, "json-kvstore/tsgrpc_kvstore", "kvstore/tsgrpc_kvstore", "Read/write key-value store using the tensorstore-specific gRPC protocol."], [1700, 10, 1, "json-kvstore/zarr3_sharding_indexed", "kvstore/zarr3_sharding_indexed", "Read/write adapter for the zarr v3 sharded_indexed format."], [1701, 10, 1, "json-kvstore/zip", "kvstore/zip", "Read-only adapter for the ZIP archive format."], [1689, 19, 1, 1, "ARCHFLAGS", "macOS only.  Specifies the CPU architecture to target for cross-compilation. May be -arch x86_64 or -arch arm64.  Universal2 builds (specified by -arch arm64 -arch x86_64 are not supported)."], [1698, 19, 1, 1, "AWS_ACCESS_KEY_ID", "Specifies an AWS access key associated with an IAM account. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [1698, 19, 1, 1, "AWS_CONFIG_FILE", "Specifies the location of the file that the AWS CLI uses to store config. The default path is ~/.aws/config. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [1698, 19, 1, 1, "AWS_EC2_METADATA_SERVICE_ENDPOINT", "Overrides the default EC2 Instance Metadata Service (IMDS) endpoint of http://169.254.169.254. This must be a valid uri, and should respond to the AWS IMDS api endpoints. See <https://docs.aws.amazon.com/sdkref/latest/guide/feature-imds-credentials.html>"], [1698, 19, 1, 1, "AWS_PROFILE", "Specifies the name of the AWS CLI profile with the credentials and options to use. This can be the name of a profile stored in a credentials or config file, or the value default to use the default profile."], [1698, 19, 1, 1, "AWS_SECRET_ACCESS_KEY", "Specifies the secret key associated with the access key. This is essentially the \"password\" for the access key. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [1698, 19, 1, 1, "AWS_SESSION_TOKEN", "Specifies the session token value that is required if you are using temporary security credentials that you retrieved directly from AWS STS operations. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [1698, 19, 1, 1, "AWS_SHARED_CREDENTIALS_FILE", "Specifies the location of the file that the AWS CLI uses to store access keys. The default path is ~/.aws/credentials. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [1689, 19, 1, 1, "BAZELISK_HOME", "Duplicate explicit target name: \"bazelisk\"."], [1686, 19, 1, 1, "GOOGLE_APPLICATION_CREDENTIALS", "Specifies the local path to a Google Cloud JSON credentials file.  Refer to the Google Cloud Storage Authentication section for details."], [1686, 19, 1, 1, "GOOGLE_CLOUD_DISABLE_DIRECT_PATH", "Disables the use of directpath endpoints for Google Cloud Storage requests, even if otherwise allowed."], [1689, 19, 1, 1, "MACOSX_DEPLOYMENT_TARGET", "macOS only.  Specifies the minimum required macOS version to target.  Must not be earlier than 10.14.  If not specified, defaults to the same macOS version required by the Python binary itself, or 10.14 if later."], [1689, 19, 1, 1, "PYTHON_BIN_PATH", "Path to Python binary to use when running Python executables/tests.  When Bazel is invoked by the Python package build (setup.py), this is set automatically."], [1686, 19, 1, 1, "SSLKEYLOGFILE", "Specifies the path to a local file where information necessary to decrypt TensorStore's TLS traffic will be saved in a format compatible with Wireshark.  Refer to the libcurl documentation for more details."], [1686, 19, 1, 1, "SSL_CERT_DIR", "Sets the certificate directory to use for TLS connections."], [1686, 19, 1, 1, "SSL_CERT_FILE", "Sets the certificate file to use for TLS connections.  Takes precedence over SSL_CERT_DIR."], [1689, 19, 1, 1, "TENSORSTORE_BAZELISK", "Path to Bazelisk script that is invoked in order to execute the build.  By default the bundled bazelisk.py is used, but this environment variable allows that to be overridden in order to pass additional options, etc."], [1689, 19, 1, 1, "TENSORSTORE_BAZEL_BUILD_OPTIONS", "Additional Bazel build options or configuration settings to specify when building.  The encoding is the same as for TENSORSTORE_BAZEL_STARTUP_OPTIONS."], [1689, 19, 1, 1, "TENSORSTORE_BAZEL_COMPILATION_MODE", "Bazel compilation mode to use.  Defaults to opt (optimized build)."], [1689, 19, 1, 1, "TENSORSTORE_BAZEL_STARTUP_OPTIONS", "Additional Bazel startup options to specify when building.  Multiple options may be separated by spaces; options containing spaces or other special characters should be encoded according to Posix shell escaping rules as implemented by shlex.split()."], [1686, 19, 1, 1, "TENSORSTORE_CA_BUNDLE", "Specifies the path to a local file containing one or more CA certificates concatenated into a single file in PEM format.  On many Linux distributions, the system certificate bundle is available at /etc/ssl/certs/ca-certificates.crt.  Refer to the libcurl documentation for more details."], [1686, 19, 1, 1, "TENSORSTORE_CA_PATH", "Specifies the path of a local directory containing one or more CA certificates in PEM format.  Each file in the directory must contain a single certificate, and the directory must be prepared using the OpenSSL c_rehash command.  Refer to the libcurl documentation for more details. Note that this is not the most common format for the system CA certificate store.  In most cases, the system CA certificate store should instead be specified using TENSORSTORE_CA_BUNDLE."], [1686, 19, 1, 1, "TENSORSTORE_CURL_LOW_SPEED_LIMIT_BYTES", "If set to a postive value, then curl HTTP requests will be set with the CURLOPT_LOW_SPEED_LIMIT option to detect stalled connections."], [1686, 19, 1, 1, "TENSORSTORE_CURL_LOW_SPEED_TIME_SECONDS", "If set to a postive value, then curl HTTP requests will be set with the CURLOPT_LOW_SPEED_TIME option to detect stalled connections."], [1686, 19, 1, 1, "TENSORSTORE_CURL_VERBOSE", "If set to any value, verbose debugging information will be printed to stderr for all HTTP requests."], [1686, 19, 1, 1, "TENSORSTORE_GCS_GRPC_CHANNELS", "Specifies the number of gRPC channels to use for the gcs_grpc driver. Default is to use the number of CPU cores (at least 4) for regular endpoints, or 1 for directpath endpoints."], [1686, 19, 1, 1, "TENSORSTORE_GCS_HTTP_URL", "Specifies to connect to an alternative server in place of https://storage.googleapis.com.  Note that the normal Google oauth2 credentials are included in requests, and therefore only trusted servers should be used."], [1686, 19, 1, 1, "TENSORSTORE_GCS_HTTP_VERSION", "Forces the HTTP version to use for Google Cloud Storage requests.  Valid values are 1 and 2."], [1686, 19, 1, 1, "TENSORSTORE_GCS_RATE_LIMITER_DOUBLING_TIME", "Specifies the doubling time for the gcs rate-limiter. Defaults to not setting a doubleing time."], [1686, 19, 1, 1, "TENSORSTORE_GCS_REQUEST_CONCURRENCY", "Specifies the concurrency level used by the shared Context Context.gcs_request_concurrency resource. Defaults to 32."], [1686, 19, 1, 1, "TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS", "Specifies the maximum number of concurrent streams per HTTP/2 connection, without limiting the total number of active connections.  When unset, a default of 4 concurrent streams are permitted."], [1686, 19, 1, 1, "TENSORSTORE_HTTP_THREADS", "Specifies the number of threads to use for HTTP requests.  When unset, a default of 4 threads are used."], [1689, 19, 1, 1, "TENSORSTORE_PREBUILT_DIR", "If specified, building is skipped, and instead setup.py expects to find the pre-built extension module in the specified directory, from a prior invocation of build_ext:"], [1698, 19, 1, 1, "TENSORSTORE_S3_RATE_LIMITER_DOUBLING_TIME", "Specifies the time in seconds to wait before doubling the rate limit. Defaults to not setting a doubleing time."], [1698, 19, 1, 1, "TENSORSTORE_S3_REQUEST_CONCURRENCY", "Specifies the concurrency level used by the shared Context Context.s3_request_concurrency resource. Defaults to 32."], [1689, 19, 1, 1, "TENSORSTORE_SYSTEM_LIBS", "To use system-provided libraries, set the TENSORSTORE_SYSTEM_LIBS environment variable to a comma-separated list of the following identifiers prior to invoking Bazel:"], [1686, 19, 1, 1, "TENSORSTORE_USE_FALLBACK_SSL_CERTS", "Enables or disables searching for SSL certificates in common locations. Defaults to allowed."], [1686, 19, 1, 1, "TENSORSTORE_VERBOSE_LOGGING", "Enables debug logging for tensorstore internal subsystems.  Set to comma separated list of values, where each value is one of name=int or just name. When all is, present, then verbose logging will be enabled for each subsystem, otherwise logging is set only for those subsystems present in the list."], [1686, 19, 1, 1, "all_proxy", "Specifies a proxy server to use for making any HTTP or HTTPS request.  Refer to the libcurl documentation for more details."], [1686, 19, 1, 1, "http_proxy", "Specifies a proxy server to use for making HTTP (not HTTPS) requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [1686, 19, 1, 1, "https_proxy", "Specifies a proxy server to use for making HTTPS requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [1686, 19, 1, 1, "no_proxy", "Specifies a comma-separated list of hostnames or ip addresses for which proxying is disabled.  Refer to the libcurl documentation for more details."]], "ChunkLayout": [[2164, 11, 2, "json-ChunkLayout.chunk", "chunk", "Combined constraints on write/read/codec chunks."], [2164, 11, 2, "json-ChunkLayout.codec_chunk", "codec_chunk", "Constraints on the chunk grid used by the codec, if applicable."], [2164, 11, 2, "json-ChunkLayout.grid_origin", "grid_origin", "Specifies hard constraints on the origin of the chunk grid."], [2164, 11, 2, "json-ChunkLayout.grid_origin_soft_constraint", "grid_origin_soft_constraint", "Specifies preferred values for the origin of the chunk grid rather than hard constraints."], [2164, 11, 2, "json-ChunkLayout.inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [2164, 11, 2, "json-ChunkLayout.inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  If inner_order is also specified, it takes precedence."], [2164, 11, 2, "json-ChunkLayout.rank", "rank", "Number of dimensions."], [2164, 11, 2, "json-ChunkLayout.read_chunk", "read_chunk", "Constraints on the chunk grid over which reads may be efficiently partitioned."], [2164, 11, 2, "json-ChunkLayout.write_chunk", "write_chunk", "Constraints on the chunk grid over which writes may be efficiently partitioned."]], "ChunkLayout/Grid": [[2164, 11, 2, "json-ChunkLayout/Grid.aspect_ratio", "aspect_ratio", "Aspect ratio of the chunk shape."], [2164, 11, 2, "json-ChunkLayout/Grid.aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraint on aspect ratio, lower precedence than aspect_ratio."], [2164, 11, 2, "json-ChunkLayout/Grid.elements", "elements", "Preferred number of elements per chunk."], [2164, 11, 2, "json-ChunkLayout/Grid.elements_soft_constraint", "elements_soft_constraint", "Preferred number of elements per chunk, lower precedence than elements."], [2164, 11, 2, "json-ChunkLayout/Grid.shape", "shape", "Hard constraints on the chunk size for each dimension."], [2164, 11, 2, "json-ChunkLayout/Grid.shape_soft_constraint", "shape_soft_constraint", "Preferred chunk sizes for each dimension."]], "Codec": [[2164, 11, 2, "json-Codec.driver", "driver", "Driver identifier"]], "Context": [[0, 11, 2, "json-Context.<resource-type>", "&lt;resource-type&gt;", ""], [0, 11, 2, "json-Context.<resource-type>#<id>", "&lt;resource-type&gt;#&lt;id&gt;", ""], [1698, 10, 1, "json-Context.aws_credentials", "aws_credentials", ""], [1698, 10, 1, "json-Context.aws_credentials/anonymous", "aws_credentials/anonymous", ""], [1698, 10, 1, "json-Context.aws_credentials/default", "aws_credentials/default", ""], [1698, 10, 1, "json-Context.aws_credentials/ecs", "aws_credentials/ecs", ""], [1698, 10, 1, "json-Context.aws_credentials/environment", "aws_credentials/environment", ""], [1698, 10, 1, "json-Context.aws_credentials/imds", "aws_credentials/imds", ""], [1698, 10, 1, "json-Context.aws_credentials/profile", "aws_credentials/profile", ""], [0, 10, 1, "json-Context.cache_pool", "cache_pool", ""], [1699, 10, 1, "json-Context.data_copy_concurrency", "data_copy_concurrency", ""], [1691, 10, 1, "json-Context.experimental_gcs_rate_limiter", "experimental_gcs_rate_limiter", ""], [1698, 10, 1, "json-Context.experimental_s3_rate_limiter", "experimental_s3_rate_limiter", ""], [1690, 10, 1, "json-Context.file_io_concurrency", "file_io_concurrency", ""], [1690, 10, 1, "json-Context.file_io_locking", "file_io_locking", "Specifies locking strategy to use for file writes."], [1690, 10, 1, "json-Context.file_io_memmap", "file_io_memmap", "Specifies use of memory-mapped I/O for reads."], [1690, 10, 1, "json-Context.file_io_sync", "file_io_sync", "Specifies durability of writes."], [1691, 10, 1, "json-Context.gcs_request_concurrency", "gcs_request_concurrency", ""], [1691, 10, 1, "json-Context.gcs_request_retries", "gcs_request_retries", ""], [1691, 10, 1, "json-Context.gcs_user_project", "gcs_user_project", ""], [1692, 10, 1, "json-Context.http_request_concurrency", "http_request_concurrency", ""], [1692, 10, 1, "json-Context.http_request_retries", "http_request_retries", ""], [1695, 10, 1, "json-Context.memory_key_value_store", "memory_key_value_store", ""], [1697, 10, 1, "json-Context.ocdbt_coordinator", "ocdbt_coordinator", "Enables distributed coordination for OCDBT."], [1698, 10, 1, "json-Context.s3_request_concurrency", "s3_request_concurrency", ""], [1698, 10, 1, "json-Context.s3_request_retries", "s3_request_retries", ""]], "Context.aws_credentials": [[1698, 11, 2, "json-Context.aws_credentials.type", "type", ""]], "Context.aws_credentials/anonymous": [[1698, 11, 2, "json-Context.aws_credentials/anonymous.type", "type", ""]], "Context.aws_credentials/default": [[1698, 11, 2, "json-Context.aws_credentials/default.profile", "profile", "The profile name in the ~/.aws/credentials file."], [1698, 11, 2, "json-Context.aws_credentials/default.type", "type", ""]], "Context.aws_credentials/ecs": [[1698, 11, 2, "json-Context.aws_credentials/ecs.auth_token_file", "auth_token_file", "File path containing the Authorization token to include in an ECS credentials query."], [1698, 11, 2, "json-Context.aws_credentials/ecs.endpoint", "endpoint", "URL used to request credentials from the ECS container metadata service."], [1698, 11, 2, "json-Context.aws_credentials/ecs.type", "type", ""]], "Context.aws_credentials/environment": [[1698, 11, 2, "json-Context.aws_credentials/environment.type", "type", ""]], "Context.aws_credentials/imds": [[1698, 11, 2, "json-Context.aws_credentials/imds.type", "type", ""]], "Context.aws_credentials/profile": [[1698, 11, 2, "json-Context.aws_credentials/profile.config_file", "config_file", "The path to the AWS config file."], [1698, 11, 2, "json-Context.aws_credentials/profile.credentials_file", "credentials_file", "The path to the AWS credentials file."], [1698, 11, 2, "json-Context.aws_credentials/profile.profile", "profile", "The profile name in the ~/.aws/credentials file."], [1698, 11, 2, "json-Context.aws_credentials/profile.type", "type", ""]], "Context.cache_pool": [[0, 11, 2, "json-Context.cache_pool.total_bytes_limit", "total_bytes_limit", ""]], "Context.data_copy_concurrency": [[1699, 11, 2, "json-Context.data_copy_concurrency.limit", "limit", ""]], "Context.experimental_gcs_rate_limiter": [[1691, 11, 2, "json-Context.experimental_gcs_rate_limiter.doubling_time", "doubling_time", ""], [1691, 11, 2, "json-Context.experimental_gcs_rate_limiter.read_rate", "read_rate", ""], [1691, 11, 2, "json-Context.experimental_gcs_rate_limiter.write_rate", "write_rate", ""]], "Context.experimental_s3_rate_limiter": [[1698, 11, 2, "json-Context.experimental_s3_rate_limiter.doubling_time", "doubling_time", ""], [1698, 11, 2, "json-Context.experimental_s3_rate_limiter.read_rate", "read_rate", ""], [1698, 11, 2, "json-Context.experimental_s3_rate_limiter.write_rate", "write_rate", ""]], "Context.file_io_concurrency": [[1690, 11, 2, "json-Context.file_io_concurrency.limit", "limit", ""]], "Context.file_io_locking": [[1690, 11, 2, "json-Context.file_io_locking.acquire_timeout", "acquire_timeout", ""], [1690, 11, 2, "json-Context.file_io_locking.mode", "mode", "Selects the locking mode."]], "Context.gcs_request_concurrency": [[1691, 11, 2, "json-Context.gcs_request_concurrency.limit", "limit", ""]], "Context.gcs_request_retries": [[1691, 11, 2, "json-Context.gcs_request_retries.initial_delay", "initial_delay", ""], [1691, 11, 2, "json-Context.gcs_request_retries.max_delay", "max_delay", ""], [1691, 11, 2, "json-Context.gcs_request_retries.max_retries", "max_retries", ""]], "Context.gcs_user_project": [[1691, 11, 2, "json-Context.gcs_user_project.project_id", "project_id", "Google Cloud project id, e.g. \"my-project\".  The Google Cloud account that is used must have appropriate permissions to bill to the specified project."]], "Context.http_request_concurrency": [[1692, 11, 2, "json-Context.http_request_concurrency.limit", "limit", ""]], "Context.http_request_retries": [[1692, 11, 2, "json-Context.http_request_retries.initial_delay", "initial_delay", ""], [1692, 11, 2, "json-Context.http_request_retries.max_delay", "max_delay", ""], [1692, 11, 2, "json-Context.http_request_retries.max_retries", "max_retries", ""]], "Context.ocdbt_coordinator": [[1697, 11, 2, "json-Context.ocdbt_coordinator.address", "address", "Address of gRPC coordinator server."], [1697, 11, 2, "json-Context.ocdbt_coordinator.lease_duration", "lease_duration", "Duration of lease to request from coordinator for B+tree key ranges."]], "Context.s3_request_concurrency": [[1698, 11, 2, "json-Context.s3_request_concurrency.limit", "limit", ""]], "Context.s3_request_retries": [[1698, 11, 2, "json-Context.s3_request_retries.initial_delay", "initial_delay", ""], [1698, 11, 2, "json-Context.s3_request_retries.max_delay", "max_delay", ""], [1698, 11, 2, "json-Context.s3_request_retries.max_retries", "max_retries", ""]], "DownsampleMethod": [[1672, 11, 2, "json-DownsampleMethod.max", "max", ""], [1672, 11, 2, "json-DownsampleMethod.mean", "mean", ""], [1672, 11, 2, "json-DownsampleMethod.median", "median", ""], [1672, 11, 2, "json-DownsampleMethod.min", "min", ""], [1672, 11, 2, "json-DownsampleMethod.mode", "mode", ""], [1672, 11, 2, "json-DownsampleMethod.stride", "stride", ""]], "IndexDomain": [[1688, 11, 2, "json-IndexDomain.exclusive_max", "exclusive_max", "Exclusive upper bounds of the domain."], [1688, 11, 2, "json-IndexDomain.inclusive_max", "inclusive_max", "Inclusive upper bounds of the domain."], [1688, 11, 2, "json-IndexDomain.inclusive_min", "inclusive_min", "Inclusive lower bounds of the domain."], [1688, 11, 2, "json-IndexDomain.labels", "labels", "Dimension labels for each dimension."], [1688, 11, 2, "json-IndexDomain.rank", "rank", "Number of dimensions."], [1688, 11, 2, "json-IndexDomain.shape", "shape", "Extent of each dimension of the domain."]], "IndexTransform": [[1688, 11, 2, "json-IndexTransform.input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds of the input domain."], [1688, 11, 2, "json-IndexTransform.input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds of the input domain."], [1688, 11, 2, "json-IndexTransform.input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds of the input domain."], [1688, 11, 2, "json-IndexTransform.input_labels", "input_labels", "Dimension labels for each input domain dimension."], [1688, 11, 2, "json-IndexTransform.input_rank", "input_rank", "Number of input dimensions."], [1688, 11, 2, "json-IndexTransform.input_shape", "input_shape", "Extent of each dimension of the input domain."], [1688, 11, 2, "json-IndexTransform.output", "output", "Specifies the output index map for each output dimension."]], "KeyValueStoreBackedChunkDriver": [[1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.assume_cached_metadata", "assume_cached_metadata", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.assume_metadata", "assume_metadata", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.cache_pool", "cache_pool", "Cache pool for data."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.context", "context", "Specifies context resources that augment/override the parent context."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.create", "create", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.data_copy_concurrency", "data_copy_concurrency", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.delete_existing", "delete_existing", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.driver", "driver", "Driver identifier"], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.dtype", "dtype", "Specifies the data type."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.fill_missing_data_reads", "fill_missing_data_reads", "Replace missing chunks with the fill value when reading."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.kvstore", "kvstore", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.metadata_cache_pool", "metadata_cache_pool", "Cache pool for metadata only."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.open", "open", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.path", "path", "Additional path within the KvStore specified by kvstore."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.rank", "rank", "Specifies the rank of the TensorStore."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_data", "recheck_cached_data", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata", "recheck_cached_metadata", ""], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.schema", "schema", "Specifies constraints on the schema."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.store_data_equal_to_fill_value", "store_data_equal_to_fill_value", "Store all explicitly written data, even if it is equal to the fill value."], [1679, 11, 2, "json-KeyValueStoreBackedChunkDriver.transform", "transform", "Specifies a transform."]], "KvStore": [[1693, 11, 2, "json-KvStore.context", "context", ""], [1693, 11, 2, "json-KvStore.driver", "driver", "Key-value store driver identifier"], [1693, 11, 2, "json-KvStore.path", "path", "Key prefix within the key-value store."]], "OutputIndexMap": [[1688, 11, 2, "json-OutputIndexMap.index_array", "index_array", "If present, indicates that this output dimension uses an index array map, with the index array specified as a nested list of rank equal to the input_rank."], [1688, 11, 2, "json-OutputIndexMap.index_array_bounds", "index_array_bounds", ""], [1688, 11, 2, "json-OutputIndexMap.input_dimension", "input_dimension", "If present, indicates that this output dimension uses a single input dimension map with the specified input dimension.  Must not be specified in conjunction with index_array."], [1688, 11, 2, "json-OutputIndexMap.offset", "offset", "Specifies an offset for this output dimension.  If neither input_dimension nor index_array is specified, this specifies the constant value to which this output dimension maps."], [1688, 11, 2, "json-OutputIndexMap.stride", "stride", "Multiplier for the input index specified by input_dimension or the index array value specified by index_array."]], "Schema": [[2164, 11, 2, "json-Schema.chunk_layout", "chunk_layout", "Data storage layout constraints."], [2164, 11, 2, "json-Schema.codec", "codec", ""], [2164, 11, 2, "json-Schema.dimension_units", "dimension_units", "Physical units of each dimension."], [2164, 11, 2, "json-Schema.domain", "domain", "Domain of the TensorStore, including bounds and optional dimension labels."], [2164, 11, 2, "json-Schema.dtype", "dtype", "Specifies the data type of the TensorStore."], [2164, 11, 2, "json-Schema.fill_value", "fill_value", "Fill value to use for missing data."], [2164, 11, 2, "json-Schema.rank", "rank", "Number of dimensions."]], "TensorStore": [[2165, 11, 2, "json-TensorStore.context", "context", "Specifies context resources that augment/override the parent context."], [2165, 11, 2, "json-TensorStore.driver", "driver", "Driver identifier"], [2165, 11, 2, "json-TensorStore.dtype", "dtype", "Specifies the data type."], [2165, 11, 2, "json-TensorStore.rank", "rank", "Specifies the rank of the TensorStore."], [2165, 11, 2, "json-TensorStore.schema", "schema", "Specifies constraints on the schema."], [2165, 11, 2, "json-TensorStore.transform", "transform", "Specifies a transform."]], "driver/array": [[1670, 11, 2, "json-driver/array.array", "array", "Nested array of rank equal to rank specifying the initial value."], [1670, 11, 2, "json-driver/array.context", "context", "Specifies context resources that augment/override the parent context."], [1670, 11, 2, "json-driver/array.data_copy_concurrency", "data_copy_concurrency", ""], [1670, 11, 2, "json-driver/array.driver", "driver", ""], [1670, 11, 2, "json-driver/array.dtype", "dtype", "Specifies the data type."], [1670, 11, 2, "json-driver/array.rank", "rank", "Specifies the rank of the TensorStore."], [1670, 11, 2, "json-driver/array.schema", "schema", "Specifies constraints on the schema."], [1670, 11, 2, "json-driver/array.transform", "transform", "Specifies a transform."]], "driver/avif": [[1673, 11, 2, "json-driver/avif.cache_pool", "cache_pool", ""], [1673, 11, 2, "json-driver/avif.context", "context", "Specifies context resources that augment/override the parent context."], [1673, 11, 2, "json-driver/avif.data_copy_concurrency", "data_copy_concurrency", ""], [1673, 11, 2, "json-driver/avif.driver", "driver", ""], [1673, 11, 2, "json-driver/avif.dtype", "dtype", ""], [1673, 11, 2, "json-driver/avif.kvstore", "kvstore", ""], [1673, 11, 2, "json-driver/avif.quantizer", "quantizer", ""], [1673, 11, 2, "json-driver/avif.rank", "rank", "Specifies the rank of the TensorStore."], [1673, 11, 2, "json-driver/avif.schema", "schema", "Specifies constraints on the schema."], [1673, 11, 2, "json-driver/avif.speed", "speed", ""], [1673, 11, 2, "json-driver/avif.transform", "transform", "Specifies a transform."]], "driver/bmp": [[1674, 11, 2, "json-driver/bmp.cache_pool", "cache_pool", ""], [1674, 11, 2, "json-driver/bmp.context", "context", "Specifies context resources that augment/override the parent context."], [1674, 11, 2, "json-driver/bmp.data_copy_concurrency", "data_copy_concurrency", ""], [1674, 11, 2, "json-driver/bmp.driver", "driver", ""], [1674, 11, 2, "json-driver/bmp.dtype", "dtype", ""], [1674, 11, 2, "json-driver/bmp.kvstore", "kvstore", ""], [1674, 11, 2, "json-driver/bmp.rank", "rank", "Specifies the rank of the TensorStore."], [1674, 11, 2, "json-driver/bmp.schema", "schema", "Specifies constraints on the schema."], [1674, 11, 2, "json-driver/bmp.transform", "transform", "Specifies a transform."]], "driver/cast": [[1671, 11, 2, "json-driver/cast.base", "base", "Base TensorStore to convert."], [1671, 11, 2, "json-driver/cast.context", "context", "Specifies context resources that augment/override the parent context."], [1671, 11, 2, "json-driver/cast.driver", "driver", ""], [1671, 11, 2, "json-driver/cast.dtype", "dtype", "Specifies the data type under which to view the base TensorStore."], [1671, 11, 2, "json-driver/cast.rank", "rank", "Specifies the rank of the TensorStore."], [1671, 11, 2, "json-driver/cast.schema", "schema", "Specifies constraints on the schema."], [1671, 11, 2, "json-driver/cast.transform", "transform", "Specifies a transform."]], "driver/downsample": [[1672, 11, 2, "json-driver/downsample.base", "base", "Base TensorStore to downsample."], [1672, 11, 2, "json-driver/downsample.context", "context", "Specifies context resources that augment/override the parent context."], [1672, 11, 2, "json-driver/downsample.downsample_factors", "downsample_factors", ""], [1672, 11, 2, "json-driver/downsample.downsample_method", "downsample_method", ""], [1672, 11, 2, "json-driver/downsample.driver", "driver", ""], [1672, 11, 2, "json-driver/downsample.dtype", "dtype", "Specifies the data type."], [1672, 11, 2, "json-driver/downsample.rank", "rank", "Specifies the rank of the TensorStore."], [1672, 11, 2, "json-driver/downsample.schema", "schema", "Specifies constraints on the schema."], [1672, 11, 2, "json-driver/downsample.transform", "transform", "Specifies a transform."]], "driver/jpeg": [[1675, 11, 2, "json-driver/jpeg.cache_pool", "cache_pool", ""], [1675, 11, 2, "json-driver/jpeg.context", "context", "Specifies context resources that augment/override the parent context."], [1675, 11, 2, "json-driver/jpeg.data_copy_concurrency", "data_copy_concurrency", ""], [1675, 11, 2, "json-driver/jpeg.driver", "driver", ""], [1675, 11, 2, "json-driver/jpeg.dtype", "dtype", ""], [1675, 11, 2, "json-driver/jpeg.kvstore", "kvstore", ""], [1675, 11, 2, "json-driver/jpeg.quality", "quality", ""], [1675, 11, 2, "json-driver/jpeg.rank", "rank", "Specifies the rank of the TensorStore."], [1675, 11, 2, "json-driver/jpeg.schema", "schema", "Specifies constraints on the schema."], [1675, 11, 2, "json-driver/jpeg.transform", "transform", "Specifies a transform."]], "driver/json": [[1680, 11, 2, "json-driver/json.cache_pool", "cache_pool", ""], [1680, 11, 2, "json-driver/json.context", "context", "Specifies context resources that augment/override the parent context."], [1680, 11, 2, "json-driver/json.data_copy_concurrency", "data_copy_concurrency", ""], [1680, 11, 2, "json-driver/json.driver", "driver", ""], [1680, 11, 2, "json-driver/json.dtype", "dtype", ""], [1680, 11, 2, "json-driver/json.json_pointer", "json_pointer", ""], [1680, 11, 2, "json-driver/json.kvstore", "kvstore", ""], [1680, 11, 2, "json-driver/json.path", "path", "Additional path to the JSON file within the KvStore specified by kvstore."], [1680, 11, 2, "json-driver/json.rank", "rank", ""], [1680, 11, 2, "json-driver/json.recheck_cached_data", "recheck_cached_data", ""], [1680, 11, 2, "json-driver/json.schema", "schema", "Specifies constraints on the schema."], [1680, 11, 2, "json-driver/json.transform", "transform", "Specifies a transform."]], "driver/n5": [[1681, 11, 2, "json-driver/n5.assume_cached_metadata", "assume_cached_metadata", ""], [1681, 11, 2, "json-driver/n5.assume_metadata", "assume_metadata", ""], [1681, 11, 2, "json-driver/n5.cache_pool", "cache_pool", "Cache pool for data."], [1681, 11, 2, "json-driver/n5.context", "context", "Specifies context resources that augment/override the parent context."], [1681, 11, 2, "json-driver/n5.create", "create", ""], [1681, 11, 2, "json-driver/n5.data_copy_concurrency", "data_copy_concurrency", ""], [1681, 11, 2, "json-driver/n5.delete_existing", "delete_existing", ""], [1681, 11, 2, "json-driver/n5.driver", "driver", ""], [1681, 11, 2, "json-driver/n5.dtype", "dtype", "Specifies the data type."], [1681, 11, 2, "json-driver/n5.fill_missing_data_reads", "fill_missing_data_reads", "Replace missing chunks with the fill value when reading."], [1681, 11, 2, "json-driver/n5.kvstore", "kvstore", ""], [1681, 11, 2, "json-driver/n5.metadata", "metadata", "N5 array metadata."], [1681, 11, 2, "json-driver/n5.metadata_cache_pool", "metadata_cache_pool", "Cache pool for metadata only."], [1681, 11, 2, "json-driver/n5.open", "open", ""], [1681, 11, 2, "json-driver/n5.path", "path", "Additional path within the KvStore specified by kvstore."], [1681, 11, 2, "json-driver/n5.rank", "rank", "Specifies the rank of the TensorStore."], [1681, 11, 2, "json-driver/n5.recheck_cached_data", "recheck_cached_data", ""], [1681, 11, 2, "json-driver/n5.recheck_cached_metadata", "recheck_cached_metadata", ""], [1681, 11, 2, "json-driver/n5.schema", "schema", "Specifies constraints on the schema."], [1681, 11, 2, "json-driver/n5.store_data_equal_to_fill_value", "store_data_equal_to_fill_value", "Store all explicitly written data, even if it is equal to the fill value."], [1681, 11, 2, "json-driver/n5.transform", "transform", "Specifies a transform."]], "driver/n5.metadata": [[1681, 11, 2, "json-driver/n5.metadata.axes", "axes", "Specifies a label for each dimension of the dataset."], [1681, 11, 2, "json-driver/n5.metadata.blockSize", "blockSize", "Chunk dimensions."], [1681, 11, 2, "json-driver/n5.metadata.compression", "compression", "Specifies the chunk compression method."], [1681, 11, 2, "json-driver/n5.metadata.dataType", "dataType", "Specifies the data type."], [1681, 11, 2, "json-driver/n5.metadata.dimensions", "dimensions", "Dimensions of the dataset."], [1681, 11, 2, "json-driver/n5.metadata.resolution", "resolution", "Specifies the multiplier for the physical units."], [1681, 11, 2, "json-driver/n5.metadata.units", "units", "Specifies the base physical unit for each dimension."]], "driver/n5/Codec": [[1681, 11, 2, "json-driver/n5/Codec.compression", "compression", "Specifies the chunk compression method."], [1681, 11, 2, "json-driver/n5/Codec.driver", "driver", ""]], "driver/n5/Compression": [[1681, 11, 2, "json-driver/n5/Compression.type", "type", ""]], "driver/n5/Compression/blosc": [[1681, 11, 2, "json-driver/n5/Compression/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [1681, 11, 2, "json-driver/n5/Compression/blosc.cname", "cname", ""], [1681, 11, 2, "json-driver/n5/Compression/blosc.shuffle", "shuffle", ""], [1681, 11, 2, "json-driver/n5/Compression/blosc.type", "type", ""]], "driver/n5/Compression/bzip2": [[1681, 11, 2, "json-driver/n5/Compression/bzip2.blockSize", "blockSize", "Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."], [1681, 11, 2, "json-driver/n5/Compression/bzip2.type", "type", ""]], "driver/n5/Compression/gzip": [[1681, 11, 2, "json-driver/n5/Compression/gzip.level", "level", "Specifies the zlib compression level to use."], [1681, 11, 2, "json-driver/n5/Compression/gzip.type", "type", ""], [1681, 11, 2, "json-driver/n5/Compression/gzip.useZlib", "useZlib", ""]], "driver/n5/Compression/raw": [[1681, 11, 2, "json-driver/n5/Compression/raw.type", "type", ""]], "driver/n5/Compression/xz": [[1681, 11, 2, "json-driver/n5/Compression/xz.preset", "preset", ""], [1681, 11, 2, "json-driver/n5/Compression/xz.type", "type", ""]], "driver/n5/Compression/zstd": [[1681, 11, 2, "json-driver/n5/Compression/zstd.level", "level", ""], [1681, 11, 2, "json-driver/n5/Compression/zstd.type", "type", ""]], "driver/neuroglancer_precomputed": [[1682, 11, 2, "json-driver/neuroglancer_precomputed.assume_cached_metadata", "assume_cached_metadata", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.assume_metadata", "assume_metadata", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.cache_pool", "cache_pool", "Cache pool for data."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.context", "context", "Specifies context resources that augment/override the parent context."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.create", "create", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.data_copy_concurrency", "data_copy_concurrency", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.delete_existing", "delete_existing", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.driver", "driver", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.dtype", "dtype", "Specifies the data type."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.fill_missing_data_reads", "fill_missing_data_reads", "Replace missing chunks with the fill value when reading."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.kvstore", "kvstore", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.metadata_cache_pool", "metadata_cache_pool", "Cache pool for metadata only."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata", "multiscale_metadata", "Scale-independent metadata."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.open", "open", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.path", "path", "Additional path within the KvStore specified by kvstore."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.rank", "rank", "Specifies the rank of the TensorStore."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.recheck_cached_data", "recheck_cached_data", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.recheck_cached_metadata", "recheck_cached_metadata", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_index", "scale_index", "Zero-based index of the scale to open or create."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata", "scale_metadata", "Per-scale metadata."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.schema", "schema", "Specifies constraints on the schema."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.store_data_equal_to_fill_value", "store_data_equal_to_fill_value", "Store all explicitly written data, even if it is equal to the fill value."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.transform", "transform", "Specifies a transform."]], "driver/neuroglancer_precomputed.multiscale_metadata": [[1682, 11, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.data_type", "data_type", "Specifies the data type."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels", "num_channels", "Number of channels."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.type", "type", "Specifying the type of volume."]], "driver/neuroglancer_precomputed.scale_metadata": [[1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.chunk_size", "chunk_size", "Chunk dimensions (XYZ order)."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size", "compressed_segmentation_block_size", "Block size for compressed segmentation encoding."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.encoding", "encoding", "Specifies the chunk encoding."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.key", "key", "Specifies the scale key (relative to path)."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.png_level", "png_level", "PNG compression level."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.resolution", "resolution", "Voxel size in nanometers (XYZ order)."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.sharding", "sharding", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.size", "size", "Voxel dimensions of the volume (XYZ order)."], [1682, 11, 2, "json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset", "voxel_offset", "Voxel origin of the volume (XYZ order)."]], "driver/neuroglancer_precomputed/Codec": [[1682, 11, 2, "json-driver/neuroglancer_precomputed/Codec.driver", "driver", ""], [1682, 11, 2, "json-driver/neuroglancer_precomputed/Codec.encoding", "encoding", "Specifies the chunk encoding."], [1682, 11, 2, "json-driver/neuroglancer_precomputed/Codec.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [1682, 11, 2, "json-driver/neuroglancer_precomputed/Codec.png_level", "png_level", "PNG compression level."], [1682, 11, 2, "json-driver/neuroglancer_precomputed/Codec.shard_data_encoding", "shard_data_encoding", "Additional data compression when using the sharded format."]], "driver/png": [[1676, 11, 2, "json-driver/png.cache_pool", "cache_pool", ""], [1676, 11, 2, "json-driver/png.compression_level", "compression_level", ""], [1676, 11, 2, "json-driver/png.context", "context", "Specifies context resources that augment/override the parent context."], [1676, 11, 2, "json-driver/png.data_copy_concurrency", "data_copy_concurrency", ""], [1676, 11, 2, "json-driver/png.driver", "driver", ""], [1676, 11, 2, "json-driver/png.dtype", "dtype", ""], [1676, 11, 2, "json-driver/png.kvstore", "kvstore", ""], [1676, 11, 2, "json-driver/png.rank", "rank", "Specifies the rank of the TensorStore."], [1676, 11, 2, "json-driver/png.schema", "schema", "Specifies constraints on the schema."], [1676, 11, 2, "json-driver/png.transform", "transform", "Specifies a transform."]], "driver/stack": [[1683, 11, 2, "json-driver/stack.context", "context", "Specifies context resources that augment/override the parent context."], [1683, 11, 2, "json-driver/stack.data_copy_concurrency", "data_copy_concurrency", ""], [1683, 11, 2, "json-driver/stack.driver", "driver", ""], [1683, 11, 2, "json-driver/stack.dtype", "dtype", "Specifies the data type."], [1683, 11, 2, "json-driver/stack.layers", "layers", "Array of layered tensorstore drivers."], [1683, 11, 2, "json-driver/stack.rank", "rank", "Specifies the rank of the TensorStore."], [1683, 11, 2, "json-driver/stack.schema", "schema", "Specifies constraints on the schema."], [1683, 11, 2, "json-driver/stack.transform", "transform", "Specifies a transform."]], "driver/tiff": [[1677, 11, 2, "json-driver/tiff.cache_pool", "cache_pool", ""], [1677, 11, 2, "json-driver/tiff.context", "context", "Specifies context resources that augment/override the parent context."], [1677, 11, 2, "json-driver/tiff.data_copy_concurrency", "data_copy_concurrency", ""], [1677, 11, 2, "json-driver/tiff.driver", "driver", ""], [1677, 11, 2, "json-driver/tiff.dtype", "dtype", ""], [1677, 11, 2, "json-driver/tiff.kvstore", "kvstore", ""], [1677, 11, 2, "json-driver/tiff.page", "page", ""], [1677, 11, 2, "json-driver/tiff.rank", "rank", "Specifies the rank of the TensorStore."], [1677, 11, 2, "json-driver/tiff.schema", "schema", "Specifies constraints on the schema."], [1677, 11, 2, "json-driver/tiff.transform", "transform", "Specifies a transform."]], "driver/webp": [[1678, 11, 2, "json-driver/webp.cache_pool", "cache_pool", ""], [1678, 11, 2, "json-driver/webp.context", "context", "Specifies context resources that augment/override the parent context."], [1678, 11, 2, "json-driver/webp.data_copy_concurrency", "data_copy_concurrency", ""], [1678, 11, 2, "json-driver/webp.driver", "driver", ""], [1678, 11, 2, "json-driver/webp.dtype", "dtype", ""], [1678, 11, 2, "json-driver/webp.kvstore", "kvstore", ""], [1678, 11, 2, "json-driver/webp.lossless", "lossless", ""], [1678, 11, 2, "json-driver/webp.quality", "quality", ""], [1678, 11, 2, "json-driver/webp.rank", "rank", "Specifies the rank of the TensorStore."], [1678, 11, 2, "json-driver/webp.schema", "schema", "Specifies constraints on the schema."], [1678, 11, 2, "json-driver/webp.transform", "transform", "Specifies a transform."]], "driver/zarr": [[1684, 11, 2, "json-driver/zarr.assume_cached_metadata", "assume_cached_metadata", ""], [1684, 11, 2, "json-driver/zarr.assume_metadata", "assume_metadata", ""], [1684, 11, 2, "json-driver/zarr.cache_pool", "cache_pool", "Cache pool for data."], [1684, 11, 2, "json-driver/zarr.context", "context", "Specifies context resources that augment/override the parent context."], [1684, 11, 2, "json-driver/zarr.create", "create", ""], [1684, 11, 2, "json-driver/zarr.data_copy_concurrency", "data_copy_concurrency", ""], [1684, 11, 2, "json-driver/zarr.delete_existing", "delete_existing", ""], [1684, 11, 2, "json-driver/zarr.driver", "driver", ""], [1684, 11, 2, "json-driver/zarr.dtype", "dtype", "Specifies the data type."], [1684, 11, 2, "json-driver/zarr.field", "field", "Name of field to open."], [1684, 11, 2, "json-driver/zarr.fill_missing_data_reads", "fill_missing_data_reads", "Replace missing chunks with the fill value when reading."], [1684, 11, 2, "json-driver/zarr.key_encoding", "key_encoding", "Specifies the encoding of chunk indices into key-value store keys."], [1684, 11, 2, "json-driver/zarr.kvstore", "kvstore", ""], [1684, 11, 2, "json-driver/zarr.metadata", "metadata", "Zarr array metadata."], [1684, 11, 2, "json-driver/zarr.metadata_cache_pool", "metadata_cache_pool", "Cache pool for metadata only."], [1684, 11, 2, "json-driver/zarr.metadata_key", "metadata_key", "Specifies the key under which to store the array metadata in JSON format."], [1684, 11, 2, "json-driver/zarr.open", "open", ""], [1684, 11, 2, "json-driver/zarr.path", "path", "Additional path within the KvStore specified by kvstore."], [1684, 11, 2, "json-driver/zarr.rank", "rank", "Specifies the rank of the TensorStore."], [1684, 11, 2, "json-driver/zarr.recheck_cached_data", "recheck_cached_data", ""], [1684, 11, 2, "json-driver/zarr.recheck_cached_metadata", "recheck_cached_metadata", ""], [1684, 11, 2, "json-driver/zarr.schema", "schema", "Specifies constraints on the schema."], [1684, 11, 2, "json-driver/zarr.store_data_equal_to_fill_value", "store_data_equal_to_fill_value", "Store all explicitly written data, even if it is equal to the fill value."], [1684, 11, 2, "json-driver/zarr.transform", "transform", "Specifies a transform."]], "driver/zarr.metadata": [[1684, 11, 2, "json-driver/zarr.metadata.chunks", "chunks", "Chunk dimensions."], [1684, 11, 2, "json-driver/zarr.metadata.compressor", "compressor", "Specifies the chunk compression method."], [1684, 11, 2, "json-driver/zarr.metadata.dimension_separator", "dimension_separator", "Specifies the encoding of chunk indices into key-value store keys."], [1684, 11, 2, "json-driver/zarr.metadata.dtype", "dtype", "Specifies the scalar or structured data type."], [1684, 11, 2, "json-driver/zarr.metadata.fill_value", "fill_value", "Specifies the fill value."], [1684, 11, 2, "json-driver/zarr.metadata.filters", "filters", "Specifies the filters to apply to chunks."], [1684, 11, 2, "json-driver/zarr.metadata.order", "order", "Specifies the data layout for encoded chunks."], [1684, 11, 2, "json-driver/zarr.metadata.shape", "shape", "Chunked dimensions of the array."], [1684, 11, 2, "json-driver/zarr.metadata.zarr_format", "zarr_format", ""]], "driver/zarr/Codec": [[1684, 11, 2, "json-driver/zarr/Codec.compressor", "compressor", "Specifies the chunk compression method."], [1684, 11, 2, "json-driver/zarr/Codec.driver", "driver", ""], [1684, 11, 2, "json-driver/zarr/Codec.filters", "filters", "Specifies the filters to apply to chunks."]], "driver/zarr/Compressor": [[1684, 11, 2, "json-driver/zarr/Compressor.id", "id", ""]], "driver/zarr/Compressor/blosc": [[1684, 11, 2, "json-driver/zarr/Compressor/blosc.blocksize", "blocksize", "Specifies the Blosc blocksize."], [1684, 11, 2, "json-driver/zarr/Compressor/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [1684, 11, 2, "json-driver/zarr/Compressor/blosc.cname", "cname", ""], [1684, 11, 2, "json-driver/zarr/Compressor/blosc.id", "id", ""], [1684, 11, 2, "json-driver/zarr/Compressor/blosc.shuffle", "shuffle", ""]], "driver/zarr/Compressor/bz2": [[1684, 11, 2, "json-driver/zarr/Compressor/bz2.id", "id", ""], [1684, 11, 2, "json-driver/zarr/Compressor/bz2.level", "level", "Specifies the bzip2 buffer size/compression level to use."]], "driver/zarr/Compressor/zlib": [[1684, 11, 2, "json-driver/zarr/Compressor/zlib.id", "id", ""], [1684, 11, 2, "json-driver/zarr/Compressor/zlib.level", "level", "Specifies the zlib compression level to use."]], "driver/zarr/Compressor/zstd": [[1684, 11, 2, "json-driver/zarr/Compressor/zstd.id", "id", ""], [1684, 11, 2, "json-driver/zarr/Compressor/zstd.level", "level", "Specifies the compression level to use."]], "driver/zarr3": [[1685, 11, 2, "json-driver/zarr3.assume_cached_metadata", "assume_cached_metadata", ""], [1685, 11, 2, "json-driver/zarr3.assume_metadata", "assume_metadata", ""], [1685, 11, 2, "json-driver/zarr3.cache_pool", "cache_pool", "Cache pool for data."], [1685, 11, 2, "json-driver/zarr3.context", "context", "Specifies context resources that augment/override the parent context."], [1685, 11, 2, "json-driver/zarr3.create", "create", ""], [1685, 11, 2, "json-driver/zarr3.data_copy_concurrency", "data_copy_concurrency", ""], [1685, 11, 2, "json-driver/zarr3.delete_existing", "delete_existing", ""], [1685, 11, 2, "json-driver/zarr3.driver", "driver", ""], [1685, 11, 2, "json-driver/zarr3.dtype", "dtype", "Specifies the data type."], [1685, 11, 2, "json-driver/zarr3.fill_missing_data_reads", "fill_missing_data_reads", "Replace missing chunks with the fill value when reading."], [1685, 11, 2, "json-driver/zarr3.kvstore", "kvstore", ""], [1685, 11, 2, "json-driver/zarr3.metadata", "metadata", "Zarr v3 array metadata."], [1685, 11, 2, "json-driver/zarr3.metadata_cache_pool", "metadata_cache_pool", "Cache pool for metadata only."], [1685, 11, 2, "json-driver/zarr3.open", "open", ""], [1685, 11, 2, "json-driver/zarr3.path", "path", "Additional path within the KvStore specified by kvstore."], [1685, 11, 2, "json-driver/zarr3.rank", "rank", "Specifies the rank of the TensorStore."], [1685, 11, 2, "json-driver/zarr3.recheck_cached_data", "recheck_cached_data", ""], [1685, 11, 2, "json-driver/zarr3.recheck_cached_metadata", "recheck_cached_metadata", ""], [1685, 11, 2, "json-driver/zarr3.schema", "schema", "Specifies constraints on the schema."], [1685, 11, 2, "json-driver/zarr3.store_data_equal_to_fill_value", "store_data_equal_to_fill_value", "Store all explicitly written data, even if it is equal to the fill value."], [1685, 11, 2, "json-driver/zarr3.transform", "transform", "Specifies a transform."]], "driver/zarr3/ChunkKeyEncoding": [[1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.configuration", "configuration", "Configuration options."], [1685, 10, 1, "json-driver/zarr3/ChunkKeyEncoding.default", "default", "Default chunk key encoding."], [1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.name", "name", "Identifies the chunk key encoding."], [1685, 10, 1, "json-driver/zarr3/ChunkKeyEncoding.v2", "v2", "Zarr v2-compatible chunk key encoding."]], "driver/zarr3/ChunkKeyEncoding.default": [[1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.default.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.default.name", "name", ""]], "driver/zarr3/ChunkKeyEncoding.default.configuration": [[1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.default.configuration.separator", "separator", "Separator character between dimensions"]], "driver/zarr3/ChunkKeyEncoding.v2": [[1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.name", "name", ""]], "driver/zarr3/ChunkKeyEncoding.v2.configuration": [[1685, 11, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.configuration.separator", "separator", "Separator character between dimensions"]], "driver/zarr3/Codec": [[1685, 11, 2, "json-driver/zarr3/Codec.codecs", "codecs", ""], [1685, 11, 2, "json-driver/zarr3/Codec.driver", "driver", ""]], "driver/zarr3/Codec/blosc": [[1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.name", "name", ""]], "driver/zarr3/Codec/blosc.configuration": [[1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.blocksize", "blocksize", "Specifies the Blosc blocksize."], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.clevel", "clevel", "Specifies the Blosc compression level to use."], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.cname", "cname", ""], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle", "shuffle", ""], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.typesize", "typesize", "Specifies the stride in bytes for shuffling."]], "driver/zarr3/Codec/blosc.configuration.shuffle": [[1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.bitshuffle", "bitshuffle", "Bit-wise shuffle"], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.noshuffle", "noshuffle", "No shuffling."], [1685, 11, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.shuffle", "shuffle", "Byte-wise shuffle"]], "driver/zarr3/Codec/bytes": [[1685, 11, 2, "json-driver/zarr3/Codec/bytes.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/bytes.name", "name", ""]], "driver/zarr3/Codec/bytes.configuration": [[1685, 11, 2, "json-driver/zarr3/Codec/bytes.configuration.endian", "endian", ""]], "driver/zarr3/Codec/crc32c": [[1685, 11, 2, "json-driver/zarr3/Codec/crc32c.configuration", "configuration", "No configuration options are supported."], [1685, 11, 2, "json-driver/zarr3/Codec/crc32c.name", "name", ""]], "driver/zarr3/Codec/gzip": [[1685, 11, 2, "json-driver/zarr3/Codec/gzip.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/gzip.name", "name", ""]], "driver/zarr3/Codec/sharding_indexed": [[1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.name", "name", ""]], "driver/zarr3/Codec/sharding_indexed.configuration": [[1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.chunk_shape", "chunk_shape", "Shape of each sub-chunk."], [1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.codecs", "codecs", "Sub-chunk codec chain"], [1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.index_codecs", "index_codecs", "Shard index codec chain"], [1685, 11, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.index_location", "index_location", "Location of the shard index within the shard."]], "driver/zarr3/Codec/transpose": [[1685, 11, 2, "json-driver/zarr3/Codec/transpose.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/transpose.name", "name", ""]], "driver/zarr3/Codec/transpose.configuration": [[1685, 11, 2, "json-driver/zarr3/Codec/transpose.configuration.order", "order", "Permutation of the dimensions."]], "driver/zarr3/Codec/zstd": [[1685, 11, 2, "json-driver/zarr3/Codec/zstd.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Codec/zstd.name", "name", ""]], "driver/zarr3/Codec/zstd.configuration": [[1685, 11, 2, "json-driver/zarr3/Codec/zstd.configuration.level", "level", "Specifies the compression level to use."]], "driver/zarr3/DataType": [[1685, 11, 2, "json-driver/zarr3/DataType.bfloat16", "bfloat16", "bfloat16 floating-point format number."], [1685, 11, 2, "json-driver/zarr3/DataType.bool", "bool", "Boolean value."], [1685, 11, 2, "json-driver/zarr3/DataType.complex128", "complex128", "Complex number, where the real and imaginary components are each represented by a float64."], [1685, 11, 2, "json-driver/zarr3/DataType.complex64", "complex64", "Complex number, where the real and imaginary components are each represented by a float32."], [1685, 11, 2, "json-driver/zarr3/DataType.float16", "float16", "IEEE 754 binary16 half-precision floating-point number."], [1685, 11, 2, "json-driver/zarr3/DataType.float32", "float32", "IEEE 754 binary32 single-precision floating-point number."], [1685, 11, 2, "json-driver/zarr3/DataType.float64", "float64", "IEEE 754 binary64 double-precision floating-point number."], [1685, 11, 2, "json-driver/zarr3/DataType.int16", "int16", "16-bit signed two's-complement integer."], [1685, 11, 2, "json-driver/zarr3/DataType.int32", "int32", "32-bit signed two's-complement integer."], [1685, 11, 2, "json-driver/zarr3/DataType.int4", "int4", "4-bit signed two's-complement integer."], [1685, 11, 2, "json-driver/zarr3/DataType.int64", "int64", "64-bit signed two's-complement integer."], [1685, 11, 2, "json-driver/zarr3/DataType.int8", "int8", "8-bit signed two's-complement integer."], [1685, 11, 2, "json-driver/zarr3/DataType.uint16", "uint16", "16-bit unsigned integer."], [1685, 11, 2, "json-driver/zarr3/DataType.uint32", "uint32", "32-bit unsigned integer."], [1685, 11, 2, "json-driver/zarr3/DataType.uint64", "uint64", "64-bit unsigned integer."], [1685, 11, 2, "json-driver/zarr3/DataType.uint8", "uint8", "8-bit unsigned integer."]], "driver/zarr3/Metadata": [[1685, 11, 2, "json-driver/zarr3/Metadata.attributes", "attributes", "Specifies user-defined attributes."], [1685, 11, 2, "json-driver/zarr3/Metadata.chunk_grid", "chunk_grid", ""], [1685, 11, 2, "json-driver/zarr3/Metadata.chunk_key_encoding", "chunk_key_encoding", ""], [1685, 11, 2, "json-driver/zarr3/Metadata.codecs", "codecs", "Specifies the chunk encoding."], [1685, 11, 2, "json-driver/zarr3/Metadata.data_type", "data_type", "Data type of the array."], [1685, 11, 2, "json-driver/zarr3/Metadata.dimension_names", "dimension_names", "Specifies an optional name for each dimension."], [1685, 11, 2, "json-driver/zarr3/Metadata.fill_value", "fill_value", "Specifies the fill value."], [1685, 11, 2, "json-driver/zarr3/Metadata.node_type", "node_type", "Identifies the zarr node type."], [1685, 11, 2, "json-driver/zarr3/Metadata.shape", "shape", "Dimensions of the array."], [1685, 11, 2, "json-driver/zarr3/Metadata.zarr_format", "zarr_format", "Identifies the zarr specification version."]], "driver/zarr3/Metadata.attributes": [[1685, 11, 2, "json-driver/zarr3/Metadata.attributes.dimension_units", "dimension_units", "Physical units corresponding to each dimension of the array."]], "driver/zarr3/Metadata.chunk_grid": [[1685, 11, 2, "json-driver/zarr3/Metadata.chunk_grid.configuration", "configuration", ""], [1685, 11, 2, "json-driver/zarr3/Metadata.chunk_grid.name", "name", ""]], "driver/zarr3/Metadata.chunk_grid.configuration": [[1685, 11, 2, "json-driver/zarr3/Metadata.chunk_grid.configuration.chunk_shape", "chunk_shape", "Chunk dimensions."]], "driver/zarr3/SingleCodec": [[1685, 11, 2, "json-driver/zarr3/SingleCodec.configuration", "configuration", "Specifies codec-specific configuration options."], [1685, 11, 2, "json-driver/zarr3/SingleCodec.name", "name", "Identifies the codec."]], "dtype": [[2165, 11, 2, "json-dtype.bfloat16", "bfloat16", "bfloat16 floating-point format number."], [2165, 11, 2, "json-dtype.bool", "bool", "Boolean value (0 or 1)."], [2165, 11, 2, "json-dtype.byte", "byte", "Single byte."], [2165, 11, 2, "json-dtype.char", "char", "Single byte, interpreted as an ASCII character."], [2165, 11, 2, "json-dtype.complex128", "complex128", "Complex number, where the real and imaginary components are each represented by a float64."], [2165, 11, 2, "json-dtype.complex64", "complex64", "Complex number, where the real and imaginary components are each represented by a float32."], [2165, 11, 2, "json-dtype.float16", "float16", "IEEE 754 binary16 half-precision floating-point number."], [2165, 11, 2, "json-dtype.float32", "float32", "IEEE 754 binary32 single-precision floating-point number."], [2165, 11, 2, "json-dtype.float64", "float64", "IEEE 754 binary64 double-precision floating-point number."], [2165, 11, 2, "json-dtype.float8_e4m3b11fnuz", "float8_e4m3b11fnuz", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 11, with NaN,  without infinities ."], [2165, 11, 2, "json-dtype.float8_e4m3fn", "float8_e4m3fn", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 7, with NaN,  without infinities ."], [2165, 11, 2, "json-dtype.float8_e4m3fnuz", "float8_e4m3fnuz", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 8, with NaN,  without infinities ."], [2165, 11, 2, "json-dtype.float8_e5m2", "float8_e5m2", "8-bit floating point - Exponent: 5, Mantissa: 2, bias: 15, IEEE 754, with NaN and infinities. ."], [2165, 11, 2, "json-dtype.float8_e5m2fnuz", "float8_e5m2fnuz", "8-bit floating point - Exponent: 5, Mantissa: 2, bias: 16, with NaN, without infinities. ."], [2165, 11, 2, "json-dtype.int16", "int16", "16-bit signed two's-complement integer."], [2165, 11, 2, "json-dtype.int32", "int32", "32-bit signed two's-complement integer."], [2165, 11, 2, "json-dtype.int4", "int4", "4-bit signed two's-complement integer, internally stored as its 8-bit signed integer equivalent (i.e. sign-extended)."], [2165, 11, 2, "json-dtype.int64", "int64", "64-bit signed two's-complement integer."], [2165, 11, 2, "json-dtype.int8", "int8", "8-bit signed two's-complement integer."], [2165, 11, 2, "json-dtype.json", "json", "JSON value."], [2165, 11, 2, "json-dtype.string", "string", "Byte string."], [2165, 11, 2, "json-dtype.uint16", "uint16", "16-bit unsigned integer."], [2165, 11, 2, "json-dtype.uint32", "uint32", "32-bit unsigned integer."], [2165, 11, 2, "json-dtype.uint64", "uint64", "64-bit unsigned integer."], [2165, 11, 2, "json-dtype.uint8", "uint8", "8-bit unsigned integer."], [2165, 11, 2, "json-dtype.ustring", "ustring", "Unicode string (represented in memory as UTF-8)."]], "kvstore/file": [[1690, 11, 2, "json-kvstore/file.context", "context", ""], [1690, 11, 2, "json-kvstore/file.driver", "driver", ""], [1690, 11, 2, "json-kvstore/file.file_io_concurrency", "file_io_concurrency", ""], [1690, 11, 2, "json-kvstore/file.file_io_locking", "file_io_locking", ""], [1690, 11, 2, "json-kvstore/file.file_io_memmap", "file_io_memmap", ""], [1690, 11, 2, "json-kvstore/file.file_io_sync", "file_io_sync", ""], [1690, 11, 2, "json-kvstore/file.path", "path", "Path to root directory on local filesystem."]], "kvstore/gcs": [[1691, 11, 2, "json-kvstore/gcs.bucket", "bucket", "Google Cloud Storage bucket to use."], [1691, 11, 2, "json-kvstore/gcs.context", "context", ""], [1691, 11, 2, "json-kvstore/gcs.driver", "driver", ""], [1691, 11, 2, "json-kvstore/gcs.gcs_request_concurrency", "gcs_request_concurrency", ""], [1691, 11, 2, "json-kvstore/gcs.gcs_request_retries", "gcs_request_retries", ""], [1691, 11, 2, "json-kvstore/gcs.gcs_user_project", "gcs_user_project", ""], [1691, 11, 2, "json-kvstore/gcs.path", "path", "Key prefix within the key-value store."]], "kvstore/http": [[1692, 11, 2, "json-kvstore/http.base_url", "base_url", "Base URL."], [1692, 11, 2, "json-kvstore/http.context", "context", ""], [1692, 11, 2, "json-kvstore/http.driver", "driver", ""], [1692, 11, 2, "json-kvstore/http.headers", "headers", "Additional HTTP headers to send with every request."], [1692, 11, 2, "json-kvstore/http.http_request_concurrency", "http_request_concurrency", ""], [1692, 11, 2, "json-kvstore/http.http_request_retries", "http_request_retries", ""], [1692, 11, 2, "json-kvstore/http.path", "path", "Path relative to base_url."]], "kvstore/kvstack": [[1694, 11, 2, "json-kvstore/kvstack.context", "context", ""], [1694, 11, 2, "json-kvstore/kvstack.driver", "driver", ""], [1694, 11, 2, "json-kvstore/kvstack.layers", "layers", "Array of KvStore layer mappings"], [1694, 11, 2, "json-kvstore/kvstack.path", "path", "Key prefix within the key-value store."]], "kvstore/memory": [[1695, 11, 2, "json-kvstore/memory.atomic", "atomic", ""], [1695, 11, 2, "json-kvstore/memory.context", "context", ""], [1695, 11, 2, "json-kvstore/memory.driver", "driver", ""], [1695, 11, 2, "json-kvstore/memory.memory_key_value_store", "memory_key_value_store", ""], [1695, 11, 2, "json-kvstore/memory.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded": [[1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.base", "base", "Underlying key-value store."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.cache_pool", "cache_pool", ""], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.context", "context", ""], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency", "data_copy_concurrency", ""], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.driver", "driver", ""], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.metadata", "metadata", "Specifies the sharding format."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded/ShardingSpec": [[1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type", "@type", ""], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding", "data_encoding", "Specifies the encoding of the data chunks."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash", "hash", "Specifies the hash function used to map chunk IDs to shards."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits", "minishard_bits", "Number of bits of the hashed chunk ID that determine the minishard number."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding", "minishard_index_encoding", "Specifies the encoding of the minishard index."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits", "preshift_bits", "Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."], [1696, 11, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits", "shard_bits", "Number of bits of the hashed chunk ID that determine the shard number."]], "kvstore/ocdbt": [[1697, 11, 2, "json-kvstore/ocdbt.assume_config", "assume_config", "Permits data files to be written before the initial manifest."], [1697, 11, 2, "json-kvstore/ocdbt.base", "base", "Underlying key-value store."], [1697, 11, 2, "json-kvstore/ocdbt.btree_node_data_prefix", "btree_node_data_prefix", "Prefix for writing data files containing B+tree nodes."], [1697, 11, 2, "json-kvstore/ocdbt.cache_pool", "cache_pool", ""], [1697, 11, 2, "json-kvstore/ocdbt.config", "config", "Constrains the database configuration."], [1697, 11, 2, "json-kvstore/ocdbt.context", "context", ""], [1697, 11, 2, "json-kvstore/ocdbt.coordinator", "coordinator", ""], [1697, 11, 2, "json-kvstore/ocdbt.data_copy_concurrency", "data_copy_concurrency", ""], [1697, 11, 2, "json-kvstore/ocdbt.driver", "driver", ""], [1697, 11, 2, "json-kvstore/ocdbt.path", "path", "Key prefix within the key-value store."], [1697, 11, 2, "json-kvstore/ocdbt.target_data_file_size", "target_data_file_size", "Target size of each ocdbt data file."], [1697, 11, 2, "json-kvstore/ocdbt.value_data_prefix", "value_data_prefix", "Prefix for writing data files containing indirect values."], [1697, 11, 2, "json-kvstore/ocdbt.version_tree_node_data_prefix", "version_tree_node_data_prefix", "Prefix for writing data files containing version tree nodes."]], "kvstore/ocdbt.config": [[1697, 11, 2, "json-kvstore/ocdbt.config.compression", "compression", "Compression method used to encode the manifest and B+Tree nodes."], [1697, 11, 2, "json-kvstore/ocdbt.config.manifest_kind", "manifest_kind", "Manifest format to use."], [1697, 11, 2, "json-kvstore/ocdbt.config.max_decoded_node_bytes", "max_decoded_node_bytes", "Maximum size of an (uncompressed) B+tree node."], [1697, 11, 2, "json-kvstore/ocdbt.config.max_inline_value_bytes", "max_inline_value_bytes", "Maximum number of value bytes to store inline in a B+tree leaf node."], [1697, 11, 2, "json-kvstore/ocdbt.config.uuid", "uuid", "Unique 128-bit identifier for the database, specified as 32 hex digits."], [1697, 11, 2, "json-kvstore/ocdbt.config.version_tree_arity_log2", "version_tree_arity_log2", "Base-2 logarithm of the arity of the tree of versions."]], "kvstore/ocdbt.config.manifest_kind": [[1697, 11, 2, "json-kvstore/ocdbt.config.manifest_kind.numbered", "numbered", "Numbered-file manifest format"], [1697, 11, 2, "json-kvstore/ocdbt.config.manifest_kind.single", "single", "Single-file manifest format"]], "kvstore/ocdbt/Compression/zstd": [[1697, 11, 2, "json-kvstore/ocdbt/Compression/zstd.id", "id", ""], [1697, 11, 2, "json-kvstore/ocdbt/Compression/zstd.level", "level", "Compression level."]], "kvstore/s3": [[1698, 11, 2, "json-kvstore/s3.aws_credentials", "aws_credentials", ""], [1698, 11, 2, "json-kvstore/s3.aws_region", "aws_region", "AWS region identifier to use in signatures."], [1698, 11, 2, "json-kvstore/s3.bucket", "bucket", "AWS S3 Storage bucket."], [1698, 11, 2, "json-kvstore/s3.context", "context", ""], [1698, 11, 2, "json-kvstore/s3.data_copy_concurrency", "data_copy_concurrency", ""], [1698, 11, 2, "json-kvstore/s3.driver", "driver", ""], [1698, 11, 2, "json-kvstore/s3.endpoint", "endpoint", "S3 server endpoint to use in place of the public Amazon S3 endpoints."], [1698, 11, 2, "json-kvstore/s3.experimental_s3_rate_limiter", "experimental_s3_rate_limiter", ""], [1698, 11, 2, "json-kvstore/s3.host_header", "host_header", "Override HTTP host header to send in requests."], [1698, 11, 2, "json-kvstore/s3.path", "path", "Key prefix within the key-value store."], [1698, 11, 2, "json-kvstore/s3.requester_pays", "requester_pays", "Permit requester-pays requests."], [1698, 11, 2, "json-kvstore/s3.s3_request_concurrency", "s3_request_concurrency", ""], [1698, 11, 2, "json-kvstore/s3.s3_request_retries", "s3_request_retries", ""], [1698, 11, 2, "json-kvstore/s3.use_conditional_write", "use_conditional_write", "Override S3 conditional write default behavior."]], "kvstore/tsgrpc_kvstore": [[1699, 11, 2, "json-kvstore/tsgrpc_kvstore.address", "address", "gRPC Service Address."], [1699, 11, 2, "json-kvstore/tsgrpc_kvstore.context", "context", ""], [1699, 11, 2, "json-kvstore/tsgrpc_kvstore.data_copy_concurrency", "data_copy_concurrency", ""], [1699, 11, 2, "json-kvstore/tsgrpc_kvstore.driver", "driver", ""], [1699, 11, 2, "json-kvstore/tsgrpc_kvstore.path", "path", "Key prefix within the key-value store."], [1699, 11, 2, "json-kvstore/tsgrpc_kvstore.timeout", "timeout", ""]], "kvstore/zarr3_sharding_indexed": [[1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.base", "base", "Underlying key-value store with path to shard."], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.cache_pool", "cache_pool", ""], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.context", "context", ""], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.data_copy_concurrency", "data_copy_concurrency", ""], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.driver", "driver", ""], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.grid_shape", "grid_shape", "Shape of the grid of entries in the shard."], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.index_codecs", "index_codecs", "Codec chain for encoding/decoding the shard index."], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.index_location", "index_location", "Location of the shard index within the shard."], [1700, 11, 2, "json-kvstore/zarr3_sharding_indexed.path", "path", "Key prefix within the key-value store."]], "kvstore/zip": [[1701, 11, 2, "json-kvstore/zip.base", "base", "Underlying key-value store with path to a ZIP file."], [1701, 11, 2, "json-kvstore/zip.cache_pool", "cache_pool", ""], [1701, 11, 2, "json-kvstore/zip.context", "context", ""], [1701, 11, 2, "json-kvstore/zip.data_copy_concurrency", "data_copy_concurrency", ""], [1701, 11, 2, "json-kvstore/zip.driver", "driver", ""], [1701, 11, 2, "json-kvstore/zip.path", "path", "Key prefix within the key-value store."]], "tensorstore": [[1703, 12, 1, "", "Batch", "Batches are used to group together read operations for potentially improved efficiency."], [1706, 12, 1, "", "ChunkLayout", "Describes the storage layout of a tensorstore.TensorStore."], [1737, 12, 1, "", "CodecSpec", "Specifies driver-specific encoding/decoding parameters."], [1740, 12, 1, "", "Context", "Manages shared TensorStore context resources, such as caches and credentials."], [1752, 12, 1, "", "Dim", "1-d index interval with optionally-implicit bounds and dimension label."], [1776, 12, 1, "", "DimExpression", "Specifies an advanced indexing operation."], [1788, 12, 1, "", "Future", "Handle for consuming the result of an asynchronous operation."], [1798, 12, 1, "", "FutureLike", "Abstract base class for types representing an asynchronous result."], [1799, 12, 1, "", "IndexDomain", "Domain (including bounds and optional dimension labels) of an N-dimensional index space."], [1832, 12, 1, "", "IndexTransform", "Represents a transform from an input index space to an output space."], [1868, 12, 1, "", "Indexable", "Abstract base class for types that support TensorStore indexing operations."], [1869, 12, 1, "", "KvStore", "Key-value store that maps an ordered set of byte string keys to byte string values."], [1918, 12, 1, "", "OpenMode", "Specifies the mode to use when opening a TensorStore."], [1925, 12, 1, "", "OutputIndexMap", "Represents an output index map for an index transform."], [1935, 12, 1, "", "OutputIndexMaps", "View of the output index maps for an index transform."], [1939, 12, 1, "", "OutputIndexMethod", "Indicates the output index method of an OutputIndexMap."], [1946, 12, 1, "", "Promise", "Handle for producing the result of an asynchronous operation."], [1950, 17, 1, "", "RecheckCacheOption", "Determines under what circumstances cached data is revalidated."], [1951, 12, 1, "", "Schema", "Driver-independent options for defining a TensorStore schema."], [1983, 12, 1, "", "Spec", "Specification for opening or creating a TensorStore."], [2019, 12, 1, "", "TensorStore", "Asynchronous multi-dimensional array handle."], [2070, 12, 1, "", "Transaction", "Transactions are used to stage a group of modifications (e.g. writes to tensorstore.TensorStore objects) in memory, and then either commit the group all at once or abort it."], [2080, 12, 1, "", "Unit", "Specifies a physical quantity/unit."], [2092, 12, 1, "", "VirtualChunkedReadParameters", "Options passed to read callbacks used with virtual_chunked."], [2095, 12, 1, "", "VirtualChunkedWriteParameters", "Options passed to write callbacks used with virtual_chunked."], [2097, 12, 1, "", "WriteFutures", "Handle for consuming the result of an asynchronous write operation."], [2107, 18, 1, "", "array", "Returns a TensorStore that reads/writes from an in-memory array."], [2108, 17, 1, "", "bfloat16", "bfloat16 floating-point data type."], [2109, 17, 1, "", "bool", "Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."], [2110, 18, 1, "", "cast(spec)", "Returns a view with the data type converted."], [2111, 18, 1, "", "cast(store)", "Returns a read/write view with the data type converted."], [2112, 17, 1, "", "complex128", "Complex number based on float64.  Corresponds to numpy.complex128."], [2113, 17, 1, "", "complex64", "Complex number based on float32.  Corresponds to numpy.complex64."], [2114, 18, 1, "", "concat", "Virtually concatenates a sequence of TensorStore layers along an existing dimension."], [2115, 12, 1, "", "d", "Specifies a dimension selection, for starting a dimension expression."], [2117, 18, 1, "", "downsample(spec)", "Returns a virtual downsampled view view of a Spec."], [2118, 18, 1, "", "downsample(store)", "Returns a virtual downsampled view of a TensorStore."], [2119, 12, 1, "", "dtype", "TensorStore data type representation."], [2127, 18, 1, "", "experimental_collect_matching_metrics", "Collects metrics with a matching prefix."], [2128, 18, 1, "", "experimental_collect_prometheus_format_metrics", "Collects metrics in prometheus exposition format. See: https://prometheus.io/docs/instrumenting/exposition_formats/"], [2129, 18, 1, "", "experimental_push_metrics_to_prometheus", "Publishes metrics to the prometheus pushgateway. See: https://github.com/prometheus/pushgateway"], [2130, 18, 1, "", "experimental_update_verbose_logging", "Updates verbose logging flags associated with --tensorstore_verbose_logging and TENSORSTORE_VERBOSE_LOGGING flags."], [2131, 17, 1, "", "float16", "IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."], [2132, 17, 1, "", "float32", "IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."], [2133, 17, 1, "", "float64", "IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."], [2134, 17, 1, "", "float8_e4m3b11fnuz", "8-bit floating-point data type."], [2135, 17, 1, "", "float8_e4m3fn", "8-bit floating-point data type."], [2136, 17, 1, "", "float8_e4m3fnuz", "8-bit floating-point data type."], [2137, 17, 1, "", "float8_e5m2", "8-bit floating-point data type."], [2138, 17, 1, "", "float8_e5m2fnuz", "8-bit floating-point data type."], [2139, 17, 1, "", "inf", "Special constant equal to 2^{62}-1 that indicates an unbounded index domain."], [2140, 17, 1, "", "int16", "16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."], [2141, 17, 1, "", "int32", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."], [2142, 17, 1, "", "int4", "4-bit signed two's-complement integer data type, internally stored as its 8-bit signed integer equivalent (i.e. sign-extended). Corresponds to jax.numpy.int4."], [2143, 17, 1, "", "int64", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."], [2144, 17, 1, "", "int8", "8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."], [2145, 17, 1, "", "json", "JSON data type.  Corresponds to an arbitrary Python JSON value."], [2146, 17, 1, "", "newaxis", "Alias for None used in indexing expressions to specify a new singleton dimension."], [2151, 18, 1, "", "open", "Opens or creates a TensorStore from a Spec."], [2152, 18, 1, "", "overlay", "Virtually overlays a sequence of TensorStore layers within a common domain."], [2153, 18, 1, "", "parse_tensorstore_flags", "Parses and initializes internal tensorstore flags from argv."], [2154, 18, 1, "", "stack", "Virtually stacks a sequence of TensorStore layers along a new dimension."], [2155, 17, 1, "", "string", "Variable-length byte string data type.  Corresponds to the Python python:bytes type."], [2156, 17, 1, "", "uint16", "16-bit unsigned integer.  Corresponds to numpy.uint16."], [2157, 17, 1, "", "uint32", "32-bit unsigned integer.  Corresponds to numpy.uint32."], [2158, 17, 1, "", "uint64", "64-bit unsigned integer data type.  Corresponds to numpy.uint64."], [2159, 17, 1, "", "uint8", "8-bit unsigned integer.  Corresponds to numpy.uint8."], [2160, 17, 1, "", "ustring", "Variable-length Unicode string data type.  Corresponds to the Python python:str type."], [2161, 18, 1, "", "virtual_chunked", "Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]], "tensorstore.Batch": [[1704, 13, 1, "", "__init__", "Creates a new batch."], [1705, 13, 1, "", "submit", "Submits the batch."]], "tensorstore.Batch.submit": [[1705, 14, 2, "", "self", "Submits the batch."]], "tensorstore.ChunkLayout": [[1707, 12, 1, "", "Grid", "Describes a regular grid layout for write/read/codec chunks."], [1721, 13, 1, "", "__eq__", "Compares two chunk layouts for equality."], [1722, 13, 1, "", "__init__(components)", "Constructs from component parts."], [1723, 13, 1, "", "__init__(json)", "Constructs from the JSON representation."], [1724, 15, 1, "", "codec_chunk", "Chunk grid used by the codec."], [1725, 15, 1, "", "grid_origin", "Hard constraints on the grid origin."], [1726, 15, 1, "", "grid_origin_soft_constraint", "Soft constraints on the grid origin."], [1727, 15, 1, "", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [1728, 15, 1, "", "inner_order_soft_constraint", "Permutation specifying soft constraint on the element storage order."], [1729, 15, 1, "", "ndim", "Alias for rank."], [1730, 15, 1, "", "rank", "Number of dimensions in the index space."], [1731, 15, 1, "", "read_chunk", "Chunk grid for efficient reads."], [1732, 15, 1, "", "read_chunk_template", "Chunk offset and shape for efficient reads."], [1733, 13, 1, "", "to_json", "Converts to the JSON representation."], [1734, 13, 1, "", "update", "Adds additional constraints."], [1735, 15, 1, "", "write_chunk", "Chunk grid for efficient writes."], [1736, 15, 1, "", "write_chunk_template", "Chunk offset and shape for efficient writes."]], "tensorstore.ChunkLayout.Grid": [[1708, 13, 1, "", "__eq__", "Compares two chunk grids for equality."], [1709, 13, 1, "", "__init__(components)", "Constructs a chunk grid."], [1710, 13, 1, "", "__init__(json)", "Constructs from the JSON representation."], [1711, 15, 1, "", "aspect_ratio", "Chunk shape aspect ratio."], [1712, 15, 1, "", "aspect_ratio_soft_constraint", "Soft constraints on chunk shape aspect ratio."], [1713, 15, 1, "", "elements", "Target number of elements per chunk."], [1714, 15, 1, "", "elements_soft_constraint", "Soft constraint on target number of elements per chunk."], [1715, 15, 1, "", "ndim", "Alias for rank."], [1716, 15, 1, "", "rank", "Number of dimensions, or None if unspecified."], [1717, 15, 1, "", "shape", "Hard constraints on chunk shape."], [1718, 15, 1, "", "shape_soft_constraint", "Soft constraints on chunk shape."], [1719, 13, 1, "", "to_json", "Converts to the JSON representation."], [1720, 13, 1, "", "update", "Adds additional constraints."]], "tensorstore.ChunkLayout.Grid.__eq__": [[1708, 14, 2, "", "other", "Compares two chunk grids for equality."], [1708, 14, 2, "", "self", "Compares two chunk grids for equality."]], "tensorstore.ChunkLayout.Grid.__init__(components)": [[1709, 14, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension."], [1709, 14, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension."], [1709, 14, 2, "p-elements", "elements", "Target number of elements per chunk."], [1709, 14, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk."], [1709, 14, 2, "p-grid", "grid", "Other grid constraints to merge in."], [1709, 14, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [1709, 14, 2, "p-rank", "rank", "Specifies the number of dimensions."], [1709, 14, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension."], [1709, 14, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension."]], "tensorstore.ChunkLayout.Grid.__init__(json)": [[1710, 14, 2, "", "json", "Constructs from the JSON representation."]], "tensorstore.ChunkLayout.Grid.to_json": [[1719, 14, 2, "", "include_defaults", "Converts to the JSON representation."], [1719, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.ChunkLayout.Grid.update": [[1720, 14, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension."], [1720, 14, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension."], [1720, 14, 2, "p-elements", "elements", "Target number of elements per chunk."], [1720, 14, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk."], [1720, 14, 2, "p-grid", "grid", "Other grid constraints to merge in."], [1720, 14, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [1720, 14, 2, "p-rank", "rank", "Specifies the number of dimensions."], [1720, 14, 2, "", "self", "Adds additional constraints."], [1720, 14, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension."], [1720, 14, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension."]], "tensorstore.ChunkLayout.__eq__": [[1721, 14, 2, "", "other", "Compares two chunk layouts for equality."], [1721, 14, 2, "", "self", "Compares two chunk layouts for equality."]], "tensorstore.ChunkLayout.__init__(components)": [[1722, 14, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks."], [1722, 14, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio."], [1722, 14, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio."], [1722, 14, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk."], [1722, 14, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk."], [1722, 14, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape."], [1722, 14, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape."], [1722, 14, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks."], [1722, 14, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio."], [1722, 14, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio."], [1722, 14, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks."], [1722, 14, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks."], [1722, 14, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape."], [1722, 14, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape."], [1722, 14, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [1722, 14, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [1722, 14, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid."], [1722, 14, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member."], [1722, 14, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint."], [1722, 14, 2, "p-rank", "rank", "Specifies the number of dimensions."], [1722, 14, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks."], [1722, 14, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio."], [1722, 14, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio."], [1722, 14, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks."], [1722, 14, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks."], [1722, 14, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape."], [1722, 14, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape."], [1722, 14, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks."], [1722, 14, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio."], [1722, 14, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio."], [1722, 14, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks."], [1722, 14, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks."], [1722, 14, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape."], [1722, 14, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape."]], "tensorstore.ChunkLayout.__init__(json)": [[1723, 14, 2, "", "json", "Constructs from the JSON representation."]], "tensorstore.ChunkLayout.to_json": [[1733, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.ChunkLayout.update": [[1734, 14, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks."], [1734, 14, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio."], [1734, 14, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio."], [1734, 14, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk."], [1734, 14, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk."], [1734, 14, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape."], [1734, 14, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape."], [1734, 14, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks."], [1734, 14, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio."], [1734, 14, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio."], [1734, 14, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks."], [1734, 14, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks."], [1734, 14, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape."], [1734, 14, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape."], [1734, 14, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [1734, 14, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [1734, 14, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid."], [1734, 14, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member."], [1734, 14, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint."], [1734, 14, 2, "p-rank", "rank", "Specifies the number of dimensions."], [1734, 14, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks."], [1734, 14, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio."], [1734, 14, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio."], [1734, 14, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks."], [1734, 14, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks."], [1734, 14, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape."], [1734, 14, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape."], [1734, 14, 2, "", "self", "Adds additional constraints."], [1734, 14, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks."], [1734, 14, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio."], [1734, 14, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio."], [1734, 14, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks."], [1734, 14, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks."], [1734, 14, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape."], [1734, 14, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape."]], "tensorstore.CodecSpec": [[1738, 13, 1, "", "__init__", "Constructs from the JSON representation."], [1739, 13, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.CodecSpec.__init__": [[1738, 14, 2, "", "json", "Constructs from the JSON representation."]], "tensorstore.CodecSpec.to_json": [[1739, 14, 2, "", "include_defaults", "Converts to the JSON representation."], [1739, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.Context": [[1741, 12, 1, "", "Resource", "Handle to a context resource."], [1743, 12, 1, "", "Spec", "Parsed representation of a JSON Context specification."], [1746, 13, 1, "", "__getitem__", "Creates or retrieves the context resource for the given key."], [1747, 13, 1, "", "__init__(default)", "Constructs a default context."], [1748, 13, 1, "", "__init__(json)", "Constructs a context from its JSON representation."], [1749, 13, 1, "", "__init__(spec)", "Constructs a context from a parsed spec."], [1750, 15, 1, "", "parent", "Parent context from which this context inherits."], [1751, 15, 1, "", "spec", "Spec from which this context was constructed."]], "tensorstore.Context.Resource": [[1742, 13, 1, "", "to_json", "Returns the JSON representation of the context resource."]], "tensorstore.Context.Resource.to_json": [[1742, 14, 2, "", "include_defaults", "Returns the JSON representation of the context resource."], [1742, 14, 2, "", "self", "Returns the JSON representation of the context resource."]], "tensorstore.Context.Spec": [[1744, 13, 1, "", "__init__", "Creates a context specification from its JSON representation."], [1745, 13, 1, "", "to_json", "Returns the JSON representation."]], "tensorstore.Context.Spec.__init__": [[1744, 14, 2, "", "json", "Creates a context specification from its JSON representation."]], "tensorstore.Context.Spec.to_json": [[1745, 14, 2, "p-include_defaults", "include_defaults", "Indicates whether to include members even if they are equal to the default value."], [1745, 14, 2, "", "self", "Returns the JSON representation."]], "tensorstore.Context.__getitem__": [[1746, 14, 2, "p-key", "key", "Resource key, of the form '<resource-type>' or <resource-type>#<id>."], [1746, 14, 2, "", "self", "Creates or retrieves the context resource for the given key."]], "tensorstore.Context.__init__(json)": [[1748, 14, 2, "p-json", "json", "JSON representation of the context."], [1748, 14, 2, "p-parent", "parent", "Parent context from which to inherit."]], "tensorstore.Context.__init__(spec)": [[1749, 14, 2, "p-parent", "parent", "Parent context from which to inherit."], [1749, 14, 2, "p-spec", "spec", "Parsed context spec."]], "tensorstore.Dim": [[1753, 13, 1, "", "__contains__(dim)", "Checks if the interval contains another interval."], [1754, 13, 1, "", "__contains__(index)", "Checks if the interval contains a given index."], [1755, 13, 1, "", "__eq__", "Compares for equality with another interval."], [1756, 13, 1, "", "__init__(exclusive_max)", "Constructs a half-open interval [inclusive_min, exclusive_max)."], [1757, 13, 1, "", "__init__(inclusive_max)", "Constructs a closed interval [inclusive_min, inclusive_max]."], [1758, 13, 1, "", "__init__(size)", "Constructs a sized interval [inclusive_min, inclusive_min+size)."], [1759, 13, 1, "", "__init__(unbounded)", "Constructs an unbounded interval (-inf, +inf)."], [1760, 13, 1, "", "__iter__", "Enables iteration over the indices contained in the interval."], [1761, 13, 1, "", "__len__", "Size of the interval, equivalent to size."], [1762, 13, 1, "", "__repr__", "Returns the string representation as a Python expression."], [1763, 13, 1, "", "__str__", "Returns the string representation of the interval."], [1764, 15, 1, "", "empty", "Returns True if size is zero."], [1765, 15, 1, "", "exclusive_max", "Exclusive upper bound of the interval."], [1766, 15, 1, "", "exclusive_min", "Exclusive lower bound of the interval."], [1767, 15, 1, "", "finite", "Indicates if the interval is finite."], [1768, 13, 1, "", "hull", "Hull with another Dim."], [1769, 15, 1, "", "implicit_lower", "Indicates if the lower bound is implicit/resizeable."], [1770, 15, 1, "", "implicit_upper", "Indicates if the upper bound is implicit/resizeable."], [1771, 15, 1, "", "inclusive_max", "Inclusive upper bound of the interval."], [1772, 15, 1, "", "inclusive_min", "Inclusive lower bound of the interval."], [1773, 13, 1, "", "intersect", "Intersect with another Dim."], [1774, 15, 1, "", "label", "Dimension label, or the empty string to indicate an unlabeled dimension."], [1775, 15, 1, "", "size", "Size of the interval."]], "tensorstore.Dim.__contains__(dim)": [[1753, 14, 2, "", "inner", "Checks if the interval contains another interval."], [1753, 14, 2, "", "self", "Checks if the interval contains another interval."]], "tensorstore.Dim.__contains__(index)": [[1754, 14, 2, "", "other", "Checks if the interval contains a given index."], [1754, 14, 2, "", "self", "Checks if the interval contains a given index."]], "tensorstore.Dim.__eq__": [[1755, 14, 2, "", "other", "Compares for equality with another interval."], [1755, 14, 2, "", "self", "Compares for equality with another interval."]], "tensorstore.Dim.__init__(exclusive_max)": [[1756, 14, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound."], [1756, 14, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [1756, 14, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [1756, 14, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [1756, 14, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(inclusive_max)": [[1757, 14, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [1757, 14, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [1757, 14, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bound."], [1757, 14, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [1757, 14, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(size)": [[1758, 14, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [1758, 14, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [1758, 14, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [1758, 14, 2, "p-label", "label", "Dimension label."], [1758, 14, 2, "p-size", "size", "Size of the interval."]], "tensorstore.Dim.__init__(unbounded)": [[1759, 14, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [1759, 14, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [1759, 14, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__iter__": [[1760, 14, 2, "", "self", "Enables iteration over the indices contained in the interval."]], "tensorstore.Dim.__len__": [[1761, 14, 2, "", "self", "Size of the interval, equivalent to size."]], "tensorstore.Dim.__repr__": [[1762, 14, 2, "", "self", "Returns the string representation as a Python expression."]], "tensorstore.Dim.__str__": [[1763, 14, 2, "", "self", "Returns the string representation of the interval."]], "tensorstore.Dim.hull": [[1768, 14, 2, "p-other", "other", "Object to hull with."], [1768, 14, 2, "", "self", "Hull with another Dim."]], "tensorstore.Dim.intersect": [[1773, 14, 2, "p-other", "other", "Object to intersect with."], [1773, 14, 2, "", "self", "Intersect with another Dim."]], "tensorstore.DimExpression": [[1777, 13, 1, "", "__getitem__", "Applies a NumPy-style indexing operation with default index array semantics."], [1778, 15, 1, "", "diagonal", "Extracts the diagonal of the selected dimensions."], [1779, 13, 1, "", "label", "Sets (or changes) the labels of the selected dimensions."], [1780, 13, 1, "", "mark_bounds_implicit", "Marks the lower/upper bounds of the selected dimensions as implicit/explicit."], [1781, 13, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [1782, 13, 1, "", "stride", "Strides the domains of the selected input dimensions by the specified amounts."], [1783, 13, 1, "", "translate_backward_by", "Translates (shifts) the domains of the selected input dimensions backward by the specified offsets, without affecting the output range."], [1784, 13, 1, "", "translate_by", "Translates (shifts) the domains of the selected input dimensions by the specified offsets, without affecting the output range."], [1785, 13, 1, "", "translate_to", "Translates the domains of the selected input dimensions to the specified origins without affecting the output range."], [1786, 13, 1, "", "transpose", "Transposes the selected dimensions to the specified target indices."], [1787, 13, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.DimExpression.__getitem__": [[1777, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with default index array semantics."], [1777, 14, 2, "", "self", "Applies a NumPy-style indexing operation with default index array semantics."]], "tensorstore.DimExpression.label": [[1779, 14, 2, "p-labels", "labels", "Dimension labels for each selected dimension."], [1779, 14, 2, "", "self", "Sets (or changes) the labels of the selected dimensions."]], "tensorstore.DimExpression.mark_bounds_implicit": [[1780, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds."], [1780, 14, 2, "", "self", "Marks the lower/upper bounds of the selected dimensions as implicit/explicit."]], "tensorstore.DimExpression.oindex": [[1781, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with outer indexing semantics."], [1781, 14, 2, "", "self", "Applies a NumPy-style indexing operation with outer indexing semantics."]], "tensorstore.DimExpression.stride": [[1782, 14, 2, "", "self", "Strides the domains of the selected input dimensions by the specified amounts."], [1782, 14, 2, "p-strides", "strides", "Strides for each selected dimension."]], "tensorstore.DimExpression.translate_backward_by": [[1783, 14, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions."], [1783, 14, 2, "", "self", "Translates (shifts) the domains of the selected input dimensions backward by the specified offsets, without affecting the output range."]], "tensorstore.DimExpression.translate_by": [[1784, 14, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions."], [1784, 14, 2, "", "self", "Translates (shifts) the domains of the selected input dimensions by the specified offsets, without affecting the output range."]], "tensorstore.DimExpression.translate_to": [[1785, 14, 2, "p-origins", "origins", "The new origins for each of the selected dimensions."], [1785, 14, 2, "", "self", "Translates the domains of the selected input dimensions to the specified origins without affecting the output range."]], "tensorstore.DimExpression.transpose": [[1786, 14, 2, "", "self", "Transposes the selected dimensions to the specified target indices."], [1786, 14, 2, "p-target", "target", "Target dimension indices for the selected dimensions."]], "tensorstore.DimExpression.vindex": [[1787, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with vectorized indexing semantics."], [1787, 14, 2, "", "self", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.Future": [[1789, 13, 1, "", "__new__", "Converts a FutureLike object to a Future."], [1790, 13, 1, "", "add_done_callback", "Registers a callback to be invoked upon completion of the asynchronous operation."], [1791, 13, 1, "", "cancel", "Requests cancellation of the asynchronous operation."], [1792, 13, 1, "", "cancelled", "Queries whether the asynchronous operation has been cancelled."], [1793, 13, 1, "", "done", "Queries whether the asynchronous operation has completed or been cancelled."], [1794, 13, 1, "", "exception", "Blocks until asynchronous operation completes, and returns the error if any."], [1795, 13, 1, "", "force", "Ensures the asynchronous operation begins executing."], [1796, 13, 1, "", "remove_done_callback", "Unregisters a previously-registered callback."], [1797, 13, 1, "", "result", "Blocks until the asynchronous operation completes, and returns the result."]], "tensorstore.Future.__new__": [[1789, 14, 2, "p-future", "future", "Specifies the immediate or asynchronous result."], [1789, 14, 2, "p-loop", "loop", "Event loop on which to run future if it is a coroutine."]], "tensorstore.Future.add_done_callback": [[1790, 14, 2, "p-callback", "callback", "Callback to invoke with self when this future becomes ready."], [1790, 14, 2, "", "self", "Registers a callback to be invoked upon completion of the asynchronous operation."]], "tensorstore.Future.cancel": [[1791, 14, 2, "", "self", "Requests cancellation of the asynchronous operation."]], "tensorstore.Future.cancelled": [[1792, 14, 2, "", "self", "Queries whether the asynchronous operation has been cancelled."]], "tensorstore.Future.done": [[1793, 14, 2, "", "self", "Queries whether the asynchronous operation has completed or been cancelled."]], "tensorstore.Future.exception": [[1794, 14, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [1794, 14, 2, "", "self", "Blocks until asynchronous operation completes, and returns the error if any."], [1794, 14, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.Future.force": [[1795, 14, 2, "", "self", "Ensures the asynchronous operation begins executing."]], "tensorstore.Future.remove_done_callback": [[1796, 14, 2, "", "callback", "Unregisters a previously-registered callback."], [1796, 14, 2, "", "self", "Unregisters a previously-registered callback."]], "tensorstore.Future.result": [[1797, 14, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [1797, 14, 2, "", "self", "Blocks until the asynchronous operation completes, and returns the result."], [1797, 14, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.IndexDomain": [[1800, 15, 1, "", "T", "View with the dimension order reversed (transposed)."], [1801, 13, 1, "", "__getitem__(domain)", "Slices this domain by another domain."], [1802, 13, 1, "", "__getitem__(expr)", "Transforms the domain by a dimension expression."], [1803, 13, 1, "", "__getitem__(identifier)", "Returns the single dimension specified by identifier."], [1804, 13, 1, "", "__getitem__(selection)", "Returns a new domain with a subset of the dimensions."], [1805, 13, 1, "", "__getitem__(transform)", "Transforms the domain using an explicit index transform."], [1806, 13, 1, "", "__init__(components)", "Constructs an index domain from component vectors."], [1807, 13, 1, "", "__init__(dimensions)", "Constructs an index domain from a :py:class`.Dim` sequence."], [1808, 13, 1, "", "__init__(json)", "Constructs an index domain from its JSON representation."], [1809, 13, 1, "", "__len__", "Returns the number of dimensions (rank)."], [1810, 13, 1, "", "__repr__", "Returns the string representation."], [1811, 15, 1, "", "exclusive_max", "Exclusive upper bound of the domain."], [1812, 13, 1, "", "hull", "Computes the hull (minimum containing box) with another domain."], [1813, 15, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each dimension is implicit or explicit."], [1814, 15, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each dimension is implicit or explicit."], [1815, 15, 1, "", "inclusive_max", "Inclusive upper bound of the domain."], [1816, 15, 1, "", "inclusive_min", "Inclusive lower bound of the domain, alias of origin."], [1817, 15, 1, "", "index_exp", "Equivalent NumPy-compatible index expression."], [1818, 13, 1, "", "intersect", "Intersects with another domain."], [1819, 13, 1, "", "label", "Returns a new view with the dimension labels changed."], [1820, 15, 1, "", "labels", "Dimension labels for each dimension."], [1821, 13, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [1822, 15, 1, "", "ndim", "Alias for rank."], [1823, 15, 1, "", "origin", "Inclusive lower bound of the domain."], [1824, 15, 1, "", "rank", "Number of dimensions in the index space."], [1825, 15, 1, "", "shape", "Shape of the domain."], [1826, 15, 1, "", "size", "Total number of elements in the domain."], [1827, 13, 1, "", "to_json", "Returns the JSON representation."], [1828, 13, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [1829, 13, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [1830, 13, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [1831, 13, 1, "", "transpose", "Returns a view with a transposed domain."]], "tensorstore.IndexDomain.__getitem__(domain)": [[1801, 14, 2, "", "other", "Slices this domain by another domain."], [1801, 14, 2, "", "self", "Slices this domain by another domain."]], "tensorstore.IndexDomain.__getitem__(expr)": [[1802, 14, 2, "p-expr", "expr", "Dimension expression to apply."], [1802, 14, 2, "", "self", "Transforms the domain by a dimension expression."]], "tensorstore.IndexDomain.__getitem__(identifier)": [[1803, 14, 2, "p-identifier", "identifier", "Specifies a dimension by integer index or label."], [1803, 14, 2, "", "self", "Returns the single dimension specified by identifier."]], "tensorstore.IndexDomain.__getitem__(selection)": [[1804, 14, 2, "p-selection", "selection", "Specifies the dimensions to include, either by index or label."], [1804, 14, 2, "", "self", "Returns a new domain with a subset of the dimensions."]], "tensorstore.IndexDomain.__getitem__(transform)": [[1805, 14, 2, "", "self", "Transforms the domain using an explicit index transform."], [1805, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.IndexDomain.__init__(components)": [[1806, 14, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bounds for each dimension."], [1806, 14, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit."], [1806, 14, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit."], [1806, 14, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bounds for each dimension."], [1806, 14, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bounds for each dimension."], [1806, 14, 2, "p-labels", "labels", "Dimension labels."], [1806, 14, 2, "p-rank", "rank", "Number of dimensions."], [1806, 14, 2, "p-shape", "shape", "Size for each dimension."]], "tensorstore.IndexDomain.__init__(dimensions)": [[1807, 14, 2, "p-dimensions", "dimensions", "Sequence of :py:class`.Dim` objects."]], "tensorstore.IndexDomain.__init__(json)": [[1808, 14, 2, "", "json", "Constructs an index domain from its JSON representation."]], "tensorstore.IndexDomain.__len__": [[1809, 14, 2, "", "self", "Returns the number of dimensions (rank)."]], "tensorstore.IndexDomain.__repr__": [[1810, 14, 2, "", "self", "Returns the string representation."]], "tensorstore.IndexDomain.hull": [[1812, 14, 2, "p-other", "other", "Object to hull with."], [1812, 14, 2, "", "self", "Computes the hull (minimum containing box) with another domain."]], "tensorstore.IndexDomain.intersect": [[1818, 14, 2, "p-other", "other", "Object to intersect with."], [1818, 14, 2, "", "self", "Intersects with another domain."]], "tensorstore.IndexDomain.label": [[1819, 14, 2, "p-labels", "labels", "Dimension labels for each dimension."], [1819, 14, 2, "", "self", "Returns a new view with the dimension labels changed."]], "tensorstore.IndexDomain.mark_bounds_implicit": [[1821, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"], [1821, 14, 2, "", "self", "Returns a new view with the lower/upper bounds changed to implicit/explicit."]], "tensorstore.IndexDomain.to_json": [[1827, 14, 2, "", "self", "Returns the JSON representation."]], "tensorstore.IndexDomain.translate_backward_by": [[1828, 14, 2, "p-offsets", "offsets", "The offset for each dimensions."], [1828, 14, 2, "", "self", "Returns a new view with the origin translated backward by the specified offsets."]], "tensorstore.IndexDomain.translate_by": [[1829, 14, 2, "p-offsets", "offsets", "The offset for each dimension."], [1829, 14, 2, "", "self", "Returns a new view with the origin translated by the specified offsets."]], "tensorstore.IndexDomain.translate_to": [[1830, 14, 2, "p-origins", "origins", "The new origin for each dimensions."], [1830, 14, 2, "", "self", "Returns a new view with origin translated to the specified origin."]], "tensorstore.IndexDomain.transpose": [[1831, 14, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view."], [1831, 14, 2, "", "self", "Returns a view with a transposed domain."]], "tensorstore.IndexTransform": [[1833, 15, 1, "", "T", "View with transposed domain (reversed dimension order)."], [1834, 13, 1, "", "__call__", "Maps an input index vector to an output index vector."], [1835, 13, 1, "", "__getitem__(domain)", "Slices this index transform by another domain."], [1836, 13, 1, "", "__getitem__(expr)", "Applies a dimension expression to this transform."], [1837, 13, 1, "", "__getitem__(indices)", "Applies a NumPy-style indexing operation with default index array semantics."], [1838, 13, 1, "", "__getitem__(transform)", "Composes this index transform with another index transform."], [1839, 13, 1, "", "__init__(components)", "Constructs an index transform from component vectors."], [1840, 13, 1, "", "__init__(domain)", "Constructs an index transform from a domain and output index maps."], [1841, 13, 1, "", "__init__(json)", "Constructs an index transform from its JSON representation."], [1842, 13, 1, "", "__repr__", "Returns the string representation."], [1843, 15, 1, "", "domain", "Input domain of the index transform."], [1844, 15, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each input dimension is implicit or explicit."], [1845, 15, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each input dimension is implicit or explicit."], [1846, 15, 1, "", "input_exclusive_max", "Exclusive upper bound of the input domain."], [1847, 15, 1, "", "input_inclusive_max", "Inclusive upper bound of the input domain."], [1848, 15, 1, "", "input_inclusive_min", "Inclusive lower bound of the input domain, alias for input_origin."], [1849, 15, 1, "", "input_labels", "Dimension labels for each input dimension."], [1850, 15, 1, "", "input_origin", "Inclusive lower bound of the input domain."], [1851, 15, 1, "", "input_rank", "Rank of the input space."], [1852, 15, 1, "", "input_shape", "Shape of the input domain."], [1853, 13, 1, "", "label", "Returns a new view with the dimension labels changed."], [1854, 13, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [1855, 15, 1, "", "ndim", "Rank of the input space, alias for input_rank."], [1856, 13, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [1857, 15, 1, "", "origin", "Inclusive lower bound of the domain."], [1858, 15, 1, "", "output", "Output index maps."], [1859, 15, 1, "", "output_rank", "Rank of the output space."], [1860, 15, 1, "", "shape", "Shape of the domain."], [1861, 15, 1, "", "size", "Total number of elements in the domain."], [1862, 13, 1, "", "to_json", "Returns the JSON representation of the transform."], [1863, 13, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [1864, 13, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [1865, 13, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [1866, 13, 1, "", "transpose", "Returns a view with a transposed domain."], [1867, 13, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.IndexTransform.__call__": [[1834, 14, 2, "p-indices", "indices", "Input vector of length input_rank."], [1834, 14, 2, "", "self", "Maps an input index vector to an output index vector."]], "tensorstore.IndexTransform.__getitem__(domain)": [[1835, 14, 2, "", "domain", "Slices this index transform by another domain."], [1835, 14, 2, "", "self", "Slices this index transform by another domain."]], "tensorstore.IndexTransform.__getitem__(expr)": [[1836, 14, 2, "", "expr", "Applies a dimension expression to this transform."], [1836, 14, 2, "", "self", "Applies a dimension expression to this transform."]], "tensorstore.IndexTransform.__getitem__(indices)": [[1837, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with default index array semantics."], [1837, 14, 2, "", "self", "Applies a NumPy-style indexing operation with default index array semantics."]], "tensorstore.IndexTransform.__getitem__(transform)": [[1838, 14, 2, "", "self", "Composes this index transform with another index transform."], [1838, 14, 2, "", "transform", "Composes this index transform with another index transform."]], "tensorstore.IndexTransform.__init__(components)": [[1839, 14, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit."], [1839, 14, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit."], [1839, 14, 2, "p-input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds for each input dimension."], [1839, 14, 2, "p-input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds for each input dimension."], [1839, 14, 2, "p-input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds for each input dimension."], [1839, 14, 2, "p-input_labels", "input_labels", "Dimension labels for each input dimension."], [1839, 14, 2, "p-input_rank", "input_rank", "Number of input dimensions."], [1839, 14, 2, "p-input_shape", "input_shape", "Size for each input dimension."], [1839, 14, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform."]], "tensorstore.IndexTransform.__init__(domain)": [[1840, 14, 2, "p-domain", "domain", "The domain of the index transform."], [1840, 14, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform."]], "tensorstore.IndexTransform.__init__(json)": [[1841, 14, 2, "", "json", "Constructs an index transform from its JSON representation."]], "tensorstore.IndexTransform.__repr__": [[1842, 14, 2, "", "self", "Returns the string representation."]], "tensorstore.IndexTransform.label": [[1853, 14, 2, "p-labels", "labels", "Dimension labels for each dimension."], [1853, 14, 2, "", "self", "Returns a new view with the dimension labels changed."]], "tensorstore.IndexTransform.mark_bounds_implicit": [[1854, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"], [1854, 14, 2, "", "self", "Returns a new view with the lower/upper bounds changed to implicit/explicit."]], "tensorstore.IndexTransform.oindex": [[1856, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with outer indexing semantics."], [1856, 14, 2, "", "self", "Applies a NumPy-style indexing operation with outer indexing semantics."]], "tensorstore.IndexTransform.to_json": [[1862, 14, 2, "", "self", "Returns the JSON representation of the transform."]], "tensorstore.IndexTransform.translate_backward_by": [[1863, 14, 2, "p-offsets", "offsets", "The offset for each dimensions."], [1863, 14, 2, "", "self", "Returns a new view with the origin translated backward by the specified offsets."]], "tensorstore.IndexTransform.translate_by": [[1864, 14, 2, "p-offsets", "offsets", "The offset for each dimension."], [1864, 14, 2, "", "self", "Returns a new view with the origin translated by the specified offsets."]], "tensorstore.IndexTransform.translate_to": [[1865, 14, 2, "p-origins", "origins", "The new origin for each dimensions."], [1865, 14, 2, "", "self", "Returns a new view with origin translated to the specified origin."]], "tensorstore.IndexTransform.transpose": [[1866, 14, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view."], [1866, 14, 2, "", "self", "Returns a view with a transposed domain."]], "tensorstore.IndexTransform.vindex": [[1867, 14, 2, "", "indices", "Applies a NumPy-style indexing operation with vectorized indexing semantics."], [1867, 14, 2, "", "self", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.KvStore": [[1870, 12, 1, "", "KeyRange", "Half-open interval of byte string keys, according to lexicographical order."], [1877, 12, 1, "", "ReadResult", "Specifies the result of a read operation."], [1882, 12, 1, "", "Spec", "Parsed representation of a JSON key-value store specification."], [1894, 12, 1, "", "TimestampedStorageGeneration", "Specifies a storage generation identifier and a timestamp."], [1899, 13, 1, "", "__add__", "Returns a key-value store with the suffix appended to the path."], [1900, 13, 1, "", "__delitem__", "Synchronously deletes a single key."], [1901, 13, 1, "", "__getitem__", "Synchronously reads the value of a single key."], [1902, 13, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [1903, 13, 1, "", "__setitem__", "Synchronously writes the value of a single key."], [1904, 13, 1, "", "__truediv__", "Returns a key-value store with an additional path component joined to the path."], [1905, 15, 1, "", "base", "Underlying key-value store, if this is a key-value store adapter."], [1906, 13, 1, "", "copy", "Returns a copy of the key-value store."], [1907, 13, 1, "", "delete_range", "Deletes a key range."], [1908, 13, 1, "", "experimental_copy_range_to", "Copies a range of keys."], [1909, 13, 1, "", "list", "Lists the keys in the key-value store."], [1910, 13, 1, "", "open", "Opens a key-value store."], [1911, 15, 1, "", "path", "Path prefix within the base key-value store."], [1912, 13, 1, "", "read", "Reads the value of a single key."], [1913, 13, 1, "", "spec", "Spec that may be used to re-open or re-create the key-value store."], [1914, 15, 1, "", "transaction", "Transaction bound to this key-value store."], [1915, 15, 1, "", "url", "URL representation of the key-value store specification."], [1916, 13, 1, "", "with_transaction", "Returns a transaction-bound view of this key-value store."], [1917, 13, 1, "", "write", "Writes or deletes a single key."]], "tensorstore.KvStore.KeyRange": [[1871, 13, 1, "", "__eq__", "Compares with another range for equality."], [1872, 13, 1, "", "__init__", "Constructs a key range from the specified half-open bounds."], [1873, 13, 1, "", "copy", "Returns a copy of the range."], [1874, 15, 1, "", "empty", "Indicates if the range contains no keys."], [1875, 15, 1, "", "exclusive_max", "Exclusive upper bound of the range."], [1876, 15, 1, "", "inclusive_min", "Inclusive lower bound of the range."]], "tensorstore.KvStore.KeyRange.__eq__": [[1871, 14, 2, "", "other", "Compares with another range for equality."], [1871, 14, 2, "", "self", "Compares with another range for equality."]], "tensorstore.KvStore.KeyRange.__init__": [[1872, 14, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound of the range."], [1872, 14, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound of the range."]], "tensorstore.KvStore.KeyRange.copy": [[1873, 14, 2, "", "self", "Returns a copy of the range."]], "tensorstore.KvStore.ReadResult": [[1878, 13, 1, "", "__init__", "Constructs a read result."], [1879, 15, 1, "", "stamp", "Generation and timestamp associated with the value."], [1880, 15, 1, "", "state", "Indicates the interpretation of value."], [1881, 15, 1, "", "value", "Value associated with the key."]], "tensorstore.KvStore.ReadResult.__init__": [[1878, 14, 2, "", "stamp", "Constructs a read result."], [1878, 14, 2, "", "state", "Constructs a read result."], [1878, 14, 2, "", "value", "Constructs a read result."]], "tensorstore.KvStore.Spec": [[1883, 13, 1, "", "__add__", "Returns a key-value store with the suffix appended to the path."], [1884, 13, 1, "", "__eq__", "Compares with another KvStore.Spec for equality based on the JSON representation."], [1885, 13, 1, "", "__new__", "Constructs from the JSON representation or a URL."], [1886, 13, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [1887, 13, 1, "", "__truediv__", "Returns a key-value store with an additional path component joined to the path."], [1888, 15, 1, "", "base", "Underlying key-value store, if this is a key-value store adapter."], [1889, 13, 1, "", "copy", "Returns a copy of the key-value store spec."], [1890, 15, 1, "", "path", "Path prefix within the base key-value store."], [1891, 13, 1, "", "to_json", "Converts to the JSON representation."], [1892, 13, 1, "", "update", "Modifies a spec."], [1893, 15, 1, "", "url", "URL representation of the key-value store specification."]], "tensorstore.KvStore.Spec.__add__": [[1883, 14, 2, "", "self", "Returns a key-value store with the suffix appended to the path."], [1883, 14, 2, "", "suffix", "Returns a key-value store with the suffix appended to the path."]], "tensorstore.KvStore.Spec.__eq__": [[1884, 14, 2, "", "other", "Compares with another KvStore.Spec for equality based on the JSON representation."], [1884, 14, 2, "", "self", "Compares with another KvStore.Spec for equality based on the JSON representation."]], "tensorstore.KvStore.Spec.__new__": [[1885, 14, 2, "", "json", "Constructs from the JSON representation or a URL."]], "tensorstore.KvStore.Spec.__repr__": [[1886, 14, 2, "", "self", "Returns a string representation based on the  JSON representation."]], "tensorstore.KvStore.Spec.__truediv__": [[1887, 14, 2, "", "component", "Returns a key-value store with an additional path component joined to the path."], [1887, 14, 2, "", "self", "Returns a key-value store with an additional path component joined to the path."]], "tensorstore.KvStore.Spec.copy": [[1889, 14, 2, "", "self", "Returns a copy of the key-value store spec."]], "tensorstore.KvStore.Spec.to_json": [[1891, 14, 2, "", "include_defaults", "Converts to the JSON representation."], [1891, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.KvStore.Spec.update": [[1892, 14, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [1892, 14, 2, "", "self", "Modifies a spec."], [1892, 14, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [1892, 14, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.TimestampedStorageGeneration": [[1895, 13, 1, "", "__eq__", "Compares two timestamped storage generations for equality."], [1896, 13, 1, "", "__init__", "Constructs from a storage generation and time."], [1897, 15, 1, "", "generation", "Identifies a specific version of a key-value store entry."], [1898, 15, 1, "", "time", "Time (seconds since Unix epoch) at which generation is valid."]], "tensorstore.KvStore.TimestampedStorageGeneration.__eq__": [[1895, 14, 2, "", "other", "Compares two timestamped storage generations for equality."], [1895, 14, 2, "", "self", "Compares two timestamped storage generations for equality."]], "tensorstore.KvStore.TimestampedStorageGeneration.__init__": [[1896, 14, 2, "", "generation", "Constructs from a storage generation and time."], [1896, 14, 2, "", "time", "Constructs from a storage generation and time."]], "tensorstore.KvStore.__add__": [[1899, 14, 2, "", "self", "Returns a key-value store with the suffix appended to the path."], [1899, 14, 2, "", "suffix", "Returns a key-value store with the suffix appended to the path."]], "tensorstore.KvStore.__delitem__": [[1900, 14, 2, "p-key", "key", "Key to delete."], [1900, 14, 2, "", "self", "Synchronously deletes a single key."]], "tensorstore.KvStore.__getitem__": [[1901, 14, 2, "p-key", "key", "The key to read."], [1901, 14, 2, "", "self", "Synchronously reads the value of a single key."]], "tensorstore.KvStore.__repr__": [[1902, 14, 2, "", "self", "Returns a string representation based on the  JSON representation."]], "tensorstore.KvStore.__setitem__": [[1903, 14, 2, "p-key", "key", "Key to write/delete."], [1903, 14, 2, "", "self", "Synchronously writes the value of a single key."], [1903, 14, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.KvStore.__truediv__": [[1904, 14, 2, "", "component", "Returns a key-value store with an additional path component joined to the path."], [1904, 14, 2, "", "self", "Returns a key-value store with an additional path component joined to the path."]], "tensorstore.KvStore.copy": [[1906, 14, 2, "", "self", "Returns a copy of the key-value store."]], "tensorstore.KvStore.delete_range": [[1907, 14, 2, "p-range", "range", "Key range to delete."], [1907, 14, 2, "", "self", "Deletes a key range."]], "tensorstore.KvStore.experimental_copy_range_to": [[1908, 14, 2, "", "self", "Copies a range of keys."], [1908, 14, 2, "p-source_range", "source_range", "Key range to include."], [1908, 14, 2, "p-source_staleness_bound", "source_staleness_bound", "Specifies a time in (fractional) seconds since the Unix epoch."], [1908, 14, 2, "p-target", "target", "Target key-value store."]], "tensorstore.KvStore.list": [[1909, 14, 2, "p-range", "range", "If specified, restricts to the specified key range."], [1909, 14, 2, "", "self", "Lists the keys in the key-value store."], [1909, 14, 2, "p-strip_prefix_length", "strip_prefix_length", "Strips the specified number of bytes from the start of the returned keys."]], "tensorstore.KvStore.open": [[1910, 14, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [1910, 14, 2, "p-spec", "spec", "Key-value store spec to open."], [1910, 14, 2, "p-transaction", "transaction", "Transaction to use for read/write operations."]], "tensorstore.KvStore.read": [[1912, 14, 2, "p-batch", "batch", "Batch to use for the read operation."], [1912, 14, 2, "p-if_not_equal", "if_not_equal", "If specified, the read is aborted if the generation associated with key matches if_not_equal."], [1912, 14, 2, "p-key", "key", "The key to read."], [1912, 14, 2, "", "self", "Reads the value of a single key."], [1912, 14, 2, "p-staleness_bound", "staleness_bound", "Specifies a time in (fractional) seconds since the Unix epoch."]], "tensorstore.KvStore.spec": [[1913, 14, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g."], [1913, 14, 2, "", "self", "Spec that may be used to re-open or re-create the key-value store."], [1913, 14, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.with_transaction": [[1916, 14, 2, "", "self", "Returns a transaction-bound view of this key-value store."], [1916, 14, 2, "", "transaction", "Returns a transaction-bound view of this key-value store."]], "tensorstore.KvStore.write": [[1917, 14, 2, "p-if_equal", "if_equal", "If specified, indicates a conditional write operation."], [1917, 14, 2, "p-key", "key", "Key to write/delete."], [1917, 14, 2, "", "self", "Writes or deletes a single key."], [1917, 14, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.OpenMode": [[1919, 13, 1, "", "__init__", "Constructs an open mode."], [1920, 15, 1, "", "assume_cached_metadata", "Skip reading the metadata when opening."], [1921, 15, 1, "", "assume_metadata", "Don't access the stored metadata."], [1922, 15, 1, "", "create", "Allow creating a new TensorStore."], [1923, 15, 1, "", "delete_existing", "Delete any existing data before creating a new array."], [1924, 15, 1, "", "open", "Allow opening an existing TensorStore."]], "tensorstore.OpenMode.__init__": [[1919, 14, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening."], [1919, 14, 2, "p-assume_metadata", "assume_metadata", "Don't access the stored metadata."], [1919, 14, 2, "p-create", "create", "Allow creating a new TensorStore."], [1919, 14, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array."], [1919, 14, 2, "p-open", "open", "Allow opening an existing TensorStore."]], "tensorstore.OutputIndexMap": [[1926, 13, 1, "", "__init__(constant)", "Constructs a constant map."], [1927, 13, 1, "", "__init__(index_array)", "Constructs an index array map."], [1928, 13, 1, "", "__init__(input_dimension)", "Constructs a single input dimension map."], [1929, 15, 1, "", "index_array", ""], [1930, 15, 1, "", "index_range", ""], [1931, 15, 1, "", "input_dimension", ""], [1932, 15, 1, "", "method", ""], [1933, 15, 1, "", "offset", ""], [1934, 15, 1, "", "stride", ""]], "tensorstore.OutputIndexMap.__init__(constant)": [[1926, 14, 2, "", "offset", "Constructs a constant map."]], "tensorstore.OutputIndexMap.__init__(index_array)": [[1927, 14, 2, "", "index_array", "Constructs an index array map."], [1927, 14, 2, "", "index_range", "Constructs an index array map."], [1927, 14, 2, "", "offset", "Constructs an index array map."], [1927, 14, 2, "", "stride", "Constructs an index array map."]], "tensorstore.OutputIndexMap.__init__(input_dimension)": [[1928, 14, 2, "", "input_dimension", "Constructs a single input dimension map."], [1928, 14, 2, "", "offset", "Constructs a single input dimension map."], [1928, 14, 2, "", "stride", "Constructs a single input dimension map."]], "tensorstore.OutputIndexMaps": [[1936, 13, 1, "", "__getitem__", ""], [1937, 13, 1, "", "__len__", "Returns the output rank."], [1938, 15, 1, "", "rank", "Returns the output rank."]], "tensorstore.OutputIndexMaps.__getitem__": [[1936, 14, 2, "", "arg0", ""], [1936, 14, 2, "", "self", ""]], "tensorstore.OutputIndexMaps.__len__": [[1937, 14, 2, "", "self", "Returns the output rank."]], "tensorstore.OutputIndexMethod": [[1940, 13, 1, "", "__init__", ""], [1941, 16, 1, "", "array", ""], [1942, 16, 1, "", "constant", ""], [1943, 15, 1, "", "name", ""], [1944, 16, 1, "", "single_input_dimension", ""], [1945, 15, 1, "", "value", ""]], "tensorstore.OutputIndexMethod.__init__": [[1940, 14, 2, "", "value", ""]], "tensorstore.Promise": [[1947, 13, 1, "", "new", "Creates a linked promise and future pair."], [1948, 13, 1, "", "set_exception", "Marks the linked future as unsuccessfully completed with the specified error."], [1949, 13, 1, "", "set_result", "Marks the linked future as successfully completed with the specified result."]], "tensorstore.Promise.set_exception": [[1948, 14, 2, "", "exception", "Marks the linked future as unsuccessfully completed with the specified error."], [1948, 14, 2, "", "self", "Marks the linked future as unsuccessfully completed with the specified error."]], "tensorstore.Promise.set_result": [[1949, 14, 2, "", "result", "Marks the linked future as successfully completed with the specified result."], [1949, 14, 2, "", "self", "Marks the linked future as successfully completed with the specified result."]], "tensorstore.Schema": [[1952, 15, 1, "", "T", "View with transposed domain (reversed dimension order)."], [1953, 13, 1, "", "__eq__", "Compares with another Schema for equality based on the JSON representation."], [1954, 13, 1, "", "__getitem__(domain)", "Transforms the schema using an explicit index domain."], [1955, 13, 1, "", "__getitem__(expr)", "Transforms the schema using a dimension expression."], [1956, 13, 1, "", "__getitem__(indices)", "Transforms the schema using NumPy-style indexing with default index array semantics."], [1957, 13, 1, "", "__getitem__(transform)", "Transforms the schema using an explicit index transform."], [1958, 13, 1, "", "__init__(components)", "Constructs from component parts."], [1959, 13, 1, "", "__init__(json)", "Constructs from its JSON representation."], [1960, 13, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [1961, 15, 1, "", "chunk_layout", "Chunk layout constraints specified by the schema."], [1962, 15, 1, "", "codec", "Codec constraints specified by the schema."], [1963, 13, 1, "", "copy", "Returns a copy of the schema."], [1964, 15, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [1965, 15, 1, "", "domain", "Domain of the schema, or None if unspecified."], [1966, 15, 1, "", "dtype", "Data type, or None if unspecified."], [1967, 15, 1, "", "fill_value", "Fill value specified by the schema."], [1968, 13, 1, "", "label", "Returns a new view with the dimension labels changed."], [1969, 13, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [1970, 15, 1, "", "ndim", "Alias for rank."], [1971, 13, 1, "", "oindex", "Transforms the schema using NumPy-style indexing with outer indexing semantics."], [1972, 15, 1, "", "origin", "Inclusive lower bound of the domain."], [1973, 15, 1, "", "rank", "Rank of the schema, or None if unspecified."], [1974, 15, 1, "", "shape", "Shape of the domain."], [1975, 15, 1, "", "size", "Total number of elements in the domain."], [1976, 13, 1, "", "to_json", "Converts to the JSON representation."], [1977, 13, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [1978, 13, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [1979, 13, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [1980, 13, 1, "", "transpose", "Returns a view with a transposed domain."], [1981, 13, 1, "", "update", "Adds additional constraints."], [1982, 13, 1, "", "vindex", "Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Schema.__eq__": [[1953, 14, 2, "", "other", "Compares with another Schema for equality based on the JSON representation."], [1953, 14, 2, "", "self", "Compares with another Schema for equality based on the JSON representation."]], "tensorstore.Schema.__getitem__(domain)": [[1954, 14, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."], [1954, 14, 2, "", "self", "Transforms the schema using an explicit index domain."]], "tensorstore.Schema.__getitem__(expr)": [[1955, 14, 2, "", "expr", "Transforms the schema using a dimension expression."], [1955, 14, 2, "", "self", "Transforms the schema using a dimension expression."]], "tensorstore.Schema.__getitem__(indices)": [[1956, 14, 2, "", "indices", "Transforms the schema using NumPy-style indexing with default index array semantics."], [1956, 14, 2, "", "self", "Transforms the schema using NumPy-style indexing with default index array semantics."]], "tensorstore.Schema.__getitem__(transform)": [[1957, 14, 2, "", "self", "Transforms the schema using an explicit index transform."], [1957, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Schema.__init__(components)": [[1958, 14, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout."], [1958, 14, 2, "p-codec", "codec", "Constrains the codec."], [1958, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [1958, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [1958, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [1958, 14, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [1958, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [1958, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [1958, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."]], "tensorstore.Schema.__init__(json)": [[1959, 14, 2, "", "json", "Constructs from its JSON representation."]], "tensorstore.Schema.__repr__": [[1960, 14, 2, "", "self", "Returns a string representation based on the  JSON representation."]], "tensorstore.Schema.copy": [[1963, 14, 2, "", "self", "Returns a copy of the schema."]], "tensorstore.Schema.label": [[1968, 14, 2, "p-labels", "labels", "Dimension labels for each dimension."], [1968, 14, 2, "", "self", "Returns a new view with the dimension labels changed."]], "tensorstore.Schema.mark_bounds_implicit": [[1969, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"], [1969, 14, 2, "", "self", "Returns a new view with the lower/upper bounds changed to implicit/explicit."]], "tensorstore.Schema.oindex": [[1971, 14, 2, "", "indices", "Transforms the schema using NumPy-style indexing with outer indexing semantics."], [1971, 14, 2, "", "self", "Transforms the schema using NumPy-style indexing with outer indexing semantics."]], "tensorstore.Schema.to_json": [[1976, 14, 2, "", "include_defaults", "Converts to the JSON representation."], [1976, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.Schema.translate_backward_by": [[1977, 14, 2, "p-offsets", "offsets", "The offset for each dimensions."], [1977, 14, 2, "", "self", "Returns a new view with the origin translated backward by the specified offsets."]], "tensorstore.Schema.translate_by": [[1978, 14, 2, "p-offsets", "offsets", "The offset for each dimension."], [1978, 14, 2, "", "self", "Returns a new view with the origin translated by the specified offsets."]], "tensorstore.Schema.translate_to": [[1979, 14, 2, "p-origins", "origins", "The new origin for each dimensions."], [1979, 14, 2, "", "self", "Returns a new view with origin translated to the specified origin."]], "tensorstore.Schema.transpose": [[1980, 14, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view."], [1980, 14, 2, "", "self", "Returns a view with a transposed domain."]], "tensorstore.Schema.update": [[1981, 14, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout."], [1981, 14, 2, "p-codec", "codec", "Constrains the codec."], [1981, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [1981, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [1981, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [1981, 14, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [1981, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [1981, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [1981, 14, 2, "", "self", "Adds additional constraints."], [1981, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."]], "tensorstore.Schema.vindex": [[1982, 14, 2, "", "indices", "Transforms the schema using NumPy-style indexing with vectorized indexing semantics."], [1982, 14, 2, "", "self", "Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Spec": [[1984, 15, 1, "", "T", "View with transposed domain (reversed dimension order)."], [1985, 13, 1, "", "__eq__", "Compares with another Spec for equality based on the JSON representation."], [1986, 13, 1, "", "__getitem__(domain)", "Transforms the spec using an explicit index domain."], [1987, 13, 1, "", "__getitem__(expr)", "Transforms the spec using a dimension expression."], [1988, 13, 1, "", "__getitem__(indices)", "Transforms the spec using NumPy-style indexing with default index array semantics."], [1989, 13, 1, "", "__getitem__(transform)", "Transforms the spec using an explicit index transform."], [1990, 13, 1, "", "__new__", "Constructs from the JSON representation."], [1991, 13, 1, "", "__repr__", "Returns a string representation based on the JSON representation."], [1992, 15, 1, "", "base", "Spec of the underlying TensorStore, if this is an adapter of a single underlying TensorStore."], [1993, 15, 1, "", "chunk_layout", "Effective chunk layout, including any constraints implied by driver-specific options."], [1994, 15, 1, "", "codec", "Effective codec, including any constraints implied by driver-specific options."], [1995, 13, 1, "", "copy", "Returns a copy of the spec."], [1996, 15, 1, "", "dimension_units", "Effective physical units of each dimension of the domain, including any constraints implied by driver-specific options."], [1997, 15, 1, "", "domain", "Effective index domain, including any constraints implied by driver-specific options."], [1998, 15, 1, "", "dtype", "Data type, or None if unspecified."], [1999, 15, 1, "", "fill_value", "Effective fill value, including any constraints implied by driver-specific options."], [2000, 15, 1, "", "kvstore", "Spec of the associated key-value store used as the underlying storage."], [2001, 13, 1, "", "label", "Returns a new view with the dimension labels changed."], [2002, 13, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [2003, 15, 1, "", "ndim", "Alias for rank."], [2004, 13, 1, "", "oindex", "Transforms the spec using NumPy-style indexing with outer indexing semantics."], [2005, 15, 1, "", "open_mode", "Open mode with which the driver will be opened."], [2006, 15, 1, "", "origin", "Inclusive lower bound of the domain."], [2007, 15, 1, "", "rank", "Returns the rank of the domain, or None if unspecified."], [2008, 15, 1, "", "schema", "Effective schema, including any constraints implied by driver-specific options."], [2009, 15, 1, "", "shape", "Shape of the domain."], [2010, 15, 1, "", "size", "Total number of elements in the domain."], [2011, 13, 1, "", "to_json", "Converts to the JSON representation."], [2012, 15, 1, "", "transform", "The index transform, or None if unspecified."], [2013, 13, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [2014, 13, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [2015, 13, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [2016, 13, 1, "", "transpose", "Returns a view with a transposed domain."], [2017, 13, 1, "", "update", "Adds additional constraints or changes the open mode."], [2018, 13, 1, "", "vindex", "Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Spec.__eq__": [[1985, 14, 2, "", "other", "Compares with another Spec for equality based on the JSON representation."], [1985, 14, 2, "", "self", "Compares with another Spec for equality based on the JSON representation."]], "tensorstore.Spec.__getitem__(domain)": [[1986, 14, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."], [1986, 14, 2, "", "self", "Transforms the spec using an explicit index domain."]], "tensorstore.Spec.__getitem__(expr)": [[1987, 14, 2, "", "expr", "Transforms the spec using a dimension expression."], [1987, 14, 2, "", "self", "Transforms the spec using a dimension expression."]], "tensorstore.Spec.__getitem__(indices)": [[1988, 14, 2, "", "indices", "Transforms the spec using NumPy-style indexing with default index array semantics."], [1988, 14, 2, "", "self", "Transforms the spec using NumPy-style indexing with default index array semantics."]], "tensorstore.Spec.__getitem__(transform)": [[1989, 14, 2, "", "self", "Transforms the spec using an explicit index transform."], [1989, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Spec.__new__": [[1990, 14, 2, "", "json", "Constructs from the JSON representation."]], "tensorstore.Spec.__repr__": [[1991, 14, 2, "", "self", "Returns a string representation based on the JSON representation."]], "tensorstore.Spec.copy": [[1995, 14, 2, "", "self", "Returns a copy of the spec."]], "tensorstore.Spec.label": [[2001, 14, 2, "p-labels", "labels", "Dimension labels for each dimension."], [2001, 14, 2, "", "self", "Returns a new view with the dimension labels changed."]], "tensorstore.Spec.mark_bounds_implicit": [[2002, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"], [2002, 14, 2, "", "self", "Returns a new view with the lower/upper bounds changed to implicit/explicit."]], "tensorstore.Spec.oindex": [[2004, 14, 2, "", "indices", "Transforms the spec using NumPy-style indexing with outer indexing semantics."], [2004, 14, 2, "", "self", "Transforms the spec using NumPy-style indexing with outer indexing semantics."]], "tensorstore.Spec.to_json": [[2011, 14, 2, "", "include_defaults", "Converts to the JSON representation."], [2011, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.Spec.translate_backward_by": [[2013, 14, 2, "p-offsets", "offsets", "The offset for each dimensions."], [2013, 14, 2, "", "self", "Returns a new view with the origin translated backward by the specified offsets."]], "tensorstore.Spec.translate_by": [[2014, 14, 2, "p-offsets", "offsets", "The offset for each dimension."], [2014, 14, 2, "", "self", "Returns a new view with the origin translated by the specified offsets."]], "tensorstore.Spec.translate_to": [[2015, 14, 2, "p-origins", "origins", "The new origin for each dimensions."], [2015, 14, 2, "", "self", "Returns a new view with origin translated to the specified origin."]], "tensorstore.Spec.transpose": [[2016, 14, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view."], [2016, 14, 2, "", "self", "Returns a view with a transposed domain."]], "tensorstore.Spec.update": [[2017, 14, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening."], [2017, 14, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata."], [2017, 14, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout."], [2017, 14, 2, "p-codec", "codec", "Constrains the codec."], [2017, 14, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [2017, 14, 2, "p-create", "create", "Allow creating a new TensorStore."], [2017, 14, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array."], [2017, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2017, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2017, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2017, 14, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [2017, 14, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [2017, 14, 2, "p-minimal_spec", "minimal_spec", "Indicates whether to include in the Spec returned by tensorstore.TensorStore.spec the metadata necessary to re-create the TensorStore."], [2017, 14, 2, "p-open", "open", "Allow opening an existing TensorStore."], [2017, 14, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [2017, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2017, 14, 2, "p-recheck_cached", "recheck_cached", "Sets both recheck_cached_data and recheck_cached_metadata."], [2017, 14, 2, "p-recheck_cached_data", "recheck_cached_data", "Time after which cached data is assumed to be fresh."], [2017, 14, 2, "p-recheck_cached_metadata", "recheck_cached_metadata", "Time after which cached metadata is assumed to be fresh."], [2017, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2017, 14, 2, "", "self", "Adds additional constraints or changes the open mode."], [2017, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2017, 14, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [2017, 14, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.Spec.vindex": [[2018, 14, 2, "", "indices", "Transforms the spec using NumPy-style indexing with vectorized indexing semantics."], [2018, 14, 2, "", "self", "Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.TensorStore": [[2020, 12, 1, "", "StorageStatistics", "Statistics related to the storage of an array specified by a TensorStore."], [2024, 15, 1, "", "T", "View with transposed domain (reversed dimension order)."], [2025, 13, 1, "", "__array__", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [2026, 13, 1, "", "__getitem__(domain)", "Computes a virtual view using an explicit index domain."], [2027, 13, 1, "", "__getitem__(expr)", "Computes a virtual view using a dimension expression."], [2028, 13, 1, "", "__getitem__(indices)", "Computes a virtual view using NumPy-style indexing with default index array semantics."], [2029, 13, 1, "", "__getitem__(transform)", "Computes a virtual view using an explicit index transform."], [2030, 13, 1, "", "__setitem__(domain)", "Synchronously writes using an explicit index domain."], [2031, 13, 1, "", "__setitem__(expr)", "Synchronously writes using a dimension expression."], [2032, 13, 1, "", "__setitem__(indices)", "Synchronously writes using NumPy-style indexing with default index array semantics."], [2033, 13, 1, "", "__setitem__(transform)", "Synchronously writes using an explicit index transform."], [2034, 13, 1, "", "astype", "Returns a read/write view as the specified data type."], [2035, 15, 1, "", "base", "Underlying TensorStore, if this is an adapter."], [2036, 15, 1, "", "chunk_layout", "Chunk layout of the TensorStore."], [2037, 15, 1, "", "codec", "Data codec spec."], [2038, 15, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [2039, 15, 1, "", "domain", "Domain of the array."], [2040, 15, 1, "", "dtype", "Data type of the array."], [2041, 15, 1, "", "fill_value", "Fill value for positions not yet written."], [2042, 15, 1, "", "kvstore", "Associated key-value store used as the underlying storage."], [2043, 13, 1, "", "label", "Returns a new view with the dimension labels changed."], [2044, 13, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [2045, 15, 1, "", "mode", "Read/write mode."], [2046, 15, 1, "", "ndim", "Alias for rank."], [2047, 13, 1, "", "oindex", "Computes a virtual view using NumPy-style indexing with outer indexing semantics."], [2049, 15, 1, "", "origin", "Inclusive lower bound of the domain."], [2050, 15, 1, "", "rank", "Number of dimensions in the domain."], [2051, 13, 1, "", "read", "Reads the data within the current domain."], [2052, 15, 1, "", "readable", "Indicates if reading is supported."], [2053, 13, 1, "", "resize", "Resizes the current domain, persistently modifying the stored representation."], [2054, 13, 1, "", "resolve", "Obtains updated bounds, subject to the cache policy."], [2055, 15, 1, "", "schema", "Schema of this TensorStore."], [2056, 15, 1, "", "shape", "Shape of the domain."], [2057, 15, 1, "", "size", "Total number of elements in the domain."], [2058, 13, 1, "", "spec", "Spec that may be used to re-open or re-create the TensorStore."], [2059, 13, 1, "", "storage_statistics", "Obtains statistics of the data stored for the domain."], [2060, 15, 1, "", "transaction", "Associated transaction used for read/write operations."], [2061, 13, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [2062, 13, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [2063, 13, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [2064, 13, 1, "", "transpose", "Returns a view with a transposed domain."], [2065, 13, 1, "", "vindex", "Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."], [2067, 13, 1, "", "with_transaction", "Returns a transaction-bound view of this TensorStore."], [2068, 15, 1, "", "writable", "Indicates if writing is supported."], [2069, 13, 1, "", "write", "Writes to the current domain."]], "tensorstore.TensorStore.StorageStatistics": [[2021, 13, 1, "", "__init__", "Constructs from attribute values."], [2022, 15, 1, "", "fully_stored", "Indicates whether data is stored for all elements of the specified domain."], [2023, 15, 1, "", "not_stored", "Indicates whether no data is stored for the specified domain."]], "tensorstore.TensorStore.StorageStatistics.__init__": [[2021, 14, 2, "", "fully_stored", "Constructs from attribute values."], [2021, 14, 2, "", "not_stored", "Constructs from attribute values."]], "tensorstore.TensorStore.__array__": [[2025, 14, 2, "", "context", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [2025, 14, 2, "", "copy", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [2025, 14, 2, "", "dtype", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [2025, 14, 2, "", "self", "Automatic conversion to numpy.ndarray for interoperability with NumPy."]], "tensorstore.TensorStore.__getitem__(domain)": [[2026, 14, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."], [2026, 14, 2, "", "self", "Computes a virtual view using an explicit index domain."]], "tensorstore.TensorStore.__getitem__(expr)": [[2027, 14, 2, "", "expr", "Computes a virtual view using a dimension expression."], [2027, 14, 2, "", "self", "Computes a virtual view using a dimension expression."]], "tensorstore.TensorStore.__getitem__(indices)": [[2028, 14, 2, "", "indices", "Computes a virtual view using NumPy-style indexing with default index array semantics."], [2028, 14, 2, "", "self", "Computes a virtual view using NumPy-style indexing with default index array semantics."]], "tensorstore.TensorStore.__getitem__(transform)": [[2029, 14, 2, "", "self", "Computes a virtual view using an explicit index transform."], [2029, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(domain)": [[2030, 14, 2, "", "self", "Synchronously writes using an explicit index domain."], [2030, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype."], [2030, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(expr)": [[2031, 14, 2, "", "self", "Synchronously writes using a dimension expression."], [2031, 14, 2, "", "source", "Synchronously writes using a dimension expression."], [2031, 14, 2, "", "transform", "Synchronously writes using a dimension expression."]], "tensorstore.TensorStore.__setitem__(indices)": [[2032, 14, 2, "p-indices", "indices", "NumPy-style indexing terms."], [2032, 14, 2, "", "self", "Synchronously writes using NumPy-style indexing with default index array semantics."], [2032, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self[indices].domain and with a data type convertible to self.dtype."]], "tensorstore.TensorStore.__setitem__(transform)": [[2033, 14, 2, "", "self", "Synchronously writes using an explicit index transform."], [2033, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype."], [2033, 14, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.astype": [[2034, 14, 2, "", "dtype", "Returns a read/write view as the specified data type."], [2034, 14, 2, "", "self", "Returns a read/write view as the specified data type."]], "tensorstore.TensorStore.label": [[2043, 14, 2, "p-labels", "labels", "Dimension labels for each dimension."], [2043, 14, 2, "", "self", "Returns a new view with the dimension labels changed."]], "tensorstore.TensorStore.mark_bounds_implicit": [[2044, 14, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"], [2044, 14, 2, "", "self", "Returns a new view with the lower/upper bounds changed to implicit/explicit."]], "tensorstore.TensorStore.oindex": [[2048, 13, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with outer indexing semantics."], [2047, 14, 2, "", "indices", "Computes a virtual view using NumPy-style indexing with outer indexing semantics."], [2047, 14, 2, "", "self", "Computes a virtual view using NumPy-style indexing with outer indexing semantics."]], "tensorstore.TensorStore.oindex.__setitem__": [[2048, 14, 2, "p-indices", "indices", "NumPy-style indexing terms."], [2048, 14, 2, "", "self", "Synchronously writes using NumPy-style indexing with outer indexing semantics."], [2048, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self.oindex[indices].domain and with a data type convertible to self.dtype."]], "tensorstore.TensorStore.read": [[2051, 14, 2, "p-batch", "batch", "Batch to use for the read operation."], [2051, 14, 2, "p-order", "order", "Contiguous layout order of the returned array:"], [2051, 14, 2, "", "self", "Reads the data within the current domain."]], "tensorstore.TensorStore.resize": [[2053, 14, 2, "p-exclusive_max", "exclusive_max", "Sequence of length self.rank() specifying the new exclusive max bounds."], [2053, 14, 2, "p-expand_only", "expand_only", "Fail if any bounds would be reduced."], [2053, 14, 2, "p-inclusive_min", "inclusive_min", "Sequence of length self.rank() specifying the new inclusive min bounds."], [2053, 14, 2, "p-resize_metadata_only", "resize_metadata_only", "Requests that, if applicable, the resize operation affect only the metadata but not delete data chunks that are outside of the new bounds."], [2053, 14, 2, "p-resize_tied_bounds", "resize_tied_bounds", "Requests that the resize be permitted even if other bounds tied to the specified bounds must also be resized."], [2053, 14, 2, "", "self", "Resizes the current domain, persistently modifying the stored representation."], [2053, 14, 2, "p-shrink_only", "shrink_only", "Fail if any bounds would be increased."]], "tensorstore.TensorStore.resolve": [[2054, 14, 2, "p-batch", "batch", "Batch to use for resolving the bounds."], [2054, 14, 2, "p-fix_resizable_bounds", "fix_resizable_bounds", "Mark all resizable bounds as explicit."], [2054, 14, 2, "", "self", "Obtains updated bounds, subject to the cache policy."]], "tensorstore.TensorStore.spec": [[2058, 14, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening."], [2058, 14, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata."], [2058, 14, 2, "p-create", "create", "Allow creating a new TensorStore."], [2058, 14, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array."], [2058, 14, 2, "p-minimal_spec", "minimal_spec", "Indicates whether to include in the Spec returned by tensorstore.TensorStore.spec the metadata necessary to re-create the TensorStore."], [2058, 14, 2, "p-open", "open", "Allow opening an existing TensorStore."], [2058, 14, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [2058, 14, 2, "p-recheck_cached", "recheck_cached", "Sets both recheck_cached_data and recheck_cached_metadata."], [2058, 14, 2, "p-recheck_cached_data", "recheck_cached_data", "Time after which cached data is assumed to be fresh."], [2058, 14, 2, "p-recheck_cached_metadata", "recheck_cached_metadata", "Time after which cached metadata is assumed to be fresh."], [2058, 14, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g."], [2058, 14, 2, "", "self", "Spec that may be used to re-open or re-create the TensorStore."], [2058, 14, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.TensorStore.storage_statistics": [[2059, 14, 2, "p-query_fully_stored", "query_fully_stored", "Check whether there is data stored for all elements of the domain."], [2059, 14, 2, "p-query_not_stored", "query_not_stored", "Check whether there is data stored for any element of the domain."], [2059, 14, 2, "", "self", "Obtains statistics of the data stored for the domain."]], "tensorstore.TensorStore.translate_backward_by": [[2061, 14, 2, "p-offsets", "offsets", "The offset for each dimensions."], [2061, 14, 2, "", "self", "Returns a new view with the origin translated backward by the specified offsets."]], "tensorstore.TensorStore.translate_by": [[2062, 14, 2, "p-offsets", "offsets", "The offset for each dimension."], [2062, 14, 2, "", "self", "Returns a new view with the origin translated by the specified offsets."]], "tensorstore.TensorStore.translate_to": [[2063, 14, 2, "p-origins", "origins", "The new origin for each dimensions."], [2063, 14, 2, "", "self", "Returns a new view with origin translated to the specified origin."]], "tensorstore.TensorStore.transpose": [[2064, 14, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view."], [2064, 14, 2, "", "self", "Returns a view with a transposed domain."]], "tensorstore.TensorStore.vindex": [[2066, 13, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with vectorized indexing semantics."], [2065, 14, 2, "", "indices", "Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."], [2065, 14, 2, "", "self", "Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.TensorStore.vindex.__setitem__": [[2066, 14, 2, "p-indices", "indices", "NumPy-style indexing terms."], [2066, 14, 2, "", "self", "Synchronously writes using NumPy-style indexing with vectorized indexing semantics."], [2066, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self.vindex[indices].domain and with a data type convertible to self.dtype."]], "tensorstore.TensorStore.with_transaction": [[2067, 14, 2, "", "self", "Returns a transaction-bound view of this TensorStore."], [2067, 14, 2, "", "transaction", "Returns a transaction-bound view of this TensorStore."]], "tensorstore.TensorStore.write": [[2069, 14, 2, "p-batch", "batch", "Batch to use for reading any metadata required for opening."], [2069, 14, 2, "p-can_reference_source_data_indefinitely", "can_reference_source_data_indefinitely", "References to the source data may be retained indefinitely, even after the write is committed."], [2069, 14, 2, "", "self", "Writes to the current domain."], [2069, 14, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain and with a data type convertible to self.dtype."]], "tensorstore.Transaction": [[2071, 13, 1, "", "__init__", "Creates a new transaction."], [2072, 13, 1, "", "abort", "Aborts the transaction."], [2073, 15, 1, "", "aborted", "Indicates whether the transaction has been aborted."], [2074, 15, 1, "", "atomic", "Indicates whether the transaction is atomic."], [2075, 13, 1, "", "commit_async", "Asynchronously commits the transaction."], [2076, 15, 1, "", "commit_started", "Indicates whether the commit of the transaction has already started."], [2077, 13, 1, "", "commit_sync", "Synchronously commits the transaction."], [2078, 15, 1, "", "future", "Commit result future."], [2079, 15, 1, "", "open", "Indicates whether the transaction is still open."]], "tensorstore.Transaction.__init__": [[2071, 14, 2, "p-atomic", "atomic", "Requires atomicity when committing."], [2071, 14, 2, "p-repeatable_read", "repeatable_read", "Requires that repeated reads return the same result."]], "tensorstore.Transaction.abort": [[2072, 14, 2, "", "self", "Aborts the transaction."]], "tensorstore.Transaction.commit_async": [[2075, 14, 2, "", "self", "Asynchronously commits the transaction."]], "tensorstore.Transaction.commit_sync": [[2077, 14, 2, "", "self", "Synchronously commits the transaction."]], "tensorstore.Unit": [[2081, 13, 1, "", "__eq__", "Compares two units for equality."], [2082, 13, 1, "", "__init__(components)", "Constructs a unit from a multiplier and base unit."], [2083, 13, 1, "", "__init__(json)", "Constructs a unit from its JSON representation."], [2084, 13, 1, "", "__init__(multiplier)", "Constructs a dimension-less quantity of the specified value."], [2085, 13, 1, "", "__init__(pair)", "Constructs a unit from a multiplier and base unit pair."], [2086, 13, 1, "", "__init__(unit)", "Constructs a unit from a string."], [2087, 13, 1, "", "__mul__", "Multiplies this unit by the specified multiplier."], [2088, 13, 1, "", "__truediv__", "Divides this unit by the specified divisor."], [2089, 15, 1, "", "base_unit", "Base unit from which this unit is derived."], [2090, 15, 1, "", "multiplier", "Multiplier for the base_unit."], [2091, 13, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.Unit.__eq__": [[2081, 14, 2, "", "other", "Compares two units for equality."], [2081, 14, 2, "", "self", "Compares two units for equality."]], "tensorstore.Unit.__init__(components)": [[2082, 14, 2, "", "base_unit", "Constructs a unit from a multiplier and base unit."], [2082, 14, 2, "", "multiplier", "Constructs a unit from a multiplier and base unit."]], "tensorstore.Unit.__init__(json)": [[2083, 14, 2, "", "json", "Constructs a unit from its JSON representation."]], "tensorstore.Unit.__init__(multiplier)": [[2084, 14, 2, "", "multiplier", "Constructs a dimension-less quantity of the specified value."]], "tensorstore.Unit.__init__(pair)": [[2085, 14, 2, "", "unit", "Constructs a unit from a multiplier and base unit pair."]], "tensorstore.Unit.__init__(unit)": [[2086, 14, 2, "", "unit", "Constructs a unit from a string."]], "tensorstore.Unit.__mul__": [[2087, 14, 2, "", "multiplier", "Multiplies this unit by the specified multiplier."], [2087, 14, 2, "", "self", "Multiplies this unit by the specified multiplier."]], "tensorstore.Unit.__truediv__": [[2088, 14, 2, "", "divisor", "Divides this unit by the specified divisor."], [2088, 14, 2, "", "self", "Divides this unit by the specified divisor."]], "tensorstore.Unit.to_json": [[2091, 14, 2, "", "self", "Converts to the JSON representation."]], "tensorstore.VirtualChunkedReadParameters": [[2093, 15, 1, "", "if_not_equal", "Cached generation, read request can be skipped if no newer data is available."], [2094, 15, 1, "", "staleness_bound", "Read may be fulfilled with cached data no older than the specified bound."]], "tensorstore.VirtualChunkedWriteParameters": [[2096, 15, 1, "", "if_equal", "If non-empty, writeback should be conditioned on the existing data matching the specified generation."]], "tensorstore.WriteFutures": [[2098, 13, 1, "", "add_done_callback", ""], [2099, 13, 1, "", "cancel", ""], [2100, 13, 1, "", "cancelled", ""], [2101, 15, 1, "", "commit", ""], [2102, 15, 1, "", "copy", ""], [2103, 13, 1, "", "done", ""], [2104, 13, 1, "", "exception", ""], [2105, 13, 1, "", "remove_done_callback", ""], [2106, 13, 1, "", "result", ""]], "tensorstore.WriteFutures.add_done_callback": [[2098, 14, 2, "", "callback", ""], [2098, 14, 2, "", "self", ""]], "tensorstore.WriteFutures.cancel": [[2099, 14, 2, "", "self", ""]], "tensorstore.WriteFutures.cancelled": [[2100, 14, 2, "", "self", ""]], "tensorstore.WriteFutures.done": [[2103, 14, 2, "", "self", ""]], "tensorstore.WriteFutures.exception": [[2104, 14, 2, "", "deadline", ""], [2104, 14, 2, "", "self", ""], [2104, 14, 2, "", "timeout", ""]], "tensorstore.WriteFutures.remove_done_callback": [[2105, 14, 2, "", "callback", ""], [2105, 14, 2, "", "self", ""]], "tensorstore.WriteFutures.result": [[2106, 14, 2, "", "deadline", ""], [2106, 14, 2, "", "self", ""], [2106, 14, 2, "", "timeout", ""]], "tensorstore.array": [[2107, 14, 2, "p-array", "array", "Source array."], [2107, 14, 2, "p-context", "context", "Optional context to use, for specifying Context.data_copy_concurrency."], [2107, 14, 2, "p-copy", "copy", "Indicates whether the returned TensorStore may be a copy of the source array, rather than a reference to it."], [2107, 14, 2, "p-dtype", "dtype", "Data type to which array will be converted."], [2107, 14, 2, "p-write", "write", "Indicates whether the returned TensorStore is writable."]], "tensorstore.cast(spec)": [[2110, 14, 2, "", "base", "Returns a view with the data type converted."], [2110, 14, 2, "", "dtype", "Returns a view with the data type converted."]], "tensorstore.cast(store)": [[2111, 14, 2, "", "base", "Returns a read/write view with the data type converted."], [2111, 14, 2, "", "dtype", "Returns a read/write view with the data type converted."]], "tensorstore.concat": [[2114, 14, 2, "p-axis", "axis", "Existing dimension along which to concatenate."], [2114, 14, 2, "p-context", "context", "Shared resource context."], [2114, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2114, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2114, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2114, 14, 2, "p-layers", "layers", "Sequence of layers to concatenate."], [2114, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2114, 14, 2, "p-read", "read", "Allow read access."], [2114, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2114, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2114, 14, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations."], [2114, 14, 2, "p-write", "write", "Allow write access."]], "tensorstore.d": [[2116, 13, 1, "", "__class_getitem__", "Constructs from a sequence of dimension indices, ranges, and/or labels."]], "tensorstore.d.__class_getitem__": [[2116, 14, 2, "", "selection", "Constructs from a sequence of dimension indices, ranges, and/or labels."]], "tensorstore.downsample(spec)": [[2117, 14, 2, "", "base", "Returns a virtual downsampled view view of a Spec."], [2117, 14, 2, "", "downsample_factors", "Returns a virtual downsampled view view of a Spec."], [2117, 14, 2, "", "method", "Returns a virtual downsampled view view of a Spec."]], "tensorstore.downsample(store)": [[2118, 14, 2, "", "base", "Returns a virtual downsampled view of a TensorStore."], [2118, 14, 2, "", "downsample_factors", "Returns a virtual downsampled view of a TensorStore."], [2118, 14, 2, "", "method", "Returns a virtual downsampled view of a TensorStore."]], "tensorstore.dtype": [[2120, 13, 1, "", "__call__", "Construct a scalar instance of this data type"], [2121, 13, 1, "", "__init__(dtype)", "Construct from an existing TensorStore or NumPy data type."], [2122, 13, 1, "", "__init__(name)", "Construct by name."], [2123, 15, 1, "", "name", ""], [2124, 15, 1, "", "numpy_dtype", ""], [2125, 13, 1, "", "to_json", ""], [2126, 15, 1, "", "type", ""]], "tensorstore.dtype.__call__": [[2120, 14, 2, "", "arg0", "Construct a scalar instance of this data type"], [2120, 14, 2, "", "self", "Construct a scalar instance of this data type"]], "tensorstore.dtype.__init__(dtype)": [[2121, 14, 2, "", "dtype", "Construct from an existing TensorStore or NumPy data type."]], "tensorstore.dtype.__init__(name)": [[2122, 14, 2, "", "name", "Construct by name."]], "tensorstore.dtype.to_json": [[2125, 14, 2, "", "self", ""]], "tensorstore.experimental_collect_matching_metrics": [[2127, 14, 2, "p-include_zero_metrics", "include_zero_metrics", "Indicate whether zero-valued metrics are included."], [2127, 14, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to collect."]], "tensorstore.experimental_collect_prometheus_format_metrics": [[2128, 14, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to collect."]], "tensorstore.experimental_push_metrics_to_prometheus": [[2129, 14, 2, "p-instance", "instance", "prometheus instance identifier"], [2129, 14, 2, "p-job", "job", "prometheus job name"], [2129, 14, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to publish."], [2129, 14, 2, "p-pushgateway", "pushgateway", "prometheus pushgateway url, like 'http://localhost:1234/'"]], "tensorstore.experimental_update_verbose_logging": [[2130, 14, 2, "p-flags", "flags", "str comma separated list of flags with optional values."], [2130, 14, 2, "p-overwrite", "overwrite", "When true overwrites existing flags, otherwise updates."]], "tensorstore.ocdbt": [[2147, 12, 1, "", "DistributedCoordinatorServer", "Distributed coordinator server for the OCDBT (Optionally-Cooperative Distributed B+Tree) database."], [2150, 18, 1, "", "dump", "Dumps the internal representation of an OCDBT database."]], "tensorstore.ocdbt.DistributedCoordinatorServer": [[2148, 13, 1, "", "__init__", ""], [2149, 15, 1, "", "port", ""]], "tensorstore.ocdbt.DistributedCoordinatorServer.__init__": [[2148, 14, 2, "", "json", ""]], "tensorstore.ocdbt.dump": [[2150, 14, 2, "p-base", "base", "Base kvstore containing the OCDBT database."], [2150, 14, 2, "p-context", "context", "Context from which the Context.cache_pool and Context.data_copy_concurrency resources will be used."], [2150, 14, 2, "p-node", "node", "Reference to the node or value to dump, of the form \"<type>:<file-id>:<offset>:<length>\" where <type> is one of \"value\", \"btreenode\", or \"versionnode\", as specified in a \"location\" field within the manifest, a B+tree node, or a version node. If not specified, the manifest is dumped."]], "tensorstore.open": [[2151, 14, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening."], [2151, 14, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata."], [2151, 14, 2, "p-batch", "batch", "Batch to use for reading any metadata required for opening."], [2151, 14, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout."], [2151, 14, 2, "p-codec", "codec", "Constrains the codec."], [2151, 14, 2, "p-context", "context", "Shared resource context."], [2151, 14, 2, "p-create", "create", "Allow creating a new TensorStore."], [2151, 14, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array."], [2151, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2151, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2151, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2151, 14, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [2151, 14, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [2151, 14, 2, "p-open", "open", "Allow opening an existing TensorStore."], [2151, 14, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [2151, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2151, 14, 2, "p-read", "read", "Allow read access."], [2151, 14, 2, "p-recheck_cached", "recheck_cached", "Sets both recheck_cached_data and recheck_cached_metadata."], [2151, 14, 2, "p-recheck_cached_data", "recheck_cached_data", "Time after which cached data is assumed to be fresh."], [2151, 14, 2, "p-recheck_cached_metadata", "recheck_cached_metadata", "Time after which cached metadata is assumed to be fresh."], [2151, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2151, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2151, 14, 2, "p-spec", "spec", "TensorStore Spec to open."], [2151, 14, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations."], [2151, 14, 2, "p-write", "write", "Allow write access."]], "tensorstore.overlay": [[2152, 14, 2, "p-context", "context", "Shared resource context."], [2152, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2152, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2152, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2152, 14, 2, "p-layers", "layers", "Sequence of layers to overlay."], [2152, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2152, 14, 2, "p-read", "read", "Allow read access."], [2152, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2152, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2152, 14, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations."], [2152, 14, 2, "p-write", "write", "Allow write access."]], "tensorstore.parse_tensorstore_flags": [[2153, 14, 2, "p-argv", "argv", "list of command line argument strings, such as sys.argv."]], "tensorstore.stack": [[2154, 14, 2, "p-axis", "axis", "New dimension along which to stack."], [2154, 14, 2, "p-context", "context", "Shared resource context."], [2154, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2154, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2154, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2154, 14, 2, "p-layers", "layers", "Sequence of layers to stack."], [2154, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2154, 14, 2, "p-read", "read", "Allow read access."], [2154, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2154, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2154, 14, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations."], [2154, 14, 2, "p-write", "write", "Allow write access."]], "tensorstore.virtual_chunked": [[2161, 14, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout."], [2161, 14, 2, "p-context", "context", "Shared resource context."], [2161, 14, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [2161, 14, 2, "p-domain", "domain", "Constrains the domain of the TensorStore."], [2161, 14, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore."], [2161, 14, 2, "p-loop", "loop", "Event loop on which to execute read_function and/or write_function if they are async functions."], [2161, 14, 2, "p-rank", "rank", "Constrains the rank of the TensorStore."], [2161, 14, 2, "p-read_function", "read_function", "Callback that handles chunk read requests."], [2161, 14, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [2161, 14, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore."], [2161, 14, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations."], [2161, 14, 2, "p-write_function", "write_function", "Callback that handles chunk write requests."]]}, "objnames": {"0": ["c", "macro", "C macro"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "functionParam", "C++ function parameter"], "3": ["cpp", "templateTypeParam", "C++ type template parameter"], "4": ["cpp", "class", "C++ class"], "5": ["cpp", "member", "C++ member"], "6": ["cpp", "type", "C++ type"], "7": ["cpp", "templateNonTypeParam", "C++ non-type template parameter"], "8": ["cpp", "enum", "C++ enum"], "9": ["cpp", "enumerator", "C++ enumerator"], "10": ["json", "schema", "JSON type"], "11": ["json", "subschema", "JSON member"], "12": ["py", "class", "Python class"], "13": ["py", "method", "Python method"], "14": ["py", "parameter", "Python parameter"], "15": ["py", "property", "Python property"], "16": ["py", "attribute", "Python attribute"], "17": ["py", "data", "Python data"], "18": ["py", "function", "Python function"], "19": ["std", "envvar", "environment variable"]}, "objtypes": {"0": "c:macro", "1": "cpp:function", "2": "cpp:functionParam", "3": "cpp:templateTypeParam", "4": "cpp:class", "5": "cpp:member", "6": "cpp:type", "7": "cpp:templateNonTypeParam", "8": "cpp:enum", "9": "cpp:enumerator", "10": "json:schema", "11": "json:subschema", "12": "py:class", "13": "py:method", "14": "py:parameter", "15": "py:property", "16": "py:attribute", "17": "py:data", "18": "py:function", "19": "std:envvar"}, "terms": {"": [174, 300, 302, 307, 318, 526, 564, 838, 869, 871, 964, 1089, 1345, 1366, 1368, 1612, 1622, 1681, 1685, 1686, 1689, 1697, 1702, 1780, 2140, 2141, 2142, 2143, 2144, 2162, 2165], "0": [0, 8, 13, 39, 42, 43, 45, 79, 99, 174, 177, 185, 190, 195, 196, 198, 209, 213, 250, 253, 260, 266, 282, 283, 285, 300, 318, 325, 326, 351, 392, 393, 394, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 464, 465, 473, 479, 480, 518, 519, 520, 545, 547, 559, 563, 569, 579, 580, 586, 597, 600, 601, 605, 608, 609, 627, 639, 640, 648, 649, 651, 661, 668, 670, 686, 693, 694, 695, 697, 740, 795, 796, 799, 800, 823, 846, 853, 854, 882, 885, 886, 892, 894, 903, 911, 930, 936, 940, 944, 947, 961, 964, 1028, 1054, 1110, 1113, 1121, 1125, 1127, 1133, 1145, 1152, 1186, 1188, 1205, 1209, 1210, 1214, 1217, 1223, 1224, 1225, 1228, 1236, 1238, 1240, 1294, 1306, 1343, 1344, 1345, 1371, 1419, 1445, 1500, 1503, 1623, 1624, 1637, 1642, 1653, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1691, 1696, 1698, 1700, 1702, 1703, 1722, 1727, 1729, 1730, 1733, 1734, 1758, 1762, 1768, 1772, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1812, 1817, 1828, 1829, 1831, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1856, 1862, 1863, 1864, 1866, 1867, 1909, 1925, 1926, 1927, 1928, 1939, 1942, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1965, 1971, 1973, 1976, 1977, 1978, 1980, 1982, 1986, 1987, 1988, 1989, 1992, 1997, 2004, 2008, 2011, 2012, 2013, 2014, 2016, 2017, 2018, 2019, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2039, 2047, 2048, 2051, 2053, 2055, 2058, 2061, 2062, 2064, 2065, 2066, 2069, 2070, 2091, 2109, 2111, 2114, 2116, 2146, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "05": 1689, "098695591f3a": 1689, "0x": 2163, "0x0cdb1234": 1697, "0x0cdb20de": 1697, "0x0cdb3a2a": 1697, "0x3ffffffffffffffe": [585, 1461, 1464], "0x3fffffffffffffff": [585, 1459], "0x7ffffffffffffffd": [585, 1462], "0x7fffffffffffffff": [585, 1460], "0x8": [2151, 2163], "0x8000000000000000": [585, 1458], "1": [0, 4, 8, 12, 13, 16, 33, 39, 43, 45, 75, 79, 80, 101, 110, 174, 218, 227, 231, 250, 253, 260, 266, 282, 300, 315, 318, 359, 363, 392, 393, 416, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 463, 464, 478, 480, 482, 484, 485, 518, 519, 520, 542, 547, 563, 586, 597, 600, 601, 605, 634, 637, 638, 639, 641, 642, 643, 653, 654, 668, 670, 697, 740, 778, 779, 796, 841, 842, 843, 848, 849, 882, 892, 894, 903, 910, 914, 961, 964, 1028, 1054, 1056, 1060, 1110, 1125, 1127, 1188, 1205, 1225, 1228, 1236, 1238, 1252, 1294, 1306, 1322, 1343, 1344, 1345, 1347, 1349, 1351, 1372, 1419, 1444, 1445, 1448, 1574, 1622, 1670, 1672, 1673, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1696, 1697, 1698, 1699, 1702, 1703, 1722, 1727, 1729, 1730, 1733, 1734, 1752, 1753, 1754, 1760, 1765, 1766, 1768, 1769, 1770, 1771, 1772, 1773, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1801, 1802, 1803, 1804, 1805, 1811, 1812, 1815, 1816, 1817, 1818, 1820, 1823, 1825, 1826, 1831, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1846, 1847, 1848, 1849, 1850, 1856, 1859, 1862, 1866, 1867, 1927, 1928, 1939, 1944, 1952, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1964, 1971, 1973, 1976, 1980, 1982, 1984, 1988, 1989, 1996, 2008, 2011, 2012, 2016, 2019, 2024, 2026, 2027, 2028, 2029, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2046, 2047, 2048, 2050, 2053, 2055, 2058, 2064, 2065, 2066, 2069, 2070, 2080, 2084, 2086, 2109, 2111, 2114, 2116, 2139, 2146, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "10": [13, 110, 282, 445, 447, 451, 518, 519, 520, 605, 609, 923, 1127, 1306, 1573, 1684, 1688, 1689, 1690, 1697, 1703, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1763, 1765, 1766, 1767, 1771, 1772, 1777, 1783, 1784, 1785, 1788, 1801, 1808, 1817, 1835, 1862, 1955, 1956, 1971, 1982, 1987, 1988, 2004, 2018, 2019, 2025, 2027, 2028, 2030, 2031, 2032, 2047, 2048, 2051, 2059, 2065, 2066, 2069, 2114, 2151, 2162], "100": [253, 266, 315, 398, 569, 1011, 1012, 1378, 1675, 1678, 1681, 1682, 1684, 1685, 1688, 1697, 1732, 1733, 1736, 1780, 1809, 1822, 1824, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1992, 1993, 2003, 2007, 2008, 2011, 2012, 2017, 2035, 2037, 2038, 2041, 2042, 2055, 2059, 2161, 2162, 2163], "1000": [90, 97, 1681, 1682, 1684, 1685, 1954, 1955, 1956, 1957, 1971, 1982, 1997, 2008, 2019, 2036, 2151, 2163], "10000": 1682, "1000000": 1733, "10000000": [0, 1742, 1746, 1750, 1751, 2151], "100000000": [0, 2161, 2163], "1000000000": [1682, 1685, 1696, 1700], "100_000_000": 2163, "100kb": 1681, "100mb": [2161, 2163], "100x100x1": 2163, "101": [1681, 1684, 1685, 2036, 2151, 2161], "102": [2161, 2163], "1020": 1682, "103": 2161, "104": 2161, "1048": 2019, "1048576": 1697, "105": [1732, 1736, 2011, 2012, 2161], "106": 2161, "11": [447, 451, 547, 1306, 1684, 1689, 1703, 1757, 1765, 1777, 1802, 1841, 1927, 1928, 2114, 2162, 2165], "1113": 1682, "1132030694": 2163, "1161117856": 2163, "1194100437": 2163, "12": [13, 447, 451, 1684, 1688, 1689, 1703, 1777, 1783, 1784, 1802, 2051, 2114, 2162], "1234": [1698, 2129], "1264": 1682, "128": [1681, 1684, 1697, 1700], "13": [447, 547, 1684, 1689, 1703, 1784, 1802, 1862, 1928], "131072": [1684, 1685], "14": [1684, 1689, 1703, 1785, 1805], "1408314276": 2163, "1414": 2151, "15": [547, 1682, 1689, 1703, 1758, 1785, 2151, 2162, 2163, 2165], "15000": 2163, "15100": 2163, "159": [1681, 1682, 1684], "16": [247, 445, 892, 1685, 1689, 1697, 1702, 1703, 1784, 2140, 2156, 2165], "169": 1698, "17": [445, 451, 1689, 1703, 1783, 1808, 1841], "18": [1703, 1784], "19": 1703, "1gb": 1696, "1nm": [1682, 2164], "2": [4, 13, 33, 39, 43, 45, 75, 80, 90, 95, 101, 110, 174, 218, 249, 253, 266, 282, 300, 315, 318, 359, 363, 393, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 458, 459, 478, 480, 481, 482, 484, 485, 518, 519, 520, 542, 547, 569, 593, 605, 609, 740, 821, 841, 842, 848, 849, 892, 1028, 1056, 1152, 1188, 1205, 1225, 1228, 1236, 1240, 1252, 1306, 1345, 1372, 1447, 1575, 1670, 1672, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1692, 1696, 1697, 1702, 1703, 1729, 1730, 1733, 1752, 1760, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1801, 1802, 1803, 1804, 1805, 1806, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825, 1826, 1834, 1835, 1836, 1837, 1839, 1840, 1841, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1856, 1862, 1867, 1927, 1928, 1939, 1941, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1963, 1971, 1973, 1976, 1982, 1989, 1992, 2003, 2007, 2008, 2012, 2019, 2028, 2029, 2031, 2032, 2033, 2034, 2035, 2036, 2046, 2047, 2048, 2050, 2053, 2058, 2065, 2066, 2069, 2070, 2087, 2088, 2111, 2114, 2116, 2139, 2146, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "20": [445, 447, 451, 1055, 1682, 1688, 1703, 1767, 1777, 1780, 1783, 1784, 1785, 1956, 1971, 1982, 1988, 1992, 2004, 2018, 2025, 2028, 2035, 2047, 2059, 2065, 2162], "200": [18, 253, 315, 398, 1011, 1012, 1378, 1681, 1682, 1684, 1685, 1732, 1733, 1736, 1780, 1809, 1822, 1824, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1992, 1993, 1996, 2003, 2007, 2008, 2011, 2012, 2017, 2035, 2038, 2042, 2059, 2162], "2000": [1681, 1682, 1684, 1685, 1954, 1955, 1956, 1957, 1971, 1982, 1997, 2008, 2036, 2151], "20000": [2019, 2163], "2000000": [1681, 1682, 1684, 1685], "2018": 1063, "2019": 1689, "2030": 1682, "2048": 1682, "206": [1732, 1736], "207": [1732, 1736], "20base": 1692, "20data": 1692, "21": [451, 1689, 1703, 2162], "2147483648": 1697, "22": [1681, 1684, 1685, 1703], "23": [447, 1703, 1784], "24": [447, 1689, 1703], "25": [398, 1011, 1012, 1378, 1703, 1785, 1992, 2035], "254": 1698, "255": 1685, "26": 1703, "260": 1689, "27": 1703, "28": [1703, 1784], "29": [1689, 1703], "2nm": 1685, "2x": [1691, 1698], "3": [13, 33, 43, 45, 75, 90, 95, 174, 218, 251, 318, 327, 359, 363, 398, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 458, 459, 481, 482, 484, 518, 520, 542, 547, 593, 605, 609, 740, 801, 841, 842, 848, 849, 1011, 1012, 1028, 1055, 1059, 1089, 1181, 1187, 1188, 1205, 1225, 1228, 1240, 1252, 1294, 1306, 1345, 1349, 1378, 1670, 1672, 1678, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1692, 1696, 1703, 1729, 1730, 1752, 1760, 1768, 1773, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1801, 1802, 1803, 1804, 1805, 1806, 1809, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1822, 1823, 1824, 1825, 1826, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1856, 1859, 1862, 1867, 1927, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1963, 1964, 1966, 1970, 1971, 1973, 1976, 1981, 1982, 1988, 1989, 2004, 2008, 2018, 2028, 2029, 2031, 2033, 2034, 2046, 2047, 2050, 2053, 2065, 2066, 2070, 2081, 2082, 2083, 2084, 2085, 2087, 2088, 2089, 2090, 2091, 2111, 2114, 2116, 2146, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2165], "30": [398, 1011, 1012, 1378, 1682, 1777, 1780, 1992, 2035, 2039, 2059, 2162], "300": [18, 253, 1681, 1682, 1684, 1685, 1732, 1736, 1780, 1809, 1822, 1824, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1993, 1996, 2008, 2017, 2162], "3000": [1681, 1682, 1684, 1685, 1954, 1955, 1956, 1957, 1971, 1982, 1997, 2008, 2036, 2151], "300000": 2086, "30037": 1689, "3040": 1682, "307": [1732, 1736], "32": [247, 473, 1463, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1691, 1692, 1697, 1698, 1700, 1702, 2141, 2143, 2157, 2164, 2165], "32c": [1685, 1697], "32ded457c0b1": 1689, "33": 1689, "34432": [1682, 2151, 2163], "34452": 1682, "35": 2150, "357": 2162, "3787595bbbd3a374613713164db935e8331f5825": 1689, "39552": [1682, 2151, 2163], "39582": 1682, "39bcecf4559f": 1689, "3alpha": 1689, "3e5": 2086, "3nm": [1089, 1345, 1349, 1685, 1964, 2081, 2091], "4": [13, 33, 43, 45, 174, 365, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 458, 459, 480, 484, 518, 519, 520, 547, 593, 605, 609, 740, 841, 842, 848, 849, 892, 1056, 1188, 1205, 1252, 1294, 1306, 1345, 1349, 1372, 1670, 1672, 1673, 1678, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1697, 1700, 1702, 1703, 1753, 1760, 1766, 1771, 1777, 1781, 1783, 1784, 1785, 1786, 1787, 1801, 1803, 1804, 1805, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825, 1826, 1835, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1859, 1862, 1957, 1964, 1989, 1992, 2029, 2032, 2033, 2035, 2046, 2050, 2053, 2066, 2070, 2086, 2111, 2114, 2142, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "40": [1681, 1682, 1780, 1992, 2035, 2059, 2162], "400": [398, 1685], "40000": 1682, "4000000": 263, "40nm": 1682, "41408": [2151, 2163], "42": [1680, 1684, 1685, 1689, 1789, 1953, 1967, 1999, 2019, 2030, 2041, 2055, 2069, 2070, 2151, 2161], "422": 1678, "4294967295": 1697, "43": 2070, "44": 2070, "4443": 1691, "45": 2070, "4611686018427387903": [1702, 1771, 1772, 2139], "4611686018427387904": [1765, 1766], "486000": 2164, "4_4_40": 1682, "4e": 1349, "4nm": [1252, 1349, 1682, 1964, 2086, 2164], "5": [13, 33, 43, 45, 253, 282, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 458, 485, 518, 519, 520, 547, 569, 605, 740, 841, 842, 848, 849, 923, 1055, 1181, 1240, 1306, 1349, 1372, 1670, 1681, 1683, 1684, 1685, 1688, 1689, 1703, 1732, 1736, 1753, 1754, 1755, 1756, 1757, 1758, 1760, 1762, 1763, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1775, 1777, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825, 1826, 1828, 1829, 1830, 1835, 1836, 1838, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1859, 1863, 1864, 1865, 1926, 1927, 1928, 1946, 1948, 1949, 1954, 1955, 1956, 1957, 1960, 1971, 1977, 1978, 1979, 1982, 1986, 1987, 1988, 1989, 2004, 2011, 2012, 2013, 2014, 2015, 2018, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2037, 2038, 2046, 2047, 2048, 2050, 2051, 2055, 2058, 2059, 2061, 2062, 2063, 2065, 2066, 2069, 2070, 2082, 2083, 2084, 2085, 2088, 2090, 2111, 2114, 2146, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "50": [266, 1685, 1780, 1992, 2035, 2039, 2161, 2162], "500": [398, 569, 1681, 1682, 1684, 1685], "50000": 1682, "5000000": [263, 315, 1748, 1750, 1751], "50nm": 1685, "512": [1682, 1685], "51508": 1682, "51548": 1682, "5813054053": 2163, "5e": 2164, "5nm": [1349, 2038, 2087, 2089, 2090], "6": [13, 33, 43, 45, 282, 429, 430, 432, 433, 435, 441, 443, 444, 446, 458, 518, 519, 605, 841, 842, 848, 849, 1306, 1670, 1672, 1673, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1703, 1732, 1736, 1754, 1760, 1777, 1781, 1782, 1783, 1784, 1785, 1787, 1801, 1802, 1803, 1804, 1805, 1807, 1811, 1812, 1813, 1814, 1817, 1818, 1835, 1837, 1840, 1844, 1845, 1846, 1856, 1867, 1954, 1955, 1956, 1986, 1987, 1988, 2019, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2046, 2048, 2050, 2053, 2066, 2069, 2070, 2114, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "60": [1690, 1826, 1986, 1987, 2026, 2027, 2030, 2031, 2035, 2065, 2164], "6000000": 263, "62": [1688, 1702, 1752, 2139], "63": 1689, "632": 1682, "64": [247, 266, 1681, 1682, 1684, 1685, 1688, 1696, 1697, 1702, 2151, 2158, 2163, 2165], "65535": 1697, "6901": 1680, "7": [13, 33, 429, 430, 431, 433, 435, 441, 445, 480, 485, 519, 547, 605, 609, 740, 848, 849, 852, 1306, 1688, 1689, 1703, 1732, 1736, 1775, 1777, 1783, 1801, 1802, 1805, 1808, 1815, 1817, 1835, 1837, 1839, 1840, 1841, 1847, 1856, 1862, 1867, 1927, 1928, 1971, 1982, 2004, 2018, 2047, 2053, 2065, 2087, 2114, 2152, 2154, 2162, 2165], "70": [1788, 1986, 1987, 1988, 1989, 2004, 2018, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2039, 2040, 2047, 2048, 2051, 2058, 2065, 2066, 2069], "7000000": 263, "707": 2151, "7230": 1692, "75": [1675, 1682], "754": [8, 1424, 1425, 1426, 1685, 1702, 2131, 2132, 2133, 2165], "77": [1691, 1692], "78": 2150, "79": [1681, 1682, 1684], "7nm": 2088, "8": [0, 8, 13, 33, 143, 150, 165, 168, 247, 365, 425, 428, 430, 432, 433, 435, 441, 443, 444, 445, 519, 525, 605, 609, 740, 848, 849, 892, 1056, 1125, 1127, 1306, 1366, 1368, 1369, 1421, 1443, 1673, 1682, 1683, 1684, 1685, 1688, 1689, 1696, 1702, 1703, 1777, 1782, 1783, 1784, 1801, 1802, 1805, 1808, 1811, 1817, 1835, 1837, 1838, 1839, 1841, 1846, 1856, 1862, 1867, 1954, 1971, 1982, 1986, 2004, 2018, 2019, 2026, 2030, 2032, 2038, 2047, 2048, 2051, 2065, 2066, 2069, 2114, 2134, 2135, 2136, 2137, 2138, 2142, 2144, 2151, 2152, 2154, 2159, 2162, 2163, 2165], "80": [266, 1682, 1788, 1986, 1987, 1988, 1989, 2004, 2018, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2039, 2040, 2047, 2048, 2051, 2058, 2065, 2066, 2069, 2163], "8000": 1692, "8080": 1692, "82": 2163, "83": 2163, "8388608": 2150, "83951616": 1697, "8_8_8": 1682, "8nm": 2038, "9": [282, 429, 430, 432, 433, 435, 441, 443, 445, 446, 451, 518, 519, 520, 605, 1306, 1672, 1681, 1682, 1684, 1685, 1688, 1689, 1703, 1755, 1777, 1801, 1805, 1817, 1835, 1928, 1954, 1955, 1986, 1987, 2026, 2027, 2030, 2031, 2032, 2053, 2114, 2151, 2162, 2163, 2164], "90": 2164, "9223372036854775807": 1775, "9223372036854775808": 2164, "95": 1678, "99": 2163, "9m": 2164, "A": [0, 3, 7, 8, 16, 18, 38, 39, 74, 75, 80, 98, 108, 165, 253, 260, 266, 359, 363, 365, 416, 427, 453, 459, 460, 461, 484, 490, 526, 527, 540, 545, 570, 585, 675, 676, 678, 697, 740, 762, 767, 778, 800, 836, 837, 838, 839, 843, 847, 854, 855, 856, 857, 858, 882, 886, 964, 966, 967, 991, 994, 1011, 1012, 1055, 1103, 1114, 1181, 1188, 1202, 1205, 1225, 1228, 1236, 1240, 1297, 1306, 1316, 1321, 1329, 1337, 1338, 1345, 1372, 1373, 1374, 1469, 1506, 1512, 1516, 1559, 1563, 1565, 1681, 1682, 1684, 1685, 1690, 1697, 1777, 1786, 1908, 1912, 1946, 1958, 1964, 1981, 2017, 2038, 2051, 2053, 2080, 2114, 2115, 2129, 2151, 2152, 2154, 2161, 2162, 2164], "And": [586, 587, 661, 662, 995, 997], "As": [425, 451, 484, 811, 1063, 1363, 1373, 1374, 1681, 1684, 1685, 1688, 1777, 1803, 1872, 1875, 2108, 2162], "At": [13, 253, 605, 1688, 1806, 1839, 2162], "BUT": [490, 765], "Be": 1780, "By": [12, 13, 33, 1262, 1683, 1684, 1688, 1689, 1690, 1869, 1910, 2017, 2058, 2114, 2151, 2152, 2154, 2161], "For": [3, 7, 13, 16, 79, 80, 131, 218, 219, 249, 251, 253, 263, 270, 315, 318, 354, 365, 417, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 459, 467, 478, 484, 489, 511, 526, 563, 575, 692, 735, 740, 798, 799, 801, 820, 821, 877, 878, 891, 1089, 1114, 1181, 1188, 1219, 1229, 1233, 1240, 1280, 1345, 1349, 1372, 1379, 1565, 1672, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1689, 1691, 1692, 1697, 1698, 1700, 1732, 1736, 1780, 1782, 1802, 1832, 1888, 1905, 2020, 2022, 2023, 2025, 2069, 2097, 2161, 2164], "If": [0, 5, 8, 9, 13, 17, 18, 19, 20, 64, 90, 95, 97, 98, 143, 174, 197, 198, 211, 213, 227, 247, 248, 253, 260, 315, 325, 326, 349, 351, 354, 370, 371, 372, 376, 390, 398, 425, 430, 432, 435, 437, 438, 443, 454, 455, 456, 460, 461, 490, 518, 519, 520, 527, 532, 542, 561, 562, 569, 575, 596, 597, 605, 615, 648, 661, 668, 670, 672, 693, 694, 695, 735, 736, 758, 778, 798, 799, 836, 838, 846, 847, 857, 858, 860, 861, 876, 877, 881, 892, 903, 951, 965, 966, 967, 986, 990, 991, 994, 995, 996, 1007, 1011, 1012, 1043, 1048, 1060, 1101, 1104, 1106, 1109, 1110, 1113, 1118, 1153, 1154, 1156, 1157, 1158, 1159, 1168, 1169, 1171, 1172, 1181, 1185, 1186, 1205, 1250, 1255, 1256, 1262, 1279, 1280, 1282, 1288, 1294, 1296, 1297, 1304, 1306, 1311, 1343, 1344, 1357, 1358, 1378, 1417, 1469, 1475, 1476, 1504, 1536, 1538, 1653, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1705, 1722, 1727, 1728, 1732, 1734, 1736, 1760, 1765, 1766, 1771, 1772, 1775, 1778, 1779, 1780, 1782, 1783, 1784, 1785, 1786, 1788, 1789, 1790, 1791, 1794, 1797, 1801, 1804, 1806, 1817, 1819, 1821, 1830, 1831, 1835, 1839, 1840, 1853, 1854, 1865, 1866, 1892, 1900, 1901, 1903, 1907, 1908, 1909, 1912, 1917, 1954, 1955, 1956, 1957, 1958, 1968, 1969, 1971, 1979, 1980, 1981, 1982, 1986, 1987, 1988, 1989, 2001, 2002, 2004, 2005, 2015, 2016, 2017, 2018, 2020, 2023, 2043, 2044, 2051, 2053, 2054, 2058, 2059, 2063, 2064, 2069, 2070, 2086, 2095, 2096, 2107, 2114, 2150, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "In": [7, 12, 13, 19, 73, 247, 328, 354, 416, 430, 432, 435, 443, 526, 542, 563, 575, 604, 605, 680, 735, 860, 877, 1080, 1107, 1183, 1205, 1258, 1280, 1294, 1311, 1331, 1343, 1379, 1492, 1672, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1693, 1695, 1697, 1755, 1817, 1872, 1876, 2029, 2070, 2080, 2097, 2162, 2163, 2164], "It": [13, 227, 260, 266, 365, 458, 459, 490, 605, 761, 836, 876, 1664, 1670, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1695, 1696, 1697, 1699, 1700, 1701, 1777, 1801, 1835, 2017, 2080, 2151, 2162, 2164], "NOT": [490, 542, 765, 1294], "No": [563, 952, 975, 1042, 1681, 1684, 1685], "Not": [1689, 1701], "ON": 1689, "OR": [1121, 1140], "ORed": 891, "ORing": [891, 1262], "On": [16, 247, 526, 1684, 1686, 1689, 1691, 1698, 1801, 1835], "One": [0, 1672, 1679, 1681, 1684, 1685, 1697, 2165], "Such": 1689, "That": 1697, "The": [0, 7, 8, 11, 13, 16, 17, 18, 19, 20, 33, 34, 35, 39, 43, 45, 79, 98, 108, 133, 143, 165, 174, 180, 196, 201, 218, 227, 234, 247, 248, 249, 253, 259, 260, 262, 265, 266, 348, 350, 351, 352, 354, 365, 367, 369, 370, 373, 390, 393, 398, 415, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 478, 481, 482, 494, 512, 518, 519, 520, 526, 527, 528, 535, 537, 539, 542, 545, 547, 548, 563, 564, 569, 570, 574, 575, 576, 578, 579, 580, 581, 582, 587, 605, 626, 647, 650, 662, 693, 694, 695, 697, 734, 735, 736, 740, 798, 799, 811, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 875, 876, 877, 878, 884, 885, 886, 887, 888, 891, 892, 918, 930, 937, 945, 951, 965, 966, 967, 970, 971, 975, 979, 980, 981, 983, 984, 985, 986, 990, 991, 994, 1011, 1012, 1049, 1053, 1055, 1059, 1063, 1088, 1104, 1105, 1106, 1108, 1109, 1113, 1114, 1118, 1120, 1152, 1155, 1156, 1184, 1187, 1188, 1203, 1204, 1205, 1210, 1214, 1232, 1236, 1238, 1240, 1252, 1262, 1282, 1296, 1304, 1305, 1306, 1314, 1319, 1337, 1338, 1343, 1349, 1357, 1358, 1359, 1360, 1373, 1374, 1378, 1379, 1445, 1459, 1495, 1499, 1506, 1507, 1509, 1510, 1519, 1530, 1556, 1558, 1565, 1566, 1569, 1664, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1703, 1722, 1732, 1734, 1736, 1746, 1752, 1768, 1773, 1778, 1779, 1780, 1782, 1783, 1784, 1785, 1788, 1794, 1797, 1798, 1799, 1801, 1812, 1817, 1818, 1828, 1829, 1830, 1832, 1835, 1838, 1840, 1863, 1864, 1865, 1869, 1883, 1884, 1892, 1899, 1900, 1901, 1903, 1907, 1908, 1912, 1913, 1916, 1917, 1953, 1954, 1958, 1964, 1977, 1978, 1979, 1981, 1983, 1985, 1986, 2012, 2013, 2014, 2015, 2017, 2026, 2038, 2039, 2041, 2058, 2059, 2061, 2062, 2063, 2067, 2069, 2070, 2079, 2080, 2097, 2114, 2150, 2151, 2152, 2154, 2155, 2160, 2161, 2162, 2164, 2165], "Then": [1080, 1349], "There": [253, 428, 442, 833, 1063, 1372, 1484, 1535, 1699, 2020, 2145, 2155, 2160, 2163, 2165], "These": [174, 365, 425, 1690, 2020], "To": [79, 80, 315, 416, 758, 1184, 1205, 1279, 1282, 1287, 1495, 1672, 1679, 1681, 1682, 1684, 1685, 1687, 1689, 1691, 1697, 1698, 1747, 1788, 1883, 1899, 1910, 2005, 2017, 2028, 2058, 2114, 2151, 2152, 2154, 2161, 2162], "With": [1679, 1680, 1681, 1682, 1684, 1685, 2017, 2020, 2058, 2151], "_": [3, 7, 1682], "__add__": [1869, 1882, 1883, 1899], "__array__": [2019, 2025, 2051], "__call__": [1832, 1834, 2119, 2120], "__contains__": [1752, 1753, 1754], "__delitem__": [1869, 1900, 1901, 1903, 1912, 1917], "__eq__": [1706, 1707, 1708, 1721, 1752, 1755, 1870, 1871, 1882, 1884, 1894, 1895, 1951, 1953, 1983, 1985, 2080, 2081], "__getitem__": [1740, 1746, 1776, 1777, 1781, 1787, 1799, 1801, 1802, 1803, 1804, 1805, 1832, 1835, 1836, 1837, 1838, 1856, 1867, 1869, 1900, 1901, 1903, 1912, 1935, 1936, 1951, 1954, 1955, 1956, 1957, 1971, 1982, 1983, 1986, 1987, 1988, 1989, 2004, 2018, 2019, 2026, 2027, 2028, 2029, 2031, 2047, 2065, 2115], "__index__": 2162, "__iter__": [1752, 1760], "__len__": [1752, 1761, 1799, 1809, 1935, 1937], "__lock": 1690, "__mul__": [2080, 2087], "__repr__": [1752, 1762, 1799, 1810, 1832, 1842, 1869, 1882, 1886, 1902, 1951, 1960, 1983, 1991], "__setitem__": [1869, 1900, 1901, 1903, 1912, 1917, 2019, 2030, 2031, 2032, 2033, 2048, 2066], "__str__": [1752, 1763], "__truediv__": [1869, 1882, 1883, 1887, 1899, 1904, 2080, 2088], "_arrai": 1688, "_bit": 1696, "_compiler_launch": 1689, "_dimens": 1688, "_origin": 1688, "_rank": 1688, "_shape": 1688, "a1": [13, 1688], "a2": [13, 1688], "a_domain": [661, 990, 992], "a_implicit_lower_bound": [661, 990], "a_implicit_upper_bound": [661, 990], "a_origin": 174, "a_shap": 174, "a_to_b": [349, 350, 661, 990, 991, 992, 993], "aa": 1907, "ab": [110, 1402, 1403], "abc": [1690, 1883, 1887, 1889, 1891, 1892, 1899, 1904, 1906, 1910, 1913, 2000, 2035, 2042], "abl": 1908, "abort": [1278, 1279, 1282, 1285, 1287, 1288, 1507, 1509, 1510, 1517, 1522, 1556, 1558, 1565, 1566, 1569, 1702, 1912, 2070, 2072, 2073, 2075, 2077, 2078, 2079], "about": [1188, 1202, 2020], "abov": [546, 549, 586, 606, 627, 768, 845, 915, 991, 1063, 1363, 1459, 1688, 1689, 1765, 1771, 1775, 1777, 2162], "abseil": [416, 417, 1345, 1346], "absl": [3, 4, 6, 7, 8, 12, 21, 27, 28, 32, 39, 98, 218, 219, 248, 249, 252, 253, 269, 270, 271, 274, 276, 277, 280, 281, 310, 311, 312, 313, 314, 315, 316, 317, 340, 343, 348, 350, 351, 354, 371, 372, 400, 415, 427, 430, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 447, 451, 452, 453, 459, 473, 477, 478, 482, 484, 512, 516, 518, 519, 520, 524, 526, 531, 545, 547, 548, 563, 565, 566, 567, 568, 575, 587, 605, 627, 628, 630, 633, 661, 662, 666, 735, 740, 799, 845, 851, 855, 857, 859, 861, 875, 876, 877, 878, 884, 885, 886, 887, 888, 889, 909, 915, 986, 990, 991, 992, 994, 1040, 1045, 1048, 1051, 1063, 1067, 1069, 1072, 1073, 1078, 1085, 1089, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1118, 1120, 1154, 1155, 1157, 1159, 1181, 1205, 1268, 1270, 1275, 1278, 1279, 1281, 1288, 1304, 1306, 1342, 1365, 1370, 1371, 1372, 1379, 1384, 1388, 1465, 1467, 1474, 1475, 1476, 1482, 1495, 1500, 1502, 1512, 1516, 1517, 1518, 1521, 1529, 1532, 1533, 1536, 1538, 1559, 1563, 1564], "abslhashvalu": [416, 417], "abslstringifi": [1345, 1346], "absolut": [19, 20, 110, 1304, 1305, 1402, 1403, 1663, 1692], "abstract": [1687, 1702, 1798, 1832, 1868], "abstracteventloop": [1789, 2161], "ac": [348, 1306], "accept": [879, 1089], "access": [227, 235, 253, 257, 290, 365, 892, 975, 1205, 1240, 1250, 1379, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1688, 1690, 1691, 1692, 1693, 1697, 1698, 1727, 1728, 1918, 1919, 1921, 1961, 2017, 2058, 2097, 2114, 2151, 2152, 2154, 2162, 2163], "accessor": [259, 262, 265, 970, 1063, 1086, 1089, 2005], "accommod": 1445, "accomplish": 2069, "accord": [8, 13, 351, 605, 811, 1104, 1416, 1474, 1476, 1533, 1538, 1681, 1682, 1684, 1685, 1688, 1689, 1697, 1801, 1835, 1869, 1870, 1872, 1876], "account": [1691, 1698, 1732, 1736, 1755, 2164], "achiev": [1681, 1684, 1685, 1690], "acid": 1687, "acknowledg": 2069, "aco": [110, 1404], "acosh": [110, 1405], "acquir": 1690, "acquire_timeout": 1690, "across": 1188, "action": 526, "activ": [1686, 1689], "actual": [39, 259, 260, 262, 265, 365, 367, 427, 490, 526, 527, 563, 965, 981, 991, 1053, 1106, 1113, 1154, 1279, 1282, 1565, 1685, 1689, 1697, 1698, 1817, 1869, 1900, 1903, 1907, 1908, 1917, 1958, 1981, 2017, 2020, 2028, 2069, 2151, 2162, 2164], "ad": [428, 431, 433, 435, 458, 459, 478, 484, 1060, 1469, 1689, 1691, 1698, 1778, 1779, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1867, 1982, 2018, 2065, 2066], "adapt": [1154, 1163, 1240, 1249, 1482, 1489, 1533, 1545, 1670, 1693, 1696, 1697, 1700, 1701, 1869, 1882, 1888, 1905, 1983, 1992, 2019, 2035], "add": [9, 10, 11, 143, 156, 227, 241, 427, 428, 431, 458, 459, 490, 526, 627, 811, 812, 995, 996, 1118, 1121, 1147, 1689, 1698, 1706, 1707, 1720, 1734, 1777, 1951, 1981, 1983, 2017, 2162], "add_const_t": [1065, 1076], "add_done_callback": [1788, 1790, 1795, 2097, 2098], "add_lvalue_reference_t": [526, 536, 538, 965, 975, 1029, 1036, 1065, 1076], "add_rvalue_reference_t": [1065, 1076], "addasync1": 526, "addasync2": 526, "addbyteoffset": [9, 10, 11, 490], "addit": [7, 110, 124, 125, 253, 312, 430, 526, 697, 699, 721, 722, 758, 1089, 1101, 1104, 1152, 1294, 1343, 1372, 1379, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1689, 1691, 1692, 1693, 1696, 1697, 1700, 1706, 1707, 1720, 1734, 1755, 1776, 1777, 1869, 1882, 1887, 1904, 1951, 1958, 1981, 1983, 2017, 2070, 2079, 2080, 2097, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "addition": [836, 838, 991, 1094, 1103, 1416, 1688, 1689, 1752, 1892, 1910, 1964, 2017, 2070, 2161, 2162], "additionalflag": [416, 758], "addnew": [427, 428], "addprefix": [811, 812], "address": [39, 61, 62, 1342, 1686, 1697, 1699], "addsync1": 526, "addsync2": 526, "adjust": [98, 991, 1780], "adjusted_interv": [518, 519], "adjusted_start": [518, 519, 520], "adjusted_stop": [518, 519], "advanc": [143, 1687, 1702, 1776, 2162], "advantag": [1687, 2069], "advis": 1682, "af": 1698, "affect": [318, 365, 427, 451, 545, 563, 693, 965, 972, 994, 1056, 1113, 1469, 1504, 1683, 1689, 1697, 1776, 1783, 1784, 1785, 1802, 1805, 1961, 2005, 2053, 2069, 2115, 2161, 2162, 2164], "affin": [545, 547, 548, 627], "after": [108, 398, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 540, 542, 605, 811, 823, 842, 843, 849, 854, 891, 1011, 1012, 1055, 1059, 1106, 1113, 1114, 1152, 1357, 1358, 1359, 1360, 1378, 1379, 1679, 1680, 1681, 1682, 1684, 1685, 1689, 1690, 1705, 1912, 1958, 1981, 2017, 2053, 2058, 2069, 2086, 2097, 2151, 2161, 2162, 2164], "ag": [1908, 1912], "again": [1188, 1343], "against": [991, 2164], "agnost": [526, 1470, 1505, 1533], "agreement": 1683, "algebra": [8, 800, 833, 1297], "alia": [39, 57, 58, 108, 131, 174, 259, 262, 265, 416, 473, 507, 523, 526, 778, 832, 962, 1063, 1089, 1091, 1092, 1099, 1113, 1114, 1185, 1186, 1205, 1239, 1240, 1267, 1306, 1314, 1337, 1338, 1339, 1340, 1341, 1362, 1416, 1482, 1578, 1702, 1706, 1707, 1715, 1729, 1799, 1816, 1822, 1832, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1852, 1855, 1950, 1951, 1970, 1983, 2003, 2019, 2046, 2146], "alias": [39, 253, 257, 490, 1357, 1358, 1360], "align": [12, 13, 14, 16, 227, 231, 234, 253, 318, 398, 401, 402, 416, 419, 426, 480, 1012, 1017, 1018, 1378, 1390, 1391, 1582, 1589, 1598, 1689, 1801, 1835, 1954, 1986, 2026, 2030, 2066, 2069, 2164], "align_val_t": 426, "aligndimensionsto": [8, 12], "aligndomainto": [8, 12, 13, 14, 398, 605, 1012, 1378], "alignment_opt": [401, 402, 1017, 1018, 1390, 1391], "alignof": [227, 231, 1205], "aligntransformto": [8, 14], "all": [8, 12, 13, 14, 15, 39, 90, 97, 101, 109, 131, 165, 170, 174, 196, 202, 227, 247, 253, 258, 260, 269, 354, 390, 391, 401, 402, 427, 430, 432, 433, 434, 443, 444, 445, 447, 451, 452, 458, 480, 481, 482, 526, 542, 547, 563, 575, 586, 609, 627, 629, 661, 692, 735, 740, 766, 767, 798, 799, 801, 804, 811, 816, 818, 826, 836, 837, 856, 858, 877, 964, 990, 991, 992, 993, 994, 995, 998, 1011, 1017, 1018, 1094, 1121, 1127, 1130, 1131, 1134, 1137, 1152, 1153, 1154, 1164, 1175, 1193, 1203, 1205, 1279, 1280, 1370, 1373, 1374, 1390, 1391, 1469, 1482, 1495, 1672, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1692, 1693, 1695, 1697, 1698, 1701, 1702, 1703, 1722, 1732, 1734, 1736, 1777, 1782, 1783, 1784, 1785, 1786, 1806, 1828, 1829, 1830, 1832, 1839, 1863, 1864, 1865, 1908, 1909, 1913, 1958, 1977, 1978, 1979, 1981, 2013, 2014, 2015, 2017, 2020, 2022, 2023, 2029, 2051, 2054, 2058, 2059, 2061, 2062, 2063, 2069, 2070, 2114, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "all_driv": 1689, "all_proxi": 1686, "alldim": [15, 398, 427, 428, 860, 1011, 1012, 1378], "alloc": [8, 16, 17, 18, 19, 20, 39, 174, 426, 489, 697, 844, 845, 846, 850, 860, 882, 983, 1011, 1013, 1015, 1113, 1205, 1240, 1296, 1297, 1299, 1311], "allocate_constraint": [1297, 1298, 1299, 1311], "allocateandconsruct": [416, 426], "allocateandconstruct": [16, 17, 416], "allocateandconstructshar": [17, 416], "allocatearrai": [18, 39, 1012, 1306], "allocatearrayelementslik": [19, 39], "allocatearraylik": [19, 20, 39], "allow": [0, 4, 34, 35, 247, 249, 340, 416, 526, 681, 758, 1063, 1155, 1205, 1241, 1284, 1306, 1684, 1686, 1688, 1689, 1690, 1691, 1692, 1697, 1698, 1777, 1918, 1919, 1922, 1924, 2017, 2032, 2033, 2058, 2069, 2070, 2114, 2151, 2152, 2154, 2164], "allus": 1691, "almost": 1113, "along": [427, 1089, 1103, 1114, 1476, 1538, 1682, 1683, 1689, 1698, 1702, 1958, 1964, 1981, 2017, 2038, 2114, 2151, 2152, 2154, 2161, 2164], "alreadi": [21, 23, 253, 393, 397, 435, 526, 542, 856, 859, 892, 965, 966, 971, 1106, 1109, 1154, 1157, 1162, 1242, 1278, 1279, 1282, 1343, 1357, 1358, 1474, 1475, 1478, 1482, 1485, 1504, 1533, 1536, 1544, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1697, 1705, 1791, 1892, 1910, 1958, 1981, 2017, 2070, 2072, 2075, 2076, 2114, 2151, 2152, 2154, 2161], "also": [13, 18, 75, 80, 110, 247, 253, 359, 363, 365, 430, 432, 434, 436, 441, 443, 444, 445, 447, 451, 478, 526, 546, 549, 627, 681, 892, 915, 990, 991, 995, 1002, 1056, 1094, 1113, 1118, 1379, 1512, 1559, 1664, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684, 1687, 1688, 1689, 1690, 1698, 1722, 1734, 1755, 1776, 1782, 1783, 1784, 1785, 1869, 1910, 1958, 1981, 2017, 2053, 2058, 2069, 2070, 2108, 2151, 2161, 2162, 2163, 2164, 2165], "alter": 1685, "altern": [526, 1686, 2069, 2162], "alwai": [8, 34, 35, 39, 99, 247, 258, 266, 340, 353, 433, 458, 485, 736, 844, 882, 1040, 1043, 1051, 1063, 1073, 1104, 1105, 1108, 1188, 1236, 1297, 1306, 1342, 1419, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1777, 1782, 1950, 2017, 2030, 2031, 2032, 2033, 2048, 2058, 2066, 2071, 2107, 2151, 2162, 2164], "amazon": [1693, 1698], "ambigu": 484, "among": [365, 837, 839, 1373, 1374, 1672, 1683], "amount": [1118, 1776, 1782, 1909, 2115, 2162], "amplif": [1696, 1700, 2164], "an": [0, 1, 3, 4, 6, 7, 8, 9, 12, 13, 16, 19, 20, 21, 22, 33, 34, 35, 37, 39, 42, 43, 44, 45, 57, 58, 60, 64, 78, 90, 98, 99, 108, 131, 134, 135, 143, 146, 155, 156, 165, 174, 177, 178, 179, 180, 188, 189, 193, 196, 197, 198, 199, 200, 201, 202, 206, 213, 220, 225, 227, 229, 247, 250, 251, 253, 259, 260, 262, 263, 265, 266, 270, 283, 285, 286, 290, 294, 300, 301, 305, 318, 329, 348, 355, 365, 371, 375, 383, 384, 390, 392, 398, 406, 410, 415, 416, 418, 427, 430, 431, 432, 433, 434, 435, 436, 441, 443, 445, 447, 451, 457, 465, 466, 467, 472, 477, 478, 483, 486, 487, 489, 490, 494, 507, 511, 512, 526, 529, 531, 532, 540, 563, 564, 574, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 590, 591, 592, 596, 597, 599, 605, 606, 609, 615, 617, 618, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 647, 649, 650, 657, 661, 662, 666, 668, 670, 671, 672, 681, 685, 691, 692, 697, 734, 736, 739, 740, 742, 743, 745, 746, 759, 761, 762, 763, 764, 765, 770, 773, 775, 776, 783, 787, 788, 792, 795, 798, 799, 811, 814, 825, 831, 833, 842, 845, 846, 849, 858, 859, 862, 876, 879, 890, 892, 894, 897, 901, 904, 909, 913, 915, 916, 917, 918, 923, 924, 925, 930, 932, 933, 942, 943, 944, 945, 951, 952, 960, 963, 964, 965, 966, 969, 972, 986, 990, 991, 995, 999, 1005, 1011, 1012, 1017, 1021, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1040, 1044, 1056, 1060, 1063, 1065, 1066, 1067, 1076, 1077, 1087, 1089, 1098, 1100, 1103, 1104, 1106, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1121, 1125, 1128, 1131, 1144, 1145, 1150, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1178, 1180, 1181, 1183, 1188, 1194, 1196, 1201, 1202, 1203, 1205, 1214, 1224, 1235, 1236, 1237, 1240, 1241, 1242, 1247, 1248, 1249, 1257, 1262, 1268, 1269, 1274, 1278, 1279, 1281, 1282, 1288, 1293, 1294, 1296, 1304, 1306, 1314, 1318, 1319, 1320, 1321, 1322, 1338, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1355, 1357, 1358, 1366, 1368, 1370, 1375, 1378, 1379, 1384, 1394, 1398, 1417, 1445, 1458, 1459, 1460, 1468, 1469, 1471, 1475, 1476, 1482, 1485, 1486, 1489, 1504, 1506, 1517, 1519, 1527, 1528, 1533, 1536, 1538, 1539, 1545, 1551, 1555, 1565, 1569, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1622, 1643, 1645, 1649, 1653, 1664, 1665, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1694, 1697, 1698, 1699, 1700, 1702, 1703, 1705, 1732, 1736, 1752, 1759, 1774, 1776, 1777, 1778, 1780, 1782, 1783, 1784, 1788, 1789, 1791, 1798, 1799, 1801, 1802, 1805, 1806, 1807, 1808, 1817, 1821, 1828, 1829, 1832, 1834, 1835, 1839, 1840, 1841, 1854, 1863, 1864, 1869, 1872, 1875, 1876, 1882, 1887, 1897, 1900, 1901, 1903, 1904, 1909, 1910, 1912, 1917, 1918, 1919, 1924, 1925, 1927, 1935, 1939, 1946, 1951, 1954, 1957, 1958, 1964, 1969, 1977, 1978, 1981, 1983, 1986, 1989, 1992, 2002, 2013, 2014, 2017, 2019, 2020, 2025, 2026, 2029, 2030, 2032, 2033, 2035, 2044, 2048, 2058, 2061, 2062, 2066, 2069, 2070, 2077, 2080, 2097, 2107, 2108, 2114, 2115, 2119, 2121, 2139, 2145, 2150, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "analog": 1687, "ancestor": 1680, "ani": [0, 7, 13, 21, 23, 37, 43, 45, 110, 111, 115, 253, 263, 269, 270, 299, 365, 388, 390, 398, 416, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 455, 456, 512, 513, 526, 569, 605, 650, 693, 695, 697, 699, 700, 703, 740, 762, 795, 798, 799, 801, 803, 811, 858, 891, 892, 960, 964, 975, 990, 991, 994, 995, 996, 1002, 1011, 1012, 1037, 1039, 1055, 1056, 1059, 1060, 1063, 1089, 1113, 1121, 1135, 1141, 1153, 1154, 1157, 1161, 1162, 1168, 1188, 1191, 1192, 1261, 1262, 1278, 1280, 1304, 1305, 1359, 1372, 1373, 1374, 1375, 1378, 1416, 1417, 1474, 1475, 1476, 1477, 1478, 1495, 1504, 1507, 1511, 1533, 1536, 1538, 1542, 1544, 1597, 1599, 1601, 1602, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1690, 1691, 1692, 1697, 1698, 1702, 1703, 1705, 1706, 1707, 1710, 1719, 1722, 1723, 1732, 1733, 1734, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1748, 1777, 1781, 1785, 1787, 1788, 1790, 1794, 1799, 1801, 1804, 1808, 1817, 1827, 1830, 1832, 1835, 1841, 1856, 1862, 1865, 1867, 1869, 1882, 1883, 1884, 1885, 1891, 1892, 1899, 1900, 1901, 1903, 1907, 1908, 1910, 1912, 1913, 1917, 1918, 1919, 1923, 1951, 1959, 1971, 1976, 1979, 1982, 1983, 1985, 1990, 1993, 1994, 1996, 1997, 1999, 2004, 2008, 2011, 2015, 2017, 2018, 2020, 2028, 2030, 2032, 2033, 2039, 2047, 2048, 2051, 2053, 2058, 2059, 2063, 2065, 2066, 2069, 2070, 2079, 2080, 2083, 2091, 2127, 2147, 2148, 2150, 2151, 2161, 2162, 2163, 2164, 2165], "annot": [3, 8, 857, 861], "anonym": 1698, "anoth": [0, 174, 176, 187, 196, 211, 271, 274, 278, 340, 343, 365, 393, 395, 415, 416, 425, 490, 494, 507, 510, 512, 526, 540, 542, 543, 586, 589, 594, 943, 958, 1306, 1317, 1329, 1330, 1752, 1753, 1755, 1768, 1773, 1799, 1801, 1812, 1818, 1832, 1835, 1838, 1870, 1871, 1882, 1884, 1951, 1953, 1983, 1985, 2161, 2162], "anyfutur": [8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 526, 565, 572, 1373, 1374], "anyinvoc": [512, 516], "api": [1670, 1686, 1687, 1691, 1698, 1908], "append": [8, 33, 39, 459, 484, 823, 884, 888, 1203, 1468, 1482, 1484, 1506, 1533, 1535, 1565, 1685, 1692, 1869, 1882, 1883, 1899, 1900, 1901, 1903, 1912, 1917], "appendpathcompon": [1482, 1483, 1533, 1534], "appendsuffix": [1482, 1484, 1533, 1535], "appendtostr": [33, 39, 1277], "appl": 1689, "appli": [0, 8, 13, 34, 35, 39, 73, 251, 253, 315, 318, 327, 328, 365, 427, 453, 455, 456, 457, 586, 587, 604, 605, 606, 661, 662, 680, 682, 736, 855, 857, 1063, 1080, 1107, 1154, 1155, 1156, 1158, 1159, 1176, 1194, 1240, 1241, 1258, 1261, 1296, 1306, 1322, 1331, 1343, 1417, 1492, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1690, 1692, 1697, 1699, 1722, 1734, 1776, 1777, 1781, 1787, 1799, 1802, 1832, 1836, 1837, 1856, 1867, 1956, 1971, 1982, 1988, 2004, 2017, 2018, 2027, 2039, 2047, 2048, 2058, 2115, 2151, 2162, 2164, 2165], "applic": [253, 283, 428, 486, 488, 891, 1049, 1051, 1053, 1056, 1154, 1171, 1172, 1262, 1689, 1691, 1697, 2005, 2037, 2041, 2053, 2161, 2164], "application_default_credenti": 1691, "applyindextransform": [34, 35, 39, 253, 254, 255, 427, 457, 586, 587, 606, 661, 662, 682, 1089, 1090, 1154, 1155, 1156, 1240, 1241, 1306], "applyinverseindextransform": [253, 256], "applytensorstoretransact": [1240, 1242, 1482, 1485], "appropri": [1683, 1691, 1698, 2161], "apt": 1689, "aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye": 1684, "ar": [0, 8, 12, 13, 16, 18, 19, 21, 36, 37, 39, 43, 45, 76, 100, 103, 131, 174, 178, 180, 218, 219, 244, 245, 246, 247, 253, 259, 262, 265, 269, 270, 299, 306, 315, 318, 340, 345, 348, 354, 365, 367, 371, 390, 391, 398, 399, 400, 406, 411, 416, 425, 427, 428, 430, 431, 432, 433, 434, 435, 438, 443, 452, 453, 459, 463, 478, 480, 484, 490, 511, 512, 513, 520, 526, 550, 563, 569, 572, 575, 576, 580, 581, 582, 584, 586, 605, 626, 627, 650, 661, 666, 672, 684, 735, 736, 739, 740, 743, 760, 764, 765, 786, 795, 800, 811, 833, 836, 837, 841, 842, 848, 849, 856, 869, 875, 876, 877, 878, 891, 909, 915, 918, 923, 952, 964, 971, 975, 978, 986, 990, 991, 992, 993, 994, 1011, 1012, 1028, 1037, 1039, 1051, 1055, 1056, 1059, 1060, 1063, 1082, 1083, 1089, 1094, 1101, 1103, 1104, 1121, 1134, 1152, 1153, 1154, 1173, 1181, 1184, 1187, 1188, 1200, 1203, 1205, 1210, 1214, 1232, 1278, 1279, 1280, 1282, 1292, 1294, 1304, 1305, 1343, 1344, 1372, 1375, 1378, 1416, 1417, 1465, 1466, 1469, 1472, 1473, 1476, 1482, 1493, 1495, 1500, 1501, 1504, 1507, 1509, 1511, 1533, 1538, 1548, 1551, 1552, 1565, 1597, 1598, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1696, 1697, 1698, 1699, 1701, 1702, 1703, 1709, 1720, 1722, 1732, 1734, 1736, 1745, 1755, 1777, 1778, 1781, 1786, 1787, 1799, 1801, 1802, 1805, 1835, 1856, 1867, 1868, 1869, 1884, 1908, 1909, 1910, 1912, 1958, 1964, 1971, 1981, 1982, 1985, 1991, 1993, 1994, 1996, 1997, 1999, 2004, 2008, 2017, 2018, 2020, 2023, 2032, 2047, 2048, 2053, 2058, 2059, 2065, 2066, 2069, 2070, 2080, 2108, 2127, 2151, 2155, 2160, 2161, 2162, 2164, 2165], "arang": [1703, 2053, 2162], "arbitrari": [8, 39, 99, 108, 365, 890, 1113, 1114, 1116, 1117, 1205, 1306, 1357, 1358, 1681, 1688, 1692, 1693, 1697, 1702, 2145, 2161, 2162], "arch": 1689, "archflag": 1689, "architectur": 1689, "archiv": [1689, 1693, 1701], "arearraysequ": [36, 39], "arearraysidenticallyequ": [36, 39], "arecompatibleorunbound": [37, 627], "areelementtypescompat": [38, 490], "arg": [8, 251, 852, 859, 1063, 1068, 1072, 1203, 1204, 2162], "arg0": [1935, 1936, 2119, 2120], "arg1": 1072, "arg2": 1072, "arg3": 1072, "argument": [3, 6, 7, 39, 109, 436, 486, 487, 488, 512, 513, 568, 850, 859, 967, 971, 986, 1063, 1068, 1072, 1181, 1203, 1375, 1664, 2153, 2162], "argv": [1702, 2153], "arithmet": [8, 1672], "ariti": 1697, "arm64": 1689, "around": [8, 1366, 1699], "arr": [1622, 1649, 1817], "arrai": [12, 16, 18, 19, 20, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 108, 109, 174, 178, 180, 191, 194, 196, 201, 214, 216, 218, 219, 352, 353, 392, 399, 400, 415, 416, 426, 427, 433, 435, 441, 489, 490, 511, 550, 553, 554, 557, 563, 569, 581, 585, 626, 661, 666, 672, 675, 676, 678, 692, 741, 742, 743, 744, 745, 749, 755, 763, 764, 765, 773, 789, 798, 799, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 882, 890, 943, 944, 945, 947, 948, 949, 950, 951, 953, 960, 990, 991, 1011, 1012, 1013, 1015, 1017, 1018, 1037, 1039, 1049, 1051, 1053, 1113, 1114, 1115, 1116, 1117, 1121, 1125, 1152, 1154, 1184, 1205, 1215, 1236, 1237, 1240, 1252, 1255, 1277, 1296, 1297, 1304, 1306, 1310, 1311, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1329, 1330, 1332, 1333, 1334, 1337, 1338, 1342, 1343, 1344, 1357, 1358, 1378, 1390, 1391, 1622, 1632, 1649, 1653, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1687, 1688, 1690, 1692, 1693, 1694, 1697, 1698, 1702, 1703, 1776, 1780, 1781, 1787, 1788, 1802, 1805, 1817, 1821, 1832, 1837, 1839, 1841, 1854, 1856, 1867, 1918, 1919, 1923, 1925, 1927, 1939, 1941, 1951, 1956, 1967, 1969, 1971, 1982, 1983, 1988, 1991, 1999, 2002, 2004, 2017, 2018, 2019, 2020, 2025, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2039, 2040, 2041, 2044, 2046, 2047, 2048, 2050, 2051, 2053, 2058, 2065, 2066, 2069, 2070, 2107, 2108, 2111, 2114, 2115, 2152, 2154, 2161, 2163, 2164, 2165], "arrang": [435, 2069], "array0": [39, 109], "array_dim": 441, "array_lik": 2162, "array_origin_kind": [39, 59, 79, 80, 98, 1205, 1209, 1211, 1212, 1213, 1215, 1218, 1223, 1229], "array_ref": [944, 945, 951], "array_storage_statist": [100, 101, 102, 103, 104, 105, 106, 107, 550], "array_test": [108, 1113, 1114], "array_view": [39, 60], "arrayformatopt": [33, 39, 90, 91, 92, 93, 94, 95, 96, 97, 1277], "arraylik": [789, 1306, 1702, 1777, 1925, 1927, 1929, 1951, 1958, 1967, 1981, 1983, 1999, 2017, 2019, 2025, 2030, 2031, 2032, 2033, 2041, 2048, 2051, 2066, 2069, 2107, 2151, 2161], "arrayorigincast": [39, 98], "arrayoriginkind": [19, 20, 36, 39, 40, 59, 76, 77, 98, 99, 108, 218, 348, 554, 556, 557, 558, 570, 694, 695, 744, 745, 749, 750, 755, 756, 844, 845, 846, 847, 860, 1011, 1113, 1114, 1205, 1209, 1215, 1217, 1218, 1223, 1226, 1235, 1236, 1296, 1311, 1342, 1343, 1344, 1358, 1580, 1603, 1669], "arrayshavesameshap": [39, 109, 399, 400, 798], "arraystoragestatist": [100, 101, 102, 103, 104, 105, 106, 107, 550, 569, 1240], "arrayview": [33, 39, 60, 79, 80, 108, 661, 692, 842, 849, 854, 890, 944, 945, 1113, 1114, 1181, 1277, 1306, 1322, 1370], "asbyterang": [894, 895], "ascend": [393, 1110, 1111], "ascii": [8, 1421, 2165], "asin": [110, 1406], "asinh": [110, 1407], "aspect": [253, 258, 259, 260, 263, 271, 272, 276, 283, 287, 290, 292, 296, 310, 315, 322, 333, 337, 1707, 1709, 1711, 1712, 1720, 1722, 1734, 2164], "aspect_ratio": [253, 260, 269, 271, 276, 283, 284, 287, 290, 296, 315, 1681, 1682, 1684, 1685, 1707, 1709, 1711, 1720, 1722, 1734, 2164], "aspect_ratio_soft_constraint": [1707, 1709, 1712, 1720, 1722, 1734, 2164], "aspectratio": [271, 272, 276, 290, 292, 296], "assert": [2, 6, 174, 1063, 1181, 1750, 1789, 1884, 1953, 1985, 2139], "assign": [2, 5, 39, 72, 113, 118, 120, 122, 125, 187, 196, 219, 271, 278, 490, 502, 526, 535, 540, 615, 622, 649, 656, 661, 679, 692, 693, 694, 695, 702, 705, 707, 709, 713, 715, 717, 719, 722, 728, 730, 965, 974, 1029, 1033, 1063, 1076, 1077, 1078, 1079, 1188, 1223, 1240, 1257, 1304, 1305, 1306, 1329, 1330, 1681, 1682, 1683, 1688, 2030, 2031, 2032, 2033, 2048, 2066, 2161, 2162, 2163], "associ": [8, 21, 23, 340, 427, 457, 540, 542, 586, 606, 789, 836, 838, 943, 944, 965, 966, 972, 978, 1029, 1035, 1154, 1171, 1188, 1240, 1242, 1256, 1265, 1268, 1275, 1306, 1485, 1507, 1509, 1510, 1517, 1530, 1556, 1558, 1566, 1569, 1698, 1702, 1703, 1752, 1789, 1877, 1879, 1881, 1901, 1912, 1917, 1983, 2000, 2017, 2019, 2042, 2060, 2075, 2130, 2151], "assum": [8, 43, 253, 661, 869, 892, 992, 993, 1051, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1697, 1950, 2017, 2058, 2151, 2164], "assume_cached_metadata": [892, 1679, 1681, 1682, 1684, 1685, 1918, 1919, 1920, 2017, 2058, 2151], "assume_config": 1697, "assume_metadata": [892, 1679, 1681, 1682, 1684, 1685, 1918, 1919, 1921, 2017, 2058], "asterisk": 923, "astyp": [2019, 2034], "async": [526, 1789, 2070, 2161, 2163], "asynchron": [131, 526, 1240, 1282, 1379, 1687, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1797, 1798, 1946, 2019, 2030, 2031, 2032, 2033, 2048, 2051, 2066, 2069, 2070, 2075, 2097, 2163], "asyncio": [1788, 1789, 1790, 1791, 2069, 2161, 2163], "atan": [110, 1408], "atanh": [110, 1409], "atom": [108, 253, 661, 951, 1278, 1280, 1286, 1294, 1359, 1469, 1565, 1680, 1687, 1690, 1695, 1697, 1698, 2070, 2071, 2074, 2161], "atomic_isol": 1294, "atopen": [1040, 1041, 1049, 1050, 1051, 1052], "attempt": [8, 13, 526, 542, 991, 1482, 1506, 1680, 1683, 1691, 1692, 1697, 1698, 1705, 2151, 2161, 2162], "attribut": [1680, 1681, 1685, 2020, 2021, 2162], "augment": [1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 2150, 2165], "auth": 1691, "auth_token_fil": 1698, "authent": [0, 365, 1686, 1699], "author": [1686, 1691, 1692, 1698], "auto": [15, 18, 34, 35, 39, 43, 45, 174, 188, 196, 212, 249, 251, 365, 371, 379, 416, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 478, 485, 526, 569, 578, 580, 586, 587, 606, 661, 662, 682, 801, 843, 852, 856, 857, 860, 891, 983, 984, 985, 1011, 1012, 1063, 1154, 1155, 1240, 1241, 1242, 1252, 1280, 1306, 1342, 1417, 1485, 1622, 1656], "automat": [253, 263, 526, 798, 799, 836, 837, 838, 839, 1373, 1374, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1689, 1690, 1691, 1697, 1698, 1795, 2019, 2025, 2070, 2151, 2164, 2165], "avail": [0, 1482, 1488, 1517, 1523, 1529, 1686, 1689, 1690, 1697, 1698, 1699, 2092, 2093, 2108], "averag": 1672, "avif": [1678, 1679, 2165], "avoid": [108, 237, 605, 850, 951, 1119, 1682, 1684, 1689, 1789, 1801, 1835, 2151, 2162], "aw": 1698, "awai": 1184, "await": [1703, 1780, 1788, 1789, 1869, 1899, 1902, 1904, 1905, 1906, 1907, 1908, 1910, 1911, 1912, 1913, 1915, 1916, 1917, 2019, 2025, 2026, 2027, 2028, 2029, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2051, 2053, 2054, 2055, 2058, 2059, 2065, 2069, 2070, 2111, 2114, 2151, 2152, 2154, 2161, 2162, 2163], "awar": [8, 1181, 1684, 2162], "aws_access_key_id": 1698, "aws_config_fil": 1698, "aws_credenti": 1698, "aws_ec2_metadata_service_endpoint": 1698, "aws_profil": 1698, "aws_region": 1698, "aws_secret_access_kei": 1698, "aws_session_token": 1698, "aws_shared_credentials_fil": 1698, "ax": [1681, 1799, 1831, 1832, 1866, 1951, 1980, 1983, 2012, 2016, 2019, 2026, 2027, 2064], "axi": [2114, 2154], "b": [21, 36, 37, 38, 39, 76, 77, 100, 105, 106, 110, 117, 118, 119, 120, 121, 122, 124, 125, 143, 153, 154, 165, 174, 220, 224, 227, 239, 249, 271, 279, 300, 304, 340, 342, 345, 350, 354, 365, 371, 381, 387, 406, 409, 416, 421, 425, 427, 428, 433, 435, 436, 441, 459, 462, 465, 471, 480, 490, 504, 526, 572, 573, 574, 575, 586, 607, 615, 623, 626, 627, 645, 649, 658, 661, 684, 699, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 786, 811, 813, 820, 821, 830, 858, 862, 866, 869, 873, 875, 877, 878, 892, 894, 912, 915, 922, 990, 991, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1007, 1021, 1023, 1028, 1056, 1060, 1063, 1082, 1083, 1092, 1093, 1121, 1138, 1139, 1140, 1143, 1154, 1173, 1181, 1188, 1200, 1205, 1226, 1268, 1273, 1278, 1292, 1294, 1297, 1301, 1345, 1353, 1366, 1367, 1394, 1397, 1451, 1452, 1482, 1493, 1517, 1526, 1533, 1548, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1659, 1680, 1689, 1702, 1755, 1786, 1801, 1835, 1838, 1869, 1874, 1878, 1884, 1889, 1897, 1900, 1901, 1903, 1906, 1907, 1908, 1909, 1910, 1912, 1916, 1917, 1953, 1963, 1985, 1995, 2147, 2150, 2151, 2162], "b1": 1684, "b_domain": [661, 990, 991, 992, 993], "b_implicit_lower_bound": [661, 990, 991, 992, 993], "b_implicit_upper_bound": [661, 990, 991, 992, 993], "b_to_c": [349, 350, 661], "b_view": 1181, "b_view_result": 1181, "back": [351, 365, 661, 915, 990, 1055, 1565, 1622, 1624, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1681, 1682, 1683, 1684, 1685, 1687, 1698, 2070, 2163], "backoff": [1691, 1692, 1698], "backward": [427, 445, 1679, 1680, 1681, 1682, 1684, 1685, 1776, 1783, 1799, 1828, 1832, 1863, 1951, 1977, 1983, 2013, 2019, 2061, 2115, 2162], "bad_alloc": 16, "bandwidth": 1687, "bar": 7, "bare": [8, 250, 568, 1063, 1181], "barrier": [1278, 1280], "base": [8, 39, 45, 61, 62, 110, 143, 144, 147, 151, 153, 154, 174, 180, 196, 201, 253, 259, 262, 265, 282, 283, 480, 481, 482, 490, 563, 672, 743, 744, 862, 869, 892, 915, 921, 991, 1055, 1154, 1163, 1168, 1188, 1202, 1240, 1249, 1261, 1306, 1322, 1326, 1345, 1347, 1348, 1349, 1350, 1422, 1423, 1482, 1489, 1504, 1533, 1545, 1572, 1573, 1574, 1575, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1694, 1696, 1697, 1700, 1701, 1702, 1798, 1868, 1869, 1882, 1884, 1886, 1888, 1890, 1902, 1905, 1908, 1911, 1951, 1953, 1960, 1983, 1985, 1991, 1992, 2017, 2019, 2034, 2035, 2058, 2080, 2082, 2085, 2089, 2110, 2111, 2112, 2113, 2117, 2118, 2150, 2151, 2162, 2164, 2165], "base_arrai": [1306, 1322], "base_path": 1697, "base_path_length": 1697, "base_spec": [8, 248, 481, 1154], "base_unit": [1345, 1348, 1349, 1350, 1351, 2080, 2082, 2084, 2086, 2089, 2090, 2164], "base_url": 1692, "basi": 1689, "basic": 2162, "batch": [8, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 398, 401, 403, 526, 550, 891, 1012, 1013, 1014, 1017, 1019, 1059, 1061, 1062, 1154, 1295, 1378, 1512, 1513, 1559, 1560, 1578, 1690, 1697, 1702, 1703, 1704, 1705, 1912, 2051, 2054, 2069, 2151], "bazel_cach": 1689, "bazel_featur": 1689, "bazel_features_dep": 1689, "bazel_tool": 1689, "bazelisk": 1689, "bazelisk_hom": 1689, "bazelrc": 1689, "bb": 820, "bc": 820, "bear": 1682, "bearer": 1692, "becaus": [108, 428, 454, 459, 1063, 1114, 1359, 1517, 1522, 1680, 1682, 1689, 1780, 1788, 2069, 2161, 2162], "becom": [8, 21, 25, 398, 526, 527, 836, 838, 839, 842, 843, 849, 854, 856, 857, 858, 965, 967, 983, 1011, 1012, 1055, 1063, 1109, 1278, 1279, 1282, 1285, 1287, 1288, 1357, 1358, 1359, 1360, 1378, 1379, 1385, 1386, 1469, 1565, 1683, 1790, 1794, 1797, 1907, 1908, 1912, 2051, 2054, 2069, 2078, 2151], "been": [21, 23, 131, 134, 137, 139, 406, 407, 408, 427, 428, 540, 542, 672, 892, 965, 966, 970, 971, 972, 978, 1021, 1022, 1040, 1042, 1047, 1056, 1060, 1104, 1106, 1261, 1278, 1285, 1379, 1385, 1394, 1395, 1396, 1599, 1601, 1602, 1684, 1688, 1705, 1788, 1792, 1793, 1958, 1981, 2000, 2017, 2020, 2039, 2069, 2070, 2072, 2073, 2075, 2078, 2079, 2114, 2151, 2152, 2154, 2161], "befor": [428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 526, 836, 838, 986, 1051, 1278, 1280, 1476, 1512, 1516, 1538, 1559, 1563, 1679, 1681, 1682, 1684, 1685, 1697, 1698, 1908, 1912, 1918, 1919, 1923, 2017, 2058, 2151], "begin": [23, 90, 95, 174, 930, 934, 1121, 1124, 1126, 1238, 1349, 1379, 1380, 1622, 1625, 1644, 1650, 1692, 1777, 1788, 1795, 2162], "behav": [174, 526, 847, 1565, 1802], "behavior": [427, 433, 542, 605, 736, 891, 981, 985, 1495, 1686, 1688, 1689, 1695, 1698, 1703, 1777, 1801, 1835, 1908, 1912, 2051, 2069, 2162], "behind": 1697, "being": [433, 435, 441, 540, 836, 838, 860, 966, 1188, 1196, 1294, 1311, 1512, 1516, 1559, 1563, 1679, 1680, 1681, 1682, 1684, 1685, 1697, 1703, 1908, 1912, 2017, 2058, 2070, 2151, 2161, 2162], "below": [486, 488, 627, 768, 1280, 1345, 1459, 1688, 1689, 1697, 1766, 1772, 1775, 2162], "benefit": [259, 262, 265], "best": [1681, 1682, 1684], "better": [1678, 2025, 2161], "between": [8, 13, 90, 93, 96, 227, 239, 250, 365, 811, 813, 814, 1053, 1205, 1673, 1678, 1682, 1685, 1688, 1691, 1698, 2114, 2151, 2152, 2154, 2161], "bfloat16": [8, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 1402, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414, 1418, 1446, 1447, 1448, 1450, 1451, 1452, 1453, 1455, 1456, 1457, 1572, 1573, 1574, 1575, 1577, 1614, 1618, 1619, 1620, 1621, 1658, 1660, 1661, 1663, 1684, 1685, 1702, 2108, 2165], "bfloat16_float": 110, "bfloat16_t": [8, 1418], "bia": 2165, "big": [1681, 1684, 1685, 1696, 2165], "bill": 1691, "bin": 1689, "binari": [8, 1420, 1689, 1697], "binary16": [8, 1424, 1685, 1702, 2131, 2165], "binary32": [8, 1425, 1685, 1702, 2132, 2165], "binary64": [8, 1426, 1685, 1702, 2133, 2165], "bind": [165, 166, 365, 390, 391, 1154, 1157, 1166, 1474, 1475, 1476, 1479, 1504, 1533, 1536, 1538, 1546, 1551, 1553, 1554, 1689, 1892, 1910, 1913, 2017, 2058, 2161], "bindcontext": [371, 372, 1154, 1157, 1474, 1475, 1476, 1533, 1536, 1538], "bit": [8, 143, 150, 151, 152, 161, 165, 166, 167, 168, 170, 171, 172, 247, 525, 586, 600, 601, 661, 672, 673, 869, 877, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1132, 1134, 1137, 1141, 1145, 1147, 1149, 1659, 1673, 1681, 1684, 1685, 1688, 1696, 1697, 1702, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2156, 2157, 2158, 2159, 2165], "bititer": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1121], "bitref": [143, 152, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 1121, 1146, 1659], "bitset": [1121, 1150], "bitshuffl": 1685, "bitvector": [1055, 1056, 1059, 1060], "bitwis": [511, 704, 705, 706, 707, 708, 709, 727, 728, 729, 730], "blake3": 1689, "block": [143, 150, 165, 166, 167, 526, 540, 542, 543, 836, 1029, 1034, 1036, 1278, 1281, 1672, 1681, 1682, 1684, 1685, 1690, 1703, 1789, 1794, 1797, 1900, 1901, 1903, 2025, 2030, 2031, 2032, 2033, 2048, 2051, 2066, 2069, 2070, 2161, 2164], "block_typ": [165, 167], "blocksiz": [1681, 1684, 1685, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2070, 2151, 2163], "blosc": [1681, 1684, 1685, 1689, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "blosclz": [1681, 1684, 1685], "bmp": [1679, 2165], "bodi": [365, 1697], "bool": [8, 21, 27, 28, 29, 30, 36, 37, 38, 39, 76, 77, 88, 99, 100, 102, 104, 106, 109, 110, 113, 131, 134, 137, 138, 139, 142, 143, 153, 164, 165, 169, 170, 171, 172, 173, 174, 185, 196, 209, 220, 221, 224, 244, 245, 246, 251, 253, 271, 279, 283, 286, 299, 300, 302, 303, 304, 305, 306, 340, 345, 347, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 371, 380, 381, 382, 386, 387, 393, 398, 406, 409, 416, 420, 421, 424, 425, 427, 437, 454, 459, 462, 465, 471, 473, 480, 490, 503, 504, 505, 526, 555, 563, 571, 572, 583, 585, 586, 607, 614, 615, 623, 627, 637, 638, 639, 640, 645, 649, 651, 658, 661, 683, 684, 697, 699, 702, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 811, 824, 826, 828, 829, 830, 833, 834, 862, 863, 864, 866, 867, 869, 873, 874, 892, 894, 896, 897, 898, 899, 900, 905, 912, 915, 917, 919, 920, 922, 930, 936, 961, 965, 970, 971, 973, 976, 978, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1010, 1012, 1021, 1023, 1028, 1040, 1043, 1047, 1056, 1060, 1063, 1074, 1082, 1083, 1089, 1092, 1093, 1094, 1112, 1121, 1124, 1125, 1130, 1134, 1135, 1136, 1137, 1141, 1143, 1145, 1149, 1151, 1154, 1173, 1177, 1188, 1190, 1192, 1193, 1194, 1195, 1197, 1199, 1200, 1205, 1226, 1240, 1266, 1268, 1273, 1276, 1278, 1285, 1286, 1287, 1292, 1297, 1301, 1306, 1345, 1353, 1366, 1367, 1378, 1394, 1397, 1419, 1455, 1456, 1457, 1472, 1473, 1482, 1493, 1497, 1507, 1508, 1511, 1517, 1522, 1523, 1525, 1526, 1533, 1548, 1550, 1551, 1552, 1556, 1557, 1566, 1567, 1568, 1597, 1598, 1599, 1600, 1601, 1602, 1619, 1622, 1633, 1672, 1684, 1685, 1702, 1706, 1707, 1708, 1719, 1721, 1722, 1734, 1737, 1739, 1741, 1742, 1743, 1745, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1764, 1767, 1769, 1770, 1776, 1777, 1780, 1788, 1791, 1792, 1793, 1799, 1806, 1813, 1814, 1821, 1832, 1839, 1844, 1845, 1854, 1869, 1870, 1871, 1874, 1882, 1884, 1891, 1892, 1894, 1895, 1913, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1950, 1951, 1953, 1969, 1976, 1983, 1985, 2002, 2011, 2017, 2019, 2020, 2021, 2022, 2023, 2025, 2044, 2052, 2053, 2054, 2058, 2059, 2068, 2069, 2070, 2071, 2073, 2074, 2076, 2079, 2080, 2081, 2097, 2099, 2100, 2103, 2107, 2109, 2114, 2115, 2127, 2130, 2151, 2152, 2154, 2162, 2165], "bool_": [1702, 2109], "bool_flag": 1689, "bool_t": [8, 1419], "boolean": [0, 8, 1419, 1678, 1679, 1681, 1682, 1684, 1685, 1690, 1695, 1697, 1698, 1702, 1781, 1856, 1971, 2004, 2047, 2048, 2109, 2165], "boolsview": [1121, 1122], "boringssl": 1689, "both": [13, 21, 39, 41, 249, 253, 261, 264, 354, 416, 459, 484, 526, 572, 575, 605, 735, 736, 786, 811, 812, 876, 877, 878, 894, 897, 923, 983, 1049, 1082, 1083, 1113, 1114, 1154, 1181, 1184, 1187, 1278, 1292, 1679, 1681, 1682, 1684, 1685, 1688, 1689, 1697, 1722, 1734, 1780, 1801, 1821, 1835, 1854, 1958, 1969, 1981, 2002, 2017, 2044, 2058, 2114, 2151, 2152, 2154, 2161, 2164], "bound": [3, 7, 8, 37, 64, 98, 165, 170, 171, 174, 348, 351, 354, 362, 371, 379, 380, 382, 390, 391, 415, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 443, 444, 454, 479, 518, 519, 520, 545, 547, 563, 574, 575, 576, 578, 579, 580, 581, 585, 586, 587, 598, 600, 601, 605, 610, 615, 617, 618, 619, 622, 623, 624, 627, 628, 630, 633, 634, 635, 636, 641, 642, 643, 644, 649, 652, 653, 654, 655, 662, 666, 672, 673, 676, 697, 734, 735, 736, 739, 740, 766, 767, 768, 799, 811, 814, 819, 825, 827, 877, 878, 891, 894, 903, 910, 915, 916, 917, 918, 919, 920, 923, 943, 944, 948, 953, 990, 991, 994, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1059, 1060, 1089, 1097, 1118, 1119, 1154, 1157, 1162, 1173, 1240, 1255, 1256, 1262, 1370, 1458, 1459, 1465, 1467, 1474, 1475, 1478, 1482, 1495, 1496, 1500, 1502, 1504, 1533, 1536, 1544, 1548, 1672, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1692, 1702, 1752, 1755, 1756, 1757, 1758, 1759, 1765, 1766, 1768, 1769, 1770, 1771, 1772, 1773, 1776, 1777, 1778, 1780, 1781, 1782, 1785, 1787, 1799, 1801, 1806, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1821, 1823, 1830, 1832, 1835, 1837, 1839, 1841, 1844, 1845, 1846, 1847, 1848, 1850, 1854, 1856, 1857, 1865, 1867, 1869, 1870, 1872, 1875, 1876, 1884, 1892, 1910, 1912, 1913, 1914, 1916, 1951, 1958, 1969, 1972, 1979, 1981, 1983, 1985, 1991, 2002, 2006, 2015, 2017, 2019, 2039, 2044, 2049, 2053, 2054, 2058, 2063, 2067, 2092, 2094, 2114, 2115, 2151, 2152, 2154, 2161, 2162, 2164], "boundari": 2164, "box": [8, 43, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 253, 270, 358, 359, 363, 427, 429, 446, 555, 563, 571, 576, 586, 587, 588, 598, 661, 662, 672, 746, 747, 748, 767, 783, 883, 1039, 1181, 1187, 1238, 1799, 1812], "boxslic": [427, 429], "boxtyp": [18, 39, 174, 176, 182, 187, 196, 197, 203, 204, 211, 359, 363, 427, 429, 446, 576, 661, 767, 1238], "boxview": [39, 43, 65, 174, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 429, 446, 551, 552, 553, 554, 555, 556, 586, 587, 588, 598, 661, 662, 693, 746, 883, 990, 991, 992, 993, 1181, 1205, 1211, 1212, 1221, 1238, 1306], "brace": [18, 45, 75, 80, 359, 363, 430, 432, 434, 436, 443, 444, 445, 447, 451, 453, 478, 481, 482, 485, 593, 609, 841, 842, 848, 849, 1125, 1127, 1225, 1228, 1236], "break": 1684, "broadcast": [12, 13, 218, 219, 398, 433, 480, 1012, 1106, 1255, 1372, 1378, 1684, 1777, 1787, 1867, 1954, 1958, 1981, 1982, 1986, 2017, 2018, 2026, 2030, 2032, 2033, 2041, 2048, 2065, 2066, 2069, 2151, 2162, 2164], "broadcastarrai": [39, 218], "broadcaststridedlayout": [219, 1205], "broader": 2161, "brotli": 1689, "browser": 1692, "bsd": 1686, "btree": 2150, "btree_node_data_prefix": 1697, "btreenod": 2150, "bucket": [365, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1682, 1684, 1685, 1691, 1696, 1698, 1700, 1701, 1893, 1911, 1915, 2151, 2163], "buffer": [19, 39, 442, 486, 487, 488, 795, 995, 999, 1445, 1672, 1684, 1690, 2161], "bug": 1689, "build": 1687, "build_def": 1689, "build_doc": 1689, "build_ext": 1689, "built": [1113, 1686, 1689, 2108, 2162], "bundl": [1686, 1689], "bypass": [454, 1780], "byte": [0, 8, 9, 10, 11, 19, 20, 39, 63, 219, 220, 221, 222, 223, 224, 226, 227, 232, 238, 239, 240, 241, 242, 416, 423, 490, 557, 558, 693, 694, 695, 823, 846, 894, 896, 901, 902, 903, 905, 906, 911, 914, 1113, 1205, 1219, 1225, 1228, 1230, 1278, 1293, 1319, 1420, 1438, 1512, 1514, 1559, 1561, 1622, 1648, 1681, 1684, 1696, 1697, 1700, 1702, 1869, 1870, 1877, 1881, 1894, 1897, 1901, 1909, 2092, 2093, 2095, 2096, 2150, 2155, 2165], "byte_offset": [9, 10, 11, 227, 238, 240, 241, 242, 243, 490], "byte_rang": [220, 221, 222, 223, 224, 225, 226, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1507, 1509, 1512, 1514, 1559, 1561], "byte_strid": [8, 19, 20, 39, 52, 63, 694, 944, 946, 1113, 1205, 1210, 1211, 1213, 1214, 1215, 1216, 1219, 1225, 1226, 1228, 1232, 1322], "byte_strided_origin_point": [39, 61], "byte_strided_point": [39, 62, 74, 75, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 490, 498], "byte_t": [8, 1420], "byterang": [8, 220, 221, 222, 223, 224, 225, 226, 894, 895, 901, 909], "bytestridedpoint": [8, 39, 61, 62, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 490, 498, 743], "bz2": 1684, "bzip2": [1681, 1684, 1689], "bzl": 1689, "c": [4, 8, 18, 39, 40, 247, 249, 253, 350, 365, 392, 393, 416, 427, 436, 441, 526, 560, 570, 833, 841, 842, 845, 846, 848, 849, 1063, 1205, 1209, 1217, 1223, 1226, 1410, 1416, 1417, 1670, 1685, 1687, 1690, 1722, 1727, 1734, 1777, 1786, 1907, 1993, 2008, 2019, 2028, 2029, 2035, 2047, 2051, 2058, 2065, 2151, 2162, 2164], "c1083": 1689, "c16": 1684, "c8": 1684, "c_arrai": [43, 45], "c_order": [20, 39, 43, 45, 392, 393, 559, 560, 695, 833, 843, 845, 846, 847, 961, 1011, 1013, 1015, 1110, 1205, 1306, 1410], "c_origin": 174, "c_rehash": 1686, "c_shape": 174, "cach": [0, 365, 891, 1040, 1043, 1049, 1051, 1053, 1154, 1262, 1512, 1516, 1559, 1563, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1690, 1696, 1700, 1702, 1740, 1908, 1912, 1913, 1950, 2017, 2019, 2051, 2054, 2058, 2069, 2092, 2093, 2094, 2114, 2151, 2152, 2154, 2163], "cache_pool": [0, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1696, 1697, 1700, 1701, 1742, 1746, 1748, 1750, 1751, 1991, 2017, 2019, 2026, 2027, 2028, 2029, 2035, 2047, 2058, 2065, 2069, 2150, 2151, 2161, 2163], "cacherevalidationbound": [1679, 1680, 1681, 1682, 1684, 1685], "cafil": [1691, 1692], "call": [3, 4, 5, 16, 21, 23, 26, 32, 174, 370, 371, 427, 428, 445, 447, 484, 512, 526, 527, 536, 540, 542, 571, 593, 605, 798, 836, 837, 839, 856, 859, 889, 965, 966, 970, 972, 975, 981, 983, 984, 986, 1063, 1089, 1109, 1240, 1278, 1279, 1288, 1342, 1476, 1538, 1664, 1689, 1690, 1691, 1698, 1703, 1705, 1747, 1777, 1780, 1788, 1789, 1792, 1795, 1804, 1900, 1901, 1903, 1912, 1948, 1957, 1961, 2028, 2051, 2069, 2072, 2075, 2161, 2162], "call_soon_threadsaf": 1790, "callabl": [8, 512, 1788, 1790, 1796, 2097, 2098, 2105, 2161], "callback": [21, 23, 25, 401, 404, 526, 527, 540, 542, 543, 836, 837, 839, 856, 858, 965, 966, 967, 978, 981, 983, 985, 1013, 1016, 1017, 1020, 1029, 1390, 1392, 1702, 1790, 1796, 2092, 2095, 2097, 2098, 2105, 2161], "calle": 1114, "caller": [43, 45, 526, 842, 843, 849, 854, 975, 1357, 1358, 1359, 1360], "can": [8, 99, 174, 365, 390, 416, 428, 433, 435, 458, 459, 484, 520, 526, 593, 745, 790, 800, 811, 836, 837, 838, 839, 892, 951, 965, 972, 1103, 1113, 1125, 1127, 1183, 1205, 1240, 1250, 1280, 1290, 1359, 1372, 1482, 1495, 1565, 1664, 1679, 1681, 1682, 1684, 1685, 1686, 1687, 1688, 1689, 1691, 1697, 1698, 1703, 1817, 1909, 1954, 1958, 1964, 1981, 1986, 2017, 2026, 2058, 2069, 2070, 2092, 2093, 2107, 2114, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "can_reference_source_data_indefinit": [1152, 2069], "can_resize_tied_bound": [661, 994], "can_skip_repeated_el": [798, 799, 846], "cancel": [526, 965, 967, 978, 1788, 1791, 1792, 1793, 2069, 2097, 2099, 2100], "cancellederror": [1791, 1792], "cancopytensorstoretotensorstor": [244, 398], "cannot": [143, 165, 415, 428, 433, 458, 459, 484, 526, 547, 548, 646, 1154, 1168, 1184, 1250, 1294, 1296, 1342, 1357, 1358, 1689, 1698, 1776, 1777, 1788, 1957, 2070, 2107], "cannot_reference_source_data": [401, 405, 1152, 1390, 1393], "canon": [247, 416, 2164], "canonic": 1416, "canonicalelementtyp": [247, 416, 1416, 1417], "canreadtensorstoretoarrai": [245, 1012], "canwritearraytotensorstor": [246, 1378], "capabl": [1684, 1697, 2162], "capath": [1691, 1692], "captur": [390, 1892, 1913, 2017, 2058], "care": [892, 1682, 1780, 2151], "carefulli": 542, "cartesian": [174, 1799], "case": [1, 3, 7, 12, 13, 19, 39, 370, 425, 427, 430, 432, 434, 435, 443, 444, 445, 447, 451, 526, 540, 542, 543, 563, 568, 605, 672, 740, 778, 799, 811, 836, 837, 842, 849, 860, 1063, 1119, 1205, 1296, 1311, 1349, 1672, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1697, 1698, 1703, 1782, 1783, 1784, 1785, 1801, 1817, 1828, 1829, 1830, 1832, 1835, 1863, 1864, 1865, 1872, 1875, 1912, 1977, 1978, 1979, 2013, 2014, 2015, 2020, 2029, 2061, 2062, 2063, 2162, 2164], "cast": [8, 248, 249, 250, 353, 880, 1154, 1181, 1182, 1184, 1187, 1240, 1664, 1665, 1679, 1702, 1992, 2034, 2035, 2110, 2111, 2165], "cast_spec": 1992, "castcheck": [8, 250, 880, 1181, 1182, 1184, 1187, 1664], "categori": [143, 149, 924, 927], "caus": [7, 8, 455, 456, 526, 542, 836, 991, 1109, 1684, 1685, 2162], "caution": [1056, 2053], "caveat": 1690, "cbegin": [1622, 1625], "cc": [108, 1113, 1114, 1907], "ccach": 1689, "cd": 1689, "cdot": 1688, "ce": 2150, "ceil": [110, 1411], "cell": 1700, "cend": [1622, 1625], "cert": [1686, 1691, 1692], "certain": [459, 484, 526, 1280, 1294, 1685, 1688, 1693], "certif": 1689, "chain": [428, 433, 435, 455, 456, 605, 1685, 1698, 1700, 1777, 2162], "chainresult": [251, 1063, 1242], "chang": [143, 425, 427, 428, 436, 881, 994, 1055, 1113, 1188, 1240, 1242, 1294, 1482, 1485, 1688, 1689, 1776, 1779, 1780, 1799, 1819, 1821, 1832, 1853, 1854, 1908, 1912, 1951, 1968, 1969, 1983, 2001, 2002, 2005, 2017, 2019, 2043, 2044, 2053, 2070, 2115, 2162], "channel": [8, 21, 526, 537, 965, 979, 1673, 1674, 1675, 1676, 1677, 1678, 1682, 1686, 2151, 2163], "char": [8, 227, 231, 247, 436, 578, 586, 591, 1345, 1349, 1421, 2165], "char_t": [8, 1421], "charact": [811, 821, 1685, 1689, 1692, 2165], "characterist": 2151, "check": [5, 8, 36, 39, 43, 45, 76, 109, 220, 221, 250, 252, 371, 381, 399, 400, 416, 425, 433, 435, 441, 454, 473, 480, 490, 505, 511, 592, 627, 650, 661, 684, 697, 749, 750, 753, 755, 756, 765, 782, 786, 791, 795, 797, 798, 862, 867, 869, 874, 880, 892, 894, 896, 897, 898, 899, 900, 905, 906, 990, 991, 1028, 1040, 1047, 1056, 1059, 1060, 1063, 1083, 1086, 1181, 1182, 1184, 1187, 1188, 1190, 1195, 1197, 1200, 1205, 1225, 1240, 1268, 1276, 1278, 1292, 1370, 1482, 1493, 1597, 1598, 1599, 1600, 1601, 1602, 1623, 1679, 1681, 1682, 1684, 1685, 1698, 1752, 1753, 1754, 2017, 2058, 2059, 2075, 2151, 2162], "checkcontain": [252, 627], "checked_result": 1187, "checksum": 1697, "child": [1697, 1750, 1751], "children": 1697, "choic": 1696, "choos": [8, 250, 1683, 2164], "chosen": [19, 20, 575, 735, 1672, 1681, 1682, 1684, 1685, 1697, 2151], "chromium": 1689, "chunk": [253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 279, 282, 283, 291, 300, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 330, 332, 333, 334, 335, 336, 337, 338, 339, 1056, 1089, 1101, 1154, 1164, 1250, 1687, 1690, 1696, 1702, 1707, 1708, 1709, 1711, 1712, 1713, 1714, 1717, 1718, 1720, 1721, 1722, 1724, 1727, 1731, 1732, 1734, 1735, 1736, 1951, 1958, 1961, 1981, 1983, 1993, 2008, 2017, 2019, 2020, 2028, 2029, 2035, 2036, 2047, 2053, 2058, 2065, 2069, 2151, 2161], "chunk_aspect_ratio": [1681, 1682, 1684, 1685, 1722, 1734, 2151], "chunk_aspect_ratio_soft_constraint": [1722, 1734], "chunk_el": [1681, 1684, 1722, 1734, 2151], "chunk_elements_soft_constraint": [1722, 1734], "chunk_grid": 1685, "chunk_key_encod": 1685, "chunk_layout": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 1089, 1101, 1154, 1164, 1240, 1250, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1703, 1951, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1971, 1973, 1976, 1981, 1982, 1983, 1993, 2008, 2017, 2019, 2036, 2055, 2151, 2161, 2164, 2165], "chunk_shap": [1681, 1684, 1685, 1722, 1734, 2151], "chunk_shape_soft_constraint": [1722, 1734], "chunk_siz": [1682, 2151, 2163], "chunkaspectratio": [253, 258, 264, 315], "chunkaspectratiobas": [253, 259, 260, 271, 272, 283, 284, 287], "chunkaspectratiofor": [253, 258, 259, 260, 290, 292, 306, 310, 1094], "chunkel": [253, 261, 315, 862], "chunkelementsbas": [253, 262, 263, 271, 273, 283, 284, 288], "chunkelementsfor": [253, 261, 262, 263, 267, 290, 293, 306, 308, 311, 319, 1094], "chunkkeyencod": 1685, "chunklayout": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 862, 869, 1089, 1094, 1101, 1154, 1164, 1240, 1250, 1681, 1682, 1684, 1685, 1702, 1703, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1951, 1954, 1955, 1956, 1957, 1958, 1961, 1971, 1973, 1976, 1981, 1982, 1983, 1993, 2017, 2019, 2036, 2151, 2161, 2164], "chunkshap": [253, 264, 315], "chunkshapebas": [253, 265, 266, 271, 275, 283, 284, 289, 315], "chunkshapefor": [253, 264, 265, 266, 268, 290, 295, 306, 309, 313, 320, 1094], "chunkss": 2164, "circumst": [1679, 1702, 1950], "ckind": [8, 19, 20, 39, 218, 427, 442, 455, 456, 551, 552, 556, 558, 577, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 740, 750, 756, 844, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 990, 991, 992, 993, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1296, 1343, 1344, 1376, 1377], "ckinda": [36, 39, 350, 661], "ckindb": [36, 39, 76, 77, 350, 586, 607, 661, 684], "cl": 1689, "clang": 1689, "clariti": 632, "class": [8, 21, 25, 39, 99, 110, 131, 134, 143, 165, 174, 196, 227, 250, 253, 271, 283, 290, 291, 340, 355, 365, 371, 383, 390, 391, 392, 416, 425, 427, 465, 480, 483, 489, 490, 511, 512, 513, 523, 526, 527, 540, 584, 586, 615, 627, 649, 661, 696, 699, 739, 762, 765, 800, 801, 811, 833, 862, 869, 879, 882, 892, 915, 924, 930, 943, 944, 960, 965, 981, 1028, 1029, 1054, 1055, 1056, 1059, 1060, 1063, 1089, 1112, 1121, 1154, 1181, 1183, 1205, 1240, 1278, 1297, 1306, 1361, 1379, 1474, 1482, 1517, 1519, 1533, 1622, 1702, 1703, 1707, 1737, 1741, 1743, 1752, 1776, 1788, 1798, 1799, 1807, 1832, 1868, 1870, 1877, 1882, 1894, 1918, 1925, 1935, 1939, 1946, 1951, 1983, 2019, 2020, 2070, 2080, 2092, 2095, 2097, 2115, 2119, 2147, 2162], "clean": [1188, 1192, 1690], "clear": [269, 1722, 1734], "clevel": [1681, 1684, 1685, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "cli": 1698, "client": 1697, "clip": 260, "clone": 1689, "close": [427, 430, 518, 585, 627, 628, 637, 739, 915, 1688, 1752, 1757], "closedinterv": [427, 428, 430, 448, 518], "closest": 260, "cloud": [1687, 1691, 1693, 2069, 2151, 2163], "cloudpickl": 2161, "cloudsdk_config": 1691, "cname": [1681, 1684, 1685, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "co": [110, 1413], "coalesc": [2069, 2070], "coarsest": 253, "code": [6, 7, 8, 416, 417, 427, 526, 531, 542, 1063, 1067, 1089, 1183, 1421, 1689, 2129], "codec": [253, 258, 259, 262, 264, 265, 267, 268, 269, 271, 283, 315, 318, 322, 323, 324, 340, 341, 342, 343, 345, 346, 1089, 1102, 1154, 1165, 1240, 1251, 1690, 1700, 1706, 1707, 1722, 1724, 1734, 1951, 1958, 1962, 1981, 1983, 1994, 2008, 2017, 2019, 2037, 2055, 2151], "codec_chunk": [253, 321, 1681, 1682, 1684, 1706, 1722, 1724, 1734, 2164], "codec_chunk_aspect_ratio": [253, 322, 1722, 1734], "codec_chunk_aspect_ratio_soft_constraint": [1722, 1734], "codec_chunk_el": [253, 323, 1722, 1734], "codec_chunk_elements_soft_constraint": [1722, 1734], "codec_chunk_shap": [253, 324, 1722, 1734], "codec_chunk_shape_soft_constraint": [1722, 1734], "codec_spec": [340, 341, 342, 343, 344, 345, 346, 347], "codecchain": [1685, 1700], "codecchunk": [253, 257, 315, 321], "codecchunkaspectratio": [253, 258, 322], "codecchunkel": [253, 267, 323], "codecchunkshap": [253, 268, 324], "codecspec": [340, 341, 342, 343, 344, 345, 346, 347, 1089, 1094, 1102, 1154, 1165, 1240, 1251, 1682, 1702, 1737, 1738, 1739, 1951, 1958, 1962, 1981, 1983, 1994, 2017, 2019, 2037, 2151], "colexicograph": [1681, 1682, 1685, 1722, 1727, 1734, 2051, 2164], "collect": [8, 365, 383, 1089, 1697, 1702, 2127, 2128], "collis": 1689, "column": [1685, 1697, 1722, 1727, 1734, 2051, 2164], "column_major": [392, 1410], "column_major_ord": [392, 1410], "com": [525, 1686, 1689, 1691, 1692, 1698, 1702, 2129, 2134, 2135, 2136, 2137, 2138], "com_github_cares_car": 1689, "com_github_nlohmann_json": 1689, "com_github_pybind_pybind11": 1689, "com_google_boringssl": 1689, "com_google_brotli": 1689, "com_google_snappi": 1689, "combin": [8, 108, 283, 801, 803, 862, 869, 1113, 1114, 1240, 1268, 1297, 1298, 1306, 1338, 1345, 1349, 1482, 1533, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1689, 1690, 1697, 2080, 2151, 2162, 2164, 2165], "comma": [7, 1686, 1689, 2130], "command": [1686, 1689, 2153], "commit": [406, 407, 1152, 1278, 1279, 1280, 1281, 1282, 1287, 1288, 1294, 1379, 1385, 1394, 1395, 1565, 1690, 1697, 1702, 1900, 1903, 1907, 1908, 1912, 1917, 2051, 2069, 2070, 2071, 2075, 2076, 2077, 2078, 2079, 2097, 2101, 2161], "commit_async": [1916, 2069, 2070, 2072, 2075, 2077], "commit_futur": [398, 566, 1378, 1379, 1381, 1385, 1387, 1388, 1389], "commit_start": [1278, 1285, 1287, 2070, 2076], "commit_sync": [1869, 2032, 2070, 2075, 2077], "commit_tim": [1697, 2150], "commitasync": [1278, 1282, 1288], "committed_el": [406, 407, 1394, 1395], "common": [8, 247, 315, 433, 836, 876, 1153, 1672, 1679, 1683, 1686, 1693, 1697, 1702, 1722, 1734, 1832, 2152, 2162], "commonli": 23, "commun": 526, "compar": [36, 39, 76, 143, 153, 196, 220, 224, 271, 279, 300, 304, 340, 345, 406, 409, 459, 462, 465, 471, 490, 504, 511, 586, 607, 615, 623, 627, 645, 649, 658, 811, 830, 862, 866, 869, 873, 894, 912, 915, 922, 1021, 1023, 1063, 1082, 1083, 1092, 1093, 1121, 1143, 1154, 1173, 1188, 1205, 1226, 1268, 1273, 1297, 1301, 1345, 1353, 1394, 1397, 1517, 1526, 1533, 1548, 1706, 1707, 1708, 1721, 1752, 1755, 1870, 1871, 1882, 1884, 1894, 1895, 1951, 1953, 1983, 1985, 2080, 2081], "compareexclusivemax": [811, 813], "compareexclusivemaxandkei": [811, 814], "comparekeyandexclusivemax": [811, 814], "comparison": [36, 100, 106, 174, 196, 416, 417, 421, 511, 811, 813, 814, 1106, 1290, 1366, 1367, 1884, 1953, 1958, 1981, 1985, 2017, 2151], "compat": [0, 8, 18, 38, 39, 40, 72, 75, 76, 80, 174, 176, 178, 187, 204, 218, 219, 227, 228, 230, 253, 306, 354, 359, 363, 393, 395, 398, 399, 400, 415, 429, 430, 432, 433, 434, 436, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 478, 481, 490, 493, 494, 526, 528, 535, 569, 575, 578, 580, 586, 587, 589, 661, 662, 663, 665, 679, 695, 735, 751, 752, 753, 754, 757, 772, 774, 777, 778, 782, 784, 798, 799, 843, 857, 875, 877, 878, 891, 930, 931, 965, 968, 974, 1011, 1012, 1028, 1055, 1059, 1089, 1094, 1106, 1153, 1156, 1205, 1209, 1223, 1236, 1240, 1246, 1248, 1257, 1262, 1306, 1372, 1378, 1495, 1504, 1622, 1652, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1693, 1698, 1799, 1817, 1958, 1981, 2017, 2030, 2032, 2033, 2041, 2048, 2066, 2069, 2151, 2162, 2163, 2164], "compet": 1690, "compil": [21, 24, 39, 76, 108, 174, 195, 196, 217, 227, 237, 399, 400, 416, 458, 485, 526, 534, 570, 579, 586, 613, 661, 697, 758, 778, 779, 795, 845, 891, 1028, 1063, 1064, 1113, 1114, 1203, 1205, 1240, 1263, 1264, 1306, 1335, 1445, 1665, 1689], "complement": [425, 892, 1028, 1121, 1142, 1594, 1595, 1596, 1685, 1702, 2140, 2141, 2142, 2143, 2144, 2165], "complet": [406, 408, 427, 526, 540, 543, 1011, 1012, 1055, 1278, 1279, 1280, 1281, 1282, 1287, 1288, 1373, 1374, 1378, 1379, 1469, 1506, 1688, 1703, 1788, 1790, 1791, 1793, 1794, 1797, 1900, 1901, 1903, 1907, 1908, 1912, 1917, 1946, 1948, 1949, 2030, 2031, 2032, 2033, 2048, 2051, 2053, 2066, 2069, 2097, 2162, 2163], "complex": [8, 1422, 1423, 1672, 1685, 1702, 2112, 2113, 2162, 2165], "complex128": [1684, 1685, 1702, 2112, 2165], "complex128_t": [8, 1422], "complex64": [425, 1684, 1685, 1702, 2113, 2165], "complex64_t": [8, 1423], "compon": [174, 359, 363, 365, 430, 432, 443, 1482, 1483, 1533, 1534, 1679, 1680, 1681, 1682, 1684, 1685, 1692, 1706, 1722, 1799, 1806, 1832, 1839, 1869, 1882, 1887, 1904, 1951, 1958, 2165], "compos": [253, 348, 349, 350, 661, 1306, 1671, 1687, 1688, 1694, 1805, 1832, 1838, 1957, 1989], "composelayoutandtransform": [348, 1306], "composeoptionaltransform": [349, 661], "composetransform": [8, 14, 349, 350, 661, 681], "composit": [672, 681, 1688, 1694], "compress": [318, 340, 1089, 1676, 1684, 1701, 2026, 2027, 2070, 2150, 2151, 2163, 2164], "compressed_segment": [1682, 2151, 2163], "compressed_segmentation_block_s": [1682, 2151, 2163], "compression_format": 1697, "compression_level": 1676, "compression_method": 1697, "compression_segmentation_block_s": 318, "compressor": [1681, 1962, 1994, 1999, 2019, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "comput": [8, 12, 13, 39, 110, 174, 227, 239, 350, 351, 352, 392, 415, 425, 430, 432, 433, 434, 435, 441, 443, 480, 526, 545, 547, 548, 550, 559, 560, 563, 569, 574, 575, 586, 605, 627, 661, 666, 799, 915, 943, 954, 960, 964, 990, 991, 1028, 1056, 1060, 1121, 1138, 1139, 1140, 1142, 1205, 1237, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414, 1446, 1447, 1448, 1450, 1451, 1452, 1453, 1572, 1573, 1574, 1575, 1581, 1582, 1584, 1585, 1586, 1588, 1589, 1591, 1592, 1593, 1594, 1618, 1620, 1621, 1658, 1660, 1661, 1663, 1672, 1683, 1688, 1691, 1697, 1799, 1812, 1900, 1901, 1903, 1954, 1986, 2019, 2026, 2027, 2028, 2029, 2047, 2059, 2065, 2161, 2162], "computestrid": [352, 1205], "computestridedslicemap": [351, 915], "concat": [1683, 1702, 2114, 2152, 2154], "concaten": [8, 1204, 1683, 1686, 1697, 1702, 2114], "concept": [8, 39, 174, 427, 430, 432, 434, 443, 444, 445, 447, 451, 551, 552, 553, 554, 555, 556, 586, 661, 778, 781, 924, 1063, 1205, 1306], "conceptu": [465, 1113], "concis": 1693, "concurr": [0, 365, 540, 542, 543, 892, 975, 1262, 1294, 1469, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1690, 1691, 1692, 1693, 1697, 1698, 1699, 1788, 1790, 1913, 2017, 2058, 2069], "condit": [526, 563, 605, 1194, 1294, 1468, 1482, 1506, 1507, 1509, 1510, 1512, 1515, 1517, 1519, 1522, 1556, 1558, 1559, 1562, 1565, 1566, 1569, 1570, 1571, 1690, 1691, 1697, 1698, 1801, 1835, 1912, 1917, 2095, 2096], "condition": [228, 230, 1065, 1070, 1205, 1206, 1207], "conditional_t": [196, 206, 227, 231, 416, 473, 615, 620, 1185, 1416], "config": [1689, 1691, 1697, 1698, 2150], "config_fil": 1698, "configur": [0, 365, 1685, 1687, 1689, 1690, 1691, 1692, 1698, 1700], "confirm": [1697, 2151], "conflict": 263, "confus": 2162, "conjunct": [263, 892, 1089, 1507, 1509, 1688, 1698, 2017, 2058, 2151, 2164], "connect": [1686, 1687, 1691, 1692, 1699], "consecut": [8, 90, 93, 427, 438, 441, 452, 1205, 1691, 1698, 1700, 1777, 2162], "consequ": [390, 1802, 1805, 1892, 1913, 2017, 2058], "consid": [37, 270, 511, 563, 684, 1082, 1506, 1681, 1689, 1699, 2069, 2164], "consist": [417, 681, 1205, 1294, 1507, 1509, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1697, 1777, 1817, 1912, 2017, 2058, 2151, 2162], "const": [8, 9, 11, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 38, 39, 40, 45, 48, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 99, 100, 106, 107, 108, 109, 110, 116, 131, 134, 135, 137, 138, 139, 140, 142, 143, 145, 147, 150, 151, 152, 161, 162, 163, 165, 168, 169, 170, 171, 174, 176, 178, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 231, 234, 235, 236, 237, 243, 248, 253, 260, 266, 270, 271, 274, 276, 277, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 296, 297, 298, 299, 300, 302, 304, 305, 315, 318, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 346, 347, 348, 350, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 367, 370, 371, 372, 374, 377, 379, 380, 381, 382, 386, 387, 388, 389, 390, 392, 393, 396, 399, 400, 406, 409, 410, 415, 416, 419, 420, 421, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 465, 469, 470, 471, 472, 473, 476, 477, 478, 481, 482, 484, 485, 486, 487, 488, 489, 490, 498, 499, 500, 503, 504, 505, 506, 526, 527, 530, 531, 532, 534, 536, 538, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 576, 577, 578, 580, 581, 582, 585, 586, 589, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 624, 626, 627, 640, 641, 642, 643, 644, 646, 648, 649, 651, 652, 653, 654, 655, 657, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 699, 710, 733, 737, 738, 740, 741, 749, 750, 755, 756, 762, 763, 764, 765, 767, 773, 778, 779, 781, 783, 796, 798, 799, 801, 808, 809, 810, 811, 821, 824, 826, 828, 829, 830, 831, 833, 834, 835, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 853, 857, 862, 865, 866, 867, 869, 871, 873, 874, 876, 882, 884, 885, 887, 888, 889, 894, 895, 896, 897, 898, 899, 900, 905, 909, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 930, 934, 936, 937, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 965, 966, 967, 970, 971, 972, 973, 975, 976, 978, 990, 992, 994, 995, 1008, 1010, 1012, 1021, 1023, 1024, 1029, 1034, 1036, 1037, 1039, 1040, 1047, 1054, 1055, 1056, 1060, 1063, 1064, 1065, 1066, 1069, 1071, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1085, 1086, 1087, 1089, 1091, 1092, 1093, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1111, 1113, 1114, 1121, 1125, 1127, 1134, 1135, 1136, 1141, 1145, 1148, 1149, 1150, 1154, 1157, 1158, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1184, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1197, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1209, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1236, 1240, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1297, 1299, 1300, 1302, 1303, 1306, 1311, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1331, 1332, 1333, 1334, 1335, 1336, 1342, 1343, 1344, 1345, 1346, 1349, 1353, 1355, 1356, 1357, 1358, 1360, 1361, 1363, 1364, 1366, 1367, 1368, 1370, 1372, 1373, 1379, 1380, 1387, 1388, 1389, 1394, 1397, 1398, 1410, 1412, 1415, 1416, 1417, 1444, 1445, 1449, 1454, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1468, 1469, 1474, 1475, 1479, 1480, 1482, 1488, 1489, 1491, 1492, 1493, 1495, 1497, 1499, 1506, 1507, 1508, 1511, 1517, 1519, 1522, 1523, 1524, 1525, 1526, 1527, 1529, 1533, 1536, 1543, 1545, 1546, 1548, 1550, 1556, 1557, 1565, 1566, 1567, 1568, 1576, 1578, 1579, 1580, 1616, 1617, 1622, 1623, 1624, 1625, 1627, 1628, 1630, 1633, 1634, 1635, 1636, 1637, 1640, 1641, 1642, 1644, 1647, 1648, 1649, 1651, 1652, 1655, 1656, 1664, 1665, 1666, 1667, 1668, 1669], "const_arrai": 353, "const_iter": [1622, 1625, 1626, 1629], "const_point": [143, 162, 1622, 1626, 1627], "const_refer": [143, 163, 1622, 1628], "const_reference_typ": [1063, 1071], "const_reverse_iter": [1622, 1629, 1644], "constant": [13, 165, 486, 488, 563, 740, 778, 943, 959, 960, 990, 991, 1121, 1284, 1290, 1304, 1445, 1626, 1629, 1670, 1688, 1702, 1925, 1926, 1939, 1942, 2139, 2162], "constboolsview": [1121, 1123], "constdatatypecast": [8, 353, 1184], "constexpr": [8, 38, 39, 59, 63, 70, 81, 83, 84, 87, 99, 100, 105, 110, 112, 131, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 161, 165, 166, 168, 171, 174, 195, 196, 217, 220, 221, 227, 231, 244, 245, 246, 253, 306, 318, 327, 355, 360, 361, 390, 392, 398, 416, 418, 419, 420, 421, 423, 424, 425, 465, 467, 468, 469, 470, 473, 479, 480, 486, 487, 488, 489, 490, 500, 517, 526, 562, 571, 583, 585, 586, 599, 613, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 664, 671, 683, 689, 690, 697, 698, 699, 700, 701, 710, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 833, 834, 835, 862, 865, 869, 874, 882, 892, 894, 901, 902, 903, 905, 915, 916, 917, 930, 937, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1028, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1054, 1056, 1060, 1063, 1075, 1081, 1087, 1089, 1094, 1112, 1121, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1153, 1205, 1218, 1220, 1234, 1237, 1240, 1263, 1264, 1278, 1284, 1290, 1291, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1306, 1328, 1335, 1361, 1378, 1410, 1412, 1415, 1417, 1444, 1445, 1449, 1454, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1472, 1473, 1519, 1524, 1551, 1552, 1576, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1616, 1617, 1622, 1623, 1624, 1625, 1630, 1633, 1634, 1635, 1636, 1637, 1640, 1641, 1642, 1644, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1664, 1665, 1666, 1667, 1668, 1669], "constrain": [253, 260, 263, 264, 266, 268, 309, 320, 354, 401, 402, 518, 519, 586, 672, 778, 833, 834, 845, 891, 915, 1017, 1018, 1060, 1240, 1296, 1390, 1391, 1681, 1682, 1685, 1687, 1688, 1697, 1780, 1958, 1981, 2017, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "constrainindexdomain": [354, 586], "constraint": [0, 19, 20, 39, 244, 245, 246, 253, 254, 258, 259, 260, 262, 263, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 303, 304, 305, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 398, 520, 646, 666, 672, 697, 757, 795, 798, 799, 800, 801, 805, 807, 808, 809, 810, 833, 844, 845, 846, 847, 860, 862, 864, 866, 867, 869, 870, 871, 872, 873, 891, 892, 994, 995, 996, 997, 998, 1007, 1010, 1012, 1089, 1091, 1092, 1097, 1098, 1099, 1101, 1103, 1104, 1105, 1106, 1108, 1154, 1168, 1240, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1306, 1311, 1335, 1378, 1506, 1507, 1508, 1511, 1556, 1557, 1566, 1567, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1688, 1697, 1706, 1707, 1709, 1712, 1714, 1717, 1718, 1720, 1722, 1725, 1726, 1727, 1728, 1732, 1734, 1736, 1780, 1951, 1958, 1961, 1962, 1964, 1981, 1983, 1993, 1994, 1996, 1997, 1999, 2008, 2017, 2058, 2080, 2114, 2151, 2152, 2154, 2161, 2164, 2165], "construct": [8, 18, 21, 22, 39, 41, 42, 43, 44, 45, 90, 91, 134, 135, 136, 143, 144, 146, 174, 176, 177, 178, 179, 180, 181, 196, 197, 198, 199, 200, 201, 202, 227, 230, 283, 284, 285, 286, 290, 294, 300, 301, 302, 340, 341, 365, 366, 367, 368, 369, 371, 375, 383, 384, 393, 394, 396, 426, 465, 466, 467, 468, 490, 493, 494, 512, 516, 526, 528, 529, 530, 531, 532, 533, 540, 541, 586, 588, 590, 591, 592, 593, 615, 617, 618, 619, 627, 628, 630, 631, 633, 634, 635, 636, 650, 661, 663, 664, 811, 816, 817, 862, 863, 869, 870, 871, 894, 901, 902, 903, 904, 906, 907, 908, 915, 916, 917, 924, 925, 930, 932, 933, 943, 952, 965, 968, 969, 995, 999, 1005, 1006, 1029, 1030, 1031, 1032, 1040, 1043, 1044, 1045, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1076, 1079, 1121, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1133, 1154, 1160, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1240, 1246, 1247, 1268, 1269, 1270, 1297, 1298, 1306, 1316, 1317, 1318, 1319, 1345, 1347, 1348, 1379, 1381, 1382, 1384, 1482, 1486, 1487, 1517, 1518, 1520, 1521, 1533, 1539, 1540, 1541, 1622, 1649, 1650, 1651, 1653, 1654, 1683, 1706, 1707, 1709, 1710, 1722, 1723, 1737, 1738, 1740, 1747, 1748, 1749, 1751, 1752, 1756, 1757, 1758, 1759, 1799, 1806, 1807, 1808, 1832, 1839, 1840, 1841, 1870, 1872, 1877, 1878, 1882, 1885, 1894, 1896, 1918, 1919, 1925, 1926, 1927, 1928, 1951, 1958, 1959, 1983, 1990, 2020, 2021, 2080, 2082, 2083, 2084, 2085, 2086, 2115, 2116, 2119, 2120, 2121, 2122], "constructor": [8, 259, 262, 265, 489, 632, 971, 1065, 1070, 1357, 1358, 1360, 1664, 1665, 1747], "consum": [8, 21, 526, 1278, 1293, 1379, 1702, 1777, 1788, 1909, 2097, 2162], "cont": [1622, 1651], "contain": [7, 8, 39, 43, 45, 74, 75, 79, 98, 174, 220, 226, 252, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 415, 427, 433, 435, 441, 444, 455, 456, 485, 512, 513, 518, 519, 520, 526, 539, 545, 547, 573, 586, 587, 599, 605, 609, 615, 620, 623, 627, 661, 662, 666, 671, 750, 799, 811, 815, 816, 818, 822, 824, 826, 840, 841, 843, 845, 848, 850, 853, 894, 914, 915, 918, 965, 980, 981, 990, 991, 1029, 1036, 1063, 1068, 1070, 1072, 1075, 1079, 1080, 1081, 1082, 1087, 1088, 1113, 1116, 1121, 1124, 1126, 1127, 1151, 1205, 1209, 1212, 1214, 1219, 1220, 1229, 1232, 1233, 1306, 1314, 1316, 1321, 1328, 1329, 1337, 1338, 1340, 1342, 1364, 1370, 1412, 1565, 1622, 1651, 1672, 1680, 1683, 1686, 1688, 1689, 1697, 1698, 1752, 1753, 1754, 1760, 1777, 1782, 1799, 1812, 1870, 1874, 2053, 2086, 2150, 2161, 2162, 2163, 2164], "container_kind": [355, 586, 599, 661, 671, 1205, 1212, 1214, 1219, 1220, 1229, 1233, 1412, 1668], "containerkind": [8, 19, 20, 36, 39, 40, 70, 76, 77, 98, 218, 348, 350, 355, 442, 455, 456, 551, 552, 553, 554, 556, 557, 558, 570, 577, 582, 586, 589, 594, 599, 605, 607, 615, 616, 622, 661, 663, 665, 671, 679, 681, 684, 740, 749, 750, 755, 756, 844, 845, 846, 930, 931, 990, 991, 992, 993, 1113, 1116, 1205, 1209, 1217, 1220, 1223, 1226, 1236, 1296, 1306, 1328, 1340, 1342, 1343, 1344, 1357, 1358, 1376, 1377, 1412, 1668], "containsorunbound": [362, 627], "containsparti": [80, 174, 363], "containsprefix": [364, 811], "content": [12, 36, 39, 76, 165, 174, 196, 204, 365, 399, 400, 843, 845, 846, 1121, 1150, 1188, 1205, 1210, 1214, 1659, 1690, 1702, 2151, 2161], "context": [3, 8, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 891, 1063, 1154, 1157, 1159, 1161, 1162, 1166, 1173, 1262, 1474, 1475, 1476, 1477, 1478, 1479, 1495, 1504, 1533, 1536, 1538, 1542, 1544, 1546, 1548, 1551, 1552, 1553, 1554, 1565, 1617, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1777, 1788, 1884, 1891, 1892, 1899, 1902, 1904, 1905, 1906, 1910, 1913, 1985, 1991, 2017, 2019, 2025, 2026, 2027, 2028, 2029, 2034, 2035, 2042, 2047, 2058, 2065, 2069, 2070, 2107, 2111, 2114, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2165], "context_a": [1884, 1985], "context_b": [1884, 1985], "context_binding_mod": [1551, 1554], "context_binding_st": [1154, 1166, 1474, 1479, 1533, 1546], "contextbindingmod": [365, 390, 1159, 1262, 1476, 1495, 1538, 1551, 1552, 1554, 1617], "contextbindingst": [365, 391, 1154, 1166, 1474, 1479, 1533, 1546], "contextresourc": [0, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "contigu": [8, 16, 18, 39, 43, 45, 392, 393, 416, 557, 558, 693, 694, 695, 755, 756, 843, 964, 1205, 1212, 1622, 1670, 1752, 2051], "contiguous_layout": [352, 392, 393, 394, 395, 396, 397, 559, 560, 741, 757, 796, 961, 1110, 1111, 1410, 1604], "contiguouslayoutord": [8, 18, 39, 43, 45, 352, 392, 393, 559, 560, 757, 833, 835, 961, 1011, 1013, 1015, 1110, 1205, 1297, 1298, 1410, 1604], "contiguouslayoutpermut": [253, 300, 352, 393, 394, 395, 396, 757, 1205], "continu": [903, 1900, 1901, 1903], "contrast": [1565, 1697, 2162], "contribut": [990, 991, 1696], "control": [1692, 2069], "conveni": [3, 5, 19, 39, 108, 430, 432, 435, 443, 832, 1063, 1113, 1114, 1181, 1205, 1482, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1691, 1696, 1697, 1699, 1700, 1701, 2029], "convent": [1664, 1665], "convers": [8, 39, 46, 111, 114, 115, 116, 174, 175, 182, 196, 203, 248, 249, 400, 416, 425, 495, 661, 665, 700, 703, 710, 743, 758, 764, 765, 845, 1063, 1089, 1181, 1204, 1205, 1217, 1240, 1248, 1306, 1320, 1321, 1664, 1665, 1671, 2019, 2025, 2163], "convert": [6, 8, 18, 39, 40, 42, 43, 44, 45, 74, 75, 98, 99, 110, 111, 143, 145, 174, 178, 180, 227, 228, 234, 236, 248, 249, 253, 269, 283, 286, 359, 363, 365, 371, 377, 390, 393, 395, 415, 416, 465, 476, 477, 478, 490, 526, 533, 584, 586, 589, 594, 615, 616, 626, 649, 657, 665, 679, 695, 699, 700, 743, 744, 745, 747, 748, 751, 752, 754, 760, 763, 764, 765, 771, 772, 773, 774, 778, 790, 791, 843, 845, 862, 865, 887, 894, 895, 918, 930, 931, 1063, 1065, 1070, 1076, 1079, 1106, 1154, 1178, 1187, 1203, 1205, 1225, 1228, 1240, 1246, 1248, 1284, 1290, 1291, 1304, 1305, 1306, 1343, 1344, 1345, 1356, 1357, 1358, 1359, 1360, 1417, 1445, 1495, 1622, 1652, 1671, 1673, 1681, 1685, 1702, 1706, 1707, 1719, 1722, 1733, 1734, 1737, 1739, 1788, 1789, 1804, 1882, 1891, 1892, 1913, 1951, 1958, 1976, 1981, 1983, 2011, 2017, 2030, 2032, 2033, 2035, 2048, 2058, 2066, 2069, 2080, 2091, 2107, 2110, 2111, 2151, 2162], "converttocontiguouslayoutpermut": [393, 397], "cooper": [1697, 1702, 2147], "coordin": [8, 585, 1697, 1702, 1777, 2147, 2162], "copi": [0, 13, 21, 32, 72, 79, 80, 108, 174, 190, 196, 204, 244, 398, 399, 400, 401, 405, 406, 412, 413, 415, 416, 468, 540, 586, 661, 693, 841, 843, 845, 846, 847, 848, 853, 854, 857, 966, 1011, 1012, 1021, 1022, 1113, 1114, 1152, 1205, 1236, 1240, 1306, 1317, 1329, 1330, 1342, 1359, 1376, 1377, 1378, 1390, 1393, 1394, 1396, 1465, 1466, 1480, 1482, 1688, 1689, 1699, 1869, 1870, 1873, 1882, 1884, 1889, 1906, 1908, 1951, 1953, 1961, 1963, 1983, 1985, 1995, 2025, 2053, 2069, 2097, 2102, 2107, 2162], "copied_el": [406, 408, 1021, 1022, 1394, 1396], "copy_futur": [398, 1378, 1379, 1381, 1386], "copyarrai": [39, 399, 1113], "copyconvertedarrai": [39, 400], "copyopt": [398, 401, 402, 403, 404, 405, 1240], "copyprogress": [398, 406, 407, 408, 409, 410, 411, 412, 413, 414], "copyprogressfunct": [398, 401, 404, 406, 413, 414], "copyrangeopt": [1465, 1466, 1467, 1480, 1482], "copytransformedarrai": [415, 1306], "cord": [1482, 1517, 1521, 1529, 1532, 1564], "core": [0, 1686, 1687, 1690, 1699, 2162], "coroutin": [1789, 1798, 2161], "correct": 1697, "correctli": 1688, "correspond": [143, 174, 247, 253, 255, 256, 315, 351, 371, 380, 382, 392, 393, 416, 427, 430, 431, 432, 433, 435, 441, 443, 451, 453, 459, 484, 490, 507, 518, 519, 520, 527, 559, 563, 574, 575, 582, 597, 605, 627, 631, 632, 661, 666, 668, 670, 694, 734, 735, 740, 799, 811, 820, 851, 869, 872, 884, 888, 891, 963, 990, 994, 1063, 1089, 1100, 1103, 1109, 1188, 1196, 1205, 1225, 1228, 1238, 1304, 1305, 1306, 1319, 1337, 1338, 1372, 1379, 1416, 1417, 1482, 1491, 1565, 1613, 1681, 1682, 1683, 1684, 1685, 1688, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1709, 1720, 1722, 1734, 1768, 1773, 1777, 1778, 1788, 1789, 1812, 1817, 1818, 1831, 1866, 1946, 1958, 1964, 1980, 1981, 2016, 2017, 2020, 2038, 2064, 2097, 2108, 2109, 2112, 2113, 2114, 2131, 2132, 2133, 2140, 2141, 2142, 2143, 2144, 2145, 2151, 2152, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2164, 2165], "corrupt": [892, 1679, 1681, 1682, 1684, 1685, 2017, 2058, 2151], "cosh": [110, 1414], "cosin": [110, 1404, 1405, 1413, 1414], "cost": [661, 951, 1688, 2059], "could": [38, 490], "count": [108, 365, 427, 526, 661, 886, 951, 1121, 1148, 1359, 1622, 1635, 1636, 1640, 1641, 1654, 1655, 1656, 1697, 1817, 2114, 2154], "cover": [563, 1690], "cpu": [0, 1686, 1689, 1690, 1699], "crash": [1689, 1690, 2069], "crbegin": [1622, 1644], "crc": [1685, 1697], "crc32c": [1685, 1697, 1700], "crc32c_checksum": 1697, "creat": [8, 131, 132, 253, 365, 367, 389, 427, 526, 540, 836, 837, 838, 839, 850, 892, 981, 983, 984, 1089, 1103, 1154, 1205, 1262, 1278, 1280, 1283, 1284, 1294, 1373, 1374, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1687, 1689, 1697, 1702, 1703, 1704, 1740, 1743, 1744, 1746, 1780, 1788, 1869, 1892, 1910, 1913, 1918, 1919, 1922, 1923, 1946, 1947, 1964, 1983, 2005, 2017, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2071, 2114, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "creation": 1697, "credenti": [0, 365, 1691, 1698, 1702, 1740, 2163], "credentials_fil": 1698, "crend": [1622, 1644], "criteria": 740, "crlf": 1692, "cross": 1689, "crt": [1686, 1691, 1692], "curl": [1689, 1691, 1692], "curlopt_low_speed_limit": 1686, "curlopt_low_speed_tim": 1686, "current": [0, 8, 110, 512, 526, 542, 696, 836, 838, 861, 1060, 1262, 1268, 1278, 1293, 1504, 1512, 1516, 1559, 1563, 1618, 1677, 1684, 1688, 1697, 1780, 1788, 1900, 1901, 1903, 1908, 1912, 2019, 2025, 2051, 2053, 2069, 2070, 2071, 2161, 2163], "custom": 1695, "cv": [1063, 1417], "cvref": [174, 746], "cxx": 1689, "cyclic": 1703, "d": [8, 174, 249, 431, 820, 821, 1184, 1622, 1697, 1702, 1752, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1801, 1802, 1819, 1821, 1828, 1829, 1830, 1831, 1833, 1834, 1835, 1836, 1853, 1854, 1863, 1864, 1865, 1866, 1952, 1955, 1968, 1969, 1977, 1978, 1979, 1980, 1984, 1987, 2001, 2002, 2011, 2012, 2013, 2014, 2015, 2016, 2024, 2027, 2031, 2043, 2044, 2061, 2062, 2063, 2064, 2115, 2116, 2139, 2150, 2162, 2163], "d_dynam": 1184, "d_int": 1184, "d_static": 1184, "dask": 2162, "data": [0, 19, 36, 41, 43, 45, 47, 54, 56, 61, 62, 64, 76, 79, 80, 88, 101, 104, 108, 219, 247, 248, 249, 303, 365, 400, 405, 415, 416, 418, 419, 420, 423, 424, 425, 427, 465, 468, 470, 490, 491, 494, 497, 499, 500, 503, 504, 505, 525, 561, 569, 695, 758, 786, 805, 808, 845, 860, 891, 892, 1037, 1042, 1043, 1048, 1049, 1051, 1053, 1056, 1095, 1101, 1102, 1105, 1106, 1113, 1114, 1115, 1152, 1154, 1169, 1184, 1236, 1243, 1254, 1255, 1280, 1294, 1296, 1307, 1312, 1323, 1340, 1341, 1342, 1343, 1344, 1357, 1358, 1359, 1360, 1393, 1416, 1417, 1420, 1424, 1425, 1426, 1516, 1563, 1630, 1651, 1653, 1670, 1671, 1672, 1679, 1680, 1687, 1690, 1692, 1693, 1695, 1696, 1699, 1700, 1883, 1885, 1886, 1887, 1889, 1890, 1899, 1902, 1904, 1906, 1908, 1912, 1918, 1919, 1923, 1950, 1951, 1958, 1966, 1981, 1983, 1998, 2017, 2020, 2022, 2023, 2028, 2030, 2032, 2033, 2034, 2037, 2040, 2041, 2048, 2051, 2053, 2058, 2059, 2066, 2069, 2092, 2093, 2094, 2095, 2096, 2107, 2108, 2109, 2110, 2111, 2114, 2119, 2120, 2121, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2145, 2151, 2152, 2154, 2155, 2158, 2160, 2161, 2162, 2164, 2165], "data_arrai": 1280, "data_copy_concurr": [0, 365, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1696, 1697, 1698, 1699, 1700, 1701, 1777, 1788, 1991, 2019, 2026, 2027, 2028, 2029, 2034, 2035, 2047, 2058, 2065, 2107, 2111, 2114, 2150, 2151, 2152, 2154, 2161, 2162, 2163], "data_encod": [1682, 1696, 2151, 2163], "data_file_id": 1697, "data_file_length": 1697, "data_file_offset": 1697, "data_file_t": 1697, "data_typ": [16, 17, 247, 353, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 489, 511, 561, 762, 786, 1037, 1183, 1184, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1581, 1588, 1594, 1597, 1613, 1667, 1682, 1685], "data_type_convers": 758, "dataabc": [1883, 1899], "databas": [1687, 1697, 1702, 2147, 2150], "datacopyconcurrencyresourc": 365, "dataset": [1681, 1690, 1691, 1695, 1698, 1703, 1788, 1891, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2039, 2040, 2046, 2047, 2048, 2050, 2051, 2053, 2058, 2065, 2066, 2069, 2070], "dataset_3d": 2163, "dataset_futur": 2163, "datatyp": [8, 16, 39, 47, 66, 247, 248, 249, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 490, 491, 500, 561, 786, 801, 802, 805, 808, 845, 1089, 1094, 1095, 1105, 1154, 1169, 1183, 1184, 1240, 1243, 1254, 1306, 1307, 1325, 1416, 1417, 1613, 1681, 1685, 1998, 2026, 2027, 2070, 2151, 2163], "datatypeconversionflag": [416, 425, 758, 1581, 1588, 1594, 1597], "date": [1689, 1692], "datetim": 1684, "dav1d": 1689, "dcheck": [12, 23, 26, 27, 28, 30, 32, 74, 75, 79, 80, 153, 154, 178, 190, 199, 204, 213, 226, 234, 370, 468, 479, 527, 531, 536, 545, 559, 560, 563, 579, 597, 608, 609, 666, 668, 670, 686, 741, 856, 858, 914, 940, 943, 953, 954, 964, 972, 975, 976, 990, 1032, 1127, 1133, 1145, 1211, 1213, 1214, 1216, 1224, 1228, 1236, 1624, 1635, 1636, 1637, 1640, 1641, 1642, 1650, 1654], "dcmake_": 1689, "deadlin": [21, 28, 1794, 1797, 2104, 2106], "deadlock": [542, 1703, 1789, 1912, 2051, 2054, 2069, 2151, 2161], "debian": 1689, "debug": [100, 107, 220, 225, 406, 410, 483, 685, 811, 831, 894, 913, 1021, 1024, 1056, 1060, 1181, 1188, 1189, 1201, 1268, 1274, 1394, 1398, 1517, 1519, 1527, 1528, 1605, 1609, 1610, 1689], "debugstr": [1188, 1189], "decim": 1349, "decl": [2, 3, 5, 1063], "decod": [0, 340, 1089, 1685, 1687, 1697, 1699, 1700, 1702, 1737, 2164], "decreas": 1697, "decrement": [110, 126, 128, 143, 157, 159, 227, 240, 699, 723, 725], "decrypt": 1686, "deep": [174, 196], "deepassign": [174, 196, 204], "def": [1789, 2161], "default": [0, 8, 12, 13, 16, 18, 33, 39, 41, 90, 91, 227, 229, 260, 271, 278, 365, 367, 368, 369, 370, 371, 373, 390, 430, 432, 435, 437, 443, 454, 460, 461, 489, 584, 632, 661, 846, 847, 852, 862, 891, 892, 915, 943, 958, 1011, 1013, 1015, 1063, 1077, 1089, 1154, 1161, 1181, 1186, 1205, 1210, 1238, 1262, 1277, 1294, 1296, 1474, 1476, 1477, 1495, 1504, 1507, 1509, 1510, 1512, 1516, 1533, 1538, 1542, 1556, 1558, 1559, 1563, 1569, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1696, 1697, 1698, 1699, 1700, 1701, 1740, 1745, 1747, 1748, 1749, 1756, 1757, 1758, 1776, 1777, 1789, 1806, 1832, 1837, 1839, 1869, 1892, 1910, 1913, 1951, 1956, 1983, 1988, 2017, 2019, 2028, 2032, 2058, 2107, 2114, 2115, 2150, 2151, 2152, 2154, 2161, 2162, 2164], "default_init": [17, 18, 19, 20, 39, 416, 489, 1415], "default_valu": [517, 585, 1063, 1087], "defaultspec": [371, 373, 376], "defer": [8, 23, 131, 134, 137, 139, 526, 527, 966, 1703, 2162], "defin": [0, 8, 131, 247, 249, 253, 259, 262, 265, 427, 507, 586, 606, 778, 801, 847, 991, 1184, 1345, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1690, 1691, 1692, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1777, 1799, 1951, 2108, 2161, 2162, 2164], "definit": [518, 519, 520, 1155, 1241], "del": [1703, 1900], "delai": [1691, 1692, 1698, 1703], "delet": [16, 426, 427, 892, 1056, 1188, 1468, 1469, 1482, 1565, 1679, 1681, 1682, 1684, 1685, 1690, 1691, 1697, 1698, 1869, 1900, 1903, 1907, 1917, 1918, 1919, 1923, 2017, 2053, 2058, 2151], "delete_exist": [892, 1280, 1294, 1679, 1681, 1682, 1684, 1685, 1703, 1918, 1919, 1923, 2005, 2017, 2058, 2070, 2151, 2163], "delete_rang": [1869, 1907], "deletecommit": [1468, 1482], "deleterang": [1469, 1482], "demand": [1683, 2114, 2152, 2154], "demonstr": 2163, "denot": 2162, "dens": 563, "densiti": [1684, 1685], "dep": 1689, "depend": [39, 247, 521, 563, 672, 860, 915, 960, 1089, 1184, 1280, 1304, 1311, 1685, 1686, 1690, 1691, 1692, 1697, 1698, 1703, 1777, 1908, 2020, 2051, 2053, 2069, 2107, 2162, 2165], "deprec": [1684, 2162], "depth": 1673, "derefer": [227, 237], "deriv": [1188, 1195, 1697, 2080, 2089], "descend": [393, 1110, 1111], "describ": [8, 484, 1063, 1250, 1683, 1684, 1688, 1693, 1697, 1702, 1706, 1707], "design": 1788, "desir": [253, 258, 1103, 1262, 1697, 1964], "despit": [860, 1311, 1469, 1697], "dest": [39, 244, 245, 246, 398, 399, 400, 415, 490, 763, 764, 765, 1012, 1306, 1378], "dest_arrai": 1306, "destel": [39, 744], "destin": 415, "destoriginkind": [39, 744], "destrank": [39, 744], "destresult": [415, 1306], "destroi": [16, 426, 526, 1063], "destroyandfre": [416, 426], "destructor": [540, 1703], "destt": [526, 771], "detail": [253, 458, 483, 525, 1345, 1470, 1505, 1551, 1555, 1685, 1686, 1687, 1689, 1691, 1692, 1698, 2134, 2135, 2136, 2137, 2138], "detect": [433, 435, 441, 1685, 1686, 1698], "determin": [0, 8, 39, 108, 253, 260, 263, 398, 490, 586, 605, 661, 689, 690, 697, 744, 760, 798, 799, 891, 1011, 1012, 1055, 1059, 1089, 1113, 1114, 1154, 1168, 1240, 1250, 1262, 1263, 1264, 1287, 1306, 1335, 1378, 1495, 1679, 1681, 1683, 1688, 1696, 1697, 1698, 1702, 1801, 1835, 1869, 1950, 2020, 2151, 2164], "determinist": 1672, "dev": 1689, "develop": 1691, "deviat": [2080, 2164], "dexpr": 2162, "diagon": [427, 431, 563, 860, 1306, 1776, 1778, 2115], "dict": 2127, "did": [1794, 1797], "differ": [8, 110, 143, 148, 196, 227, 232, 353, 507, 540, 542, 684, 892, 924, 926, 930, 935, 986, 1007, 1106, 1181, 1188, 1193, 1622, 1672, 1679, 1681, 1682, 1684, 1685, 1688, 1692, 1693, 1697, 1698, 1781, 1787, 1788, 1856, 1867, 1912, 1958, 1971, 1981, 1982, 2004, 2017, 2018, 2047, 2048, 2055, 2058, 2065, 2066, 2114, 2151, 2152, 2154, 2155, 2160, 2161], "difference_typ": [143, 148, 227, 232, 924, 926, 930, 935, 1622, 1631], "digit": 1697, "dim": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 478, 569, 586, 605, 609, 1240, 1306, 1702, 1732, 1736, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1799, 1801, 1803, 1807, 1835, 1839, 1862, 1925, 1927, 1930, 2139], "dim_express": [15, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 478, 485, 773], "dimens": [8, 12, 15, 39, 45, 79, 80, 90, 92, 94, 95, 96, 97, 174, 190, 196, 213, 253, 260, 266, 269, 270, 282, 352, 354, 393, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 458, 459, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 478, 480, 481, 482, 484, 485, 563, 570, 575, 578, 585, 586, 596, 597, 600, 601, 602, 608, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 624, 661, 662, 667, 668, 669, 670, 672, 673, 675, 676, 678, 693, 694, 695, 735, 740, 766, 767, 841, 842, 846, 847, 848, 849, 869, 871, 872, 875, 876, 877, 884, 885, 886, 887, 888, 930, 940, 943, 954, 960, 990, 991, 1011, 1089, 1091, 1103, 1111, 1113, 1154, 1167, 1205, 1215, 1231, 1236, 1238, 1240, 1252, 1304, 1305, 1306, 1327, 1343, 1344, 1372, 1460, 1672, 1684, 1687, 1688, 1702, 1706, 1707, 1709, 1716, 1720, 1722, 1730, 1732, 1734, 1736, 1752, 1756, 1757, 1758, 1759, 1774, 1776, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1800, 1802, 1803, 1804, 1806, 1807, 1809, 1813, 1814, 1817, 1819, 1820, 1821, 1824, 1828, 1829, 1830, 1831, 1832, 1833, 1836, 1839, 1844, 1845, 1849, 1853, 1854, 1863, 1864, 1865, 1866, 1867, 1925, 1928, 1951, 1952, 1954, 1955, 1958, 1964, 1968, 1969, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1986, 1987, 1996, 2001, 2002, 2003, 2007, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2024, 2026, 2027, 2031, 2038, 2043, 2044, 2050, 2061, 2062, 2063, 2064, 2065, 2066, 2070, 2080, 2084, 2114, 2115, 2116, 2146, 2151, 2152, 2154, 2161, 2163], "dimension": [8, 16, 39, 108, 174, 196, 416, 585, 800, 1113, 1114, 1205, 1240, 1672, 1685, 1687, 1688, 1702, 1777, 1799, 2019, 2162], "dimension_identifi": [459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 484, 884, 885, 886, 887, 888, 889], "dimension_index_buff": 474, "dimension_nam": 1685, "dimension_separ": [1684, 2019, 2028, 2029, 2035, 2047, 2058, 2065, 2151], "dimension_set": 475, "dimension_unit": [476, 477, 876, 1089, 1103, 1154, 1167, 1240, 1252, 1304, 1305, 1681, 1682, 1683, 1685, 1951, 1958, 1964, 1981, 1983, 1996, 2017, 2019, 2038, 2114, 2151, 2152, 2154, 2161, 2164], "dimensionid": [427, 478], "dimensionidentifi": [427, 465, 466, 467, 468, 469, 470, 471, 472, 478, 885], "dimensionindex": [8, 12, 19, 20, 36, 39, 40, 45, 58, 76, 77, 87, 108, 174, 190, 195, 196, 213, 217, 218, 249, 253, 271, 280, 300, 302, 331, 348, 350, 359, 363, 393, 395, 396, 397, 427, 435, 438, 442, 453, 455, 456, 458, 459, 460, 461, 464, 465, 467, 469, 473, 474, 478, 482, 484, 485, 486, 487, 488, 551, 552, 553, 554, 555, 556, 557, 558, 562, 564, 570, 577, 578, 579, 580, 582, 586, 587, 589, 591, 593, 594, 597, 605, 607, 608, 609, 613, 625, 626, 661, 662, 663, 665, 668, 670, 679, 681, 684, 686, 689, 690, 691, 693, 694, 695, 697, 698, 740, 741, 744, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 772, 778, 779, 796, 797, 844, 845, 846, 881, 883, 884, 885, 886, 887, 890, 891, 924, 926, 930, 931, 935, 937, 940, 943, 954, 961, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1039, 1110, 1111, 1113, 1114, 1116, 1117, 1154, 1174, 1185, 1186, 1187, 1205, 1209, 1212, 1217, 1223, 1226, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1246, 1248, 1257, 1264, 1267, 1296, 1306, 1335, 1339, 1340, 1341, 1342, 1343, 1344, 1357, 1358, 1371, 1376, 1377, 1445, 1463, 1622], "dimensionindexbuff": [427, 442, 455, 456, 459, 474, 484, 884, 888, 889], "dimensionless": [1345, 1681, 2080, 2164], "dimensionset": [8, 266, 282, 475, 586, 600, 601, 661, 672, 673, 869, 871, 872, 990, 991, 1376, 1377], "dimensionunit": [1089, 1091, 1094, 1103], "dimensionunitstostr": [476, 477], "dimensionunitsvector": [477, 876, 1089, 1154, 1167, 1240, 1252, 1304, 1305], "dimexpress": [8, 15, 34, 35, 253, 254, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 478, 485, 518, 519, 520, 605, 681, 778, 1089, 1090, 1154, 1155, 1158, 1240, 1241, 1306, 1702, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1800, 1802, 1819, 1821, 1828, 1829, 1830, 1831, 1832, 1833, 1836, 1853, 1854, 1863, 1864, 1865, 1866, 1951, 1952, 1955, 1968, 1969, 1977, 1978, 1979, 1980, 1983, 1984, 1987, 2001, 2002, 2013, 2014, 2015, 2016, 2019, 2024, 2027, 2031, 2043, 2044, 2061, 2062, 2063, 2064, 2115, 2162], "dimrang": [427, 458], "dimrangespec": [427, 458, 459, 460, 461, 462, 463, 464, 484, 485, 884], "dimselectionlik": [1776, 1786, 1799, 1804, 1831, 1832, 1866, 1951, 1980, 1983, 2016, 2019, 2064, 2115, 2116], "direct": [249, 1697, 1777], "direct_entri": 1697, "direct_valu": 1697, "direct_value_length": 1697, "directli": [0, 371, 527, 542, 672, 970, 1063, 1068, 1203, 1306, 1472, 1533, 1664, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1690, 1691, 1692, 1697, 1698, 1817, 1832, 1883, 1899, 1993, 1994, 1996, 1997, 1999, 2008, 2030, 2031, 2032, 2033, 2048, 2066, 2080, 2161, 2162, 2164, 2165], "directori": [1686, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "directpath": 1686, "disabl": [16, 486, 488, 1507, 1509, 1510, 1556, 1558, 1569, 1679, 1681, 1682, 1684, 1685, 1686, 1698], "disallow": 459, "discard": 1063, "discrep": [605, 1801, 1835], "discrimin": [8, 1063], "disjoint": 2069, "dispatch": 39, "distanc": [143, 154], "distinct": [39, 247, 749, 750, 876, 1205], "distinguish": [1053, 1679, 1681, 1682, 1684, 1685], "distribut": [1686, 1689, 1697, 1702, 2147, 2151], "distributedcoordinatorserv": [1702, 2147, 2148, 2149], "divid": [430, 432, 443, 479, 545, 627, 1304, 1345, 1352, 2080, 2088, 2162], "dividepositiveroundout": [479, 627], "divis": [110, 117, 118, 430, 545, 699, 712, 713, 1453], "divisor": [479, 545, 546, 547, 627, 2080, 2088], "do": [263, 365, 415, 430, 432, 443, 459, 480, 518, 519, 540, 563, 799, 857, 915, 990, 1060, 1113, 1153, 1184, 1294, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1696, 1697, 1780, 2162, 2165], "do_not_us": 427, "do_read": 2161, "do_writ": 2161, "doc": [1063, 1689, 1691, 1698, 1702, 2128], "document": [212, 253, 458, 484, 845, 860, 1212, 1311, 1345, 1470, 1505, 1551, 1555, 1686, 1693, 2164, 2165], "doe": [13, 39, 43, 45, 79, 80, 108, 165, 169, 253, 264, 348, 365, 371, 372, 444, 468, 478, 490, 520, 540, 542, 543, 561, 650, 672, 693, 811, 843, 854, 892, 960, 965, 990, 991, 1063, 1109, 1113, 1114, 1188, 1194, 1203, 1256, 1304, 1345, 1359, 1476, 1495, 1504, 1507, 1509, 1538, 1566, 1569, 1659, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1692, 1697, 1698, 1747, 1777, 1779, 1782, 1783, 1784, 1785, 1788, 1817, 1819, 1830, 1831, 1832, 1853, 1865, 1866, 1968, 1979, 1980, 1993, 1994, 1996, 1997, 1999, 2000, 2001, 2005, 2008, 2015, 2016, 2017, 2028, 2042, 2043, 2058, 2059, 2063, 2064, 2069, 2080, 2107, 2108, 2151, 2162, 2164], "domain": [8, 12, 13, 14, 18, 19, 20, 36, 39, 43, 65, 74, 75, 79, 80, 100, 101, 102, 104, 174, 188, 218, 260, 266, 348, 350, 351, 354, 359, 363, 398, 415, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 480, 482, 545, 547, 548, 551, 575, 576, 577, 578, 579, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 603, 604, 605, 607, 608, 609, 614, 625, 627, 661, 662, 666, 674, 693, 735, 740, 766, 767, 798, 799, 855, 877, 915, 990, 991, 994, 1012, 1060, 1089, 1096, 1097, 1100, 1104, 1106, 1154, 1168, 1205, 1211, 1212, 1221, 1226, 1240, 1253, 1255, 1306, 1319, 1322, 1324, 1376, 1378, 1672, 1687, 1702, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1831, 1832, 1833, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1852, 1853, 1854, 1856, 1857, 1860, 1861, 1866, 1867, 1951, 1952, 1954, 1955, 1956, 1957, 1958, 1964, 1965, 1968, 1969, 1971, 1972, 1974, 1975, 1980, 1981, 1982, 1983, 1984, 1986, 1989, 1992, 1996, 1997, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2012, 2016, 2017, 2018, 2019, 2020, 2022, 2023, 2024, 2025, 2026, 2027, 2029, 2030, 2031, 2032, 2033, 2038, 2039, 2043, 2044, 2048, 2049, 2050, 2051, 2053, 2055, 2056, 2057, 2059, 2064, 2065, 2066, 2069, 2114, 2115, 2139, 2146, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "domainalignmentopt": [8, 12, 13, 14, 398, 401, 402, 480, 1012, 1017, 1018, 1378, 1390, 1391, 1582, 1589, 1598], "don": [1372, 1689, 1918, 1919, 1921], "done": [526, 1106, 1204, 1687, 1689, 1691, 1782, 1788, 1789, 1793, 1946, 1948, 1949, 1958, 1981, 2017, 2097, 2103, 2151, 2162], "done_indicator_arrai": 1280, "dosometh": 6, "dot": 1684, "dothestuff": 1063, "doubl": [8, 253, 259, 260, 1345, 1348, 1351, 1352, 1354, 1426, 1685, 1686, 1698, 1702, 2080, 2133, 2164, 2165], "doubling_tim": [1691, 1698], "download": 1689, "downsampl": [481, 482, 483, 1679, 1702, 1992, 2035, 2117, 2118, 2165], "downsample_factor": [8, 481, 482, 1672, 1702, 1992, 2035, 2117, 2118], "downsample_method": [8, 481, 482, 483, 1605, 1672, 1992, 2035], "downsampled_spec": 1992, "downsamplemethod": [8, 481, 482, 483, 1605, 1672, 2117, 2118], "driver": [0, 8, 253, 260, 263, 340, 365, 891, 1049, 1051, 1053, 1089, 1103, 1154, 1168, 1172, 1176, 1193, 1240, 1252, 1256, 1261, 1470, 1471, 1472, 1474, 1482, 1487, 1490, 1493, 1494, 1505, 1533, 1540, 1541, 1547, 1549, 1686, 1687, 1702, 1703, 1737, 1777, 1780, 1788, 1869, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1915, 1916, 1917, 1951, 1962, 1964, 1983, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2007, 2008, 2011, 2012, 2017, 2018, 2019, 2020, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2080, 2110, 2111, 2114, 2150, 2151, 2152, 2154, 2162, 2163, 2164, 2165], "driveropenopt": [1470, 1505, 1533], "driverptr": [8, 1470, 1471, 1482, 1487, 1490, 1533], "driverspecopt": [1472, 1473, 1474, 1476, 1533, 1551, 1552, 1555], "driverspecptr": [1474, 1475, 1476, 1477, 1478, 1479, 1533, 1540, 1541, 1547], "drop": [13, 416, 1688, 2069], "dtensorstore_use_system_": 1689, "dtensorstore_use_system_curl": 1689, "dtensorstore_use_system_zlib": 1689, "dtype": [8, 18, 19, 20, 39, 66, 248, 415, 482, 490, 494, 500, 801, 808, 1089, 1095, 1105, 1154, 1169, 1240, 1248, 1252, 1254, 1255, 1306, 1325, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1702, 1703, 1777, 1780, 1788, 1951, 1953, 1958, 1959, 1960, 1963, 1966, 1973, 1976, 1981, 1983, 1992, 1995, 1997, 1998, 1999, 2008, 2017, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2046, 2047, 2048, 2050, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2145, 2151, 2152, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165], "dtype_t": [17, 18, 19, 20, 39, 47, 416, 490, 491, 845, 1184, 1240, 1243, 1306, 1307, 1416, 1417, 1613], "dtype_v": [17, 18, 19, 20, 39, 416, 561, 845, 1417], "dual": 1664, "due": [646, 800, 811, 990, 1294, 1682, 1690, 1696, 1700, 1703, 1912], "dummi": 431, "dump": [1702, 2150], "duplic": [1779, 1819, 1853, 1968, 2001, 2043, 2162], "durabl": [1294, 1379, 1687, 1900, 1903, 1907, 1908, 1917, 2069, 2097], "durat": [21, 27, 1697], "dynam": [8, 39, 47, 55, 174, 184, 196, 208, 249, 473, 485, 486, 487, 488, 490, 491, 586, 595, 881, 891, 1028, 1185, 1205, 1208, 1240, 1243, 1245, 1263, 1306, 1313, 1445, 1600, 1622, 1635, 1640, 1655, 1665, 1686], "dynamic_ext": [1444, 1622, 1635, 1640, 1649, 1650, 1653, 1654, 1655, 1656], "dynamic_rank": [33, 39, 42, 87, 108, 174, 177, 195, 196, 198, 217, 218, 219, 253, 331, 393, 458, 473, 485, 486, 487, 488, 562, 570, 586, 609, 613, 625, 661, 689, 690, 691, 692, 697, 757, 778, 779, 795, 883, 890, 891, 924, 930, 943, 995, 996, 1005, 1007, 1009, 1089, 1108, 1113, 1114, 1116, 1117, 1154, 1158, 1174, 1181, 1185, 1186, 1205, 1210, 1234, 1235, 1238, 1239, 1240, 1264, 1267, 1277, 1306, 1315, 1322, 1335, 1339, 1340, 1341, 1344, 1370, 1445], "dynamicdim": [427, 485], "dynamicdimspec": [427, 478, 484, 485, 888, 889], "dynamicrank": [473, 486, 487, 488, 995, 1005, 1445], "e": [8, 13, 18, 39, 40, 45, 75, 80, 110, 165, 174, 253, 315, 318, 355, 359, 363, 365, 416, 420, 425, 427, 428, 430, 432, 434, 436, 443, 444, 445, 447, 451, 453, 478, 481, 482, 485, 526, 542, 593, 609, 672, 758, 811, 841, 842, 845, 846, 848, 849, 862, 867, 876, 879, 894, 906, 986, 1039, 1089, 1125, 1127, 1154, 1186, 1188, 1194, 1195, 1225, 1228, 1236, 1240, 1255, 1262, 1342, 1343, 1357, 1358, 1446, 1448, 1512, 1516, 1559, 1563, 1572, 1574, 1665, 1681, 1682, 1684, 1685, 1686, 1688, 1690, 1691, 1697, 1702, 1722, 1727, 1734, 1775, 1777, 1782, 1783, 1784, 1785, 1801, 1805, 1828, 1829, 1830, 1835, 1863, 1864, 1865, 1908, 1912, 1913, 1961, 1977, 1978, 1979, 2013, 2014, 2015, 2051, 2058, 2061, 2062, 2063, 2070, 2142, 2161, 2162, 2164, 2165], "each": [0, 8, 13, 90, 92, 94, 95, 174, 253, 260, 266, 351, 359, 363, 398, 427, 430, 432, 433, 434, 435, 436, 441, 443, 444, 445, 447, 453, 477, 478, 481, 482, 484, 575, 586, 600, 601, 605, 610, 612, 661, 672, 673, 735, 798, 799, 801, 847, 876, 877, 889, 990, 991, 994, 1011, 1012, 1055, 1059, 1089, 1103, 1113, 1188, 1205, 1304, 1305, 1378, 1672, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1692, 1694, 1696, 1697, 1698, 1709, 1720, 1747, 1779, 1780, 1782, 1783, 1784, 1785, 1799, 1806, 1813, 1814, 1817, 1819, 1820, 1821, 1828, 1829, 1830, 1831, 1832, 1839, 1844, 1845, 1849, 1853, 1854, 1863, 1864, 1865, 1866, 1951, 1958, 1961, 1964, 1968, 1969, 1977, 1978, 1979, 1980, 1981, 1983, 1996, 2001, 2002, 2013, 2014, 2015, 2016, 2017, 2019, 2020, 2025, 2038, 2043, 2044, 2058, 2061, 2062, 2063, 2064, 2114, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "earlier": [1689, 1697], "earliest": 1697, "easili": 2162, "ec": 1698, "ec2": 1698, "edu": 1345, "effect": [390, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 526, 542, 605, 661, 681, 693, 694, 695, 836, 838, 886, 915, 918, 993, 1029, 1154, 1164, 1165, 1167, 1168, 1170, 1175, 1186, 1278, 1279, 1280, 1282, 1343, 1683, 1688, 1697, 1777, 1801, 1835, 1892, 1913, 1983, 1993, 1994, 1996, 1997, 1999, 2008, 2017, 2058, 2072, 2075, 2162], "effective_interv": [915, 918], "effici": [79, 80, 318, 526, 563, 798, 799, 1240, 1250, 1359, 1672, 1682, 1685, 1687, 1688, 1697, 1702, 1703, 1706, 1731, 1732, 1735, 1736, 2069, 2070, 2164, 2165], "effort": 1689, "eigen": 110, "either": [8, 39, 54, 174, 247, 260, 270, 362, 365, 371, 427, 490, 497, 512, 526, 540, 583, 585, 627, 736, 740, 758, 778, 836, 876, 877, 878, 963, 1029, 1032, 1040, 1043, 1070, 1079, 1089, 1113, 1205, 1282, 1290, 1306, 1372, 1469, 1678, 1679, 1681, 1682, 1684, 1685, 1688, 1689, 1691, 1702, 1752, 1801, 1804, 1831, 1835, 1866, 1980, 2016, 2030, 2031, 2032, 2033, 2048, 2053, 2064, 2066, 2069, 2070, 2078, 2115, 2151, 2162], "element": [8, 16, 17, 18, 19, 20, 39, 43, 47, 48, 49, 50, 52, 53, 54, 56, 57, 60, 61, 62, 64, 66, 67, 71, 74, 75, 76, 79, 80, 85, 86, 89, 90, 93, 95, 97, 101, 108, 165, 173, 174, 178, 196, 207, 227, 243, 247, 249, 253, 260, 261, 262, 263, 267, 269, 271, 273, 277, 283, 284, 288, 290, 293, 297, 308, 311, 315, 319, 323, 334, 338, 353, 393, 399, 406, 407, 408, 411, 412, 416, 426, 482, 490, 491, 494, 496, 497, 498, 499, 501, 507, 508, 510, 586, 603, 626, 692, 749, 750, 756, 758, 762, 763, 764, 765, 785, 789, 798, 799, 800, 841, 842, 844, 846, 847, 848, 849, 853, 854, 881, 890, 891, 944, 947, 963, 964, 1011, 1012, 1021, 1022, 1025, 1037, 1054, 1112, 1113, 1114, 1115, 1116, 1117, 1183, 1184, 1205, 1206, 1207, 1212, 1219, 1222, 1229, 1233, 1236, 1239, 1240, 1243, 1244, 1246, 1248, 1255, 1267, 1296, 1297, 1303, 1306, 1307, 1308, 1309, 1310, 1311, 1319, 1323, 1325, 1326, 1337, 1338, 1340, 1341, 1342, 1357, 1358, 1359, 1360, 1394, 1395, 1396, 1399, 1416, 1417, 1612, 1613, 1622, 1623, 1624, 1627, 1628, 1630, 1632, 1635, 1636, 1637, 1640, 1641, 1642, 1643, 1645, 1657, 1671, 1672, 1682, 1685, 1706, 1707, 1709, 1713, 1714, 1720, 1722, 1727, 1728, 1733, 1734, 1777, 1799, 1826, 1832, 1861, 1951, 1975, 1983, 1991, 2010, 2019, 2020, 2022, 2023, 2053, 2057, 2059, 2162, 2164], "element_point": [9, 10, 11, 39, 41, 42, 43, 44, 45, 67, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 743, 759, 760, 761, 785, 788, 944, 947, 963, 1112, 1115, 1306, 1311, 1319, 1322, 1326, 1359, 1360], "element_s": [558, 756, 1205], "element_strid": [352, 693, 694, 695, 1205, 1212], "element_trait": [38, 763, 764, 765], "element_typ": [8, 165, 173, 227, 233, 490, 501, 784, 1613, 1622, 1632, 1635, 1636, 1640, 1641, 1655], "elementiniti": [16, 17, 18, 19, 20, 39, 416, 489, 1415, 1667], "elementpoint": [8, 9, 39, 40, 42, 43, 44, 45, 46, 48, 49, 54, 67, 108, 353, 416, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 759, 760, 1037, 1115, 1306, 1308, 1309, 1312, 1316, 1317, 1319, 1320, 1321, 1326, 1329, 1359, 1360], "elements_soft_constraint": [1707, 1709, 1714, 1720, 1722, 1734, 2164], "elementsar": [266, 282, 300, 442, 1252], "elementtag": [9, 39, 50, 57, 58, 98, 218, 490, 496, 557, 749, 755, 761, 1236, 1306, 1309, 1310, 1314, 1322, 1337, 1338, 1342, 1343, 1344], "elementtaga": [36, 39], "elementtagb": [36, 39, 76, 77], "elementtagtrait": [39, 57, 490, 507, 508, 509, 510, 846, 963, 1236], "elementtagtyp": [8, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 553, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1339], "elementtyp": [8, 249, 416, 762, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266], "emit": [1500, 1501], "emplac": [1063, 1072], "empti": [13, 354, 383, 384, 393, 394, 416, 427, 428, 433, 434, 435, 478, 547, 575, 605, 627, 640, 649, 651, 735, 737, 811, 824, 825, 828, 875, 877, 930, 936, 964, 1121, 1135, 1136, 1183, 1188, 1194, 1205, 1224, 1345, 1347, 1517, 1519, 1532, 1533, 1540, 1622, 1633, 1653, 1680, 1681, 1685, 1688, 1697, 1752, 1764, 1768, 1773, 1774, 1801, 1835, 1870, 1872, 1874, 1875, 1876, 1897, 1917, 1958, 1981, 2017, 2080, 2095, 2096, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "emptyrang": [811, 815, 820], "en": 110, "enabl": [8, 227, 235, 486, 487, 488, 661, 682, 1063, 1679, 1681, 1682, 1684, 1685, 1686, 1687, 1689, 1691, 1697, 1698, 1752, 1760, 1832, 2017, 2058, 2059, 2069, 2151, 2161, 2162], "encod": [0, 8, 340, 1089, 1188, 1202, 1366, 1369, 1673, 1675, 1678, 1681, 1684, 1687, 1689, 1692, 1696, 1697, 1699, 1700, 1702, 1737, 2151, 2163, 2164, 2165], "encount": [837, 839, 1373, 1374], "end": [90, 94, 95, 174, 220, 222, 427, 438, 903, 930, 934, 1121, 1124, 1126, 1238, 1349, 1482, 1483, 1533, 1534, 1622, 1625, 1644, 1650, 1685, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1786, 1817, 2114, 2154, 2162], "endian": [1681, 1682, 1684, 1685, 1696, 1700, 2165], "endl": 526, "endpoint": [1686, 1698], "engin": 1691, "enhanc": 2162, "ensur": [7, 43, 45, 108, 247, 430, 432, 443, 527, 842, 843, 849, 854, 975, 991, 1103, 1205, 1280, 1357, 1358, 1359, 1360, 1507, 1509, 1679, 1681, 1682, 1684, 1685, 1689, 1690, 1697, 1788, 1795, 1883, 1899, 1964, 2069, 2070, 2151, 2162], "ensure_futur": [1788, 2069], "entir": [13, 318, 605, 1349, 1680, 1682, 1684, 1685, 1688, 1690, 1696, 1697, 1700, 1801, 1835, 2020, 2025, 2069, 2086, 2162, 2164, 2165], "entri": [1700, 1894, 1897, 2150], "entry_height": 1697, "enum": [8, 39, 99, 100, 101, 250, 253, 318, 355, 365, 390, 391, 392, 416, 425, 480, 483, 489, 511, 627, 739, 882, 892, 943, 960, 1028, 1040, 1042, 1054, 1055, 1056, 1059, 1060, 1152, 1154, 1205, 1240, 1278, 1294, 1297, 1361, 1517, 1519], "enumer": [99, 101, 250, 318, 355, 390, 391, 392, 416, 425, 480, 483, 489, 511, 739, 762, 882, 892, 960, 1028, 1042, 1054, 1056, 1060, 1152, 1294, 1361, 1519], "environ": [1689, 1691, 1692, 1698], "envvar": 1698, "epoch": [1679, 1697, 1794, 1797, 1894, 1898, 1908, 1912, 1950], "equal": [0, 8, 13, 17, 36, 37, 39, 71, 76, 98, 174, 196, 207, 220, 224, 247, 260, 266, 271, 279, 300, 304, 340, 345, 348, 350, 351, 359, 363, 406, 409, 415, 416, 428, 430, 431, 432, 433, 434, 435, 436, 441, 443, 444, 445, 447, 451, 452, 453, 459, 462, 463, 464, 478, 480, 482, 511, 518, 519, 520, 526, 561, 563, 574, 582, 584, 586, 587, 607, 609, 627, 645, 649, 658, 661, 662, 681, 684, 695, 697, 734, 771, 778, 780, 786, 811, 823, 830, 847, 855, 857, 862, 866, 869, 873, 875, 876, 878, 894, 912, 915, 918, 922, 930, 937, 944, 945, 950, 951, 960, 994, 995, 996, 1000, 1003, 1007, 1009, 1011, 1021, 1023, 1028, 1040, 1041, 1049, 1050, 1051, 1052, 1063, 1071, 1073, 1082, 1083, 1084, 1092, 1093, 1119, 1121, 1143, 1153, 1154, 1156, 1173, 1181, 1188, 1190, 1191, 1193, 1194, 1197, 1205, 1210, 1225, 1252, 1255, 1268, 1273, 1276, 1296, 1306, 1319, 1322, 1345, 1353, 1372, 1394, 1397, 1417, 1517, 1526, 1530, 1533, 1548, 1600, 1670, 1679, 1681, 1682, 1684, 1685, 1688, 1690, 1696, 1697, 1699, 1702, 1706, 1707, 1708, 1721, 1727, 1728, 1745, 1752, 1755, 1765, 1766, 1771, 1772, 1775, 1777, 1778, 1805, 1870, 1871, 1882, 1884, 1894, 1895, 1951, 1953, 1954, 1955, 1957, 1958, 1981, 1983, 1985, 1986, 1987, 1989, 1992, 2000, 2005, 2017, 2020, 2023, 2026, 2029, 2030, 2033, 2035, 2037, 2041, 2042, 2080, 2081, 2114, 2139, 2151, 2152, 2154, 2161, 2162, 2164], "equalitycomparisonkind": [36, 39, 416, 511], "equalorunspecifi": [39, 587, 594, 662, 665, 744, 995, 997, 998, 1188, 1190, 1217, 1225, 1321], "equival": [8, 79, 165, 169, 174, 247, 258, 315, 367, 369, 416, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 461, 484, 511, 521, 526, 538, 540, 544, 605, 632, 661, 684, 692, 697, 833, 844, 870, 886, 889, 891, 915, 983, 984, 985, 992, 1051, 1059, 1097, 1119, 1188, 1200, 1240, 1262, 1278, 1288, 1306, 1322, 1343, 1445, 1468, 1476, 1512, 1516, 1538, 1559, 1563, 1566, 1568, 1672, 1673, 1681, 1684, 1685, 1689, 1692, 1702, 1703, 1722, 1734, 1752, 1761, 1777, 1778, 1782, 1783, 1784, 1786, 1799, 1805, 1817, 1819, 1821, 1828, 1829, 1830, 1831, 1833, 1853, 1854, 1857, 1860, 1861, 1863, 1864, 1865, 1866, 1908, 1912, 1952, 1958, 1968, 1969, 1972, 1974, 1975, 1977, 1978, 1979, 1980, 1981, 1984, 2001, 2002, 2006, 2009, 2010, 2013, 2014, 2015, 2016, 2017, 2020, 2024, 2025, 2029, 2043, 2044, 2049, 2050, 2056, 2057, 2058, 2061, 2062, 2063, 2064, 2069, 2077, 2084, 2114, 2142, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "eras": [413, 414, 416, 512, 516, 762, 1026, 1027, 1400, 1401], "erasur": [8, 1181], "error": [1, 3, 4, 5, 7, 12, 13, 98, 218, 219, 237, 248, 249, 252, 253, 260, 263, 266, 270, 348, 350, 351, 354, 365, 398, 400, 415, 430, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 447, 451, 452, 453, 455, 456, 476, 477, 478, 482, 518, 519, 520, 526, 532, 545, 547, 548, 563, 567, 575, 587, 605, 628, 630, 633, 662, 666, 735, 740, 799, 837, 839, 845, 851, 855, 857, 858, 859, 875, 876, 877, 878, 884, 885, 886, 887, 888, 892, 909, 986, 990, 991, 994, 1012, 1063, 1067, 1082, 1085, 1087, 1104, 1106, 1118, 1120, 1155, 1157, 1158, 1159, 1181, 1203, 1278, 1279, 1281, 1282, 1288, 1294, 1304, 1342, 1370, 1371, 1372, 1373, 1374, 1378, 1469, 1475, 1476, 1495, 1506, 1519, 1536, 1538, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1691, 1692, 1697, 1698, 1705, 1788, 1789, 1794, 1797, 1801, 1835, 1900, 1901, 1903, 1912, 1946, 1948, 1958, 1981, 2017, 2077, 2107, 2114, 2151, 2152, 2154, 2161, 2162], "error_typ": [1063, 1073], "escap": 1689, "especi": 365, "essenti": [1689, 1698], "estim": [1278, 1293], "etag": 1692, "etc": [427, 1672, 1686, 1689, 1691, 1692, 2055], "evalu": [8, 38, 39, 57, 58, 174, 244, 245, 246, 253, 306, 398, 427, 473, 490, 526, 586, 661, 743, 746, 747, 748, 751, 752, 754, 759, 763, 764, 765, 770, 772, 773, 774, 775, 776, 777, 783, 784, 785, 787, 788, 789, 790, 792, 793, 1012, 1037, 1038, 1039, 1063, 1089, 1094, 1112, 1182, 1185, 1186, 1306, 1314, 1337, 1338, 1378], "even": [64, 253, 258, 425, 540, 563, 648, 684, 892, 964, 1056, 1152, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1690, 1692, 1697, 1698, 1745, 1900, 1903, 2017, 2020, 2053, 2058, 2069, 2107, 2151, 2162], "evenli": [430, 2164], "event": [574, 734, 1690, 1788, 1789, 1790, 2161], "ever": 527, "everi": [8, 13, 428, 431, 563, 740, 751, 753, 1342, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1688, 1692, 1696, 1700, 1778, 1950, 2017, 2020, 2058, 2151, 2161, 2164], "evict": 0, "exact": [563, 1694], "exactli": [354, 563, 575, 735, 877, 1204, 1305, 1672, 1681, 1682, 1684, 1777, 2151, 2161, 2162], "examin": 1698, "exampl": [2, 3, 6, 7, 43, 45, 73, 108, 174, 188, 218, 249, 251, 253, 260, 263, 266, 282, 300, 315, 318, 328, 353, 365, 398, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 459, 484, 526, 561, 569, 604, 680, 740, 801, 820, 821, 852, 857, 858, 860, 891, 1011, 1012, 1055, 1059, 1063, 1072, 1107, 1113, 1114, 1181, 1184, 1187, 1188, 1205, 1240, 1242, 1252, 1258, 1280, 1306, 1331, 1345, 1349, 1372, 1378, 1485, 1492, 1689, 1703, 1885, 1910, 2020, 2070, 2161, 2163], "exce": [90, 97, 98, 1697], "except": [16, 351, 416, 433, 444, 526, 540, 542, 543, 547, 661, 836, 837, 839, 918, 924, 952, 981, 983, 985, 992, 993, 1063, 1119, 1154, 1173, 1205, 1294, 1533, 1548, 1681, 1682, 1684, 1685, 1782, 1788, 1789, 1792, 1794, 1795, 1884, 1900, 1901, 1903, 1946, 1948, 1958, 1981, 1985, 2017, 2070, 2097, 2104, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "excess": 1682, "exclud": [13, 427, 878, 1693, 1697, 2162], "exclus": [220, 222, 351, 459, 460, 519, 526, 627, 630, 635, 642, 649, 653, 739, 811, 814, 825, 894, 910, 994, 1055, 1121, 1140, 1238, 1285, 1287, 1688, 1752, 1756, 1765, 1766, 1799, 1806, 1811, 1832, 1839, 1846, 1870, 1872, 1875, 2053, 2162], "exclusive_max": [174, 220, 222, 627, 630, 635, 638, 641, 648, 649, 652, 811, 812, 813, 817, 819, 825, 894, 897, 903, 904, 909, 910, 994, 1055, 1240, 1681, 1682, 1684, 1685, 1688, 1752, 1753, 1754, 1755, 1756, 1757, 1760, 1762, 1763, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1773, 1775, 1780, 1799, 1801, 1802, 1803, 1804, 1805, 1806, 1808, 1811, 1812, 1813, 1814, 1817, 1818, 1835, 1839, 1840, 1846, 1862, 1870, 1872, 1875, 1954, 1955, 1956, 1971, 1982, 1986, 1992, 2008, 2017, 2026, 2030, 2053, 2055, 2114, 2152, 2154, 2162], "exclusive_min": [627, 642, 649, 653, 994, 1752, 1766, 1772], "exclusive_stop": [427, 458, 459, 460, 463], "execut": [0, 21, 25, 512, 526, 540, 542, 543, 696, 836, 967, 1689, 1788, 1795, 2151, 2161], "executewhenforc": [526, 965, 966], "executewhennotneed": [526, 965, 967], "executewhenreadi": [526, 527, 1029], "executor": [8, 365, 512, 513, 514, 515, 516, 526, 696, 856, 857, 858, 1375], "executorboundfunct": [512, 513, 514, 515, 1375], "executortask": [512, 516], "executortyp": [512, 513, 514, 515], "exist": [8, 19, 20, 39, 40, 72, 134, 135, 174, 196, 197, 253, 263, 283, 286, 290, 294, 348, 353, 427, 428, 433, 435, 445, 447, 451, 459, 477, 484, 570, 582, 587, 597, 605, 661, 663, 665, 668, 670, 679, 693, 694, 695, 740, 860, 876, 881, 882, 892, 894, 901, 906, 991, 994, 1012, 1017, 1029, 1030, 1032, 1033, 1060, 1063, 1065, 1066, 1076, 1077, 1089, 1098, 1101, 1103, 1104, 1106, 1120, 1154, 1178, 1188, 1205, 1232, 1238, 1240, 1246, 1248, 1257, 1296, 1297, 1306, 1311, 1320, 1321, 1357, 1358, 1495, 1506, 1509, 1533, 1551, 1556, 1565, 1566, 1569, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1689, 1697, 1702, 1777, 1782, 1801, 1831, 1835, 1839, 1840, 1866, 1900, 1901, 1903, 1907, 1908, 1910, 1912, 1917, 1918, 1919, 1923, 1924, 1958, 1964, 1980, 1981, 2016, 2017, 2030, 2032, 2033, 2048, 2053, 2058, 2064, 2066, 2069, 2095, 2096, 2114, 2119, 2121, 2130, 2152, 2154, 2161, 2162, 2164, 2165], "existing_bound": 990, "existing_transform": [433, 434, 435, 441], "existing_unit": [477, 876], "existingmod": [881, 1240], "exit": 2070, "exp": [110, 1446], "exp2": [110, 1447], "expand": [479, 547, 627, 1780, 2053], "expand_onli": [1055, 1056, 1616, 2053], "expect": [6, 583, 585, 648, 1063, 1103, 1686, 1689, 1690, 1798, 1964, 2162], "expect_eq": [43, 45, 263, 266, 282, 300, 561, 1205, 1349], "expect_fals": 263, "expect_that": [218, 266, 282, 300, 442, 1252], "expens": [526, 1205], "experiment": [1674, 1677, 1684, 1691, 1698, 1699, 1908], "experimental_collect_matching_metr": [1702, 2127], "experimental_collect_prometheus_format_metr": [1702, 2128], "experimental_copy_range_to": [1869, 1908], "experimental_gcs_rate_limit": 1691, "experimental_push_metrics_to_prometheu": [1702, 2129], "experimental_s3_rate_limit": 1698, "experimental_update_verbose_log": [1702, 2130], "experimentalcopyrang": [1465, 1480, 1482], "explicit": [21, 22, 39, 40, 44, 46, 110, 111, 131, 134, 138, 142, 174, 175, 176, 178, 179, 180, 181, 182, 196, 199, 200, 201, 202, 203, 227, 228, 230, 236, 253, 263, 265, 271, 276, 277, 281, 283, 284, 285, 286, 290, 294, 300, 301, 302, 321, 322, 323, 324, 325, 326, 332, 333, 334, 335, 336, 337, 338, 339, 348, 365, 367, 386, 393, 396, 427, 437, 490, 495, 503, 574, 576, 578, 580, 581, 586, 587, 588, 591, 592, 593, 594, 600, 601, 661, 662, 665, 672, 683, 699, 700, 734, 736, 740, 765, 811, 817, 833, 834, 862, 863, 869, 870, 871, 877, 878, 894, 897, 903, 904, 915, 930, 933, 990, 991, 995, 1006, 1029, 1032, 1040, 1043, 1044, 1045, 1059, 1060, 1063, 1067, 1074, 1089, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1121, 1141, 1188, 1199, 1205, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1240, 1248, 1278, 1283, 1294, 1306, 1320, 1321, 1482, 1487, 1507, 1511, 1533, 1541, 1679, 1683, 1688, 1703, 1752, 1776, 1780, 1799, 1805, 1806, 1813, 1814, 1821, 1832, 1839, 1844, 1845, 1854, 1951, 1954, 1957, 1958, 1969, 1981, 1983, 1986, 1989, 2002, 2017, 2019, 2026, 2029, 2030, 2033, 2044, 2054, 2058, 2069, 2114, 2115, 2151, 2152, 2154, 2161, 2162, 2164], "explicitargumentbarri": [79, 205, 249, 428, 845, 846, 852, 1232], "explicitindexor": [517, 585], "explicitli": [174, 260, 490, 747, 760, 763, 765, 915, 1205, 1679, 1681, 1682, 1684, 1685, 1697, 1795, 2020, 2162, 2164], "expm1": [110, 1448], "expon": 2165, "exponenti": [1691, 1698], "export": 1689, "expos": 1680, "exposit": [1702, 2128], "exposition_format": [1702, 2128], "expr": [1, 2, 6, 34, 35, 39, 253, 254, 1063, 1089, 1090, 1154, 1155, 1240, 1241, 1306, 1782, 1799, 1802, 1832, 1836, 1951, 1955, 1957, 1983, 1987, 1989, 2019, 2027, 2029, 2031, 2033, 2162], "express": [3, 4, 5, 7, 73, 328, 427, 459, 463, 604, 680, 1080, 1107, 1258, 1331, 1492, 1687, 1702, 1752, 1762, 1776, 1777, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1802, 1817, 1832, 1836, 1951, 1955, 1983, 1987, 2019, 2027, 2031, 2115, 2146], "extant": 1063, "extend": [367, 369, 427, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 2142, 2165], "extens": [1684, 1685, 1689, 1777, 2108], "extent": [8, 18, 39, 98, 174, 178, 186, 196, 210, 266, 352, 430, 432, 434, 435, 436, 443, 444, 445, 447, 451, 453, 478, 585, 586, 612, 661, 678, 695, 740, 751, 752, 754, 772, 774, 777, 778, 779, 780, 784, 930, 937, 964, 1153, 1205, 1222, 1343, 1344, 1444, 1460, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1684, 1688, 1826, 1900, 1903, 1907, 1908, 1917, 2164], "extern": [390, 1689, 1892, 1912, 1913, 2017, 2058, 2070], "extract": [427, 429, 430, 431, 432, 434, 443, 446, 518, 519, 520, 915, 1238, 1306, 1776, 1778, 2115, 2162], "extractclosedstridedslic": [430, 518, 915], "extracthalfopenstridedslic": [432, 519, 521, 915], "extractsizedstridedslic": [443, 520, 915], "extractstridedslic": [351, 521, 915], "f": [1684, 1685, 1788, 2019, 2051, 2069, 2151, 2161], "f2": 1684, "f4": [1684, 1999, 2151], "f8": 1684, "f_arrai": [43, 45], "facil": [174, 1240, 1686], "fact": 1565, "factor": [260, 481, 482, 1672], "fail": [12, 400, 605, 758, 845, 892, 994, 1011, 1012, 1056, 1063, 1242, 1294, 1379, 1385, 1469, 1485, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1691, 1697, 1912, 2053, 2070, 2161, 2162, 2165], "failur": [16, 252, 348, 798, 1063, 1074, 1086, 1186, 1294, 1690], "fairli": 318, "fake": [1306, 1322, 1691], "fals": [30, 38, 102, 104, 196, 198, 200, 202, 253, 263, 266, 270, 282, 300, 303, 376, 518, 519, 520, 563, 661, 778, 798, 799, 801, 836, 838, 891, 965, 967, 976, 978, 992, 993, 994, 1043, 1051, 1063, 1074, 1109, 1156, 1247, 1285, 1287, 1679, 1681, 1682, 1684, 1685, 1690, 1695, 1698, 1707, 1719, 1737, 1739, 1741, 1742, 1743, 1745, 1753, 1754, 1756, 1757, 1758, 1759, 1767, 1769, 1770, 1775, 1777, 1780, 1789, 1792, 1813, 1814, 1821, 1844, 1845, 1854, 1874, 1882, 1891, 1892, 1899, 1902, 1904, 1906, 1913, 1918, 1919, 1946, 1948, 1949, 1950, 1951, 1969, 1976, 1983, 2002, 2011, 2017, 2020, 2023, 2044, 2053, 2054, 2058, 2059, 2070, 2071, 2107, 2127, 2130, 2151, 2162, 2164], "faster": [1689, 1690], "fastest": [1681, 1682, 1684, 1689], "fatal": 1689, "featur": [1698, 1701], "fetch": 1689, "fetchcont": 1689, "fetchcontent_declar": 1689, "fetchcontent_makeavail": 1689, "few": [1063, 1294, 2162], "fewer": [1690, 2162], "field": [8, 100, 103, 1421, 1684, 1697, 1768, 1773, 2150, 2164], "file": [365, 891, 1673, 1674, 1676, 1677, 1678, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1689, 1691, 1693, 1694, 1695, 1698, 1701, 1703, 1883, 1885, 1886, 1887, 1889, 1890, 1891, 1899, 1902, 1904, 1906, 2069, 2070, 2150, 2151, 2163], "file_detail": 1686, "file_io_concurr": [1690, 1750, 1751, 1891, 1899, 1902, 1904, 1906], "file_io_lock": [1690, 1891, 1899, 1902, 1904, 1906], "file_io_memmap": [1690, 1891, 1899, 1902, 1904, 1906], "file_io_sync": [1690, 1891, 1899, 1902, 1904, 1906], "filenam": 1697, "filesystem": [1687, 1690, 1693, 2151, 2163], "fill": [174, 183, 196, 205, 427, 442, 453, 455, 456, 1089, 1092, 1093, 1106, 1154, 1170, 1240, 1255, 1679, 1687, 1698, 1786, 1951, 1958, 1967, 1981, 1983, 1999, 2017, 2019, 2020, 2041, 2053, 2151, 2163, 2164], "fill_missing_data_read": [1679, 1681, 1682, 1684, 1685], "fill_valu": [1089, 1092, 1106, 1154, 1170, 1240, 1255, 1684, 1685, 1951, 1953, 1958, 1967, 1981, 1983, 1999, 2017, 2019, 2020, 2023, 2028, 2029, 2035, 2041, 2047, 2055, 2058, 2065, 2151, 2164], "fillvalu": [1089, 1092, 1093, 1094, 1106], "filter": [1684, 1962, 2019, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "final": [253, 269, 458, 459, 1306, 1682, 1722, 1734], "find": [1686, 1689], "fine": [2030, 2031, 2032, 2033, 2048, 2066], "finish": [540, 542], "finit": [37, 110, 174, 585, 586, 627, 629, 766, 767, 769, 877, 878, 1455, 1461, 1462, 1464, 1683, 1688, 1752, 1759, 1760, 1767, 1775, 1817, 1958, 1981, 2017, 2114, 2151, 2152, 2154, 2161, 2164], "finiterang": [522, 627, 629], "finitesubset": [522, 627], "first": [7, 8, 13, 39, 79, 80, 90, 96, 365, 393, 427, 431, 433, 435, 438, 459, 695, 837, 839, 859, 1236, 1306, 1323, 1349, 1373, 1374, 1622, 1630, 1635, 1636, 1637, 1665, 1682, 1688, 1689, 1697, 1777, 1778, 1787, 1867, 1982, 2018, 2065, 2066, 2151, 2162, 2164], "fit": [8, 39, 557, 558, 1121, 1205], "fix": [8, 697, 795, 996, 1007, 1060, 1113, 1421, 1683, 1685, 1780, 2069, 2155, 2160], "fix_resizable_bound": [1060, 1449, 2054], "flag": [425, 574, 575, 734, 735, 736, 758, 915, 1040, 1042, 1046, 1048, 1060, 1581, 1588, 1594, 1597, 1686, 1689, 1702, 1768, 1773, 1812, 1818, 2130, 2153], "flatmapresulttyp": [523, 1063], "flatresult": [524, 859, 1063, 1080], "flatten": [441, 2162], "flle": 1697, "float": [8, 111, 114, 116, 251, 511, 525, 561, 1424, 1425, 1426, 1453, 1684, 1685, 1702, 1707, 1709, 1711, 1712, 1720, 1722, 1734, 1788, 1794, 1797, 1894, 1896, 1898, 1908, 1912, 1950, 2080, 2082, 2084, 2085, 2087, 2088, 2090, 2092, 2094, 2097, 2104, 2106, 2108, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2161, 2164, 2165], "float16": [1684, 1685, 1702, 2131, 2165], "float16_t": [8, 1424], "float32": [425, 561, 1681, 1682, 1684, 1685, 1702, 1992, 1999, 2035, 2036, 2111, 2113, 2132, 2151, 2165], "float32_t": [8, 1423, 1425], "float64": [425, 1681, 1684, 1685, 1702, 2112, 2133, 2165], "float64_t": [8, 1422, 1426], "float8": 525, "float8_e4m3b11fnuz": [1684, 1702, 2134, 2165], "float8_e4m3b11fnuz_t": [8, 1427], "float8_e4m3fn": [1684, 1702, 2135, 2165], "float8_e4m3fn_t": [8, 1428], "float8_e4m3fnuz": [1684, 1702, 2136, 2165], "float8_e4m3fnuz_t": [8, 1429], "float8_e5m2": [1684, 1702, 2137, 2165], "float8_e5m2_t": [8, 1430], "float8_e5m2fnuz": [1684, 1702, 2138, 2165], "float8_e5m2fnuz_t": [8, 1431], "float8e4m3b11fnuz": [8, 525, 1427], "float8e4m3fn": [8, 525, 1428], "float8e4m3fnuz": [8, 525, 1429], "float8e5m2": [8, 525, 1430], "float8e5m2fnuz": [8, 525, 1431], "flock": 1690, "floor": [110, 1450], "flush": [110, 1697], "fly": 1672, "flyeem": 2163, "flyem": 2151, "fmax": [110, 1451], "fmin": [110, 1452], "fmod": [110, 1453], "fold": 1692, "follow": [3, 5, 13, 253, 260, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 518, 519, 520, 563, 605, 661, 740, 743, 990, 1203, 1294, 1345, 1664, 1665, 1672, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1697, 1798, 1801, 1835, 1958, 1981, 2017, 2080, 2114, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "foo": [4, 1063, 1072], "forc": [21, 23, 26, 32, 526, 527, 536, 836, 838, 965, 966, 1278, 1288, 1379, 1380, 1387, 1388, 1389, 1686, 1788, 1795], "form": [16, 17, 18, 33, 351, 416, 459, 484, 489, 526, 801, 1688, 1746, 2029, 2150, 2162], "format": [33, 90, 318, 647, 1345, 1346, 1681, 1682, 1684, 1685, 1686, 1687, 1693, 1696, 1700, 1701, 1702, 2128, 2151, 2164, 2165], "former": 1697, "fortran": [253, 392, 393, 560, 833, 1205, 1410, 1681, 1682, 1685, 1722, 1727, 1734, 2051, 2164], "fortran_ord": [43, 45, 392, 393, 695, 833, 961, 1410], "forward": [417, 512, 513, 859, 971, 1063, 1072, 1375, 1379, 2097], "found": [1509, 1517, 1525, 1698, 1901], "fraction": [1908, 1912], "fragment": 1692, "framework": 1740, "free": [79, 80, 416, 426, 1240, 2161], "freed": [16, 540], "frequent": 1672, "fresh": [1679, 1680, 1681, 1682, 1684, 1685, 1950, 2017, 2058, 2151], "friend": [76, 77, 78, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 153, 154, 155, 156, 172, 189, 224, 225, 227, 238, 239, 241, 254, 255, 256, 279, 304, 328, 329, 345, 346, 381, 387, 409, 410, 417, 421, 422, 462, 463, 471, 472, 490, 504, 505, 587, 604, 607, 623, 645, 647, 658, 659, 662, 680, 684, 685, 699, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 830, 831, 866, 873, 912, 913, 922, 923, 1023, 1024, 1082, 1083, 1090, 1093, 1107, 1138, 1139, 1140, 1142, 1143, 1144, 1155, 1156, 1173, 1200, 1201, 1226, 1227, 1241, 1242, 1273, 1274, 1292, 1301, 1346, 1352, 1353, 1354, 1355, 1367, 1368, 1397, 1398, 1485, 1493, 1526, 1527, 1528, 1548], "from": [0, 8, 21, 24, 39, 40, 42, 43, 44, 45, 72, 100, 110, 111, 114, 115, 143, 144, 145, 154, 155, 174, 176, 178, 180, 181, 187, 196, 199, 201, 202, 227, 228, 230, 238, 260, 266, 269, 271, 274, 278, 283, 284, 286, 290, 294, 300, 302, 348, 350, 351, 353, 354, 365, 367, 369, 371, 374, 393, 395, 396, 398, 415, 416, 425, 427, 429, 430, 431, 432, 433, 434, 435, 443, 446, 458, 459, 465, 467, 468, 490, 493, 494, 502, 518, 519, 520, 526, 528, 530, 532, 533, 534, 535, 540, 542, 545, 569, 586, 589, 594, 627, 628, 630, 633, 634, 635, 636, 661, 663, 665, 679, 699, 700, 703, 758, 801, 811, 821, 836, 838, 862, 863, 869, 871, 886, 891, 894, 901, 903, 915, 930, 931, 933, 943, 960, 965, 968, 974, 975, 990, 991, 995, 999, 1011, 1012, 1029, 1030, 1032, 1033, 1040, 1045, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1076, 1077, 1078, 1079, 1089, 1098, 1119, 1121, 1125, 1128, 1154, 1180, 1187, 1188, 1195, 1205, 1209, 1211, 1213, 1215, 1216, 1223, 1238, 1240, 1246, 1248, 1257, 1268, 1270, 1297, 1298, 1306, 1316, 1317, 1319, 1320, 1321, 1329, 1330, 1345, 1348, 1349, 1372, 1378, 1379, 1381, 1384, 1417, 1465, 1467, 1468, 1469, 1480, 1482, 1487, 1498, 1499, 1500, 1503, 1506, 1533, 1537, 1540, 1541, 1577, 1622, 1649, 1650, 1651, 1652, 1654, 1655, 1656, 1665, 1670, 1671, 1672, 1677, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1690, 1691, 1692, 1694, 1697, 1698, 1701, 1702, 1706, 1707, 1710, 1722, 1723, 1734, 1737, 1738, 1740, 1743, 1744, 1748, 1749, 1750, 1751, 1777, 1778, 1786, 1788, 1790, 1799, 1803, 1806, 1807, 1808, 1817, 1832, 1839, 1840, 1841, 1870, 1872, 1882, 1885, 1894, 1896, 1909, 1910, 1912, 1951, 1958, 1959, 1961, 1983, 1990, 2017, 2020, 2021, 2025, 2058, 2069, 2070, 2080, 2082, 2083, 2085, 2086, 2089, 2107, 2114, 2115, 2116, 2119, 2121, 2150, 2151, 2153, 2154, 2162, 2163, 2164], "frombool": [266, 282, 1121, 1125], "fromboolrang": [1121, 1124], "fromindexrang": [1121, 1126], "fromindic": [1121, 1127], "frominlinerank": [39, 43, 45, 87, 174, 348, 555, 570, 693, 695, 755, 756, 995, 999, 1205, 1208, 1209, 1211, 1212, 1213, 1216, 1217, 1219, 1221, 1223, 1229, 1233, 1234, 1236, 1306], "fromjson": [365, 369, 371, 374], "fromjsonopt": [340, 344, 365, 369, 371, 374, 378, 385], "fromuint": [1121, 1128], "fromurl": [1533, 1537], "front": [1622, 1637], "fsync": [1690, 2069], "fulfil": [2092, 2094], "full": [90, 95, 97, 266, 627, 629, 811, 826, 894, 902, 1262, 1680, 1684, 1688, 1695, 1697, 1777, 2017, 2058, 2162, 2164], "full_offset": [445, 447, 451], "full_path": 1697, "fulli": [100, 102, 356, 390, 811, 1279, 1684, 1687, 1688, 1832, 1892, 1913, 2017, 2058, 2069, 2151], "fully_stor": [100, 102, 2020, 2021, 2022, 2059], "func": [39, 73, 251, 253, 328, 526, 586, 604, 661, 680, 798, 799, 857, 859, 962, 1063, 1080, 1089, 1107, 1240, 1258, 1306, 1331, 1482, 1492], "func0": [251, 1063], "func1": 251, "func2": 251, "func3": 251, "function": [3, 5, 7, 8, 34, 35, 43, 45, 73, 79, 80, 108, 251, 328, 413, 414, 433, 435, 441, 513, 515, 516, 518, 519, 520, 527, 540, 542, 604, 680, 681, 685, 696, 798, 799, 836, 837, 838, 839, 847, 856, 857, 858, 966, 967, 990, 991, 1026, 1027, 1080, 1107, 1113, 1114, 1119, 1155, 1186, 1241, 1258, 1331, 1342, 1343, 1375, 1400, 1401, 1492, 1664, 1672, 1688, 1696, 1702, 1788, 1799, 2161, 2163], "functiontyp": [512, 513, 514, 515], "fundament": [416, 762], "further": [253, 526, 2164], "furthermor": 563, "futur": [8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 565, 566, 569, 572, 770, 771, 836, 837, 838, 839, 850, 856, 857, 858, 891, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1011, 1012, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1055, 1059, 1060, 1109, 1240, 1268, 1271, 1276, 1278, 1279, 1282, 1287, 1288, 1362, 1373, 1374, 1379, 1381, 1385, 1386, 1387, 1388, 1389, 1468, 1469, 1480, 1482, 1499, 1504, 1506, 1530, 1565, 1702, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1869, 1907, 1908, 1909, 1910, 1912, 1917, 1946, 1947, 1948, 1949, 2019, 2051, 2053, 2054, 2059, 2069, 2070, 2075, 2078, 2097, 2098, 2101, 2102, 2105, 2129, 2150, 2151, 2163], "future_a": 858, "future_b": 858, "futurecallbackregistr": [21, 25, 526, 527, 540, 541, 542, 543, 544, 836, 837, 838, 839, 965, 966, 967], "futurelik": [1702, 1788, 1789, 1798, 2161], "futuretyp": [981, 982, 988], "futurevalu": [526, 838, 856, 858], "g": [8, 18, 45, 75, 80, 165, 253, 318, 355, 359, 363, 365, 416, 420, 427, 428, 430, 432, 434, 436, 443, 444, 445, 447, 451, 453, 478, 481, 482, 485, 526, 593, 609, 672, 758, 841, 842, 848, 849, 986, 1089, 1125, 1127, 1186, 1188, 1201, 1225, 1228, 1236, 1262, 1665, 1673, 1674, 1675, 1676, 1677, 1678, 1682, 1684, 1686, 1690, 1691, 1693, 1696, 1700, 1701, 1702, 1777, 1782, 1783, 1784, 1785, 1828, 1829, 1830, 1863, 1864, 1865, 1893, 1913, 1915, 1961, 1977, 1978, 1979, 2013, 2014, 2015, 2058, 2061, 2062, 2063, 2070, 2161, 2162, 2163], "g0": 1188, "g1": 1188, "g2": 1188, "g3": 1188, "g4": 1188, "garbag": 1697, "gc": [1671, 1672, 1680, 1684, 1685, 1686, 1693, 1695, 1697, 1893, 1911, 1915, 2069, 2151, 2163], "gcc": 1689, "gce": 1691, "gcloud": 1691, "gcs_grpc": 1686, "gcs_http": 1686, "gcs_request_concurr": [1686, 1691, 2151, 2163], "gcs_request_retri": [1691, 2151, 2163], "gcs_stubbi": 1686, "gcs_user_project": [1691, 2151, 2163], "gener": [3, 5, 8, 21, 365, 416, 430, 432, 435, 443, 836, 1089, 1183, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1294, 1506, 1507, 1508, 1509, 1510, 1517, 1520, 1530, 1556, 1557, 1558, 1565, 1566, 1567, 1569, 1697, 1777, 1869, 1877, 1879, 1894, 1895, 1896, 1897, 1898, 1912, 1917, 2029, 2051, 2054, 2069, 2080, 2092, 2093, 2095, 2096, 2151, 2161, 2162, 2164], "generation_condit": [1512, 1515, 1559, 1562, 1570, 1571], "generation_numb": [1697, 2150], "get": [227, 234, 243, 371, 379, 1689], "get_running_loop": [1789, 2161], "get_valu": 1789, "getaffinetransformdomain": [545, 546, 627], "getaffinetransforminversedomain": [547, 627], "getaffinetransformrang": [547, 548, 549, 627, 915], "getarraystoragestatisticsopt": [550, 569, 1240], "getboxdomainof": [39, 174, 551, 552, 553, 554, 555, 556, 571, 586, 661, 1205, 1306], "getbyteext": [39, 557, 558, 1205], "getchunktempl": [253, 270], "getcontiguousindic": [392, 559, 560], "getcontiguousoffset": [392, 559, 560], "getdatatyp": [416, 561], "getdefaultrank": [562, 995], "getlvalu": [427, 455, 456], "getoutputrang": [563, 661], "getresourc": [365, 370, 371], "getresult": [2, 6], "getsomeresult": [3, 5], "getsomestatu": 7, "getstaticordynamicext": [564, 1622], "getstatu": [6, 21, 565, 566, 567, 568, 1063, 1379], "getstoragestatist": [569, 1240], "getsublayoutview": [570, 1205], "getthestuff": 1063, "gettransformforindexingoper": [1154, 1158], "git": 1689, "github": [525, 1689, 1702, 2129, 2134, 2135, 2136, 2137, 2138], "given": [0, 30, 39, 90, 95, 110, 174, 196, 200, 253, 260, 266, 282, 310, 311, 313, 330, 365, 370, 392, 425, 427, 430, 432, 433, 434, 435, 441, 443, 445, 447, 451, 482, 490, 512, 513, 526, 559, 560, 569, 587, 609, 615, 619, 661, 662, 666, 672, 681, 686, 699, 740, 791, 798, 799, 801, 802, 943, 960, 963, 964, 976, 978, 1063, 1072, 1188, 1205, 1237, 1240, 1375, 1411, 1413, 1446, 1447, 1448, 1450, 1573, 1574, 1575, 1577, 1614, 1615, 1620, 1658, 1672, 1683, 1685, 1690, 1697, 1740, 1746, 1752, 1754, 1777, 1782, 1783, 1784, 1785, 1828, 1829, 1830, 1863, 1864, 1865, 1977, 1978, 1979, 2013, 2014, 2015, 2020, 2061, 2062, 2063, 2162, 2164], "global": [0, 850, 1690, 1691, 1692, 1698, 1699, 2161], "gnu": 1689, "go": 526, "good": 1696, "googl": [1063, 1687, 1689, 1691, 1693, 2069, 2163], "google_application_credenti": [1686, 1691], "google_cloud_disable_direct_path": 1686, "googleapi": 1686, "grain": [2030, 2031, 2032, 2033, 2048, 2066], "granular": [1682, 1685, 2164], "graph": [390, 1495, 1892, 1913, 2017, 2058], "greater": [110, 174, 458, 632, 995, 1000, 1001, 1530, 1663], "greaterequalorunspecifi": [995, 1000, 1007], "greaterorunspecifi": [79, 995, 1001], "grei": 1673, "greya": 1673, "grid": [253, 260, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 290, 291, 294, 314, 315, 318, 325, 1250, 1681, 1682, 1684, 1685, 1700, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1722, 1724, 1725, 1726, 1731, 1734, 1735, 2069, 2164], "grid_cell_indic": 1700, "grid_origin": [253, 269, 270, 282, 325, 1681, 1682, 1684, 1685, 1706, 1722, 1725, 1726, 1732, 1734, 1736, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1971, 1973, 1976, 1982, 2008, 2036, 2055, 2164], "grid_origin_soft_constraint": [1706, 1722, 1726, 1732, 1734, 1736, 2164], "grid_shap": 1700, "grid_soft_constraint": [1709, 1720], "gridorigin": [253, 282, 306, 314, 325, 869, 1094], "gridview": [253, 259, 262, 265, 269, 271, 274, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 315, 330], "gridviewfor": [253, 257, 290, 291, 292, 293, 294, 295, 296, 297, 298, 306, 315, 1094], "group": [1682, 1696, 1700, 1702, 1703, 2070], "grpc": [1686, 1693, 1697, 1699], "gsutil": 1691, "guarante": [108, 373, 425, 526, 542, 563, 798, 799, 964, 991, 1029, 1034, 1036, 1188, 1191, 1278, 1280, 1286, 1294, 1379, 1469, 1680, 1687, 1690, 1698, 1788, 1900, 1903, 1907, 1908, 1912, 1917, 2023, 2069, 2070, 2097, 2108], "guid": [1687, 1698], "gz": 1689, "gzip": [1681, 1682, 1684, 1685, 1696, 2151, 2163, 2164], "h": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669], "ha": [6, 13, 19, 20, 21, 29, 39, 131, 134, 137, 139, 174, 196, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 458, 474, 485, 494, 526, 540, 542, 567, 587, 605, 662, 672, 693, 694, 695, 740, 749, 755, 778, 811, 847, 869, 874, 892, 965, 966, 971, 972, 973, 978, 986, 1011, 1012, 1040, 1042, 1047, 1055, 1056, 1059, 1060, 1063, 1104, 1106, 1113, 1114, 1188, 1205, 1219, 1229, 1233, 1240, 1252, 1255, 1278, 1279, 1280, 1282, 1285, 1287, 1294, 1337, 1338, 1343, 1344, 1378, 1379, 1385, 1469, 1599, 1601, 1602, 1622, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1691, 1697, 1698, 1705, 1777, 1785, 1786, 1788, 1791, 1792, 1793, 1830, 1865, 1892, 1907, 1908, 1913, 1958, 1979, 1981, 2000, 2015, 2017, 2020, 2041, 2058, 2063, 2069, 2070, 2072, 2073, 2075, 2076, 2078, 2079, 2097, 2114, 2151, 2152, 2154, 2161, 2162], "half": [8, 427, 432, 519, 915, 1424, 1685, 1702, 1752, 1756, 1869, 1870, 1872, 2131, 2165], "half_float": [8, 1424], "half_open": 739, "halfopen": [627, 630], "halfopeninterv": [427, 428, 432, 449, 519], "handl": [365, 371, 375, 390, 526, 527, 540, 541, 542, 836, 837, 838, 839, 966, 967, 1240, 1266, 1278, 1379, 1382, 1471, 1472, 1482, 1533, 1691, 1692, 1698, 1702, 1740, 1741, 1746, 1788, 1946, 2019, 2097, 2161], "happen": [563, 1698], "hard": [8, 253, 260, 263, 266, 269, 270, 282, 283, 286, 299, 300, 303, 672, 862, 864, 869, 870, 871, 872, 1104, 1105, 1108, 1681, 1682, 1684, 1688, 1706, 1707, 1709, 1717, 1720, 1722, 1725, 1727, 1728, 1732, 1734, 1736, 2164], "hard_constraint": [253, 258, 260, 263, 266, 270, 282, 283, 286, 300, 302, 303, 862, 863, 864, 869, 871, 872], "has_order_constraint": [19, 20, 798, 799, 846], "has_resourc": [371, 372, 376, 380], "has_valu": [1063, 1074, 1075, 1086, 1517, 1523], "hasboxdomain": [39, 174, 358, 359, 363, 551, 552, 553, 554, 555, 556, 571, 586, 661, 767, 1205, 1306], "hash": [416, 417, 1682, 1696, 2151, 2163], "hashardconstraint": [253, 299], "have": [8, 13, 19, 20, 21, 23, 39, 73, 76, 98, 109, 174, 247, 328, 390, 406, 407, 408, 415, 427, 428, 433, 453, 480, 481, 482, 526, 563, 575, 586, 604, 605, 661, 680, 684, 735, 766, 767, 798, 799, 846, 857, 877, 880, 965, 970, 990, 991, 1011, 1021, 1022, 1055, 1080, 1107, 1109, 1153, 1184, 1187, 1240, 1258, 1261, 1279, 1294, 1296, 1331, 1343, 1344, 1394, 1395, 1396, 1469, 1492, 1569, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1691, 1692, 1697, 1752, 1779, 1780, 1801, 1819, 1821, 1835, 1853, 1854, 1892, 1913, 1954, 1958, 1968, 1969, 1981, 1986, 2001, 2002, 2017, 2020, 2026, 2039, 2043, 2044, 2058, 2070, 2108, 2114, 2151, 2152, 2154, 2162, 2163, 2164], "havesamesharedst": [21, 572], "haystack": [356, 357, 364, 811], "head": 1698, "header": [1681, 1684, 1692, 1698], "heap": [174, 697, 1205], "height": [1673, 1674, 1675, 1676, 1677, 1678, 2150], "held": [490, 1112], "help": [1689, 1696, 1700], "hemibrain": 2151, "here": 1681, "hex": 1697, "hexadecim": 1697, "hierarch": [253, 1250, 1685, 2164], "high": [1687, 2151], "higher": [1673, 1678, 1681, 1684, 1685, 1690, 1912], "highest": 1372, "highli": 340, "hit": 2163, "hold": [365, 371, 427, 526, 586, 599, 650, 661, 671, 1379, 2097], "holder": 365, "home": 1698, "host": 1698, "host_head": 1698, "hostnam": 1686, "how": [8, 365, 390, 401, 402, 405, 526, 615, 627, 661, 739, 800, 943, 1017, 1018, 1043, 1113, 1152, 1240, 1390, 1391, 1393, 1686, 1689, 1691, 1692, 1697, 2164], "howev": [247, 459, 648, 650, 891, 964, 1672, 1684, 1685, 1689, 1691, 1777, 1788, 1832, 2161], "htab": 1692, "html": [1063, 1345, 1698], "http": [110, 525, 1063, 1345, 1689, 1691, 1693, 1698, 1702, 2128, 2129, 2134, 2135, 2136, 2137, 2138], "http_archiv": 1689, "http_kvstore": 1686, "http_proxi": 1686, "http_request_concurr": 1692, "http_request_retri": 1692, "http_transport": 1686, "https_proxi": 1686, "hull": [573, 574, 575, 586, 627, 915, 1683, 1752, 1768, 1799, 1812], "hullindexdomain": [575, 586], "hyperbol": [1405, 1407, 1409, 1414, 1621, 1661], "hyperrectangl": [8, 174, 196, 563, 661], "hyperrectangular": 174, "i": [0, 2, 3, 4, 5, 7, 8, 12, 13, 14, 17, 18, 19, 20, 21, 30, 32, 33, 34, 35, 37, 39, 43, 45, 64, 70, 73, 90, 95, 97, 98, 99, 100, 101, 102, 104, 108, 110, 131, 133, 143, 165, 174, 190, 195, 196, 213, 217, 218, 220, 221, 227, 231, 234, 237, 247, 248, 249, 250, 253, 258, 259, 260, 262, 263, 264, 265, 266, 270, 300, 303, 315, 318, 325, 326, 328, 340, 348, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 367, 369, 370, 371, 373, 376, 379, 380, 386, 390, 391, 392, 393, 397, 398, 400, 415, 416, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 467, 473, 478, 482, 483, 484, 490, 505, 511, 512, 518, 519, 520, 526, 527, 531, 532, 540, 542, 543, 545, 547, 559, 560, 563, 564, 571, 574, 575, 578, 579, 580, 583, 585, 586, 587, 597, 600, 601, 604, 605, 608, 609, 613, 615, 627, 632, 647, 648, 650, 661, 662, 665, 666, 668, 670, 672, 673, 679, 680, 681, 683, 685, 689, 690, 692, 693, 695, 697, 734, 735, 736, 739, 740, 742, 743, 744, 746, 747, 748, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 811, 820, 823, 828, 829, 833, 834, 836, 837, 838, 839, 842, 843, 845, 846, 847, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 870, 875, 876, 877, 879, 881, 884, 885, 886, 887, 888, 891, 892, 894, 896, 898, 905, 906, 915, 918, 919, 920, 924, 930, 943, 944, 945, 950, 951, 959, 960, 961, 963, 964, 965, 966, 967, 970, 972, 975, 976, 981, 983, 986, 990, 991, 994, 995, 996, 998, 1000, 1001, 1003, 1004, 1007, 1010, 1011, 1012, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1055, 1059, 1060, 1063, 1065, 1069, 1070, 1071, 1074, 1076, 1078, 1079, 1080, 1084, 1087, 1089, 1097, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1118, 1119, 1120, 1121, 1127, 1135, 1136, 1141, 1149, 1152, 1153, 1154, 1155, 1156, 1163, 1169, 1177, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1193, 1194, 1195, 1197, 1198, 1199, 1202, 1204, 1205, 1215, 1224, 1225, 1228, 1236, 1238, 1242, 1246, 1248, 1249, 1255, 1256, 1258, 1262, 1263, 1264, 1266, 1268, 1276, 1278, 1279, 1280, 1282, 1285, 1287, 1288, 1290, 1294, 1296, 1297, 1304, 1306, 1311, 1317, 1319, 1322, 1331, 1335, 1339, 1340, 1341, 1342, 1343, 1345, 1349, 1357, 1358, 1359, 1360, 1361, 1370, 1371, 1372, 1374, 1378, 1379, 1386, 1416, 1417, 1444, 1445, 1455, 1456, 1457, 1459, 1469, 1476, 1482, 1484, 1485, 1489, 1492, 1495, 1496, 1497, 1499, 1504, 1506, 1507, 1509, 1510, 1512, 1516, 1517, 1519, 1523, 1533, 1535, 1538, 1545, 1550, 1556, 1558, 1559, 1563, 1565, 1566, 1569, 1600, 1613, 1619, 1622, 1623, 1633, 1642, 1664, 1665, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1722, 1727, 1728, 1732, 1734, 1736, 1746, 1747, 1750, 1752, 1756, 1757, 1758, 1759, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1791, 1794, 1795, 1797, 1798, 1799, 1801, 1804, 1805, 1806, 1812, 1813, 1814, 1817, 1818, 1819, 1821, 1826, 1828, 1829, 1830, 1831, 1832, 1833, 1835, 1839, 1844, 1845, 1853, 1854, 1856, 1857, 1860, 1861, 1863, 1864, 1865, 1866, 1867, 1882, 1883, 1884, 1888, 1892, 1894, 1898, 1899, 1900, 1901, 1903, 1905, 1907, 1908, 1909, 1912, 1913, 1917, 1927, 1928, 1950, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1964, 1968, 1969, 1971, 1972, 1974, 1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1992, 1993, 1994, 1996, 1997, 1999, 2001, 2002, 2004, 2005, 2006, 2008, 2009, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2020, 2022, 2023, 2024, 2026, 2029, 2030, 2031, 2032, 2033, 2035, 2037, 2038, 2041, 2043, 2044, 2047, 2048, 2049, 2050, 2051, 2052, 2054, 2056, 2057, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066, 2068, 2069, 2070, 2071, 2074, 2077, 2079, 2080, 2084, 2086, 2089, 2092, 2093, 2097, 2107, 2114, 2142, 2145, 2150, 2151, 2152, 2154, 2155, 2160, 2161, 2162, 2163, 2164, 2165], "i1": 1684, "i2": 1684, "i4": [1684, 2151], "i8": 1684, "iam": 1698, "id": [0, 416, 561, 1684, 1691, 1696, 1697, 1698, 1746, 2019, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2150, 2151, 2164], "ident": [365, 511, 576, 577, 578, 579, 580, 581, 582, 684, 990, 991, 1154, 1173, 1262, 1482, 1493, 1495, 1533, 1548, 1622, 1681, 1682, 1685, 1688, 1696, 1805, 1839, 1840, 1884, 1913, 1985, 2058, 2151, 2163], "identifi": [0, 8, 318, 327, 465, 466, 471, 478, 885, 1154, 1188, 1476, 1504, 1538, 1679, 1681, 1684, 1685, 1688, 1689, 1693, 1697, 1698, 1799, 1801, 1803, 1835, 1869, 1894, 1897, 2129, 2161, 2162, 2164, 2165], "identity_dim": 441, "identitytransform": [442, 576, 577, 578, 579, 580, 661, 1158], "identitytransformlik": [581, 582, 661], "ieee": [8, 1424, 1425, 1426, 1685, 1702, 2131, 2132, 2133, 2165], "iexpr": 2162, "if_equ": [1188, 1190, 1193, 1194, 1507, 1509, 1566, 1569, 1917, 2095, 2096], "if_not_equ": [1188, 1193, 1194, 1197, 1507, 1510, 1556, 1558, 1912, 2092, 2093, 2161], "iff": [99, 745, 990, 991, 1074], "ignor": [21, 24, 38, 253, 260, 263, 266, 270, 480, 490, 512, 526, 527, 534, 605, 666, 693, 695, 836, 943, 959, 966, 967, 990, 991, 995, 999, 1037, 1039, 1063, 1064, 1416, 1417, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1732, 1736, 2164, 2165], "ignorefutur": [21, 24, 526, 534], "ignoreresult": [1063, 1064], "ijg": 1682, "il": [1063, 1068, 1072], "imag": [1673, 1674, 1675, 1676, 1677, 1678, 1682], "imaginari": [1685, 2165], "imd": 1698, "immedi": [512, 526, 542, 696, 811, 823, 856, 966, 967, 1294, 1379, 1380, 1565, 1688, 1697, 1789, 1798, 1912, 2051, 2054, 2069, 2151, 2162], "immut": [8, 365, 586, 661, 1121, 1123, 1129, 1799, 2080, 2161, 2162], "impact": 1690, "implement": [8, 39, 131, 174, 416, 526, 551, 552, 553, 554, 555, 556, 586, 661, 1063, 1188, 1205, 1280, 1306, 1495, 1622, 1680, 1684, 1687, 1689, 1696, 1697, 1698, 1699, 1700, 1701, 1703, 1908, 1912], "impli": [42, 45, 178, 181, 197, 199, 202, 211, 395, 589, 591, 593, 663, 679, 931, 991, 995, 1002, 1209, 1212, 1213, 1216, 1223, 1316, 1329, 1387, 1388, 1389, 1685, 1983, 1993, 1994, 1996, 1997, 1999, 2008, 2071], "implicit": [8, 39, 228, 230, 354, 425, 427, 428, 430, 431, 432, 434, 443, 454, 518, 519, 520, 574, 575, 578, 579, 585, 586, 600, 601, 605, 615, 617, 661, 666, 672, 673, 734, 735, 736, 764, 765, 877, 878, 891, 915, 916, 918, 919, 920, 923, 990, 991, 1059, 1060, 1065, 1070, 1240, 1458, 1664, 1681, 1682, 1683, 1684, 1685, 1688, 1697, 1702, 1703, 1752, 1756, 1757, 1758, 1759, 1768, 1769, 1770, 1773, 1776, 1777, 1778, 1780, 1799, 1801, 1806, 1812, 1813, 1814, 1818, 1821, 1832, 1835, 1839, 1844, 1845, 1854, 1951, 1958, 1969, 1981, 1983, 2002, 2017, 2019, 2044, 2114, 2115, 2151, 2152, 2154, 2161, 2162, 2164], "implicit_low": [518, 519, 520, 546, 549, 627, 915, 917, 919, 1752, 1755, 1756, 1757, 1758, 1759, 1769], "implicit_lower_bound": [582, 586, 600, 661, 672, 991, 993, 1376, 1377, 1799, 1806, 1813, 1832, 1839, 1844, 1862, 2162], "implicit_upp": [518, 519, 520, 546, 549, 627, 915, 917, 920, 1752, 1755, 1756, 1757, 1758, 1759, 1762, 1770], "implicit_upper_bound": [582, 586, 601, 661, 673, 991, 993, 1376, 1377, 1799, 1806, 1814, 1832, 1839, 1845, 1862], "implicitli": [8, 39, 42, 43, 45, 174, 178, 204, 425, 490, 679, 748, 763, 764, 765, 772, 862, 865, 1065, 1070, 1188, 1205, 1240, 1246, 1257, 1284, 1290, 1291, 1306, 1445, 1681, 1682, 1684, 1685, 1688, 1697, 1703, 2162, 2163, 2164], "implicitorequ": [583, 585], "import": 2163, "impos": [1688, 2080, 2164], "imposs": 542, "improv": [1684, 1685, 1690, 1702, 1703, 2069, 2070], "in_place_t": [1063, 1068], "includ": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1681, 1682, 1683, 1684, 1686, 1687, 1689, 1692, 1695, 1697, 1698, 1702, 1745, 1799, 1804, 1888, 1905, 1908, 1983, 1992, 1993, 1994, 1996, 1997, 1999, 2008, 2017, 2030, 2032, 2033, 2035, 2048, 2051, 2058, 2066, 2069, 2127, 2150, 2162, 2164], "include_default": [1707, 1719, 1737, 1739, 1741, 1742, 1743, 1745, 1882, 1891, 1951, 1976, 1983, 2011], "include_repeated_el": [39, 845, 846, 847, 1054, 1297, 1298, 1306, 1454], "include_zero_metr": 2127, "includedefault": [8, 584, 801, 802, 806, 809], "inclus": [220, 223, 351, 459, 461, 518, 586, 610, 627, 628, 630, 633, 634, 635, 636, 641, 643, 644, 649, 652, 654, 655, 661, 676, 739, 811, 827, 994, 1055, 1238, 1688, 1752, 1756, 1757, 1758, 1771, 1772, 1799, 1806, 1815, 1816, 1823, 1832, 1839, 1847, 1848, 1850, 1857, 1870, 1872, 1876, 1951, 1972, 1983, 2006, 2019, 2049, 2053, 2162], "inclusive_max": [362, 518, 519, 520, 627, 628, 634, 637, 643, 648, 649, 654, 811, 1118, 1120, 1688, 1752, 1755, 1757, 1765, 1766, 1770, 1771, 1772, 1775, 1799, 1806, 1815, 1847, 2139], "inclusive_min": [174, 183, 196, 205, 220, 223, 351, 362, 451, 518, 519, 520, 627, 628, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 655, 656, 811, 812, 817, 827, 894, 897, 899, 903, 904, 907, 909, 911, 994, 1055, 1118, 1120, 1240, 1681, 1682, 1684, 1685, 1688, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1760, 1762, 1763, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1775, 1799, 1801, 1802, 1803, 1804, 1805, 1806, 1808, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1823, 1825, 1826, 1835, 1839, 1840, 1848, 1862, 1870, 1872, 1876, 1909, 1954, 1955, 1956, 1971, 1982, 1986, 1992, 2008, 2017, 2026, 2030, 2053, 2055, 2114, 2139, 2152, 2154], "inclusive_start": [427, 458, 459, 461, 463], "inclusive_stop": [459, 463], "incompat": [263, 350, 990, 991, 994, 1104, 1732, 1736, 1958, 1981, 2017, 2151, 2161], "incomplet": 1250, "inconsist": [1680, 1697], "incorrect": 1689, "increas": [1056, 1697, 2053, 2059], "increment": [110, 127, 129, 143, 158, 160, 227, 242, 661, 699, 724, 726, 1089, 1103, 1689, 1958, 1964, 1981, 2017, 2038, 2114, 2151, 2152, 2154, 2161, 2164], "incur": [661, 1678], "indefinit": [1152, 1703, 2069, 2161], "independ": [340, 427, 441, 876, 1682, 1688, 1702, 1951, 2151, 2164], "indetermin": 489, "index": [9, 10, 11, 18, 19, 45, 63, 64, 68, 71, 74, 75, 79, 80, 81, 84, 90, 95, 97, 98, 174, 178, 180, 181, 186, 188, 190, 191, 194, 196, 201, 202, 207, 210, 213, 218, 219, 252, 253, 265, 266, 282, 348, 349, 350, 351, 352, 354, 359, 360, 363, 392, 393, 406, 407, 408, 411, 412, 415, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 465, 467, 469, 470, 473, 477, 478, 479, 480, 481, 482, 484, 490, 517, 518, 519, 520, 521, 545, 546, 547, 548, 549, 557, 558, 559, 560, 563, 574, 575, 577, 580, 583, 585, 586, 587, 590, 593, 599, 603, 605, 606, 607, 610, 612, 614, 615, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 671, 672, 676, 678, 679, 681, 684, 685, 686, 687, 691, 693, 694, 695, 734, 735, 736, 740, 751, 752, 754, 756, 769, 772, 773, 774, 777, 778, 780, 784, 794, 798, 799, 841, 842, 848, 849, 860, 862, 863, 865, 868, 877, 878, 885, 886, 887, 915, 924, 929, 930, 932, 933, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 990, 991, 994, 1021, 1022, 1025, 1055, 1089, 1099, 1100, 1103, 1111, 1118, 1119, 1120, 1154, 1156, 1168, 1211, 1212, 1213, 1215, 1216, 1219, 1222, 1224, 1225, 1228, 1229, 1230, 1233, 1236, 1237, 1240, 1261, 1296, 1304, 1305, 1306, 1311, 1315, 1319, 1332, 1334, 1338, 1342, 1370, 1372, 1394, 1395, 1396, 1399, 1458, 1459, 1460, 1461, 1462, 1464, 1622, 1623, 1631, 1638, 1642, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1682, 1685, 1687, 1696, 1697, 1700, 1706, 1730, 1752, 1754, 1776, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1817, 1821, 1824, 1831, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1854, 1856, 1858, 1866, 1867, 1868, 1925, 1927, 1935, 1939, 1954, 1956, 1957, 1958, 1964, 1969, 1971, 1980, 1981, 1982, 1986, 1988, 1989, 1997, 2002, 2004, 2012, 2016, 2017, 2018, 2026, 2028, 2029, 2030, 2032, 2033, 2038, 2044, 2047, 2048, 2064, 2065, 2066, 2114, 2115, 2139, 2146, 2151, 2152, 2154, 2161, 2164], "index_arrai": [427, 433, 441, 661, 943, 953, 1370, 1688, 1841, 1862, 1925, 1927, 1929, 1957, 1988, 1989, 2004, 2018, 2028, 2029, 2033, 2047, 2065], "index_array_bound": [1688, 1841], "index_codec": [1685, 1700], "index_domain": [354, 551, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 625, 735, 766, 775, 877, 1376], "index_exp": [1799, 1817, 2161], "index_interv": [37, 252, 351, 360, 361, 362, 479, 517, 518, 519, 520, 521, 522, 545, 546, 547, 548, 549, 573, 574, 583, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 732, 734, 736, 739, 768, 769, 794, 875, 878, 915, 916, 917, 918, 919, 920, 921, 922, 923, 1118, 1119, 1120], "index_loc": [1685, 1700], "index_rang": [563, 666, 944, 948, 991, 1839, 1862, 1925, 1927, 1930], "index_spac": [12, 13, 14, 15, 34, 35, 348, 349, 350, 354, 415, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 480, 484, 485, 551, 552, 553, 563, 575, 576, 577, 578, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 625, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 735, 740, 766, 773, 775, 776, 778, 779, 780, 781, 789, 792, 793, 799, 844, 847, 855, 860, 876, 877, 882, 884, 885, 886, 887, 888, 889, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 990, 991, 992, 993, 994, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1357, 1370, 1376, 1377, 1576, 1582, 1589, 1598, 1607], "index_transform": [349, 350, 552, 563, 576, 577, 578, 579, 580, 581, 582, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 740, 776, 844, 990, 991, 992, 993, 994, 1296, 1370, 1377], "index_typ": [39, 68, 1622, 1623, 1638, 1642, 1647, 1648, 1654], "index_vector_arrai": [427, 435], "index_vector_or_scalar": [778, 779, 780, 781], "indexarrai": [427, 433, 441], "indexarrayslic": [427, 433, 435], "indexarrayview": [943, 944, 945, 946, 947, 948, 949, 950, 951, 953], "indexdomain": [8, 188, 354, 427, 442, 455, 551, 575, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 625, 661, 674, 735, 775, 877, 1089, 1094, 1096, 1097, 1104, 1154, 1168, 1376, 1681, 1682, 1684, 1685, 1688, 1702, 1706, 1732, 1736, 1752, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1835, 1840, 1843, 1951, 1954, 1955, 1956, 1957, 1958, 1965, 1971, 1981, 1982, 1983, 1986, 1997, 2017, 2019, 2026, 2027, 2030, 2031, 2039, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "indexdomaindimens": [8, 586, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624], "indexdomainview": [8, 12, 13, 14, 354, 575, 586, 625, 661, 674, 735, 766, 877, 991, 1240, 1253, 1306, 1324], "indexerror": [1777, 1779, 1780, 1782, 1783, 1784, 1785, 1819, 1821, 1830, 1853, 1854, 1865, 1957, 1968, 1969, 1979, 2001, 2002, 2015, 2043, 2044, 2063, 2162], "indexinnerproduct": [626, 1205], "indexinterv": [8, 37, 174, 183, 190, 196, 205, 206, 213, 252, 270, 360, 361, 362, 451, 479, 522, 545, 547, 548, 573, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 656, 657, 661, 732, 768, 915, 917, 918, 921, 944, 948, 994, 1118, 1119, 1120, 1370, 1688], "indexintervalref": [174, 190, 196, 206, 213, 627, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660], "indexintervaltyp": [196, 206, 213], "indexslic": [427, 434, 1240], "indextransform": [8, 13, 14, 34, 35, 39, 188, 348, 349, 350, 427, 456, 552, 576, 577, 578, 579, 580, 581, 582, 586, 605, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 740, 776, 844, 930, 933, 945, 951, 990, 991, 992, 993, 1154, 1155, 1156, 1158, 1176, 1240, 1241, 1296, 1306, 1314, 1315, 1339, 1341, 1377, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1702, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1802, 1805, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1925, 1926, 1927, 1928, 1935, 1939, 1951, 1956, 1957, 1971, 1982, 1983, 1986, 1987, 1988, 1989, 2004, 2012, 2018, 2019, 2026, 2027, 2029, 2033, 2146, 2162, 2165], "indextransformbuild": 1306, "indextransformview": [253, 255, 256, 477, 563, 661, 691, 994, 1089, 1100, 1304, 1305, 1314], "indextyp": [8, 39, 74, 196, 199, 201, 202, 207, 214, 216, 751, 1205, 1224, 1228], "indexvectorarrai": [427, 435], "indexvectorarrayslic": [427, 435, 1306], "indexview": [1121, 1129], "indic": [8, 39, 74, 75, 80, 99, 100, 101, 102, 103, 104, 108, 131, 140, 165, 174, 196, 227, 250, 260, 266, 282, 300, 303, 315, 359, 363, 365, 391, 392, 415, 416, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 442, 443, 444, 445, 446, 447, 451, 452, 453, 455, 456, 459, 473, 475, 478, 482, 486, 487, 488, 526, 547, 559, 560, 563, 569, 585, 586, 627, 661, 672, 673, 697, 739, 752, 754, 762, 764, 765, 772, 774, 777, 778, 781, 784, 795, 798, 799, 800, 801, 802, 811, 825, 862, 864, 869, 878, 879, 894, 903, 910, 915, 919, 920, 923, 943, 960, 990, 991, 994, 995, 1009, 1028, 1051, 1055, 1063, 1089, 1103, 1108, 1113, 1114, 1121, 1126, 1127, 1129, 1154, 1166, 1188, 1194, 1198, 1199, 1205, 1220, 1225, 1228, 1236, 1237, 1240, 1262, 1268, 1278, 1282, 1284, 1290, 1294, 1297, 1304, 1345, 1366, 1379, 1444, 1445, 1458, 1459, 1469, 1472, 1473, 1474, 1479, 1507, 1511, 1512, 1516, 1517, 1519, 1531, 1551, 1552, 1559, 1563, 1578, 1579, 1622, 1664, 1665, 1672, 1681, 1682, 1684, 1685, 1688, 1697, 1698, 1700, 1702, 1745, 1752, 1756, 1757, 1758, 1759, 1760, 1767, 1769, 1770, 1774, 1776, 1777, 1780, 1781, 1782, 1786, 1787, 1799, 1801, 1806, 1813, 1814, 1817, 1821, 1832, 1834, 1835, 1837, 1839, 1844, 1845, 1854, 1856, 1867, 1870, 1872, 1874, 1875, 1876, 1877, 1880, 1897, 1908, 1912, 1917, 1939, 1951, 1956, 1957, 1958, 1964, 1969, 1971, 1981, 1982, 1983, 1988, 1989, 1991, 2002, 2004, 2017, 2018, 2019, 2020, 2022, 2023, 2028, 2029, 2032, 2033, 2038, 2044, 2047, 2048, 2052, 2053, 2058, 2059, 2065, 2066, 2068, 2069, 2070, 2073, 2074, 2076, 2079, 2080, 2097, 2107, 2114, 2115, 2116, 2127, 2139, 2151, 2152, 2154, 2161, 2162, 2164], "indicaet": 1681, "indicesrank": [174, 359, 363], "indirect": [365, 427, 1697], "indirect_entri": 1697, "indirect_valu": [1697, 2150], "indirectli": [365, 527, 542, 1697, 1832, 2164], "individu": [283, 284, 318, 801, 1121, 1145, 1680, 1682, 1685, 1690, 2114, 2152, 2154, 2162, 2164], "ineffici": 1682, "inert": [427, 428, 1777, 2162], "inexpens": [416, 586], "inf": [8, 428, 430, 432, 434, 443, 627, 631, 632, 647, 918, 1688, 1702, 1732, 1736, 1752, 1756, 1757, 1759, 1763, 1765, 1766, 1771, 1772, 1777, 1778, 1779, 1780, 1781, 1785, 1787, 1800, 1805, 1806, 1808, 1830, 1836, 1837, 1838, 1839, 1841, 1856, 1865, 1867, 1878, 1896, 1908, 1912, 1979, 2015, 2063, 2139, 2146, 2161, 2162], "infer": [249, 458, 459, 842, 849, 990, 991], "inferred_bound": 990, "infin": [110, 585, 1456, 1459, 2165], "infinit": [37, 270, 354, 585, 615, 617, 627, 632, 877, 878, 915, 916, 1268, 1269, 1271, 1276, 1460, 1688, 1752, 1817, 1958, 1981, 2017, 2114, 2151, 2152, 2154, 2161, 2164], "infinitefutur": [1040, 1048, 1051, 1465, 1467, 1500, 1502, 1512, 1516, 1559, 1563], "infinitepast": [1268, 1275], "influenc": 990, "info": 1682, "inform": [100, 101, 425, 569, 672, 697, 879, 1154, 1164, 1175, 1188, 1202, 1498, 1499, 1686, 1689, 1691, 1692, 2020, 2059, 2151], "infti": 1688, "inherit": [260, 266, 1740, 1748, 1749, 1750], "initi": [16, 17, 18, 19, 20, 39, 110, 112, 227, 229, 416, 418, 455, 456, 489, 490, 492, 526, 692, 693, 695, 699, 701, 850, 962, 981, 984, 986, 1063, 1205, 1665, 1670, 1689, 1691, 1692, 1697, 1698, 1702, 2053, 2153, 2161, 2162], "initial_delai": [1691, 1692, 1698], "initial_result": 984, "initializearrai": [39, 692], "initializecontiguouslayout": [693, 694, 695, 1205, 1212], "initializer_list": [995, 996, 997, 998, 1063, 1068, 1072], "inlin": [8, 39, 486, 487, 488, 512, 697, 698, 795, 995, 999, 1113, 1205, 1445, 1697, 2162], "inline_buffer_s": [486, 487], "inline_rank": [697, 795], "inline_s": 174, "inline_valu": 2150, "inline_vers": 1697, "inlineexecutor": [512, 526, 696, 857, 858, 1375], "inlinerank": [8, 697, 698, 795, 995, 999], "inlineranklimit": [697, 698], "inner": [174, 253, 316, 326, 358, 361, 362, 626, 627, 995, 1002, 1205, 1684, 1685, 1727, 1728, 1752, 1753], "inner_ord": [253, 300, 326, 1681, 1682, 1684, 1685, 1706, 1722, 1727, 1728, 1729, 1730, 1733, 1734, 1954, 1955, 1956, 1957, 1958, 1959, 1961, 1971, 1976, 1982, 2008, 2036, 2055, 2151, 2164], "inner_order_soft_constraint": [1706, 1722, 1727, 1728, 1734, 2164], "innerbox": [174, 358], "innermost": [253, 300, 352, 393, 693, 694, 1706, 1722, 1727, 1734, 2164], "innerord": [253, 300, 301, 302, 303, 304, 305, 306, 316, 326, 1094], "input": [8, 174, 249, 253, 255, 256, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 477, 546, 563, 578, 579, 581, 582, 627, 661, 662, 667, 668, 672, 673, 674, 675, 676, 677, 678, 681, 689, 690, 740, 799, 930, 938, 943, 944, 950, 954, 955, 960, 990, 991, 994, 1055, 1060, 1100, 1296, 1304, 1305, 1319, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1702, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1804, 1821, 1832, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1854, 1855, 1856, 1867, 1925, 1928, 1958, 1969, 1981, 2002, 2012, 2017, 2044, 2114, 2115, 2146, 2151, 2152, 2154, 2161, 2162, 2165], "input_constraint": [253, 256], "input_dim": [661, 990], "input_dimens": [943, 954, 960, 1683, 1688, 1805, 1838, 1839, 1840, 1841, 1862, 1925, 1928, 1931, 1988, 2011, 2028, 2065, 2114, 2152, 2154, 2162, 2163], "input_domain": [661, 674, 1324], "input_exclusive_max": [1683, 1688, 1777, 1788, 1832, 1835, 1839, 1841, 1844, 1845, 1846, 1862, 1986, 1987, 1988, 1989, 1992, 2004, 2011, 2017, 2018, 2019, 2026, 2027, 2028, 2029, 2034, 2035, 2047, 2058, 2065, 2111, 2114, 2151, 2152, 2154, 2162, 2163], "input_inclusive_max": [1688, 1782, 1832, 1839, 1847], "input_inclusive_min": [1683, 1688, 1777, 1782, 1783, 1784, 1788, 1832, 1835, 1839, 1841, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1862, 1986, 1987, 1988, 1989, 1992, 2004, 2011, 2017, 2018, 2019, 2026, 2027, 2028, 2029, 2034, 2035, 2047, 2058, 2065, 2111, 2114, 2151, 2152, 2154, 2162, 2163], "input_indic": [661, 666, 799], "input_label": [605, 661, 675, 684, 1688, 1777, 1778, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1832, 1835, 1839, 1841, 1843, 1849, 1851, 1855, 1859, 1862, 1986, 1987, 2026, 2027, 2151, 2162, 2163], "input_origin": [451, 661, 676, 684, 1832, 1848, 1850], "input_rank": [350, 428, 438, 452, 453, 467, 478, 605, 661, 662, 665, 666, 668, 675, 676, 677, 678, 930, 938, 943, 955, 990, 1156, 1333, 1688, 1777, 1780, 1805, 1832, 1834, 1835, 1836, 1838, 1839, 1844, 1845, 1851, 1855, 1926, 1928, 1957, 1989, 2029, 2146, 2162], "input_shap": [661, 678, 684, 945, 951, 1688, 1778, 1783, 1784, 1785, 1786, 1832, 1839, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1859, 1862, 1927, 1957, 1986, 1987, 1988, 1989, 2004, 2018, 2029, 2033, 2162], "input_unit": [477, 1304], "inputrank": [8, 427, 456, 552, 582, 586, 605, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 844, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 990, 991, 992, 993, 1296, 1377], "inputrankb": [661, 684], "insensit": 1692, "insert": [1612, 1685, 2162], "instal": [526, 1687, 1691], "instanc": [0, 39, 90, 91, 174, 365, 416, 490, 512, 526, 586, 661, 742, 746, 759, 760, 770, 775, 776, 783, 787, 788, 792, 847, 859, 1063, 1112, 1181, 1205, 1306, 1314, 1364, 1375, 1698, 1747, 1791, 2119, 2120, 2129], "instead": [8, 12, 19, 79, 80, 253, 526, 542, 892, 951, 981, 985, 1184, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1689, 1697, 1788, 1817, 1832, 1883, 1899, 1912, 2017, 2029, 2058, 2069, 2151, 2161, 2162], "instruct": 1687, "instrument": [1702, 2128], "int": [2, 3, 5, 6, 43, 45, 79, 110, 126, 127, 143, 157, 158, 205, 218, 247, 249, 251, 353, 428, 526, 699, 723, 724, 833, 835, 845, 846, 852, 857, 858, 1121, 1127, 1147, 1149, 1181, 1184, 1205, 1232, 1306, 1686, 1702, 1706, 1707, 1709, 1713, 1714, 1715, 1716, 1717, 1718, 1720, 1722, 1725, 1726, 1727, 1728, 1729, 1730, 1734, 1752, 1754, 1756, 1757, 1758, 1761, 1765, 1766, 1771, 1772, 1775, 1776, 1782, 1783, 1784, 1785, 1788, 1796, 1799, 1803, 1806, 1809, 1811, 1815, 1816, 1822, 1823, 1824, 1825, 1826, 1828, 1829, 1830, 1832, 1834, 1839, 1846, 1847, 1848, 1850, 1851, 1852, 1855, 1857, 1859, 1860, 1861, 1863, 1864, 1865, 1909, 1925, 1926, 1927, 1928, 1931, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1945, 1951, 1958, 1970, 1972, 1973, 1974, 1975, 1977, 1978, 1979, 1981, 1983, 2003, 2006, 2007, 2009, 2010, 2013, 2014, 2015, 2017, 2019, 2046, 2049, 2050, 2053, 2056, 2057, 2061, 2062, 2063, 2097, 2105, 2114, 2115, 2117, 2118, 2129, 2139, 2147, 2149, 2151, 2152, 2154, 2161, 2162], "int16": [425, 1681, 1682, 1684, 1685, 1702, 2140, 2165], "int16_t": [8, 247, 1432], "int32": [249, 425, 561, 1252, 1670, 1671, 1681, 1682, 1683, 1684, 1685, 1702, 1777, 1953, 2046, 2050, 2141, 2151, 2162, 2165], "int32_t": [8, 247, 249, 398, 561, 1011, 1012, 1055, 1059, 1240, 1378, 1433], "int32l": 1697, "int4": [8, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 1403, 1615, 1684, 1685, 1702, 2142, 2165], "int4_t": [8, 1434], "int4pad": [8, 110, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 1403, 1434, 1615], "int64": [249, 1681, 1684, 1685, 1702, 2143, 2162, 2165], "int64_t": [8, 220, 222, 223, 226, 249, 585, 894, 903, 904, 907, 908, 909, 910, 911, 914, 1435], "int8": [8, 699, 1681, 1682, 1684, 1685, 1702, 2144, 2165], "int8_t": [8, 247, 699, 700, 710, 1436], "integ": [0, 8, 110, 115, 143, 165, 227, 238, 240, 241, 242, 243, 247, 266, 350, 415, 430, 432, 433, 434, 435, 441, 443, 479, 511, 518, 519, 520, 563, 627, 697, 699, 703, 799, 964, 990, 991, 994, 1121, 1128, 1132, 1150, 1411, 1434, 1450, 1618, 1663, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1696, 1697, 1698, 1699, 1702, 1752, 1781, 1802, 1803, 1805, 1856, 1971, 2004, 2047, 2048, 2140, 2141, 2142, 2143, 2144, 2156, 2157, 2158, 2159, 2164, 2165], "integr": 2162, "integral_const": [473, 564, 570, 1039, 1185, 1186, 1205, 1622], "intend": [8, 685, 981, 1113, 1242, 1420, 1421, 1485, 1691, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1780], "intent": [21, 24, 526, 534, 1063, 1064], "interdepend": [390, 1892, 1913, 2017, 2058], "interfac": [8, 19, 21, 435, 474, 526, 879, 965, 981, 1089, 1379, 1687, 1696, 1869, 1946, 2030, 2031, 2032, 2033, 2048, 2066, 2097], "interior": 545, "interleav": [427, 433, 434, 435, 441, 2162], "intermedi": [365, 964, 2162], "intern": [365, 427, 455, 456, 1681, 1682, 1686, 1702, 1908, 1912, 2142, 2150, 2153, 2165], "interoper": [1089, 1113, 1788, 2019, 2025, 2108, 2163], "interpret": [811, 1040, 1046, 1345, 1468, 1499, 1506, 1517, 1519, 1531, 1565, 1685, 1692, 1697, 1817, 1877, 1880, 2080, 2162, 2164, 2165], "interrupt": [1794, 1797], "intersect": [174, 354, 425, 431, 480, 522, 586, 627, 732, 733, 734, 735, 736, 737, 738, 811, 892, 915, 990, 995, 997, 1028, 1056, 1060, 1121, 1138, 1581, 1582, 1583, 1584, 1585, 1586, 1752, 1773, 1778, 1799, 1818, 2020], "intersectindexdomain": [586, 735], "intersectpreferringexplicit": [736, 915], "intersectsprefix": [738, 811], "interv": [8, 174, 183, 190, 196, 205, 206, 213, 252, 351, 360, 427, 430, 432, 443, 445, 447, 451, 467, 479, 518, 519, 520, 522, 545, 546, 547, 548, 549, 563, 573, 574, 585, 615, 618, 619, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 652, 654, 656, 658, 660, 732, 734, 736, 739, 768, 878, 915, 916, 917, 918, 919, 920, 921, 922, 944, 948, 991, 1118, 1119, 1120, 1672, 1688, 1691, 1698, 1702, 1732, 1736, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1765, 1766, 1767, 1771, 1772, 1775, 1869, 1870], "interval_form": [351, 521, 915], "intervalform": [351, 521, 627, 739, 915], "intn_t": [247, 425], "introduc": 1687, "introspect": 1746, "invalid": [108, 143, 146, 270, 371, 375, 416, 418, 430, 432, 435, 443, 465, 466, 482, 561, 563, 586, 590, 596, 597, 650, 668, 670, 842, 843, 849, 854, 884, 888, 924, 925, 930, 932, 943, 952, 994, 1154, 1160, 1169, 1171, 1188, 1191, 1192, 1195, 1240, 1247, 1256, 1306, 1318, 1357, 1358, 1359, 1360, 1372, 1482, 1486, 1533, 1539, 1622, 1653], "invari": [641, 642, 643, 644, 648, 672, 965, 972], "invers": [110, 393, 559, 560, 661, 699, 711, 740, 741, 963, 1404, 1405, 1406, 1407, 1408, 1409], "inverse_perm": [393, 741], "inversetransform": [661, 740], "invert": 740, "invertpermut": [393, 741], "invoc": [836, 838, 967, 1100, 1689, 2162], "invok": [3, 5, 16, 512, 513, 526, 527, 587, 662, 798, 799, 836, 838, 839, 845, 856, 858, 965, 966, 967, 983, 1125, 1127, 1375, 1512, 1516, 1559, 1563, 1689, 1788, 1790], "invoke_result_t": [526, 857, 858, 859, 962, 1063, 1080], "involv": [430, 1688, 2162], "io": [1690, 1702, 2128], "ip": 1686, "irrespect": [1782, 1908, 1912], "is_array_v": [416, 762], "is_assignable_v": 1329, "is_base_of_v": 1374, "is_const_v": [490, 763, 764, 765, 970, 971, 1649, 1659], "is_constructible_v": [40, 44, 502, 850, 971, 983, 984, 985, 986, 1065, 1070, 1079], "is_convertible_v": [8, 40, 42, 43, 44, 45, 111, 533, 700, 773, 857, 1065, 1070, 1076, 1079, 1316], "is_empti": [174, 185, 196, 209], "is_function_v": [416, 762], "is_integ": [115, 703], "is_integral_v": [238, 240, 241, 242, 243], "is_non_empty_prefix": [811, 828], "is_noop": [661, 994], "is_reference_v": [416, 762], "is_same_v": [8, 38, 145, 490, 528, 535, 753, 763, 764, 891, 1030, 1033, 1076, 1130, 1137, 1375], "is_singleton": [811, 829], "is_unsigned_v": [143, 165], "is_void_v": [38, 74, 75, 227, 231, 416, 490, 763, 764, 765, 1416], "is_volatile_v": [416, 762], "isarrai": [8, 39, 46, 72, 98, 399, 581, 742, 773, 793, 798, 844, 855, 1296, 1306, 1316, 1321, 1329, 1337, 1338], "isarraybasepointerconvert": [490, 493, 494, 743], "isarrayexplicitlyconvert": [39, 744], "isarrayoriginkindconvert": [39, 98, 99, 744, 745, 1209, 1217, 1223], "isboxlik": [18, 174, 197, 211, 358, 429, 446, 576, 746, 1238], "isboxlikeexplicitlyconvertibletorank": [174, 182, 203, 747], "isboxlikeimplicitlyconvertibletorank": [174, 176, 187, 204, 748], "isbroadcastscalar": [39, 749, 750, 1205], "isclean": [1188, 1192], "iscompatiblefullindexpack": [8, 74, 751, 1224], "iscompatiblefullindexvector": [8, 75, 752, 1225], "iscompatibleoptionsequ": [8, 398, 569, 753, 891, 1011, 1012, 1055, 1059, 1159, 1262, 1378, 1476, 1495, 1504, 1538], "iscompatiblepartialindexvector": [8, 80, 754, 1228, 1236, 1237], "iscontiguouslayout": [39, 755, 756, 1205], "iscontiguouslayoutord": [18, 43, 45, 397, 693, 694, 695, 755, 756, 757, 1205, 1212], "isdatatypeconversionsupport": [416, 758], "iselementpoint": [490, 493, 759], "iselementpointercastconvert": [490, 495, 760], "iselementtag": [39, 490, 507, 761, 1306], "iselementtyp": [39, 416, 490, 761, 762, 1306], "iselementtypeexplicitlyconvert": [39, 490, 744, 763], "iselementtypeimplicitlyconvert": [228, 230, 490, 743, 764], "iselementtypeonlyexplicitlyconvert": [228, 230, 236, 490, 765], "isfinit": [110, 174, 586, 627, 766, 767, 768, 1455], "isfiniteindex": [585, 769], "isful": [894, 896], "isfutur": [526, 770], "isfutureconvert": [526, 528, 530, 532, 535, 771, 968, 974, 1030, 1033], "isimplicitlycompatiblefullindexvector": [8, 45, 178, 181, 772], "isindexarrai": [8, 433, 435, 441, 773], "isindexconvertiblevector": [8, 359, 363, 774], "isindexdomain": [586, 775], "isindextransform": [254, 348, 661, 776, 855, 1090, 1338], "isindexvector": [8, 777], "isindexvectororscalar": [427, 430, 432, 434, 443, 444, 445, 447, 451, 778, 779, 780, 781], "isinf": [110, 1456], "ismodeexplicitlyconvert": [782, 1028], "ismutableboxlik": [174, 197, 203, 211, 783, 1238], "ismutableindexvector": [8, 784], "isnan": [110, 1457], "isnonvoidarraybasepoint": [490, 494, 785], "isnovalu": [1188, 1193], "isol": [1242, 1280, 1294, 1485, 1687, 2070, 2071], "isomorph": [390, 1495, 1892, 1913, 2017, 2058], "isopt": [8, 253, 306, 753, 801, 802, 803, 1089, 1094, 1101, 1472, 1473, 1551, 1552], "ispossiblysamedatatyp": [416, 786], "israng": [894, 895, 897], "isresult": [787, 962, 1063], "isshar": [9, 490, 761, 788, 789, 1112, 1306, 1357, 1358, 1359, 1360], "issharedarraylik": [789, 1306], "isstat": [894, 898], "isstaticcastconstruct": [8, 46, 790, 1181, 1182, 1320, 1321], "isstridedlayout": [791, 1205], "issu": [1691, 1698, 2069], "issuffix": [894, 899], "issuffixlength": [894, 900], "istransformedarrai": [792, 793, 847, 1306, 1317, 1320, 1330], "istransformedarraylik": [415, 789, 793, 1306], "isunknown": [1188, 1194], "isvalid": [1188, 1195], "isvalidindex": [585, 794], "isvalidinlinerank": [697, 795], "isvalidpermut": [393, 741, 796], "isvalidrank": [473, 592, 797], "item": [90, 95, 526], "iter": [39, 143, 145, 146, 149, 152, 153, 155, 156, 164, 798, 799, 800, 833, 834, 835, 924, 925, 926, 927, 930, 934, 935, 939, 1054, 1121, 1124, 1126, 1297, 1300, 1306, 1361, 1454, 1622, 1625, 1626, 1629, 1639, 1644, 1646, 1666, 1752, 1760], "iterateoverarrai": [39, 798], "iterateovertransformedarrai": [799, 1306], "iteration_constraint": [1297, 1298, 1300], "iterationconstraint": [8, 19, 20, 39, 798, 799, 800, 844, 845, 846, 847, 1296, 1297, 1298, 1300, 1306], "iterator_categori": [143, 149, 924, 927], "its": [174, 359, 363, 398, 427, 434, 446, 540, 586, 600, 601, 666, 891, 965, 1011, 1012, 1055, 1059, 1109, 1188, 1262, 1343, 1378, 1495, 1533, 1537, 1685, 1688, 1689, 1690, 1697, 1702, 1740, 1743, 1744, 1748, 1780, 1799, 1808, 1832, 1841, 1908, 1912, 1951, 1959, 2080, 2083, 2142, 2162, 2164, 2165], "itself": [365, 425, 459, 511, 542, 1345, 1379, 1504, 1680, 1683, 1689, 1690, 1697, 2069, 2097, 2162], "j": [8, 12, 13, 371, 374, 427, 441, 445, 447, 451, 605, 801, 891, 1240, 1482, 1504, 1688, 1697, 1801, 1835], "janelia": 2151, "jax": [525, 1684, 1702, 2108, 2134, 2135, 2136, 2137, 2138, 2142], "job": 2129, "join": [1482, 1483, 1533, 1534, 1679, 1680, 1681, 1682, 1684, 1685, 1869, 1882, 1887, 1904], "jointli": [39, 427, 433, 435, 798, 799, 1306, 2069], "jpeg": [1679, 1682, 1689, 1696, 2165], "jpeg_qual": 1682, "jpg": 1675, "json": [0, 340, 344, 346, 365, 369, 370, 371, 374, 377, 378, 385, 584, 801, 891, 1154, 1173, 1349, 1437, 1482, 1495, 1504, 1533, 1548, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1697, 1698, 1699, 1702, 1706, 1707, 1710, 1719, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1731, 1733, 1734, 1735, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1748, 1799, 1808, 1827, 1832, 1841, 1862, 1869, 1882, 1884, 1885, 1886, 1891, 1902, 1910, 1951, 1953, 1959, 1960, 1976, 1983, 1985, 1990, 1991, 2011, 2080, 2083, 2091, 2145, 2147, 2148, 2150, 2151, 2164], "json_point": 1680, "json_serialization_opt": [801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "json_serialization_options_bas": 584, "json_spec": [365, 369, 370, 891, 1240, 1482, 1504], "json_t": [8, 1437], "jsonserializationopt": [8, 340, 344, 365, 371, 378, 385, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "jtc1": 1063, "just": [263, 892, 1029, 1512, 1516, 1559, 1563, 1679, 1681, 1682, 1684, 1685, 1686, 1688, 2017, 2058, 2151, 2162, 2163], "k": [39, 427, 433, 434, 435, 441, 605, 697, 795, 811, 820, 1121, 1133, 1697, 1786, 1801, 1835], "katopen": 1042, "kbitsperblock": [143, 150, 165, 166, 168], "kcancel": [1279, 1288], "kcanreinterpretcast": 425, "kcodec": [253, 257, 258, 267, 268, 318], "keep": 2069, "kei": [357, 811, 814, 815, 816, 818, 819, 820, 822, 823, 824, 826, 828, 829, 894, 906, 1154, 1171, 1188, 1240, 1256, 1465, 1466, 1468, 1469, 1481, 1482, 1498, 1499, 1500, 1501, 1503, 1506, 1507, 1509, 1510, 1517, 1525, 1533, 1541, 1556, 1558, 1564, 1565, 1566, 1569, 1680, 1681, 1682, 1684, 1687, 1702, 1740, 1746, 1869, 1870, 1872, 1874, 1877, 1881, 1882, 1883, 1887, 1888, 1889, 1890, 1893, 1894, 1897, 1899, 1900, 1901, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1983, 2000, 2017, 2019, 2042, 2069, 2070, 2150, 2151, 2163, 2164], "kept": [1682, 1689], "key_encod": 1684, "key_prefix_length": 1697, "key_rang": [356, 357, 364, 733, 737, 738, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 840], "key_suffix": 1697, "key_suffix_length": 1697, "keyboard": [1794, 1797], "keyboardinterrupt": [1794, 1797], "keyerror": [1900, 1901, 1903, 1912], "keyrang": [8, 356, 357, 364, 733, 737, 738, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 840, 1465, 1466, 1469, 1482, 1500, 1501, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1907, 1908, 1909], "keyvaluestorebackedchunkdriv": [1679, 1681, 1682, 1684, 1685, 2165], "keyword": 1788, "kfailedprecondit": 994, "kident": 425, "kimplicit": [8, 282, 351, 444, 445, 447, 451, 517, 518, 519, 520, 583, 585, 862, 863, 867, 915, 994, 1055, 1458], "kind": [36, 39, 59, 98, 99, 507, 510, 615, 616, 745, 847, 1040, 1042, 1205, 1218, 1306, 1314, 1328, 1337, 1603], "kinfindex": [98, 362, 428, 451, 518, 519, 545, 585, 637, 638, 639, 641, 642, 643, 644, 648, 794, 1118, 1120, 1459], "kinfsiz": [585, 639, 648, 1460], "kinvalidargu": [12, 98, 218, 219, 248, 249, 270, 348, 350, 351, 354, 400, 415, 430, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 447, 451, 452, 453, 478, 482, 518, 519, 520, 545, 547, 548, 563, 575, 587, 605, 628, 630, 633, 662, 735, 740, 799, 845, 855, 875, 877, 878, 884, 885, 886, 887, 888, 990, 991, 994, 1118, 1120, 1155, 1304, 1342, 1371, 1372], "kmax": 483, "kmaxfiniteindex": [445, 447, 451, 585, 644, 769, 1120, 1461], "kmaxfinites": [585, 1462], "kmaxrank": [8, 39, 473, 475, 697, 795, 1344, 1371, 1463], "kmean": [481, 482, 483], "kmedian": 483, "kmin": 483, "kminfiniteindex": [445, 447, 451, 585, 643, 769, 1120, 1464], "kmiss": [1519, 1524], "kmode": 483, "know": 2151, "known": [8, 227, 248, 416, 484, 765, 892, 1154, 1164, 1175, 1183, 1268, 1699, 2114, 2152, 2154], "kok": [6, 8, 861, 1063], "koutofrang": [252, 350, 351, 415, 430, 432, 433, 434, 435, 441, 443, 445, 447, 451, 518, 519, 520, 605, 666, 799, 909, 990, 991, 1120, 1370], "kread": [253, 257, 258, 270, 308, 309, 318, 330], "ksafeandimplicit": [425, 758], "kspecifi": [1042, 1048], "kstride": 483, "ksupport": 425, "kunimpl": 1495, "kunknown": [986, 1063, 1067], "kunspecifi": [1040, 1042, 1046, 1517, 1519, 1524, 1531], "kunspecifiedusag": [253, 257, 258, 261, 264, 291, 315, 318, 327, 330], "kvalu": [1517, 1519, 1524, 1532], "kvstack": 1693, "kvstore": [8, 220, 221, 222, 223, 224, 225, 226, 356, 357, 364, 365, 390, 391, 733, 737, 738, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 840, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1154, 1159, 1171, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1240, 1256, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1780, 1788, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1983, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2007, 2008, 2011, 2012, 2017, 2018, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2110, 2150, 2151, 2161, 2162, 2163], "kvstoreservic": 1699, "kvstoreurl": [1679, 1680, 1681, 1682, 1684, 1685, 1690, 1691, 1692, 1693, 1695, 1698], "kwrite": [253, 257, 258, 270, 315, 318, 319, 320, 330], "l": [427, 436], "label": [8, 13, 354, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 454, 465, 468, 469, 470, 478, 480, 484, 575, 578, 586, 587, 591, 602, 615, 616, 619, 620, 621, 622, 623, 661, 662, 675, 735, 740, 875, 877, 885, 887, 888, 889, 1306, 1327, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1702, 1752, 1755, 1756, 1757, 1758, 1759, 1762, 1763, 1768, 1773, 1774, 1776, 1777, 1778, 1779, 1786, 1799, 1800, 1802, 1803, 1804, 1806, 1807, 1808, 1812, 1818, 1819, 1820, 1831, 1832, 1836, 1839, 1849, 1853, 1866, 1951, 1954, 1955, 1956, 1957, 1958, 1965, 1968, 1971, 1980, 1981, 1982, 1983, 1986, 2001, 2016, 2017, 2019, 2026, 2027, 2030, 2031, 2039, 2043, 2064, 2114, 2115, 2116, 2151, 2152, 2154, 2161, 2164], "labelckind": [8, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624], "lambda": 1788, "larg": [1687, 1690, 1697, 1699, 1909, 2025], "larger": [574, 575, 734, 735, 736, 1688, 1690, 1697, 2163], "largest": [545, 627, 1682], "last": [13, 90, 96, 133, 393, 435, 438, 458, 459, 526, 672, 695, 836, 886, 986, 1109, 1622, 1624, 1640, 1641, 1683, 1688, 1694, 1703, 1777, 1792, 1803, 1804, 1900, 1901, 1903, 1912, 1948, 1957, 2162], "latenc": [1687, 1697, 2069, 2151], "later": [891, 1689, 1690, 2151, 2152], "latest": [1689, 1697, 1698], "latter": [860, 1311, 1684, 1697], "layer": [1680, 1681, 1682, 1683, 1684, 1685, 1694, 1702, 2069, 2114, 2152, 2154, 2164], "layout": [8, 18, 19, 20, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 55, 69, 70, 74, 75, 79, 80, 98, 108, 219, 253, 255, 256, 269, 291, 312, 328, 348, 352, 355, 392, 393, 556, 558, 570, 693, 694, 695, 697, 750, 755, 756, 833, 845, 847, 944, 946, 949, 1011, 1013, 1015, 1089, 1101, 1113, 1114, 1154, 1164, 1205, 1209, 1210, 1212, 1214, 1215, 1218, 1220, 1221, 1223, 1225, 1227, 1228, 1231, 1234, 1235, 1236, 1240, 1250, 1296, 1306, 1314, 1322, 1328, 1337, 1343, 1687, 1702, 1706, 1707, 1721, 1722, 1729, 1730, 1732, 1733, 1734, 1736, 1951, 1958, 1961, 1981, 1983, 1993, 2017, 2019, 2036, 2051, 2151, 2161], "layout_container_kind": [39, 70, 1306, 1328, 1337, 1338], "layout_ord": [18, 39, 1013, 1015], "layoutckind": [8, 39, 553, 557, 749, 755, 1236, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1340, 1342, 1357, 1358], "layoutcontainerkind": [8, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 554, 1113, 1116], "layoutord": [18, 39, 43, 45, 393, 397, 693, 694, 695, 755, 756, 1205, 1212], "layoutorderconstraint": [8, 800, 833, 834, 835, 1297, 1298, 1302], "lazili": [8, 365, 367, 433, 435, 441], "ld": 1689, "lead": [13, 39, 270, 459, 570, 892, 966, 1205, 1294, 1343, 1344, 1349, 1372, 1679, 1681, 1682, 1684, 1685, 1688, 1689, 1690, 1698, 1703, 1789, 1912, 2017, 2051, 2054, 2058, 2069, 2086, 2151, 2164], "leap": 1697, "leas": 1697, "lease_dur": 1697, "least": [0, 13, 102, 416, 455, 456, 563, 605, 786, 877, 878, 972, 995, 998, 1681, 1683, 1686, 1688, 1801, 1835, 2020, 2162], "leav": [16, 143, 165, 170, 227, 229, 489, 540, 1681, 1685, 1782, 1783, 1784, 1828, 1829, 1863, 1864, 1977, 1978, 2013, 2014, 2061, 2062, 2161], "left": [13, 253, 392, 398, 605, 699, 727, 728, 903, 1012, 1113, 1304, 1305, 1378, 1476, 1538, 1682, 1685, 1688, 1697, 1801, 1835, 2151, 2161], "legaci": 2162, "len": 1809, "length": [8, 12, 19, 174, 180, 191, 194, 196, 201, 214, 216, 219, 359, 363, 427, 453, 481, 482, 586, 602, 605, 610, 612, 626, 675, 676, 678, 741, 778, 779, 869, 870, 874, 885, 888, 894, 900, 908, 911, 1055, 1089, 1188, 1202, 1205, 1252, 1500, 1503, 1622, 1654, 1672, 1681, 1684, 1685, 1688, 1697, 1702, 1834, 2053, 2150, 2155, 2160, 2162, 2164], "leq": 1688, "less": [110, 174, 363, 648, 995, 1003, 1004, 1103, 1411, 1450, 1688, 1958, 1964, 1981, 2017, 2038, 2080, 2084, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "lessequalorunspecifi": [995, 1003], "lessorunspecifi": [995, 1004], "level": [19, 253, 1671, 1676, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1697, 1698, 1912, 2163, 2164], "lexicograph": [8, 811, 1672, 1685, 1722, 1727, 1734, 1869, 1870, 1872, 1876, 2051, 2164], "libaom": 1689, "libavif": 1689, "libcurl": 1686, "libjpeg": 1689, "libpng": 1689, "librari": [174, 365, 924, 1113, 1345, 1665, 1682, 1684, 1687, 1817, 1832, 2162], "libtiff": 1689, "libwebp": 1689, "lightweight": 2162, "like": [4, 174, 176, 187, 196, 197, 211, 359, 363, 365, 390, 391, 526, 571, 747, 748, 767, 862, 869, 1089, 1103, 1113, 1114, 1686, 1687, 1689, 1691, 1692, 1703, 1790, 1802, 1805, 1964, 2129, 2151, 2162], "likewis": [1118, 2162], "limit": [0, 8, 365, 526, 697, 698, 1121, 1262, 1379, 1509, 1677, 1686, 1687, 1688, 1689, 1691, 1692, 1693, 1697, 1698, 1750, 1751, 2097, 2161], "line": [1689, 1692, 1697, 2153], "linear": [392, 559], "link": [836, 837, 838, 839, 856, 858, 981, 983, 984, 985, 1029, 1373, 1374, 1686, 1689, 1946, 1947, 1948, 1949], "linkerror": [526, 837, 981, 984], "linkresult": [526, 838], "linkvalu": [526, 839, 981, 985], "linux": [247, 1686, 1689], "list": [7, 18, 45, 75, 80, 359, 363, 427, 430, 432, 434, 436, 441, 443, 444, 445, 447, 451, 453, 478, 481, 482, 485, 586, 593, 609, 841, 842, 848, 849, 1089, 1125, 1127, 1205, 1225, 1228, 1236, 1482, 1499, 1500, 1502, 1681, 1686, 1688, 1689, 1691, 1694, 1697, 1698, 1702, 1760, 1803, 1869, 1907, 1908, 1909, 1912, 2117, 2118, 2127, 2128, 2130, 2151, 2153, 2162], "listentri": [1482, 1498, 1499], "listfutur": [1482, 1498, 1499, 1500], "listopt": [1482, 1499, 1500, 1501, 1502, 1503], "liter": [1685, 1950, 2162], "littl": [1682, 1684, 1685, 1700, 2165], "live": 540, "lld": 1689, "ln": [110, 1572, 1574], "load": 1689, "loc": [8, 861], "local": [8, 1268, 1686, 1687, 1690, 1691, 1693], "localhost": [1691, 1698, 2129], "localstack": 1698, "locat": [64, 165, 854, 1685, 1686, 1691, 1692, 1697, 1698, 1700, 2055, 2150, 2151], "lock": [526, 975, 1690], "lockfil": 1690, "log": [4, 5, 8, 110, 1572, 1686, 1697, 1702, 2130], "log10": [110, 1573], "log1p": [110, 1574], "log2": [110, 1575], "log_": [110, 1573], "log_2": [110, 1575], "logarithm": [110, 1572, 1573, 1574, 1575, 1697], "logic": [39, 108, 174, 427, 586, 648, 684, 800, 1114, 1306, 1688, 1697, 1799, 2069, 2165], "login": 1691, "long": [98, 247, 836, 860, 930, 943, 1205, 1311, 1700], "longer": [1379, 1386, 2097], "longest": [811, 840], "longestprefix": [811, 840], "loop": [1788, 1789, 1790, 2161], "loss": [425, 1678], "lossi": [110, 111, 114, 115, 699, 700, 703, 1678], "lossless": [110, 116, 699, 710, 1678], "lost": [1304, 1680, 1690], "low": [1688, 1696], "lower": [8, 19, 37, 348, 351, 362, 427, 428, 430, 431, 432, 434, 437, 443, 454, 479, 518, 519, 520, 545, 547, 574, 575, 576, 578, 579, 580, 581, 586, 600, 610, 627, 628, 630, 633, 634, 635, 636, 642, 644, 647, 649, 653, 655, 661, 672, 676, 734, 735, 736, 739, 740, 811, 827, 877, 878, 915, 918, 919, 923, 990, 991, 1459, 1672, 1673, 1688, 1752, 1756, 1757, 1758, 1759, 1766, 1769, 1772, 1776, 1778, 1780, 1782, 1785, 1799, 1806, 1813, 1816, 1817, 1821, 1823, 1830, 1832, 1839, 1844, 1848, 1850, 1854, 1857, 1865, 1870, 1872, 1876, 1951, 1969, 1972, 1979, 1983, 2002, 2006, 2015, 2019, 2044, 2049, 2063, 2115, 2162, 2164], "lowercas": 1697, "lowest": 1672, "lru": 0, "lz4": [1681, 1684, 1685, 1689, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "lz4hc": [1681, 1684, 1685], "m": [433, 434, 435, 441, 445, 447, 451, 1089, 1345, 1686, 1688, 1689, 2164], "m1": [13, 605, 1688], "m2": [13, 605, 1688], "mac": [247, 1686], "machin": [365, 1687, 1690, 1691, 2151], "maco": 1689, "macosx_deployment_target": 1689, "macro": [3, 4, 5], "made": [1051, 1113, 1188, 1202, 1512, 1516, 1559, 1563, 1908, 1912, 2070, 2107, 2161], "magic_valu": 1697, "magnitud": 1111, "mai": [0, 7, 8, 18, 39, 45, 48, 64, 75, 80, 143, 174, 227, 247, 249, 251, 253, 291, 318, 346, 349, 359, 363, 365, 370, 371, 391, 398, 401, 402, 405, 416, 427, 428, 430, 432, 433, 434, 435, 436, 441, 443, 444, 445, 447, 451, 453, 454, 478, 480, 481, 482, 490, 526, 527, 540, 563, 569, 609, 632, 647, 661, 672, 740, 743, 758, 798, 799, 800, 841, 842, 848, 849, 860, 877, 882, 892, 915, 966, 967, 970, 975, 990, 991, 1011, 1012, 1017, 1018, 1040, 1054, 1059, 1060, 1063, 1103, 1113, 1114, 1152, 1154, 1157, 1158, 1159, 1162, 1181, 1184, 1188, 1193, 1205, 1225, 1228, 1236, 1240, 1250, 1262, 1294, 1297, 1306, 1311, 1378, 1390, 1391, 1393, 1469, 1470, 1474, 1475, 1476, 1478, 1495, 1504, 1505, 1512, 1516, 1533, 1536, 1538, 1544, 1551, 1555, 1559, 1563, 1622, 1672, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1699, 1700, 1703, 1752, 1780, 1782, 1783, 1784, 1785, 1786, 1789, 1790, 1798, 1799, 1804, 1806, 1828, 1829, 1830, 1831, 1839, 1863, 1864, 1865, 1866, 1869, 1900, 1901, 1903, 1908, 1910, 1912, 1913, 1916, 1946, 1964, 1977, 1978, 1979, 1980, 2013, 2014, 2015, 2016, 2017, 2019, 2020, 2025, 2030, 2032, 2033, 2037, 2048, 2051, 2053, 2055, 2058, 2059, 2061, 2062, 2063, 2064, 2066, 2067, 2069, 2075, 2079, 2080, 2092, 2094, 2107, 2114, 2115, 2151, 2161, 2162, 2164, 2165], "main": [1622, 1794, 1797], "major": [1685, 1722, 1727, 1734, 2051, 2164], "make": [260, 365, 490, 526, 981, 983, 984, 985, 986, 1205, 1306, 1686, 1689, 1690, 2164], "makearrai": [39, 45, 218, 433, 435, 441, 841, 848, 1306], "makearrayview": [39, 842, 843, 849], "makecopi": [8, 39, 844, 845, 846, 847, 1306], "makefil": 1689, "makeoffsetarrai": [39, 43, 848, 849], "makeoffsetarrayview": [39, 849], "makereadyfutur": [7, 526, 850], "makeresult": [851, 852, 1063], "makescalararrai": [39, 853], "makescalararrayview": [39, 854], "maketransformedarrai": [855, 1306], "manag": [17, 108, 174, 416, 490, 1114, 1359, 1697, 1702, 1703, 1740, 2070], "mani": [1063, 1686, 1688, 1691, 1692, 1697, 1703, 1777, 1832, 2151, 2162], "manifest": 2150, "manifest_kind": 1697, "manipul": 1695, "mantissa": 2165, "manual": [526, 1688, 1689, 1690], "map": [0, 13, 247, 351, 416, 427, 433, 434, 435, 441, 445, 447, 451, 523, 524, 563, 661, 666, 672, 684, 686, 687, 740, 915, 924, 929, 930, 932, 939, 940, 942, 943, 956, 958, 990, 991, 1055, 1063, 1304, 1305, 1342, 1362, 1365, 1683, 1688, 1690, 1693, 1694, 1696, 1702, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1802, 1805, 1832, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1856, 1858, 1867, 1869, 1925, 1926, 1927, 1928, 1935, 2012, 2146, 2162], "mapfutur": [526, 856], "mapfutureerror": [526, 857], "mapfuturevalu": [526, 858], "mapped_futur": [857, 858], "mapresult": [526, 859, 1063], "maptyp": [523, 1063], "mark": [425, 427, 437, 454, 526, 965, 970, 1688, 1752, 1776, 1780, 1791, 1821, 1854, 1946, 1948, 1949, 1969, 2002, 2044, 2054, 2115, 2162], "mark_bounds_implicit": [1776, 1780, 1799, 1821, 1832, 1854, 1951, 1969, 1983, 2002, 2019, 2044, 2115], "markboundsexplicit": [427, 437], "mask": [100, 101, 102, 103, 104, 105, 550, 569], "match": [0, 8, 12, 13, 37, 253, 393, 430, 432, 443, 480, 605, 627, 694, 892, 981, 985, 994, 1111, 1205, 1507, 1508, 1509, 1510, 1556, 1557, 1558, 1566, 1567, 1568, 1569, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1692, 1695, 1697, 1698, 1702, 1768, 1773, 1779, 1782, 1783, 1784, 1785, 1801, 1819, 1830, 1835, 1853, 1865, 1909, 1912, 1917, 1958, 1968, 1979, 1981, 2001, 2015, 2017, 2043, 2058, 2063, 2095, 2096, 2114, 2127, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "match_rank": 13, "matchesnovalu": [1566, 1568], "materi": [860, 1306, 1311, 1342], "materialized_arrai": 860, "mathemat": 681, "mathrm": [1688, 1696], "mathtt": 1688, "max": [465, 469, 627, 811, 814, 894, 910, 964, 994, 1055, 1118, 1119, 1672, 2053], "max_decoded_node_byt": [1697, 2150], "max_decoded_note_byt": 1697, "max_delai": [1691, 1692, 1698], "max_inline_value_byt": [1697, 2150], "max_offset": [627, 1118, 1119], "max_path": 1689, "max_retri": [1691, 1692, 1698], "maximum": [0, 110, 473, 518, 519, 520, 585, 1451, 1461, 1462, 1463, 1672, 1686, 1690, 1691, 1692, 1697, 1698, 1699, 1794, 1797], "may_alloc": [882, 1296, 1297, 1298, 1311, 1576], "mayb": 1689, "maybe_hard_constraint": [862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "maybeannotatestatu": [7, 8, 861], "maybeconstindex": [39, 52, 63, 84, 1205, 1206, 1219, 1233], "maybeconstoriginindex": [39, 53, 81, 1205, 1207, 1229], "maybehardconstraintindex": [8, 253, 262, 862, 863, 864, 865, 866, 867, 868], "maybehardconstraintspan": [8, 253, 259, 265, 282, 869, 870, 871, 872, 873, 874], "mean": [196, 260, 398, 540, 563, 891, 1011, 1012, 1055, 1059, 1262, 1378, 1495, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1690, 1992, 2017, 2035, 2058, 2151, 2162], "meaning": 1775, "mechan": [8, 131, 1374, 1379, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1869, 2097, 2162], "median": 1672, "member": [0, 8, 235, 365, 416, 427, 489, 584, 762, 820, 1153, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1722, 1724, 1725, 1726, 1727, 1728, 1731, 1734, 1735, 1745, 2164, 2165], "membergoup": [36, 398, 1378], "memori": [0, 8, 16, 17, 39, 108, 365, 416, 425, 426, 540, 570, 692, 854, 1113, 1114, 1262, 1278, 1293, 1306, 1443, 1670, 1679, 1681, 1682, 1684, 1685, 1687, 1688, 1690, 1692, 1693, 1702, 1780, 1788, 1869, 1884, 1888, 1892, 1900, 1901, 1903, 1905, 1907, 1908, 1909, 1910, 1912, 1913, 1916, 1917, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2007, 2008, 2011, 2012, 2017, 2018, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2107, 2110, 2150, 2151, 2161, 2162, 2163, 2165], "memory_key_value_stor": [1695, 1892, 1905, 1913, 1991, 2019, 2026, 2027, 2028, 2029, 2035, 2042, 2047, 2058, 2065, 2151], "mere": [174, 563, 586, 599, 661, 671, 672, 1379, 2028, 2069, 2097], "merg": [253, 271, 274, 312, 340, 342, 343, 430, 432, 436, 443, 444, 445, 447, 451, 477, 586, 615, 875, 876, 877, 878, 915, 1089, 1098, 1101, 1104, 1683, 1709, 1720, 1958, 1981, 2017, 2114, 2151, 2152, 2154, 2161, 2164], "mergedimensionlabel": [615, 875], "mergedimensionunit": [477, 876], "mergefrom": [340, 343], "mergeindexdomain": [586, 877, 1104], "mergeoptionallyimplicitindexinterv": [878, 915], "messag": [3, 8, 476, 477, 861], "met": 740, "metadata": [340, 892, 1049, 1051, 1053, 1056, 1103, 1154, 1262, 1280, 1294, 1679, 1681, 1682, 1684, 1685, 1691, 1696, 1698, 1918, 1919, 1920, 1921, 1964, 1993, 1994, 1996, 1997, 1998, 1999, 2003, 2007, 2008, 2011, 2012, 2017, 2019, 2026, 2027, 2028, 2029, 2035, 2047, 2053, 2058, 2065, 2069, 2070, 2163], "metadata_cache_pool": [1679, 1681, 1682, 1684, 1685], "metadata_kei": 1684, "metafunct": [8, 38, 39, 174, 247, 416, 526, 571, 586, 661, 742, 743, 744, 746, 747, 748, 751, 752, 754, 757, 758, 759, 763, 764, 765, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 788, 789, 790, 791, 792, 793, 963, 1112, 1153, 1205, 1237, 1306], "method": [8, 13, 24, 52, 53, 270, 390, 433, 435, 481, 482, 483, 511, 534, 542, 543, 778, 952, 953, 954, 956, 959, 960, 1064, 1605, 1607, 1651, 1672, 1681, 1684, 1685, 1691, 1697, 1702, 1705, 1925, 1932, 1939, 1992, 2029, 2035, 2117, 2118, 2162, 2163], "metric": [1702, 2127, 2128, 2129], "metric_prefix": [2127, 2128, 2129], "microsoft": 1689, "middl": 2163, "might": [648, 1698], "million": [1681, 1682, 1684, 1685], "millisecond": 1697, "min": [13, 518, 519, 520, 627, 994, 1055, 1118, 1119, 1672, 1688, 1697, 2053], "min_offset": [627, 1118, 1119], "mind": 2069, "mingw64": 1689, "minim": [879, 1154, 2151, 2162], "minimal_spec": [2017, 2058], "minimalspec": [879, 1154, 1262, 1473, 1552], "minimum": [39, 110, 557, 585, 1452, 1464, 1672, 1689, 1799, 1812], "minishard": 1696, "minishard_bit": [1682, 1696, 2151, 2163], "minishard_index_encod": [1682, 1696, 2151, 2163], "minu": [110, 1448], "mismatch": [13, 574, 734, 736, 915, 1688], "miss": [879, 1154, 1188, 1193, 1506, 1517, 1518, 1519, 1679, 1681, 1682, 1684, 1685, 1869, 1877, 1878, 1880, 1912, 1917, 2164], "mix": 2162, "ml": [525, 2134, 2135, 2136, 2137, 2138], "ml_dtype": [525, 1684, 2134, 2135, 2136, 2137, 2138], "mode": [110, 249, 390, 482, 881, 891, 892, 1028, 1056, 1057, 1058, 1060, 1154, 1172, 1181, 1182, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1278, 1280, 1283, 1284, 1289, 1294, 1551, 1554, 1583, 1584, 1585, 1586, 1587, 1590, 1591, 1592, 1593, 1595, 1596, 1599, 1600, 1601, 1602, 1606, 1608, 1609, 1610, 1611, 1618, 1662, 1672, 1689, 1690, 1702, 1777, 1781, 1787, 1918, 1919, 1983, 2005, 2017, 2019, 2045, 2058, 2070, 2151], "modecast": [8, 880, 881, 1240], "model": 1684, "modif": [1188, 1192, 1202, 1702, 2070], "modifi": [143, 174, 343, 427, 433, 435, 441, 649, 681, 892, 965, 970, 1114, 1152, 1159, 1262, 1476, 1495, 1533, 1538, 1551, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1689, 1690, 1799, 1882, 1892, 1961, 2017, 2019, 2053, 2058, 2069, 2151], "modul": [1689, 2161], "modulo": [699, 716, 717], "monad": 1063, "monost": [416, 1183], "monoton": 1697, "more": [7, 19, 39, 430, 432, 435, 443, 458, 526, 563, 799, 836, 837, 839, 891, 1060, 1181, 1205, 1306, 1359, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1693, 1696, 1697, 1699, 1700, 1701, 1777, 1804, 2029, 2069, 2161, 2162, 2165], "most": [19, 39, 749, 750, 875, 1205, 1294, 1665, 1672, 1682, 1684, 1685, 1686, 1688, 1689, 1691, 1693, 1697, 1777, 1792, 1804, 1806, 1839, 1869, 1900, 1901, 1903, 1912, 1948, 1957, 2029, 2069, 2162, 2164], "movabl": [413, 414, 1026, 1027, 1400, 1401], "move": [416, 512, 516, 526, 540, 838, 1306, 1317, 1329, 1330], "moveto": [427, 433, 435, 438, 439, 440], "movetoback": [427, 439, 452], "movetofront": [427, 431, 440, 452], "msvc": 1689, "multi": [8, 39, 108, 416, 585, 800, 1113, 1114, 1205, 1240, 1687, 1689, 1695, 1697, 1702, 2019], "multipl": [0, 3, 5, 39, 110, 121, 122, 227, 234, 318, 327, 526, 540, 542, 699, 718, 719, 798, 799, 891, 892, 1103, 1188, 1262, 1672, 1679, 1681, 1682, 1684, 1685, 1687, 1688, 1689, 1690, 1691, 1692, 1695, 1697, 1964, 2017, 2030, 2031, 2032, 2033, 2048, 2058, 2066, 2069, 2070, 2114, 2151, 2152, 2154, 2161, 2162], "multipli": [545, 547, 548, 549, 626, 627, 915, 964, 1305, 1345, 1347, 1348, 1349, 1351, 1352, 1354, 1681, 1682, 1688, 2080, 2082, 2084, 2085, 2086, 2087, 2090, 2164], "multippl": 1694, "multiscal": 1682, "multiscale_metadata": [1682, 2151, 2163], "murmurhash3_x86_128": 1696, "must": [0, 7, 8, 13, 16, 17, 18, 39, 74, 108, 197, 204, 211, 227, 249, 269, 270, 318, 330, 353, 354, 370, 398, 427, 428, 433, 438, 441, 452, 459, 464, 478, 480, 481, 482, 494, 512, 540, 559, 575, 587, 605, 609, 662, 695, 735, 740, 757, 798, 799, 833, 836, 857, 877, 878, 882, 892, 903, 963, 975, 990, 994, 1012, 1029, 1032, 1042, 1048, 1056, 1063, 1089, 1106, 1152, 1156, 1184, 1187, 1188, 1205, 1225, 1228, 1240, 1297, 1306, 1314, 1372, 1378, 1512, 1516, 1517, 1519, 1530, 1532, 1559, 1563, 1622, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1691, 1692, 1697, 1698, 1700, 1722, 1734, 1747, 1768, 1773, 1777, 1780, 1786, 1795, 1805, 1821, 1854, 1908, 1912, 1954, 1957, 1958, 1969, 1981, 1986, 1989, 2002, 2017, 2020, 2026, 2029, 2030, 2033, 2044, 2053, 2058, 2069, 2114, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "must_alloc": [882, 1296, 1297, 1342, 1576], "mustallocateconstraint": [882, 1296, 1297, 1298, 1299, 1576], "mutabl": [165, 174, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 253, 271, 365, 555, 627, 649, 883, 1121, 1122, 1205], "mutableboxview": [174, 197, 211, 253, 270, 563, 661, 783, 883, 990, 992], "mutat": [1154, 1179, 1472, 1474, 1476, 1533, 1538, 2005], "mutual": [1285, 1287], "my": [1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1682, 1684, 1685, 1691, 1692, 1696, 1698, 1700, 1701, 1893, 1911, 1915], "my_target": 1689, "mybucket": 1698, "n": [8, 16, 17, 39, 174, 178, 181, 196, 199, 202, 247, 300, 302, 416, 426, 427, 433, 435, 453, 460, 461, 486, 487, 564, 586, 591, 593, 626, 811, 821, 869, 871, 1113, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1205, 1213, 1216, 1225, 1228, 1445, 1612, 1622, 1649, 1652, 1685, 1688, 1700, 1702, 1777, 1799, 2162], "n0": [39, 841, 842, 848, 849], "n1": [39, 841, 842, 848, 849], "n5": [1679, 1687, 1985, 1990, 1991, 1995, 1996, 1998, 2000, 2003, 2007, 2011, 2012, 2017, 2026, 2027, 2030, 2031, 2038, 2039, 2042, 2070, 2151, 2164], "name": [371, 416, 420, 422, 561, 801, 1089, 1681, 1682, 1684, 1685, 1686, 1689, 1692, 1698, 1700, 1939, 1943, 2119, 2122, 2123, 2127, 2128, 2129, 2161, 2162], "nan": [110, 511, 1457, 2165], "nanomet": [1345, 1682], "nanosecond": 1697, "narrow": [8, 18, 74, 178, 180, 359, 363, 478, 695, 751, 752, 754, 772, 774, 778], "nasm": 1689, "nativ": [1681, 1684, 1685, 1687, 2162], "natur": [110, 1572, 1574], "ndarrai": [1113, 2019, 2025, 2161, 2162, 2163], "ndim": [1706, 1707, 1715, 1729, 1799, 1822, 1832, 1855, 1951, 1970, 1983, 2003, 2019, 2046], "nearbi": 1294, "nearest": [110, 479, 627, 1411, 1450, 1618, 1663, 1672], "nearli": 1622, "necessari": [7, 8, 174, 249, 527, 605, 879, 882, 892, 1154, 1262, 1679, 1681, 1682, 1684, 1685, 1686, 1688, 1689, 1690, 1801, 1835, 2017, 2058, 2151, 2165], "necessarili": [944, 947, 1777, 2020, 2162, 2164], "need": [7, 367, 425, 526, 811, 892, 991, 1114, 1379, 1386, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1690, 1777, 1790, 1832, 2017, 2058, 2080, 2114, 2151, 2154, 2162, 2164], "needl": [356, 357, 811], "neg": [110, 143, 174, 260, 266, 435, 453, 460, 461, 478, 511, 697, 886, 894, 911, 964, 1619, 1681, 1786, 1803, 1817, 2114, 2154, 2162, 2164], "negat": [110, 123, 627, 646, 699, 720], "neglig": 1697, "neither": [108, 249, 892, 1113, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 2017, 2058, 2114, 2151, 2152, 2154, 2161], "nened": 2152, "neq": 1688, "nest": [507, 778, 841, 842, 848, 849, 1184, 1670, 1683, 1688, 1892, 1910, 2017], "nesteddirectorystor": 1684, "net_zlib": 1689, "net_zstd": 1689, "network": [1687, 1690, 1691, 1692, 1698], "neuroglanc": [1682, 1687, 1693, 1696, 2151, 2163, 2164], "neuroglancer_multiscale_volum": 1682, "neuroglancer_precomput": [318, 1103, 1679, 1696, 1964, 2151, 2163, 2164], "neuroglancer_uint64_shard": [1482, 1489, 1533, 1545, 1682, 1693, 1700, 1888, 1905], "neuroglancer_uint64_sharded_v1": [1682, 1696, 2151, 2163], "never": [30, 526, 976, 978, 1040, 1043, 1285, 1287, 1342, 1679, 1950, 2051, 2069, 2107, 2162], "new": [0, 13, 19, 98, 131, 132, 253, 351, 365, 368, 390, 416, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 477, 484, 586, 596, 597, 609, 661, 667, 668, 669, 670, 846, 876, 882, 892, 981, 983, 984, 986, 991, 994, 1011, 1013, 1055, 1056, 1059, 1089, 1103, 1114, 1120, 1156, 1240, 1242, 1278, 1283, 1297, 1314, 1482, 1485, 1495, 1565, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1687, 1688, 1690, 1697, 1702, 1703, 1704, 1705, 1748, 1749, 1777, 1778, 1779, 1780, 1782, 1783, 1784, 1785, 1792, 1799, 1804, 1805, 1819, 1821, 1828, 1829, 1830, 1831, 1832, 1853, 1854, 1863, 1864, 1865, 1866, 1869, 1892, 1913, 1917, 1918, 1919, 1922, 1923, 1946, 1947, 1948, 1949, 1951, 1954, 1955, 1956, 1957, 1958, 1961, 1964, 1968, 1969, 1971, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1986, 1987, 1988, 1989, 2001, 2002, 2004, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2037, 2043, 2044, 2053, 2055, 2058, 2061, 2062, 2063, 2064, 2070, 2071, 2114, 2146, 2150, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "new_cod": [8, 861], "new_domain": [351, 587, 915], "new_inclusive_min": [518, 519, 520], "new_interv": [518, 519, 520], "new_mod": [881, 1240], "new_obj": 188, "new_output_exclusive_max": [661, 994], "new_output_inclusive_min": [661, 994], "new_siz": [518, 519, 520], "new_transform": 662, "new_unit": [477, 876], "newaxi": [1702, 1777, 1778, 2146, 2162], "newer": [2092, 2093], "newli": [8, 19, 20, 431, 844, 845, 860, 981, 983, 984, 1011, 1013, 1015, 1240, 1296, 1297, 1311, 1469, 1778], "newoutputrank": [661, 681], "next": [110, 1577], "nextaft": [110, 1577], "nghttp2": 1689, "ninja": 1689, "nlohmann": [8, 365, 369, 370, 371, 374, 377, 891, 1437, 1482, 1504, 1689], "nm": [1089, 1252, 1345, 1349, 1681, 1682, 1685, 1964, 1996, 2038, 2081, 2082, 2083, 2085, 2086, 2087, 2088, 2089, 2091, 2164], "no_batch": [131, 134, 136, 138, 140, 141, 142, 401, 403, 1013, 1014, 1017, 1019, 1061, 1062, 1512, 1513, 1559, 1560, 1578], "no_batch_t": [131, 134, 136, 140, 141, 1578], "no_proxi": 1686, "no_transact": [891, 1278, 1284, 1482, 1487, 1496, 1579], "no_transaction_mod": [1290, 1291, 1294], "no_transaction_t": [1278, 1284, 1290, 1291, 1292, 1579], "node": [1685, 2150], "node_typ": 1685, "nodiscard": [8, 21, 24, 526, 534, 965, 981, 1029, 1063, 1064, 1379], "noexcept": [8, 21, 23, 26, 27, 28, 29, 30, 31, 32, 371, 379, 512, 526, 535, 540, 542, 543, 544, 627, 632, 634, 635, 649, 656, 661, 679, 965, 970, 971, 973, 974, 976, 977, 978, 1063, 1074, 1075, 1081, 1085, 1086, 1121, 1147, 1149, 1240, 1266, 1306, 1329, 1330, 1622, 1625, 1630, 1633, 1642, 1644, 1647, 1648], "non": [8, 19, 20, 34, 39, 52, 53, 64, 99, 143, 145, 174, 197, 211, 247, 260, 266, 343, 351, 354, 371, 376, 435, 442, 478, 490, 526, 540, 547, 575, 605, 697, 735, 764, 765, 783, 785, 811, 828, 839, 844, 858, 869, 874, 875, 877, 884, 888, 892, 894, 911, 964, 994, 1012, 1063, 1205, 1219, 1229, 1233, 1255, 1278, 1284, 1294, 1343, 1344, 1359, 1360, 1379, 1476, 1482, 1491, 1497, 1506, 1512, 1533, 1538, 1550, 1565, 1579, 1653, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1689, 1690, 1691, 1693, 1695, 1696, 1698, 1700, 1768, 1773, 1777, 1786, 1801, 1835, 1869, 1888, 1905, 1910, 1958, 1981, 2017, 2058, 2070, 2095, 2096, 2097, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "non_transact": [1482, 1491], "none": [480, 1121, 1136, 1688, 1690, 1691, 1692, 1702, 1703, 1705, 1706, 1707, 1709, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1720, 1722, 1725, 1726, 1727, 1728, 1732, 1733, 1734, 1736, 1740, 1747, 1748, 1749, 1752, 1756, 1757, 1758, 1759, 1776, 1777, 1780, 1782, 1783, 1784, 1785, 1788, 1789, 1790, 1794, 1795, 1796, 1797, 1799, 1806, 1817, 1821, 1828, 1829, 1830, 1831, 1832, 1839, 1840, 1854, 1863, 1864, 1865, 1866, 1869, 1882, 1888, 1892, 1900, 1903, 1905, 1907, 1908, 1909, 1910, 1912, 1913, 1914, 1916, 1917, 1925, 1929, 1930, 1931, 1934, 1946, 1948, 1949, 1951, 1954, 1955, 1956, 1957, 1958, 1962, 1964, 1965, 1966, 1967, 1969, 1970, 1971, 1973, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1986, 1987, 1988, 1989, 1992, 1994, 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2007, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2025, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2037, 2038, 2041, 2042, 2044, 2047, 2051, 2053, 2054, 2055, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2067, 2069, 2070, 2072, 2075, 2077, 2078, 2097, 2098, 2101, 2102, 2104, 2105, 2106, 2107, 2114, 2115, 2130, 2146, 2150, 2151, 2152, 2153, 2154, 2161, 2162], "nonsens": 1063, "nonzero": [1777, 2162], "nor": [108, 249, 892, 1113, 1679, 1681, 1682, 1684, 1685, 1688, 1701, 2017, 2058, 2114, 2151, 2152, 2154, 2161], "normal": [39, 393, 397, 453, 454, 460, 465, 478, 526, 587, 662, 681, 736, 778, 780, 811, 846, 885, 886, 1106, 1306, 1317, 1319, 1330, 1338, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1692, 1696, 1697, 1700, 1801, 1835, 1958, 1981, 2017, 2069, 2070, 2151, 2162], "normalized_typ": [778, 780], "normalizedimensionidentifi": [465, 885], "normalizedimensionindex": [435, 465, 886], "normalizedimensionlabel": [465, 887], "normalizedimrangespec": [459, 884], "normalizedynamicdimspec": [484, 888, 889], "noshuffl": 1685, "not_found": [1517, 1525], "not_stor": [100, 104, 2020, 2021, 2023, 2059], "note": [13, 263, 264, 315, 365, 430, 431, 646, 684, 740, 991, 1188, 1192, 1261, 1445, 1672, 1683, 1777], "notequalorunspecifi": [1188, 1197], "noth": [371, 372, 1476, 1538], "notimplementederror": 2059, "novalu": [1188, 1192, 1193, 1196, 1507, 1509, 1510, 1556, 1558, 1566, 1568, 1569], "now": [1512, 1516, 1559, 1563, 2069, 2151], "np": [1703, 1817, 2025, 2053, 2161, 2162, 2163], "nul": 823, "null": [0, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 340, 341, 343, 345, 346, 347, 349, 351, 354, 365, 366, 367, 369, 370, 371, 376, 380, 386, 442, 490, 492, 505, 526, 527, 529, 536, 540, 541, 542, 572, 575, 661, 664, 683, 735, 740, 856, 858, 877, 884, 888, 965, 969, 972, 973, 975, 976, 977, 990, 991, 994, 1029, 1031, 1032, 1154, 1163, 1168, 1171, 1249, 1255, 1256, 1278, 1284, 1290, 1292, 1379, 1382, 1476, 1482, 1486, 1489, 1497, 1533, 1538, 1539, 1550, 1677, 1682, 1683, 1684, 1685, 1697, 2155, 2160, 2164], "nullari": [8, 370, 512, 516], "nullopt": [427, 458, 459, 463, 860, 876, 1103, 1468, 1517, 1529, 1565], "nullptr": [39, 41, 88, 371, 379, 465, 468, 470, 490, 502, 503, 1255, 1653], "nullptr_t": [490, 492, 505], "num_channel": [1682, 2151, 2163], "num_children": 1697, "num_direct_entri": 1697, "num_el": [39, 71, 174, 185, 186, 196, 209, 210, 586, 603, 1205, 1222], "num_entri": 1697, "num_fil": 1697, "num_gener": 1697, "num_indirect_entri": 1697, "num_indirect_value_byt": [1697, 2150], "num_kei": [1697, 2150], "num_tree_byt": [1697, 2150], "num_vers": 1697, "number": [0, 8, 16, 17, 39, 71, 90, 95, 97, 110, 131, 143, 150, 165, 168, 174, 196, 220, 226, 253, 260, 261, 262, 263, 267, 271, 273, 277, 283, 288, 290, 293, 297, 308, 311, 315, 319, 323, 334, 338, 406, 407, 408, 411, 412, 426, 427, 430, 432, 433, 434, 435, 436, 441, 443, 444, 445, 447, 451, 458, 485, 557, 558, 569, 570, 586, 603, 611, 699, 801, 803, 884, 894, 914, 964, 1021, 1022, 1025, 1205, 1215, 1222, 1225, 1231, 1262, 1278, 1293, 1349, 1394, 1395, 1396, 1399, 1413, 1422, 1423, 1573, 1574, 1575, 1614, 1615, 1620, 1658, 1672, 1673, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1696, 1698, 1699, 1702, 1703, 1706, 1707, 1709, 1713, 1714, 1716, 1720, 1722, 1730, 1734, 1779, 1782, 1783, 1784, 1785, 1794, 1797, 1799, 1806, 1809, 1817, 1819, 1824, 1826, 1830, 1832, 1839, 1853, 1861, 1865, 1909, 1951, 1968, 1975, 1979, 1983, 2001, 2010, 2015, 2019, 2043, 2050, 2057, 2063, 2080, 2086, 2112, 2113, 2114, 2154, 2162, 2164, 2165], "numbit": [1121, 1125, 1127], "numer": [425, 1203, 1345, 1672, 1685, 1688, 2080, 2162, 2164], "numeric_limit": [115, 465, 469, 518, 519, 520, 703, 964, 1119], "numpi": [433, 1113, 1205, 1684, 1688, 1689, 1702, 1776, 1777, 1781, 1782, 1787, 1799, 1817, 1832, 1837, 1856, 1867, 1951, 1956, 1957, 1971, 1982, 1983, 1988, 1989, 2004, 2018, 2019, 2025, 2028, 2032, 2047, 2048, 2065, 2066, 2107, 2108, 2109, 2112, 2113, 2114, 2115, 2119, 2121, 2124, 2131, 2132, 2133, 2140, 2141, 2142, 2143, 2144, 2145, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2163], "numpy_dtyp": [2119, 2124], "numpyindexingspec": [1776, 1777, 1781, 1787, 1832, 1837, 1856, 1867, 1951, 1956, 1971, 1982, 1983, 1988, 2004, 2018, 2019, 2028, 2032, 2047, 2048, 2065, 2066, 2115], "o": [39, 40, 78, 99, 100, 107, 131, 174, 189, 220, 225, 247, 318, 329, 340, 346, 348, 392, 398, 406, 410, 416, 422, 459, 463, 465, 472, 483, 570, 627, 647, 649, 659, 661, 685, 811, 831, 845, 846, 892, 894, 913, 915, 923, 960, 1021, 1024, 1028, 1056, 1060, 1121, 1144, 1188, 1201, 1205, 1209, 1217, 1223, 1226, 1227, 1268, 1274, 1294, 1306, 1345, 1355, 1366, 1368, 1378, 1394, 1398, 1482, 1496, 1517, 1519, 1527, 1528, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1622, 1686, 1687, 1690, 1703, 1900, 1901, 1903, 1993, 1994, 1996, 1997, 1999, 2008, 2051, 2162, 2163], "oauth2": 1686, "obj": [188, 1837, 2162], "object": [0, 8, 34, 35, 174, 253, 254, 355, 365, 371, 379, 387, 416, 427, 457, 459, 462, 490, 512, 513, 526, 527, 540, 586, 606, 661, 836, 837, 838, 839, 856, 858, 894, 909, 966, 967, 978, 981, 983, 984, 988, 989, 1011, 1012, 1063, 1069, 1078, 1089, 1090, 1113, 1154, 1155, 1179, 1188, 1196, 1240, 1241, 1373, 1374, 1417, 1472, 1533, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1768, 1773, 1788, 1789, 1794, 1797, 1799, 1807, 1812, 1817, 1818, 1839, 1840, 1893, 1911, 1915, 1946, 1948, 1949, 1961, 2005, 2025, 2069, 2070, 2080, 2097, 2104, 2106, 2119, 2120, 2126, 2162, 2163, 2164, 2165], "object_": [2145, 2155, 2160], "observ": [1690, 2070, 2161], "obsolet": 1692, "obtain": [39, 79, 80, 416, 507, 965, 972, 1187, 1236, 1237, 1240, 1416, 1417, 1504, 1681, 1684, 1685, 1697, 1698, 1700, 1777, 1799, 1961, 2019, 2054, 2059, 2162, 2163], "occupi": 2165, "occur": [350, 398, 415, 430, 432, 433, 434, 435, 441, 443, 520, 563, 798, 799, 811, 823, 964, 990, 991, 994, 1012, 1157, 1159, 1294, 1378, 1475, 1476, 1536, 1538, 1688, 1690, 1788, 1900, 1901, 1903, 2162], "ocdbt": [1482, 1489, 1533, 1545, 1686, 1693, 1888, 1905, 1908, 2147, 2148, 2149, 2150], "ocdbt_coordin": 1697, "odd": [458, 1672], "offer": 1672, "offici": 1684, "offset": [8, 9, 10, 11, 13, 33, 39, 99, 143, 144, 151, 155, 156, 161, 165, 166, 219, 227, 238, 239, 241, 253, 282, 392, 427, 430, 445, 447, 490, 545, 546, 547, 548, 549, 559, 560, 627, 860, 903, 915, 943, 957, 960, 990, 1113, 1118, 1119, 1121, 1145, 1205, 1225, 1228, 1230, 1311, 1319, 1342, 1580, 1622, 1655, 1656, 1672, 1683, 1688, 1697, 1706, 1732, 1736, 1776, 1783, 1784, 1799, 1805, 1828, 1829, 1832, 1838, 1839, 1840, 1841, 1859, 1862, 1863, 1864, 1925, 1926, 1927, 1928, 1933, 1951, 1977, 1978, 1983, 2011, 2013, 2014, 2019, 2061, 2062, 2114, 2115, 2150, 2152, 2162, 2163, 2164], "offset_origin": [18, 33, 39, 43, 98, 99, 218, 219, 661, 692, 693, 844, 847, 848, 849, 860, 890, 944, 945, 949, 951, 1011, 1116, 1117, 1205, 1211, 1212, 1213, 1215, 1229, 1277, 1296, 1306, 1311, 1322, 1342, 1370, 1580], "offsetarrayview": [39, 890], "often": [1689, 1691, 2069], "oindex": [1776, 1781, 1832, 1837, 1856, 1951, 1956, 1957, 1971, 1982, 1983, 1988, 1989, 2004, 2018, 2019, 2028, 2029, 2032, 2033, 2047, 2048, 2065, 2066, 2115], "ok": [263, 531, 1063, 1074, 1080], "okind": 1215, "okinda": [36, 39], "okindb": [36, 39], "okstatu": [7, 21, 32, 252, 567, 666, 888, 1063, 1372], "old": [1043, 1690], "older": [1042, 1048, 1051, 1512, 1516, 1559, 1563, 1679, 1680, 1681, 1682, 1684, 1685, 1697, 1908, 1912, 1950, 2017, 2058, 2092, 2094, 2151], "omit": [459, 463, 1685, 2151, 2162], "onc": [30, 526, 542, 798, 799, 800, 891, 976, 978, 983, 1055, 1279, 1285, 1287, 1294, 1379, 1565, 1688, 1697, 1702, 1804, 1917, 2053, 2069, 2070, 2079, 2097, 2161], "one": [8, 13, 21, 39, 247, 330, 354, 365, 415, 416, 425, 455, 456, 526, 563, 575, 586, 599, 605, 661, 671, 672, 735, 740, 786, 798, 799, 836, 837, 839, 875, 877, 878, 965, 972, 995, 998, 1113, 1181, 1305, 1306, 1681, 1683, 1684, 1685, 1686, 1688, 1689, 1691, 1696, 1697, 1777, 1778, 1780, 1801, 1806, 1821, 1835, 1839, 1854, 1958, 1969, 1981, 2002, 2017, 2020, 2029, 2044, 2114, 2150, 2151, 2152, 2154, 2161, 2162, 2164], "ones": 1681, "onli": [0, 8, 37, 98, 102, 104, 110, 143, 174, 249, 270, 315, 353, 431, 484, 520, 525, 526, 542, 563, 569, 661, 740, 746, 747, 748, 771, 779, 780, 783, 798, 799, 800, 839, 841, 842, 848, 849, 860, 892, 894, 899, 906, 930, 943, 983, 991, 1028, 1056, 1063, 1074, 1181, 1205, 1239, 1240, 1267, 1311, 1379, 1465, 1466, 1500, 1501, 1509, 1565, 1672, 1677, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1692, 1693, 1697, 1698, 1701, 1722, 1732, 1734, 1736, 1777, 1778, 1788, 1806, 1839, 1917, 1958, 1981, 1993, 1994, 1996, 1997, 1999, 2005, 2008, 2017, 2045, 2051, 2053, 2058, 2059, 2069, 2070, 2097, 2107, 2114, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "onto": [526, 2162], "op": [8, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 1156], "op1": 2162, "opaqu": [8, 1188, 1420], "open": [8, 390, 427, 432, 467, 519, 891, 892, 893, 915, 1040, 1041, 1042, 1049, 1050, 1051, 1052, 1063, 1089, 1103, 1154, 1172, 1180, 1240, 1252, 1262, 1280, 1295, 1470, 1471, 1482, 1495, 1504, 1505, 1533, 1555, 1583, 1590, 1599, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1689, 1696, 1697, 1702, 1703, 1752, 1756, 1780, 1788, 1869, 1870, 1872, 1892, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1915, 1916, 1917, 1918, 1919, 1920, 1924, 1950, 1964, 1983, 2005, 2017, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2079, 2114, 2150, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "open_mod": [782, 879, 892, 1028, 1154, 1172, 1583, 1584, 1590, 1591, 1595, 1596, 1599, 1600, 1606, 1608, 1662, 1983, 2005, 2017, 2019, 2058, 2151], "open_opt": [893, 1178, 1179, 1180, 1295], "open_or_cr": 892, "openmod": [891, 892, 1154, 1159, 1172, 1262, 1280, 1294, 1583, 1590, 1595, 1599, 1606, 1702, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1983, 2005, 2017, 2019, 2058, 2151], "openopt": [893, 1154, 1295, 1482, 1504, 1505, 1533], "openssl": 1686, "oper": [8, 13, 15, 16, 34, 35, 39, 72, 73, 74, 75, 76, 77, 78, 79, 80, 99, 100, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 142, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 174, 187, 188, 189, 190, 196, 206, 211, 212, 213, 220, 224, 225, 235, 236, 237, 238, 239, 240, 241, 242, 243, 253, 271, 276, 277, 278, 279, 281, 300, 304, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 346, 371, 379, 381, 386, 387, 392, 398, 406, 409, 410, 416, 417, 421, 422, 425, 426, 427, 428, 430, 432, 442, 443, 453, 454, 455, 456, 457, 459, 462, 463, 465, 471, 472, 478, 480, 483, 487, 488, 502, 503, 504, 505, 511, 526, 527, 535, 540, 544, 586, 587, 604, 605, 606, 607, 608, 609, 615, 622, 623, 627, 645, 646, 647, 650, 656, 657, 658, 659, 661, 662, 672, 679, 680, 681, 682, 683, 684, 685, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 739, 808, 809, 810, 811, 830, 831, 834, 865, 866, 869, 873, 891, 892, 894, 912, 913, 915, 922, 923, 930, 940, 943, 951, 952, 958, 960, 962, 965, 974, 1008, 1012, 1021, 1023, 1024, 1028, 1029, 1033, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1089, 1092, 1093, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1152, 1154, 1155, 1173, 1199, 1200, 1201, 1203, 1205, 1223, 1224, 1225, 1226, 1227, 1228, 1240, 1241, 1242, 1257, 1258, 1268, 1273, 1274, 1278, 1279, 1280, 1282, 1291, 1292, 1294, 1297, 1301, 1306, 1329, 1330, 1331, 1345, 1352, 1353, 1354, 1355, 1359, 1366, 1367, 1368, 1378, 1379, 1394, 1397, 1398, 1453, 1465, 1466, 1467, 1468, 1469, 1476, 1480, 1482, 1485, 1492, 1493, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1506, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1519, 1526, 1527, 1528, 1533, 1538, 1548, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1622, 1642, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1696, 1698, 1700, 1702, 1705, 1777, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1790, 1791, 1792, 1793, 1794, 1795, 1797, 1802, 1805, 1832, 1837, 1856, 1867, 1868, 1877, 1900, 1903, 1907, 1908, 1910, 1912, 1916, 1917, 1946, 1956, 1971, 1982, 1988, 2004, 2017, 2018, 2019, 2028, 2030, 2031, 2032, 2033, 2048, 2051, 2053, 2058, 2059, 2060, 2066, 2067, 2069, 2079, 2097, 2114, 2151, 2152, 2154, 2161], "opn": 2162, "oppos": [8, 131, 134, 138, 142, 401, 405, 862, 869, 1051, 1053, 1154, 1390, 1393], "opposit": 681, "opt": [1072, 1689], "optim": [1684, 1685, 1689], "optimist": 1687, "option": [0, 3, 7, 8, 12, 13, 14, 17, 18, 19, 20, 33, 39, 90, 108, 131, 134, 174, 251, 253, 283, 286, 306, 340, 344, 365, 369, 371, 374, 377, 378, 385, 390, 398, 400, 401, 403, 404, 416, 427, 430, 432, 435, 443, 455, 456, 458, 459, 460, 461, 476, 477, 480, 490, 494, 550, 569, 570, 579, 586, 615, 697, 746, 753, 762, 783, 801, 802, 803, 804, 806, 845, 862, 869, 876, 879, 891, 892, 893, 894, 995, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1037, 1039, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1089, 1091, 1094, 1101, 1113, 1114, 1154, 1159, 1178, 1179, 1180, 1186, 1188, 1202, 1240, 1252, 1262, 1277, 1295, 1296, 1378, 1390, 1392, 1465, 1468, 1470, 1472, 1473, 1474, 1476, 1480, 1482, 1487, 1495, 1499, 1500, 1504, 1505, 1506, 1512, 1513, 1517, 1529, 1533, 1538, 1551, 1552, 1555, 1559, 1560, 1565, 1570, 1582, 1589, 1598, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1752, 1799, 1950, 1951, 1958, 1981, 1983, 1993, 1994, 1996, 1997, 1999, 2008, 2017, 2053, 2058, 2059, 2092, 2095, 2107, 2114, 2130, 2147, 2151, 2152, 2154, 2161, 2164, 2165], "optional_valu": [1517, 1529], "optionalbyterangerequest": [8, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1512, 1514, 1559, 1561], "optionally_implicit_interv": [615, 624], "optionallyimplicitindexinterv": [8, 351, 518, 519, 520, 521, 546, 549, 574, 615, 618, 619, 624, 627, 734, 736, 878, 915, 916, 917, 918, 919, 920, 921, 922, 923], "order": [8, 13, 18, 19, 20, 39, 43, 45, 247, 249, 253, 300, 301, 302, 303, 304, 305, 316, 326, 352, 392, 393, 398, 425, 427, 453, 480, 490, 527, 559, 560, 586, 596, 597, 661, 667, 668, 669, 670, 681, 693, 694, 695, 755, 756, 757, 798, 799, 801, 811, 833, 834, 835, 846, 891, 961, 994, 1011, 1012, 1013, 1015, 1055, 1059, 1110, 1111, 1205, 1212, 1262, 1297, 1302, 1361, 1378, 1476, 1495, 1504, 1538, 1604, 1664, 1665, 1681, 1682, 1685, 1688, 1689, 1691, 1694, 1696, 1697, 1698, 1702, 1706, 1722, 1727, 1728, 1734, 1777, 1780, 1786, 1799, 1800, 1831, 1832, 1833, 1866, 1869, 1870, 1872, 1876, 1909, 1951, 1952, 1980, 1983, 1984, 1993, 2008, 2016, 2019, 2020, 2024, 2028, 2029, 2035, 2047, 2051, 2058, 2064, 2065, 2069, 2151, 2162, 2164, 2165], "order_constraint": [846, 1297, 1298, 1302], "order_constraint_valu": [19, 20, 798, 799], "org": [110, 1063, 1689], "org_aomedia_avif": 1689, "org_blosc_cblosc": 1689, "org_lz4": 1689, "org_nghttp2": 1689, "org_sourceware_bzip2": 1689, "org_tukaani_xz": 1689, "orig": [351, 518, 519, 520, 521, 609, 915], "origin": [8, 9, 11, 13, 33, 39, 43, 45, 53, 59, 64, 81, 98, 99, 174, 178, 180, 183, 191, 196, 197, 199, 201, 202, 204, 205, 207, 211, 214, 218, 253, 282, 314, 325, 351, 390, 427, 429, 430, 432, 433, 435, 443, 444, 446, 451, 518, 519, 520, 580, 586, 605, 610, 627, 661, 693, 745, 847, 848, 849, 860, 890, 915, 944, 947, 990, 991, 1011, 1089, 1097, 1113, 1116, 1117, 1118, 1120, 1205, 1207, 1210, 1213, 1215, 1218, 1229, 1230, 1232, 1296, 1306, 1311, 1332, 1342, 1343, 1344, 1603, 1672, 1681, 1682, 1684, 1685, 1688, 1706, 1722, 1725, 1726, 1734, 1776, 1782, 1783, 1784, 1785, 1799, 1816, 1823, 1828, 1829, 1830, 1832, 1850, 1857, 1863, 1864, 1865, 1892, 1913, 1951, 1958, 1972, 1977, 1978, 1979, 1981, 1983, 2006, 2013, 2014, 2015, 2017, 2019, 2049, 2058, 2061, 2062, 2063, 2114, 2115, 2151, 2152, 2154, 2161, 2162, 2164], "origin_byte_offset": [1205, 1230], "origin_kind": [99, 1603], "originkind": [8, 19, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 218, 554, 556, 557, 558, 694, 695, 749, 750, 755, 756, 844, 847, 860, 1011, 1113, 1114, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1240, 1296, 1306, 1311, 1342, 1343, 1344, 1358], "originkindb": [39, 76, 77], "origint": [174, 180], "originvec": [174, 178], "orthogon": [1781, 1856, 1971, 2004, 2047, 2048, 2162], "ostream": [39, 78, 99, 100, 107, 174, 189, 220, 225, 318, 329, 340, 346, 392, 406, 410, 416, 422, 459, 463, 465, 472, 483, 627, 647, 649, 659, 661, 685, 811, 831, 892, 894, 913, 915, 923, 960, 1021, 1024, 1028, 1056, 1060, 1121, 1144, 1188, 1201, 1203, 1205, 1227, 1268, 1274, 1294, 1345, 1355, 1366, 1368, 1394, 1398, 1517, 1519, 1527, 1528, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1622], "other": [39, 40, 46, 72, 143, 145, 165, 170, 174, 175, 176, 182, 187, 196, 197, 203, 204, 211, 253, 258, 266, 271, 278, 283, 286, 290, 294, 299, 340, 343, 365, 393, 395, 425, 427, 428, 430, 432, 435, 443, 526, 563, 574, 586, 589, 594, 615, 616, 622, 650, 661, 663, 665, 679, 681, 682, 734, 736, 740, 811, 875, 877, 878, 891, 930, 931, 1029, 1030, 1033, 1056, 1063, 1080, 1089, 1113, 1188, 1203, 1205, 1223, 1240, 1246, 1248, 1257, 1294, 1305, 1306, 1317, 1320, 1330, 1469, 1622, 1652, 1664, 1672, 1681, 1682, 1684, 1685, 1688, 1689, 1698, 1706, 1707, 1708, 1709, 1720, 1721, 1732, 1736, 1747, 1752, 1754, 1755, 1768, 1773, 1777, 1799, 1801, 1806, 1812, 1818, 1832, 1870, 1871, 1882, 1884, 1894, 1895, 1900, 1901, 1903, 1951, 1953, 1983, 1985, 2029, 2053, 2080, 2081, 2151, 2161, 2162, 2164], "otherckind": [586, 589, 594, 605, 615, 616, 622, 661, 681, 930, 931], "otherel": [39, 57], "otherinputrank": [930, 931], "otheroutputrank": [930, 931], "otherrank": [39, 58, 586, 587, 589, 594, 661, 662], "othertransform": [1306, 1314], "otherwis": [5, 19, 20, 98, 174, 177, 207, 213, 247, 260, 349, 354, 371, 372, 416, 422, 517, 518, 519, 520, 526, 532, 562, 575, 585, 605, 735, 778, 798, 799, 800, 846, 857, 859, 877, 972, 990, 994, 995, 996, 1007, 1011, 1063, 1110, 1156, 1158, 1163, 1185, 1186, 1249, 1255, 1297, 1362, 1417, 1482, 1489, 1517, 1532, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1696, 1697, 1698, 1700, 1756, 1757, 1758, 1789, 1801, 1806, 1835, 1839, 1992, 2077, 2130, 2164, 2165], "out": [12, 19, 64, 174, 270, 351, 415, 433, 435, 441, 442, 455, 456, 479, 526, 559, 563, 627, 693, 694, 695, 741, 799, 884, 888, 990, 994, 1370, 1688, 1689, 1697, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1856, 1867, 2012, 2053, 2146, 2162], "out_of_rang": 2162, "outer": [174, 358, 361, 362, 627, 995, 1002, 1776, 1781, 1832, 1856, 1951, 1971, 1983, 2004, 2019, 2047, 2048, 2115], "outerbox": [174, 358], "outerindexarrayslic": [427, 441], "outermost": 393, "outliv": 427, "output": [8, 174, 253, 255, 256, 346, 352, 415, 427, 428, 445, 447, 451, 477, 549, 563, 647, 661, 666, 669, 670, 672, 681, 684, 686, 687, 688, 689, 740, 799, 915, 924, 929, 930, 932, 937, 939, 940, 941, 942, 943, 954, 958, 960, 990, 991, 994, 1100, 1121, 1144, 1304, 1305, 1607, 1683, 1689, 1702, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1802, 1805, 1832, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1856, 1858, 1859, 1862, 1867, 1925, 1926, 1927, 1928, 1935, 1937, 1938, 1939, 1957, 1958, 1981, 1988, 1989, 2004, 2011, 2012, 2017, 2018, 2028, 2029, 2033, 2047, 2065, 2114, 2115, 2146, 2151, 2152, 2154, 2161, 2162, 2163], "output_bas": 1689, "output_constraint": [253, 255], "output_dim": [661, 686, 930, 940, 990], "output_exclusive_max_constraint": [661, 994], "output_inclusive_min_constraint": [661, 994], "output_index_map": [661, 686, 687, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959], "output_index_method": [960, 1607], "output_indic": [661, 666, 799], "output_offset": [351, 915], "output_rang": [563, 661], "output_rank": [348, 350, 563, 661, 665, 666, 670, 686, 688, 855, 990, 1156, 1322, 1805, 1832, 1834, 1859, 1957, 1989, 2029, 2030, 2033], "output_single_input_dimens": 1306, "output_unit": [477, 1305], "output_user_root": 1689, "outputindexmap": [1688, 1702, 1805, 1832, 1838, 1839, 1840, 1858, 1859, 1862, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1957, 1989, 2029, 2033], "outputindexmapiter": [924, 925, 926, 927, 928, 929, 930, 939, 943], "outputindexmaprang": [661, 687, 924, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943], "outputindexmapref": [661, 686, 924, 929, 930, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959], "outputindexmethod": [13, 563, 672, 740, 943, 953, 954, 956, 959, 960, 990, 991, 1304, 1305, 1607, 1702, 1925, 1932, 1935, 1939, 1940, 1941, 1942, 1943, 1944, 1945], "outputrank": [8, 427, 456, 552, 582, 586, 605, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 844, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 990, 991, 992, 993, 1296, 1377], "outputrankb": [661, 684], "outsid": [7, 98, 430, 432, 434, 438, 443, 445, 447, 451, 453, 478, 666, 886, 991, 994, 1056, 1118, 1120, 2053, 2070, 2162], "outstand": [1279, 1282], "over": [39, 253, 312, 576, 577, 581, 582, 661, 693, 798, 799, 877, 878, 892, 930, 939, 991, 1205, 1306, 1672, 1679, 1681, 1682, 1684, 1685, 1686, 1688, 1689, 1691, 1698, 1752, 1760, 1805, 1839, 1840, 2017, 2058, 2069, 2151, 2162, 2164], "overal": 1689, "overflow": [350, 415, 430, 432, 433, 434, 435, 441, 443, 545, 563, 626, 646, 799, 964, 990, 991, 994, 1119, 1205], "overlai": [1683, 1693, 1694, 1702, 2114, 2152, 2154], "overlap": [1680, 1683, 1694, 1908], "overload": [76, 219, 253, 370, 433, 478, 568, 586, 606, 841, 842, 845, 848, 849, 850, 962, 991, 1063, 1219, 1229, 1233], "overrid": [0, 263, 300, 736, 801, 804, 891, 1089, 1095, 1096, 1262, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 2017, 2058, 2151, 2165], "overridden": [258, 1681, 1685, 1689, 1697, 1892, 1910, 2017, 2151], "overwrit": [1690, 2130], "own": [39, 174, 253, 271, 427, 490, 586, 599, 661, 671, 1306, 1357, 1358, 1360, 1691], "owner": 1698, "ownership": [9, 11, 39, 79, 80, 108, 433, 435, 441, 507, 540, 1029, 1113, 1114, 1115, 1236, 1296, 1344, 1357, 1358, 1359, 1360], "p": [441, 490, 505, 1306, 1319], "p0323r6": 1063, "pack": [74, 143, 165, 436, 478, 1121, 1188, 1205, 1224, 1684], "packag": 1689, "pad": [8, 699, 1684, 1697], "page": 1677, "pai": [1691, 1698], "pair": [8, 39, 416, 490, 518, 519, 520, 521, 526, 627, 649, 915, 981, 983, 984, 985, 986, 1695, 1697, 1946, 1947, 2080, 2085], "paper": 1063, "parallel": [526, 2151], "param": [426, 1416, 1417, 2053], "paramet": [8, 12, 13, 16, 17, 18, 19, 20, 39, 45, 74, 75, 79, 80, 98, 108, 143, 165, 174, 178, 180, 196, 201, 218, 219, 227, 248, 249, 250, 253, 257, 259, 262, 265, 270, 290, 318, 327, 330, 340, 346, 350, 351, 352, 353, 359, 363, 365, 367, 369, 370, 398, 415, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 453, 454, 455, 456, 478, 481, 482, 486, 487, 488, 490, 494, 507, 518, 519, 520, 526, 527, 528, 535, 545, 547, 548, 559, 560, 563, 569, 570, 571, 574, 579, 586, 587, 597, 605, 609, 615, 626, 661, 662, 668, 670, 693, 694, 695, 734, 736, 740, 741, 757, 758, 767, 778, 798, 799, 801, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 854, 856, 857, 858, 860, 875, 877, 878, 884, 885, 886, 887, 888, 891, 963, 964, 965, 966, 967, 981, 983, 990, 991, 994, 1011, 1012, 1029, 1037, 1039, 1043, 1055, 1059, 1063, 1089, 1113, 1114, 1118, 1120, 1154, 1156, 1181, 1184, 1186, 1187, 1205, 1215, 1225, 1228, 1236, 1238, 1240, 1262, 1296, 1304, 1305, 1306, 1311, 1314, 1342, 1357, 1358, 1373, 1374, 1378, 1468, 1469, 1476, 1480, 1495, 1499, 1504, 1506, 1538, 1565, 1622, 1664, 1665, 1681, 1682, 1684, 1691, 1692, 1693, 1698, 1702, 1709, 1720, 1722, 1734, 1737, 1745, 1746, 1748, 1749, 1756, 1757, 1758, 1759, 1768, 1773, 1779, 1780, 1782, 1783, 1784, 1785, 1786, 1789, 1790, 1794, 1797, 1802, 1803, 1804, 1805, 1806, 1807, 1812, 1818, 1819, 1821, 1828, 1829, 1830, 1831, 1834, 1839, 1840, 1853, 1854, 1863, 1864, 1865, 1866, 1872, 1892, 1900, 1901, 1903, 1907, 1908, 1909, 1910, 1912, 1913, 1917, 1919, 1954, 1957, 1958, 1968, 1969, 1977, 1978, 1979, 1980, 1981, 1986, 1989, 2001, 2002, 2013, 2014, 2015, 2016, 2017, 2026, 2029, 2030, 2032, 2033, 2043, 2044, 2048, 2051, 2053, 2054, 2058, 2059, 2061, 2062, 2063, 2064, 2066, 2069, 2071, 2107, 2114, 2127, 2128, 2129, 2130, 2150, 2151, 2152, 2153, 2154, 2161, 2164, 2165], "parent": [0, 365, 367, 369, 388, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1740, 1748, 1749, 1750, 1751, 2165], "parenthes": 7, "pars": [307, 318, 365, 369, 383, 1345, 1349, 1482, 1504, 1533, 1537, 1702, 1740, 1743, 1749, 1869, 1882, 2086, 2153, 2164], "parse_tensorstore_flag": [1702, 2153], "parseusag": [307, 318], "part": [340, 1103, 1306, 1689, 1703, 1706, 1722, 1951, 1958, 1964, 2115], "partial": [13, 174, 363, 398, 1012, 1159, 1205, 1378, 1476, 1538, 1679, 1681, 1682, 1684, 1685, 1688, 1690, 2017, 2058, 2151], "particular": [0, 174, 253, 257, 290, 340, 798, 799, 1186, 1188, 1280, 1343, 1685, 1687, 1703, 1790], "particularli": [108, 1775, 2161], "partit": [2025, 2164], "pass": [291, 427, 433, 435, 441, 1689, 1702, 2092, 2095], "password": 1698, "past": [1268, 1269, 1697], "patch": 1689, "path": [8, 365, 891, 1468, 1469, 1482, 1483, 1484, 1487, 1493, 1494, 1499, 1506, 1533, 1534, 1535, 1540, 1541, 1549, 1565, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1703, 1869, 1882, 1883, 1885, 1886, 1887, 1889, 1890, 1891, 1892, 1893, 1899, 1900, 1901, 1902, 1903, 1904, 1906, 1907, 1908, 1910, 1911, 1912, 1913, 1915, 1917, 2000, 2035, 2042, 2070, 2151, 2163], "path_prefix_length": 1697, "path_suffix": 1697, "path_suffix_length": 1697, "pattern": [1240, 1250, 1788], "pem": 1686, "pend": 967, "pep": 2162, "per": [143, 150, 165, 168, 253, 260, 263, 1681, 1682, 1684, 1685, 1686, 1688, 1689, 1691, 1696, 1698, 1707, 1709, 1713, 1714, 1720, 2164], "percent": 1692, "perceptu": 1678, "perfect": 2162, "perfectli": [2069, 2162], "perform": [8, 131, 416, 425, 483, 511, 526, 800, 891, 1049, 1051, 1053, 1240, 1294, 1359, 1468, 1476, 1482, 1538, 1565, 1665, 1671, 1672, 1682, 1685, 1687, 1688, 1690, 1697, 1703, 1776, 1900, 1903, 1907, 1908, 1910, 1916, 1917, 1993, 1994, 1996, 1997, 1999, 2008, 2030, 2031, 2032, 2033, 2048, 2051, 2066, 2067, 2114, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "perm": [393, 741], "permiss": 1691, "permit": [8, 12, 13, 99, 416, 459, 485, 743, 758, 1028, 1056, 1063, 1113, 1240, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1697, 1698, 1776, 1777, 1786, 1802, 1805, 1958, 1981, 2017, 2053, 2114, 2151, 2152, 2154, 2161, 2162], "permut": [12, 13, 253, 300, 352, 393, 394, 396, 397, 480, 586, 597, 661, 668, 670, 741, 796, 961, 1110, 1111, 1205, 1685, 1688, 1706, 1722, 1727, 1728, 1734, 1831, 1866, 1980, 2016, 2064, 2164], "permutationmatchesord": [393, 961], "persist": [1684, 1693, 1695, 2019, 2053, 2070], "physic": [1089, 1103, 1345, 1681, 1685, 1702, 1951, 1958, 1964, 1981, 1983, 1996, 2017, 2019, 2038, 2080, 2114, 2151, 2152, 2154, 2161, 2164], "pick": 1682, "pip": 1689, "pipelin": [39, 73, 253, 328, 586, 587, 604, 661, 662, 680, 962, 1063, 1080, 1089, 1107, 1240, 1242, 1258, 1306, 1331, 1482, 1485, 1492], "pipelineresulttyp": [39, 73, 253, 328, 586, 604, 661, 680, 962, 1063, 1089, 1107, 1240, 1258, 1306, 1331, 1482, 1492], "place": [1063, 1072, 1154, 1159, 1183, 1682, 1686, 1690, 1698, 1777], "plain": [1685, 1776], "plane": 1673, "platform": [247, 1684, 1689], "plu": [110, 130, 526, 699, 731, 1574, 2162], "pm": 1688, "png": [1679, 1682, 1689, 2165], "png_level": 1682, "po": [1121, 1147, 1149], "point": [8, 39, 43, 64, 108, 174, 490, 511, 525, 842, 849, 854, 860, 1297, 1311, 1357, 1358, 1359, 1360, 1424, 1425, 1426, 1453, 1684, 1685, 1702, 2069, 2070, 2080, 2108, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2164, 2165], "point_format": 110, "pointe": [227, 233, 235], "pointee_dtype_t": [490, 494, 1613], "pointer": [8, 9, 10, 11, 16, 19, 39, 45, 49, 54, 56, 64, 67, 82, 143, 144, 147, 162, 174, 180, 196, 201, 219, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 351, 371, 379, 416, 426, 442, 490, 492, 493, 494, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 526, 626, 741, 743, 761, 762, 798, 799, 884, 888, 924, 928, 944, 947, 963, 1029, 1063, 1075, 1112, 1115, 1205, 1215, 1236, 1255, 1296, 1306, 1309, 1312, 1319, 1323, 1326, 1337, 1338, 1340, 1341, 1343, 1357, 1358, 1360, 1474, 1533, 1613, 1622, 1627, 1630, 1639, 1643, 1650, 1654, 1680, 1697], "pointer_trait": [490, 501, 1613], "pointerelementtag": [490, 963], "pointertyp": [39, 554], "polici": [2019, 2054], "pool": [0, 365, 526, 1262, 1679, 1681, 1682, 1684, 1685, 1696, 1700, 1913, 2058, 2114, 2151, 2152, 2154, 2161], "port": [2147, 2149], "portion": [102, 1697, 2086, 2164], "posit": [43, 143, 153, 427, 438, 481, 482, 511, 518, 519, 520, 563, 585, 944, 947, 994, 1121, 1127, 1459, 1672, 1683, 1685, 1688, 1958, 1981, 2017, 2019, 2041, 2151, 2162, 2163], "posix": [1689, 1690], "possibl": [365, 425, 545, 627, 811, 833, 1059, 1152, 1240, 1296, 1297, 1509, 1681, 1682, 1685, 1688, 1689, 2020, 2161], "possibli": [110, 111, 114, 115, 227, 415, 699, 700, 703, 852, 1063, 1114, 1306, 2055], "post": [21, 22, 31, 41, 42, 110, 126, 127, 143, 157, 158, 198, 376, 529, 699, 723, 724, 965, 969, 977, 1095, 1096, 1211, 1214, 1247, 1284], "postiv": 1686, "potenti": [8, 39, 131, 454, 542, 661, 665, 744, 782, 994, 1028, 1248, 1702, 1703, 2162], "pow": [110, 699, 1614, 1615], "power": [1446, 1447, 1448, 1614, 1615, 2162], "pre": [110, 128, 129, 143, 159, 160, 350, 600, 601, 602, 603, 608, 609, 610, 612, 634, 635, 636, 665, 666, 672, 673, 675, 676, 677, 678, 686, 687, 688, 699, 725, 726, 886, 895, 997, 1007, 1069, 1075, 1078, 1086, 1225, 1228, 1248, 1250, 1251, 1254, 1259, 1262, 1689], "prebuilt": 1689, "preced": [253, 263, 266, 312, 575, 735, 875, 877, 878, 891, 892, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1694, 1722, 1734, 1958, 1981, 2017, 2058, 2114, 2151, 2152, 2154, 2161, 2164], "precis": [8, 253, 269, 270, 518, 519, 520, 1089, 1424, 1425, 1426, 1685, 1697, 1702, 1722, 1734, 2069, 2080, 2131, 2132, 2133, 2145, 2155, 2160, 2164, 2165], "precomput": [1682, 1687, 1693, 1696, 2164], "predecessor": 2162, "prefer": [258, 632, 736, 915, 1722, 1734, 2164], "prefix": [8, 90, 92, 364, 738, 811, 812, 818, 819, 820, 821, 828, 840, 1482, 1500, 1503, 1533, 1541, 1691, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1869, 1882, 1890, 1911, 2127, 2128, 2129, 2162], "prefixexclusivemax": [811, 819], "prepar": [365, 1294, 1686], "prepend": 1697, "prerequisit": 1689, "presenc": [1680, 1685], "present": [8, 21, 32, 1063, 1121, 1149, 1188, 1196, 1519, 1672, 1681, 1686, 1688, 1697], "preserv": [110, 343, 587, 662, 740, 1063, 1120, 1232, 1363, 2161], "preset": 1681, "preshift_bit": [1682, 1696, 2151, 2163], "prevent": [425, 540], "previou": [263, 1697, 2162], "previous": [970, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1788, 1796, 1910, 2114, 2151, 2152, 2154, 2161], "primari": [981, 1063, 1664], "primarili": [8, 518, 519, 520, 672, 685, 1114, 1421, 1507, 1509, 1746, 1752, 1802, 1805], "primit": [16, 489], "print": [39, 78, 90, 92, 93, 94, 96, 97, 99, 100, 107, 174, 189, 220, 225, 318, 329, 392, 406, 410, 416, 422, 465, 472, 483, 649, 659, 661, 685, 811, 831, 892, 894, 913, 915, 923, 960, 1021, 1024, 1028, 1056, 1060, 1121, 1144, 1188, 1201, 1268, 1274, 1294, 1345, 1355, 1366, 1368, 1394, 1398, 1517, 1519, 1527, 1528, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1622, 1686, 1756, 1757, 1758, 1759, 1763, 1788, 1962, 1964, 1965, 1966, 1967, 1973, 1998, 2003, 2007, 2012, 2161], "prior": [266, 427, 428, 430, 432, 436, 437, 442, 443, 444, 445, 447, 451, 454, 626, 970, 1114, 1278, 1280, 1294, 1679, 1680, 1681, 1682, 1684, 1685, 1689, 1779, 1780, 1782, 1783, 1784, 1785, 2017, 2053, 2058, 2151, 2161, 2162], "privat": 1689, "problem": [1684, 1691, 1692], "process": [16, 365, 800, 1086, 1680, 1687, 1690, 2025], "produc": [8, 526, 965, 981, 991, 1702, 1788, 1794, 1797, 1946, 2162], "product": [39, 71, 90, 97, 174, 186, 196, 210, 626, 800, 964, 1205, 1222, 1297, 1799, 1826], "productofext": [174, 559, 964], "profil": 1698, "program": [4, 5, 8], "progress": [398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 566, 1012, 1013, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1279, 1282, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1689, 1690, 1699], "progress_funct": [401, 404, 1013, 1016, 1017, 1020, 1390, 1392], "project": [1689, 1691], "project_id": 1691, "prometheu": [1702, 2128, 2129], "promis": [8, 21, 23, 526, 540, 836, 837, 838, 839, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 989, 1109, 1702, 1788, 1792, 1946, 1947, 1948, 1949], "promisefuturepair": [8, 526, 981, 982, 983, 984, 985, 986, 987, 988, 989], "promisetyp": [981, 987, 989], "promisevalu": [526, 836, 837, 838, 839], "propag": [3, 348, 546, 549, 574, 575, 627, 734, 735, 837, 839, 855, 858, 915, 990, 991, 994, 1060, 1063, 1154, 1164, 1165, 1167, 1170, 1175, 1373, 1374, 1768, 1773, 1812, 1818], "propagatebound": [348, 661, 672, 855, 990, 991, 992], "propagateboundstotransform": [661, 991, 993], "propagateexplicitbound": [661, 992], "propagateexplicitboundstotransform": [661, 993], "propagateinputdomainresizetooutput": [661, 994], "properli": 365, "properti": [260, 263, 1294, 1672, 1681, 1684, 1685, 1687, 1693, 1696, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1852, 1961, 2070, 2151, 2161, 2164, 2165], "propos": [1063, 2162], "protocol": [1690, 1693, 1699, 2162], "provid": [8, 19, 131, 174, 253, 257, 290, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 435, 526, 995, 1063, 1121, 1124, 1205, 1373, 1374, 1379, 1495, 1665, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1689, 1690, 1691, 1698, 1788, 2020, 2069, 2070, 2097, 2151, 2162], "proxi": [143, 152, 161, 162, 163, 924, 929, 930, 942, 1121, 1146], "ptr": [227, 238, 241, 416, 426, 1622, 1654], "ptrdiff_t": [8, 16, 17, 143, 144, 148, 150, 151, 154, 155, 156, 161, 165, 166, 168, 227, 232, 239, 352, 416, 419, 423, 426, 473, 564, 964, 1153, 1205, 1444, 1612, 1622, 1631, 1634, 1635, 1636, 1638, 1640, 1641, 1652, 1655, 1656], "public": [8, 253, 259, 260, 262, 263, 265, 266, 282, 290, 291, 300, 393, 526, 615, 869, 893, 915, 1029, 1049, 1051, 1053, 1089, 1091, 1092, 1099, 1154, 1178, 1179, 1180, 1205, 1295, 1505, 1533, 1551, 1555, 1691, 1698, 2163], "publish": [1689, 1702, 2129], "pull": 1689, "purpos": [270, 1664, 1695, 1697, 1802, 2161, 2162], "pushgatewai": [1702, 2129], "put": [526, 1698], "py": [1689, 1799, 1807, 1837, 2053], "pybind11": 1689, "python": [459, 463, 1670, 1672, 1684, 1687, 1702, 1703, 1752, 1762, 2032, 2033, 2145, 2155, 2160, 2162], "python3": 1689, "python_bin_path": 1689, "qualif": [8, 353, 1184], "qualifi": [39, 48, 143, 165, 174, 227, 416, 746, 762, 783, 842, 849, 1037, 1039, 1063, 1113, 1184, 1205, 1206, 1207, 1363, 1416, 1417, 1622, 1627, 1628], "qualiti": [1673, 1675, 1678, 1682], "quantiti": [1089, 1103, 1345, 1685, 1702, 1958, 1964, 1981, 2017, 2038, 2080, 2084, 2114, 2151, 2152, 2154, 2161, 2164], "quantiz": 1673, "queri": [100, 101, 569, 1687, 1692, 1697, 1698, 1788, 1792, 1793, 2059], "query_fully_stor": [101, 102, 569, 2022, 2059], "query_not_stor": [101, 104, 569, 2023, 2059], "quit": [1063, 1672], "r": [16, 17, 39, 40, 220, 225, 348, 393, 395, 416, 421, 422, 426, 570, 845, 846, 852, 894, 901, 913, 1205, 1209, 1212, 1217, 1223, 1226, 1306, 1874, 2045], "r_static": 1187, "race": 1698, "rais": [110, 699, 1446, 1447, 1448, 1614, 1615, 1705, 1732, 1736, 1760, 1779, 1780, 1782, 1783, 1784, 1785, 1788, 1794, 1797, 1804, 1817, 1819, 1821, 1830, 1831, 1853, 1854, 1865, 1866, 1900, 1901, 1903, 1909, 1912, 1954, 1955, 1956, 1957, 1958, 1968, 1969, 1971, 1979, 1980, 1981, 1982, 1986, 1987, 1988, 1989, 2001, 2002, 2004, 2015, 2016, 2017, 2018, 2043, 2044, 2059, 2063, 2064, 2070, 2077, 2107, 2151, 2161], "ramp": 1691, "random": 1697, "random_access_iterator_tag": [143, 149, 924, 927], "randomaccessiter": 924, "randomli": 1697, "rang": [8, 98, 174, 220, 221, 224, 226, 350, 356, 427, 428, 438, 445, 447, 451, 453, 458, 459, 465, 478, 484, 545, 547, 548, 563, 585, 627, 629, 661, 687, 769, 794, 811, 812, 815, 816, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 840, 884, 885, 886, 894, 896, 897, 901, 902, 903, 904, 905, 906, 914, 930, 932, 937, 991, 994, 1118, 1120, 1121, 1124, 1126, 1238, 1459, 1465, 1466, 1469, 1480, 1482, 1499, 1500, 1501, 1512, 1514, 1559, 1561, 1675, 1688, 1694, 1697, 1752, 1776, 1783, 1784, 1785, 1786, 1788, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1907, 1908, 1909, 1927, 1928, 2069, 2115, 2116, 2162], "rank": [12, 13, 19, 20, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 249, 253, 260, 266, 270, 271, 280, 283, 285, 299, 300, 317, 325, 326, 331, 348, 354, 359, 363, 393, 394, 395, 396, 397, 399, 400, 415, 427, 429, 430, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 455, 458, 459, 460, 461, 465, 467, 473, 478, 481, 482, 484, 485, 486, 487, 488, 551, 553, 554, 555, 556, 557, 558, 562, 563, 575, 577, 578, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 625, 626, 661, 662, 677, 688, 689, 690, 693, 694, 695, 697, 698, 735, 740, 741, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 772, 795, 797, 798, 799, 801, 807, 810, 841, 842, 843, 848, 849, 853, 854, 855, 869, 877, 881, 883, 884, 885, 886, 888, 890, 891, 930, 937, 938, 941, 943, 944, 950, 955, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1039, 1055, 1089, 1108, 1113, 1114, 1116, 1117, 1154, 1156, 1158, 1174, 1185, 1186, 1187, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1357, 1358, 1371, 1376, 1445, 1463, 1665, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1700, 1706, 1707, 1709, 1715, 1716, 1720, 1722, 1727, 1729, 1730, 1732, 1734, 1736, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1801, 1802, 1805, 1806, 1809, 1813, 1814, 1817, 1822, 1824, 1831, 1832, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1851, 1855, 1856, 1859, 1866, 1867, 1935, 1937, 1938, 1951, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1963, 1964, 1966, 1970, 1971, 1973, 1976, 1980, 1981, 1982, 1983, 1989, 2003, 2007, 2008, 2012, 2016, 2017, 2019, 2029, 2030, 2033, 2046, 2050, 2053, 2055, 2064, 2114, 2146, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "rank_spec": [697, 698], "ranka": [36, 39, 350, 661], "rankb": [36, 39, 76, 77, 350, 586, 607, 661], "rankc": [350, 661], "rankconstraint": [8, 39, 42, 43, 45, 79, 87, 174, 178, 181, 197, 199, 202, 211, 253, 271, 280, 317, 348, 395, 555, 570, 586, 587, 589, 591, 593, 594, 661, 662, 663, 665, 679, 693, 695, 744, 755, 756, 801, 802, 807, 810, 931, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1089, 1094, 1108, 1205, 1208, 1209, 1211, 1212, 1213, 1216, 1217, 1219, 1221, 1223, 1225, 1229, 1233, 1234, 1236, 1306, 1316, 1321, 1329], "ranktyp": [39, 55, 83, 174, 179, 180, 184, 192, 193, 196, 198, 200, 201, 208, 215, 586, 592, 595, 611, 1205, 1208, 1214, 1215, 1231, 1232, 1240, 1245, 1259, 1306, 1313, 1333], "rare": [1684, 2162], "rate": [1686, 1691, 1698, 2164], "rate_limit": 1686, "rather": [8, 79, 80, 90, 97, 108, 110, 196, 227, 253, 258, 259, 262, 265, 371, 380, 428, 490, 661, 672, 681, 991, 1112, 1205, 1262, 1622, 1697, 1698, 1722, 1727, 1728, 1734, 1777, 2107, 2114, 2152, 2154, 2162, 2164], "ratio": [253, 258, 259, 260, 263, 271, 272, 276, 283, 287, 290, 292, 296, 310, 315, 318, 322, 333, 337, 1685, 1707, 1709, 1711, 1712, 1720, 1722, 1734, 2164], "raw": [8, 10, 39, 56, 64, 227, 229, 230, 234, 236, 237, 240, 242, 490, 498, 499, 1112, 1306, 1323, 1681, 1696, 1697, 2070], "raw_result": [965, 970, 975, 984], "rawpoint": [39, 56], "rbegin": [1622, 1644], "re": [390, 892, 1262, 1476, 1482, 1495, 1538, 1679, 1681, 1682, 1684, 1685, 1689, 1696, 1700, 1869, 1892, 1908, 1913, 2017, 2019, 2058, 2151, 2161], "reach": [0, 1697], "reachabl": 1697, "read": [8, 13, 245, 249, 253, 258, 259, 261, 262, 264, 265, 269, 270, 271, 283, 308, 309, 315, 318, 321, 332, 333, 334, 335, 398, 401, 403, 406, 411, 482, 891, 892, 1011, 1012, 1013, 1017, 1021, 1025, 1026, 1028, 1239, 1240, 1250, 1260, 1263, 1294, 1379, 1465, 1467, 1482, 1506, 1507, 1509, 1510, 1512, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1526, 1530, 1556, 1558, 1559, 1562, 1563, 1565, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1683, 1684, 1687, 1688, 1690, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1706, 1707, 1722, 1731, 1732, 1734, 1869, 1877, 1878, 1901, 1908, 1910, 1912, 1916, 1917, 1918, 1919, 1920, 2005, 2017, 2019, 2025, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2045, 2048, 2051, 2052, 2053, 2058, 2060, 2066, 2067, 2069, 2070, 2071, 2092, 2093, 2094, 2097, 2107, 2111, 2114, 2152, 2154, 2161, 2162, 2164], "read_chunk": [253, 332, 1681, 1682, 1684, 1685, 1706, 1722, 1731, 1732, 1733, 1734, 2008, 2036, 2055, 2164], "read_chunk_aspect_ratio": [253, 333, 1722, 1734], "read_chunk_aspect_ratio_soft_constraint": [1722, 1734], "read_chunk_el": [253, 263, 266, 334, 1682, 1685, 1722, 1733, 1734], "read_chunk_elements_soft_constraint": [1722, 1734], "read_chunk_shap": [253, 266, 335, 1682, 1685, 1703, 1722, 1732, 1734, 2161], "read_chunk_shape_soft_constraint": [1722, 1734], "read_chunk_templ": [1706, 1732, 1736], "read_context": 2161, "read_el": [406, 411], "read_funct": 2161, "read_futur": 2163, "read_future1": 1703, "read_future2": 1703, "read_param": 2161, "read_rat": [1691, 1698], "read_result": [1481, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1564], "read_writ": [249, 1028, 1240], "read_write_mod": [1240, 1248, 1260], "read_write_opt": [401, 402, 403, 404, 405, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1152, 1390, 1391, 1392, 1393], "readabl": [891, 2019, 2052], "readchunk": [253, 257, 315, 332], "readchunkaspectratio": [253, 258, 260, 333], "readchunkel": [253, 263, 308, 334], "readchunkshap": [253, 266, 309, 335], "reader": [1294, 1690, 2070], "readgenerationcondit": [1193, 1194, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1515], "readi": [21, 25, 26, 27, 28, 30, 32, 398, 406, 411, 526, 527, 532, 536, 565, 566, 836, 838, 839, 850, 856, 857, 858, 965, 970, 976, 978, 983, 1011, 1012, 1029, 1032, 1055, 1109, 1278, 1279, 1282, 1288, 1378, 1379, 1385, 1386, 1469, 1565, 1790, 1794, 1797, 1907, 1908, 1912, 2051, 2054, 2069, 2078, 2151], "readintonewarrayopt": [1011, 1013, 1014, 1015, 1016, 1240], "readm": 1689, "readopt": [1012, 1017, 1018, 1019, 1020, 1240, 1482, 1506, 1507, 1509, 1512, 1513, 1514, 1515, 1516, 1530, 1559], "readprogress": [1012, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "readprogressfunct": [1011, 1012, 1013, 1016, 1017, 1020, 1021, 1026, 1027], "readresult": [1482, 1506, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1869, 1877, 1878, 1879, 1880, 1881, 1910, 1912, 1917], "readwritemod": [8, 249, 482, 782, 880, 881, 891, 1028, 1038, 1239, 1240, 1246, 1248, 1257, 1260, 1263, 1267, 1584, 1591, 1596, 1600, 1608, 1662], "readyfutur": [526, 527, 836, 850, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "real": [924, 1685, 1788, 1958, 1981, 2017, 2114, 2151, 2152, 2154, 2161, 2165], "reassign": 174, "rebind": [39, 57, 165, 169, 196, 211, 507, 510, 943, 958, 1659], "rebinddatatyp": [8, 353, 1037, 1184], "rebindel": [39, 57], "rebindmod": [8, 880, 1038], "rebindrank": [8, 39, 58, 1039, 1187], "rebindtransform": [1306, 1314], "rebound": [39, 57, 58, 165], "rebuild": 1689, "receiv": [526, 1688, 1691, 1692, 1794, 1797], "recent": [0, 1697, 1777, 1792, 1804, 1900, 1901, 1903, 1912, 1948, 1957, 2162], "recheck": [1051, 1679, 1680, 1681, 1682, 1684, 1685, 2017, 2058, 2151], "recheck_cach": [2017, 2058, 2151], "recheck_cached_data": [1679, 1680, 1681, 1682, 1684, 1685, 2017, 2058, 2151, 2163], "recheck_cached_metadata": [1679, 1681, 1682, 1684, 1685, 2017, 2058, 2151], "recheckcach": [891, 1049, 1050, 1154, 1262], "recheckcacheddata": [891, 1049, 1051, 1052, 1053, 1154, 1159, 1262], "recheckcachedmetadata": [891, 1053, 1154, 1159, 1262], "recheckcacheopt": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1154, 1702, 1950, 2017, 2058, 2151], "reclaim": 1690, "recommend": [891, 1345, 1682, 1685, 1689, 1696, 1700, 1703, 2030, 2031, 2032, 2033, 2048, 2066, 2080, 2162, 2164], "recomput": 2161, "reconstruct": [1063, 1072], "record": [1900, 1903, 1907, 1908, 1917], "recreat": [879, 1154, 1162, 1240, 1262, 1474, 1478, 1533, 1544], "rectangular": [1672, 1682, 1688], "recurs": 2164, "reduc": [131, 428, 542, 661, 991, 1056, 1684, 1685, 1689, 1703, 2029, 2053], "redund": [2151, 2164], "ref": [174, 783], "refer": [0, 21, 38, 39, 67, 69, 70, 74, 75, 79, 80, 82, 90, 91, 108, 131, 133, 134, 135, 136, 137, 138, 139, 142, 143, 152, 161, 163, 165, 173, 174, 190, 196, 197, 211, 227, 243, 253, 343, 355, 365, 371, 373, 381, 387, 390, 427, 468, 483, 490, 506, 526, 527, 536, 540, 542, 563, 570, 572, 586, 599, 614, 615, 627, 649, 650, 661, 671, 843, 854, 860, 882, 924, 929, 930, 942, 943, 951, 952, 965, 972, 975, 986, 1029, 1034, 1036, 1037, 1039, 1063, 1081, 1109, 1113, 1114, 1121, 1145, 1146, 1152, 1205, 1212, 1220, 1236, 1240, 1262, 1278, 1292, 1306, 1311, 1339, 1341, 1343, 1344, 1345, 1359, 1363, 1470, 1505, 1551, 1555, 1622, 1623, 1624, 1628, 1637, 1642, 1645, 1659, 1670, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1689, 1690, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1703, 1777, 1892, 1908, 1913, 2017, 2058, 2069, 2107, 2150, 2162, 2164, 2165], "referenc": [39, 143, 152, 165, 172, 174, 401, 405, 526, 649, 656, 740, 843, 975, 1205, 1390, 1393, 1697, 1780, 1821, 1854, 1969, 2002, 2044, 2107], "reference_typ": [1063, 1084], "reflect": [1113, 1261, 1379, 1565, 1912, 2028, 2039, 2051, 2069, 2097], "regardless": [1043, 1113, 1673, 1679, 1680, 1681, 1682, 1684, 1685, 2017, 2058, 2151, 2162], "region": [174, 569, 860, 1240, 1311, 1672, 1682, 1688, 1690, 1698, 2020, 2162, 2163], "regist": [21, 23, 526, 527, 540, 965, 966, 967, 1684, 1788, 1790, 1796], "registr": 526, "regular": [34, 253, 416, 511, 1250, 1306, 1316, 1342, 1685, 1686, 1692, 1706, 1707, 1888, 1905, 2069, 2070, 2162, 2164], "rel": [143, 151, 219, 227, 243, 427, 433, 435, 453, 903, 1345, 1351, 1469, 1499, 1682, 1692, 1697, 1786, 1907, 1908, 2162, 2164], "relat": [8, 108, 1113, 1114, 1689, 1691, 1692, 2019, 2020, 2155, 2160], "relationship": 1688, "relative_kei": 1697, "relative_path": 1697, "releas": [8, 131, 133, 986, 1109, 1152, 1703, 2069], "reli": [891, 1664, 1703, 2165], "relianc": 1690, "remain": [13, 98, 253, 263, 371, 376, 398, 427, 445, 447, 836, 838, 972, 978, 1012, 1154, 1157, 1162, 1205, 1378, 1474, 1475, 1476, 1478, 1504, 1533, 1536, 1538, 1544, 1681, 1684, 1688, 1690, 1697, 1698, 1777, 1785, 1830, 1865, 1892, 1910, 1979, 2015, 2017, 2053, 2063, 2079, 2086, 2162, 2164], "remaind": [110, 1349, 1453], "remark": 431, "remot": [0, 672, 1686, 1687], "remov": [39, 431, 433, 434, 435, 570, 811, 821, 836, 837, 838, 839, 1205, 1343, 1349, 1374, 1469, 1778], "remove_const_t": [8, 416, 526, 762, 844, 847, 965, 1306], "remove_cv_t": [39, 89, 416, 846, 1416, 1622, 1657], "remove_cvref_t": [8, 39, 46, 72, 98, 197, 211, 254, 348, 490, 493, 494, 495, 512, 526, 753, 852, 855, 856, 858, 1063, 1090, 1306, 1316, 1317, 1320, 1321, 1329, 1330, 1374, 1375, 1613], "remove_done_callback": [1788, 1796, 2097, 2105], "remove_reference_t": [39, 211, 854], "removeprefix": [811, 820], "removeprefixlength": [811, 821], "renam": 1690, "rend": [1622, 1644], "reorder": [433, 435, 1786], "repeat": [8, 798, 799, 800, 1054, 1294, 1297, 1303, 2071], "repeat_constraint": [1297, 1298], "repeatable_read": [1294, 2070, 2071], "repeated_elements_constraint": [1297, 1303], "repeatedelementsconstraint": [8, 800, 1054, 1297, 1298, 1303, 1454], "repeatedli": [1696, 1700], "replac": [390, 416, 991, 1154, 1161, 1162, 1474, 1477, 1478, 1533, 1542, 1544, 1679, 1681, 1682, 1684, 1685, 1697, 1892, 2017, 2162], "repo": 1689, "repositori": 1689, "repres": [8, 39, 60, 85, 86, 108, 143, 165, 167, 174, 184, 196, 206, 208, 253, 271, 272, 273, 275, 365, 416, 424, 427, 459, 473, 475, 490, 526, 547, 548, 585, 586, 595, 615, 627, 649, 661, 687, 778, 779, 811, 819, 855, 915, 930, 943, 944, 945, 951, 991, 995, 1063, 1074, 1086, 1089, 1091, 1092, 1099, 1112, 1113, 1114, 1115, 1121, 1132, 1183, 1185, 1186, 1188, 1192, 1205, 1220, 1296, 1306, 1345, 1416, 1417, 1419, 1420, 1421, 1443, 1445, 1459, 1460, 1474, 1533, 1679, 1681, 1682, 1684, 1685, 1688, 1695, 1697, 1702, 1752, 1798, 1832, 1925, 1946, 2051, 2069, 2080, 2162, 2164, 2165], "represent": [8, 33, 39, 55, 66, 90, 95, 97, 99, 100, 107, 110, 174, 220, 225, 253, 271, 290, 292, 293, 295, 307, 318, 329, 340, 346, 365, 371, 374, 377, 406, 410, 416, 425, 483, 490, 491, 615, 620, 627, 647, 649, 659, 661, 684, 685, 811, 831, 892, 894, 913, 915, 923, 1021, 1024, 1028, 1056, 1060, 1154, 1173, 1188, 1189, 1201, 1203, 1204, 1205, 1208, 1227, 1240, 1243, 1245, 1268, 1274, 1277, 1294, 1306, 1307, 1313, 1325, 1345, 1355, 1356, 1394, 1398, 1482, 1488, 1495, 1517, 1519, 1527, 1528, 1533, 1537, 1543, 1548, 1577, 1603, 1605, 1606, 1608, 1609, 1610, 1611, 1612, 1622, 1662, 1673, 1685, 1688, 1690, 1691, 1692, 1693, 1695, 1697, 1698, 1700, 1702, 1706, 1707, 1710, 1719, 1723, 1733, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1748, 1762, 1763, 1808, 1810, 1827, 1841, 1842, 1862, 1884, 1885, 1886, 1891, 1893, 1902, 1915, 1953, 1959, 1960, 1976, 1985, 1990, 1991, 2011, 2019, 2053, 2080, 2083, 2091, 2119, 2150, 2162, 2164, 2165], "request": [8, 100, 101, 102, 104, 131, 661, 894, 897, 898, 899, 900, 902, 904, 906, 907, 908, 994, 1051, 1056, 1060, 1154, 1180, 1262, 1379, 1380, 1507, 1509, 1512, 1516, 1519, 1530, 1533, 1555, 1559, 1563, 1664, 1665, 1690, 1691, 1692, 1697, 1698, 1699, 1703, 1788, 1791, 1908, 1912, 2053, 2059, 2092, 2093, 2151, 2161], "requested_input_exclusive_max": [661, 994], "requested_input_inclusive_min": [661, 994], "requester_pai": 1698, "requir": [18, 40, 42, 43, 44, 45, 46, 72, 74, 75, 79, 80, 98, 111, 115, 143, 145, 165, 176, 178, 180, 181, 182, 187, 197, 198, 199, 200, 202, 203, 204, 205, 211, 227, 228, 230, 231, 236, 238, 240, 241, 242, 243, 244, 245, 246, 253, 254, 258, 348, 358, 359, 363, 395, 397, 398, 399, 415, 416, 419, 425, 428, 429, 430, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 455, 456, 478, 493, 494, 495, 502, 526, 528, 530, 532, 533, 535, 542, 569, 570, 576, 578, 580, 581, 587, 589, 591, 593, 594, 662, 663, 665, 679, 693, 694, 695, 697, 700, 703, 755, 756, 758, 767, 798, 799, 803, 836, 844, 845, 847, 850, 855, 857, 891, 892, 931, 962, 968, 970, 971, 974, 983, 984, 985, 986, 1011, 1012, 1030, 1033, 1055, 1059, 1065, 1070, 1076, 1079, 1082, 1083, 1090, 1101, 1125, 1127, 1130, 1137, 1159, 1181, 1182, 1186, 1205, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1223, 1224, 1225, 1228, 1232, 1236, 1237, 1238, 1246, 1248, 1262, 1294, 1296, 1316, 1317, 1319, 1320, 1321, 1329, 1330, 1337, 1338, 1357, 1358, 1359, 1360, 1374, 1375, 1378, 1476, 1495, 1504, 1538, 1587, 1612, 1649, 1659, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1788, 1806, 1839, 1908, 2017, 2051, 2058, 2069, 2071, 2107, 2151, 2163, 2164, 2165], "reserv": 1688, "reset": [21, 31, 174, 193, 371, 376, 965, 977], "reshap": [1703, 2053], "resiz": [661, 672, 892, 994, 1055, 1056, 1057, 1058, 1060, 1240, 1280, 1294, 1679, 1681, 1682, 1683, 1684, 1685, 1688, 1752, 1769, 1770, 1780, 2017, 2019, 2053, 2054, 2058, 2151, 2162], "resize_metadata_onli": [1056, 1616, 2053], "resize_opt": [1056, 1057, 1058, 1060, 1061, 1062, 1449, 1585, 1586, 1592, 1593, 1601, 1602, 1609, 1610, 1616], "resize_tied_bound": [1056, 1616, 2053], "resizemod": [1055, 1056, 1057, 1058, 1585, 1592, 1601, 1609, 1616], "resizeopt": [1055, 1057, 1058, 1240], "resolut": [1681, 1682, 1685, 1996, 2151, 2163, 2164], "resolv": [371, 372, 398, 427, 442, 458, 485, 526, 837, 856, 858, 986, 1012, 1059, 1060, 1240, 1296, 1378, 1476, 1506, 1538, 1565, 1698, 1780, 1789, 1798, 1909, 1912, 1917, 2019, 2053, 2054, 2162], "resolvebound": [398, 1012, 1059, 1061, 1240, 1378], "resolveboundsmod": [1059, 1060, 1449, 1586, 1593, 1602, 1610], "resolveboundsopt": [1059, 1061, 1062, 1240], "resourc": [0, 8, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 390, 391, 891, 1154, 1157, 1161, 1162, 1173, 1262, 1474, 1475, 1476, 1477, 1478, 1495, 1504, 1533, 1536, 1538, 1542, 1544, 1548, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1740, 1741, 1742, 1746, 1747, 1884, 1892, 1910, 1913, 1985, 1991, 2017, 2058, 2114, 2150, 2151, 2152, 2154, 2161, 2165], "resource2": 365, "resource_result": 365, "resource_spec": [365, 370], "resource_spec_result": 365, "respect": [19, 20, 196, 204, 362, 365, 431, 490, 627, 761, 918, 1205, 1469, 1672, 1682, 1683, 1690, 1709, 1720, 1752, 1778, 1780, 1782, 1821, 1854, 1969, 2002, 2044, 2069, 2162], "respond": 1698, "respons": [43, 45, 100, 108, 569, 842, 843, 849, 854, 1205, 1357, 1358, 1359, 1360, 1692, 2129], "restrict": [401, 405, 430, 432, 443, 586, 587, 661, 662, 894, 896, 991, 1152, 1240, 1372, 1390, 1393, 1692, 1909, 2162], "result": [2, 3, 5, 6, 8, 13, 14, 21, 24, 27, 28, 30, 32, 33, 34, 35, 39, 73, 98, 218, 219, 248, 249, 250, 251, 253, 254, 255, 256, 307, 318, 328, 340, 342, 343, 348, 349, 350, 351, 354, 365, 369, 370, 371, 374, 377, 390, 398, 427, 430, 432, 433, 434, 435, 441, 443, 458, 459, 465, 477, 478, 481, 482, 484, 485, 489, 518, 519, 520, 521, 523, 524, 526, 530, 532, 533, 534, 536, 537, 538, 545, 546, 547, 548, 549, 563, 564, 567, 569, 575, 586, 587, 604, 605, 609, 615, 627, 628, 630, 633, 661, 662, 666, 680, 681, 692, 693, 735, 736, 740, 778, 787, 799, 811, 813, 814, 836, 837, 838, 839, 844, 845, 847, 850, 851, 852, 855, 856, 857, 858, 859, 875, 877, 878, 881, 884, 885, 886, 887, 888, 889, 891, 892, 894, 909, 915, 962, 965, 966, 970, 971, 975, 976, 979, 980, 981, 983, 984, 985, 986, 990, 991, 993, 996, 1007, 1011, 1012, 1029, 1034, 1035, 1036, 1059, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1107, 1109, 1118, 1119, 1120, 1152, 1154, 1156, 1158, 1163, 1164, 1165, 1167, 1168, 1170, 1175, 1181, 1182, 1184, 1186, 1187, 1203, 1204, 1205, 1225, 1228, 1240, 1242, 1249, 1250, 1251, 1252, 1255, 1258, 1261, 1262, 1279, 1282, 1294, 1296, 1304, 1306, 1311, 1331, 1337, 1338, 1342, 1362, 1363, 1364, 1365, 1373, 1374, 1378, 1379, 1383, 1387, 1482, 1485, 1488, 1489, 1492, 1495, 1500, 1502, 1509, 1512, 1516, 1517, 1518, 1520, 1521, 1526, 1533, 1537, 1543, 1545, 1559, 1563, 1679, 1681, 1682, 1683, 1684, 1685, 1687, 1688, 1689, 1697, 1702, 1703, 1705, 1777, 1778, 1779, 1780, 1787, 1788, 1789, 1794, 1795, 1797, 1798, 1801, 1819, 1821, 1835, 1838, 1853, 1854, 1867, 1869, 1877, 1878, 1892, 1900, 1901, 1903, 1908, 1909, 1912, 1913, 1946, 1948, 1949, 1954, 1968, 1969, 1982, 1986, 2001, 2002, 2017, 2018, 2025, 2026, 2028, 2030, 2031, 2032, 2033, 2043, 2044, 2048, 2051, 2058, 2065, 2066, 2069, 2070, 2071, 2077, 2078, 2097, 2106, 2150, 2151, 2161, 2162, 2163, 2164], "result2": 1184, "result_init": [981, 983, 984, 985, 986], "result_need": [836, 838, 965, 967, 972, 978, 1109], "result_typ": [526, 533, 536, 537, 539, 965, 971, 975, 979, 1029, 1034, 1035], "resultinit": [981, 983, 984, 985, 986], "retain": [108, 390, 427, 434, 453, 860, 1063, 1113, 1114, 1152, 1296, 1311, 1342, 1344, 1476, 1495, 1538, 1617, 1690, 1697, 1703, 1709, 1720, 1786, 1913, 2058, 2069, 2162, 2164], "retain_context": [390, 1262, 1617, 1869, 1913, 2058], "retri": [1691, 1692, 1698, 1699], "retriev": [569, 672, 1089, 1240, 1691, 1697, 1698, 1740, 1746, 2163], "return": [1, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 21, 27, 28, 29, 30, 32, 37, 39, 52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 98, 99, 108, 110, 131, 134, 137, 138, 139, 142, 143, 147, 151, 152, 154, 161, 165, 171, 174, 185, 186, 190, 191, 192, 194, 196, 206, 209, 210, 213, 214, 215, 216, 218, 219, 220, 226, 227, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 283, 287, 288, 289, 290, 296, 297, 298, 299, 300, 305, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 348, 349, 350, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 371, 372, 373, 374, 379, 380, 382, 386, 387, 388, 389, 393, 398, 415, 416, 419, 420, 423, 424, 427, 455, 456, 459, 463, 465, 469, 470, 481, 482, 490, 498, 499, 500, 503, 506, 512, 517, 518, 519, 520, 522, 526, 527, 536, 542, 545, 547, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 614, 615, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 660, 661, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 686, 687, 688, 697, 698, 732, 733, 734, 735, 736, 737, 738, 740, 745, 766, 767, 768, 769, 794, 796, 798, 799, 801, 808, 809, 810, 811, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 877, 882, 884, 885, 886, 887, 888, 892, 894, 909, 914, 915, 918, 921, 930, 934, 936, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 959, 961, 964, 965, 966, 967, 970, 971, 972, 973, 975, 976, 978, 983, 984, 985, 991, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1011, 1012, 1028, 1029, 1034, 1036, 1051, 1055, 1059, 1063, 1074, 1075, 1080, 1081, 1085, 1087, 1100, 1107, 1113, 1114, 1118, 1120, 1121, 1134, 1135, 1136, 1141, 1145, 1148, 1149, 1150, 1154, 1155, 1156, 1158, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1181, 1188, 1189, 1191, 1192, 1193, 1194, 1196, 1198, 1204, 1205, 1219, 1221, 1222, 1224, 1225, 1228, 1229, 1230, 1231, 1233, 1236, 1238, 1240, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1268, 1271, 1277, 1278, 1282, 1285, 1286, 1287, 1288, 1289, 1293, 1294, 1296, 1297, 1299, 1300, 1302, 1303, 1304, 1306, 1311, 1322, 1323, 1324, 1325, 1326, 1327, 1331, 1332, 1333, 1334, 1336, 1342, 1343, 1344, 1357, 1358, 1359, 1360, 1364, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1387, 1388, 1389, 1402, 1403, 1455, 1456, 1457, 1469, 1482, 1488, 1489, 1491, 1492, 1495, 1497, 1498, 1499, 1504, 1506, 1507, 1508, 1512, 1516, 1517, 1522, 1523, 1525, 1529, 1533, 1543, 1545, 1546, 1550, 1556, 1557, 1559, 1563, 1565, 1566, 1567, 1583, 1590, 1595, 1596, 1619, 1622, 1623, 1624, 1625, 1630, 1633, 1635, 1636, 1637, 1640, 1641, 1642, 1644, 1647, 1648, 1655, 1656, 1662, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1702, 1741, 1742, 1743, 1745, 1746, 1747, 1748, 1749, 1752, 1762, 1763, 1764, 1777, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1794, 1797, 1799, 1803, 1804, 1805, 1809, 1810, 1819, 1821, 1827, 1828, 1829, 1830, 1831, 1832, 1834, 1842, 1853, 1854, 1862, 1863, 1864, 1865, 1866, 1869, 1870, 1873, 1882, 1883, 1886, 1887, 1889, 1899, 1901, 1902, 1904, 1906, 1907, 1908, 1909, 1912, 1916, 1917, 1935, 1937, 1938, 1951, 1954, 1955, 1956, 1957, 1960, 1961, 1963, 1968, 1969, 1971, 1977, 1978, 1979, 1980, 1982, 1983, 1986, 1987, 1988, 1989, 1991, 1995, 2001, 2002, 2004, 2005, 2007, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2022, 2023, 2025, 2026, 2027, 2028, 2029, 2034, 2043, 2044, 2045, 2051, 2053, 2054, 2058, 2059, 2061, 2062, 2063, 2064, 2067, 2069, 2071, 2075, 2077, 2107, 2110, 2111, 2114, 2117, 2118, 2127, 2128, 2129, 2150, 2151, 2152, 2154, 2161, 2164], "revalid": [1040, 1043, 1154, 1679, 1680, 1681, 1682, 1684, 1685, 1692, 1702, 1950, 2017, 2058, 2151], "revers": [586, 596, 661, 667, 669, 1622, 1629, 1644, 1646, 1685, 1786, 1799, 1800, 1831, 1832, 1833, 1866, 1951, 1952, 1980, 1983, 1984, 2016, 2019, 2024, 2064], "reverse_iter": [1622, 1629, 1644, 1646], "rewrit": 1682, "rfc": [1680, 1692], "rgb": [1673, 1678], "rgba": [1673, 1678], "rh": [1063, 1065, 1076], "right": [13, 392, 605, 699, 729, 730, 1688, 1691, 1692, 1801, 1835], "rightarrow": 1688, "rint": [110, 1618], "risk": 542, "roll": 2070, "root": [110, 1658, 1690, 1697, 2150], "root_height": [1697, 2150], "roughli": 1080, "round": [260, 430, 432, 443, 479, 518, 519, 520, 545, 547, 627, 1618, 1672, 1682, 1688, 2162], "row": [1685, 1722, 1727, 1734, 2051, 2164], "row_major": [392, 1410], "row_major_ord": [392, 1410], "rs1": 1690, "rtf": 1689, "rule": [1688, 1689], "run": [8, 16, 17, 18, 39, 87, 108, 174, 195, 196, 227, 253, 291, 315, 416, 473, 490, 526, 540, 542, 570, 586, 613, 661, 689, 690, 697, 758, 765, 778, 779, 845, 857, 1113, 1114, 1181, 1205, 1234, 1240, 1263, 1264, 1306, 1335, 1444, 1445, 1622, 1691, 1789, 1794, 1797, 2161], "runasync": 526, "rundef": 526, "runtim": [196, 217, 250, 291, 1686, 1689, 1691, 1692], "rw": 2045, "s3": [1686, 1693], "s3_request_concurr": 1698, "s3_request_retri": 1698, "s_subregion": [1780, 2162], "safe": [108, 425, 540, 542, 975, 1113, 1687, 1690, 1691, 1697, 1698, 2069, 2151], "safest": 1689, "said": 1683, "sake": 891, "same": [0, 1, 8, 12, 13, 19, 20, 21, 38, 39, 60, 76, 85, 86, 98, 109, 143, 247, 249, 263, 264, 365, 371, 381, 387, 390, 415, 427, 430, 432, 433, 434, 436, 437, 443, 444, 445, 447, 451, 454, 474, 482, 490, 507, 510, 526, 527, 540, 542, 543, 546, 547, 549, 563, 570, 572, 586, 587, 626, 627, 661, 662, 681, 798, 799, 837, 839, 847, 876, 877, 890, 891, 892, 915, 981, 985, 991, 993, 1011, 1049, 1053, 1063, 1116, 1117, 1153, 1154, 1181, 1184, 1187, 1188, 1204, 1238, 1256, 1277, 1278, 1292, 1294, 1306, 1314, 1337, 1342, 1343, 1357, 1358, 1360, 1379, 1565, 1664, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1689, 1690, 1692, 1695, 1697, 1747, 1779, 1780, 1782, 1783, 1784, 1785, 1828, 1829, 1830, 1863, 1864, 1865, 1892, 1908, 1913, 1977, 1978, 1979, 2013, 2014, 2015, 2017, 2037, 2055, 2058, 2061, 2062, 2063, 2069, 2070, 2071, 2097, 2151, 2161, 2162, 2163, 2164], "satisfi": [39, 244, 245, 246, 398, 427, 429, 430, 432, 433, 434, 435, 443, 444, 445, 446, 447, 451, 490, 507, 526, 559, 563, 761, 778, 781, 789, 793, 798, 811, 840, 855, 924, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1012, 1089, 1294, 1306, 1378, 1507, 1508, 1517, 1519, 1522, 1556, 1557, 1565, 1682, 1683, 1689, 2051, 2162], "satisfiesinvari": [220, 221, 226, 894, 905, 914], "satur": 1687, "save": 1686, "sc22": 1063, "scalar": [430, 432, 434, 443, 444, 445, 447, 451, 778, 779, 780, 1685, 1777, 1782, 1783, 1784, 1785, 1828, 1829, 1830, 1863, 1864, 1865, 1977, 1978, 1979, 2013, 2014, 2015, 2030, 2032, 2033, 2048, 2061, 2062, 2063, 2066, 2069, 2108, 2119, 2120, 2162], "scale": [1103, 1682, 1691, 1698, 1964], "scale_index": [1682, 2151, 2163], "scale_metadata": [1682, 1696, 2151, 2163], "sccach": 1689, "schema": [8, 340, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1154, 1159, 1168, 1175, 1179, 1240, 1252, 1261, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1687, 1688, 1698, 1702, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1992, 2008, 2017, 2019, 2055, 2114, 2151, 2152, 2154, 2161, 2165], "scheme": [1188, 1690, 1691, 1692, 1693, 1695, 1698], "scope": [3, 7, 526], "script": 1689, "sdk": 1691, "sdkref": 1698, "se_curl": [1686, 1689], "search": 1686, "second": [7, 458, 459, 1664, 1679, 1688, 1691, 1697, 1698, 1794, 1797, 1894, 1898, 1908, 1912, 1950], "secret": 1698, "section": [1686, 1687, 1689, 1691, 1692], "secur": [1686, 1691, 1692, 1698], "see": [73, 212, 328, 458, 525, 604, 680, 845, 1107, 1258, 1331, 1492, 1512, 1559, 1689, 1691, 1698, 1702, 2128, 2129], "segment": [2151, 2163, 2164], "sel": 2162, "select": [8, 15, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 459, 478, 485, 574, 734, 1063, 1103, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1690, 1702, 1768, 1773, 1776, 1777, 1778, 1779, 1780, 1782, 1783, 1784, 1785, 1786, 1799, 1804, 1812, 1818, 1830, 1865, 1964, 1979, 2015, 2063, 2115, 2116, 2165], "selected_dimens": [433, 434, 435, 441], "selection_output": [427, 442, 455, 456], "selection_rank": [428, 438], "self": [1345, 1346, 1705, 1708, 1719, 1720, 1721, 1732, 1733, 1734, 1736, 1739, 1742, 1745, 1746, 1753, 1754, 1755, 1760, 1761, 1762, 1763, 1765, 1766, 1768, 1771, 1772, 1773, 1775, 1777, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1801, 1802, 1803, 1804, 1805, 1809, 1810, 1812, 1818, 1819, 1821, 1827, 1828, 1829, 1830, 1831, 1833, 1834, 1835, 1836, 1837, 1838, 1842, 1853, 1854, 1856, 1857, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1871, 1873, 1883, 1884, 1886, 1887, 1889, 1891, 1892, 1895, 1899, 1900, 1901, 1902, 1903, 1904, 1906, 1907, 1908, 1909, 1912, 1913, 1916, 1917, 1936, 1937, 1948, 1949, 1952, 1953, 1954, 1955, 1956, 1957, 1960, 1963, 1968, 1969, 1971, 1972, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1984, 1985, 1986, 1987, 1988, 1989, 1991, 1995, 2001, 2002, 2004, 2006, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017, 2018, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2041, 2043, 2044, 2047, 2048, 2049, 2050, 2051, 2053, 2054, 2056, 2057, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2069, 2072, 2075, 2077, 2081, 2087, 2088, 2091, 2098, 2099, 2100, 2103, 2104, 2105, 2106, 2120, 2125], "semant": [39, 108, 174, 196, 507, 540, 1113, 1114, 1184, 1187, 1205, 1278, 1284, 1294, 1579, 1690, 1776, 1777, 1781, 1787, 1832, 1837, 1856, 1867, 1951, 1956, 1971, 1982, 1983, 1988, 2004, 2018, 2019, 2028, 2032, 2047, 2048, 2065, 2066, 2115, 2162], "send": [526, 1692, 1698], "sensit": [1692, 1697], "separ": [0, 90, 93, 96, 131, 253, 435, 441, 801, 891, 990, 1262, 1482, 1483, 1533, 1534, 1679, 1680, 1681, 1684, 1686, 1689, 1691, 1697, 1703, 1883, 1899, 1900, 1901, 1903, 1912, 1917, 2025, 2069, 2130, 2162, 2165], "sequenc": [8, 143, 165, 251, 359, 363, 427, 428, 442, 474, 484, 609, 964, 1063, 1121, 1482, 1504, 1683, 1685, 1702, 1709, 1720, 1722, 1734, 1776, 1777, 1779, 1782, 1783, 1784, 1785, 1801, 1804, 1806, 1807, 1819, 1828, 1829, 1830, 1832, 1834, 1835, 1839, 1840, 1853, 1863, 1864, 1865, 1951, 1958, 1968, 1977, 1978, 1979, 1981, 1983, 2001, 2013, 2014, 2015, 2017, 2019, 2043, 2053, 2061, 2062, 2063, 2114, 2115, 2116, 2151, 2152, 2154, 2161, 2162], "sequenti": 1697, "serial": [340, 344, 365, 371, 378, 385, 1688], "serv": [8, 365, 605, 672, 862, 869, 1103, 1482, 1533, 1664, 1682, 1697, 1801, 1835, 1964, 2161, 2164], "server": [1686, 1691, 1692, 1693, 1697, 1698, 1699, 1702, 2147], "servic": [1691, 1698, 1699], "session": 1698, "set": [8, 12, 100, 104, 105, 165, 170, 253, 260, 263, 264, 266, 269, 270, 271, 274, 276, 277, 280, 281, 282, 291, 300, 306, 310, 311, 312, 313, 314, 315, 316, 317, 351, 393, 425, 427, 436, 444, 475, 480, 518, 519, 520, 526, 559, 586, 661, 693, 695, 741, 801, 804, 805, 806, 807, 811, 820, 869, 871, 872, 891, 892, 965, 966, 971, 986, 990, 994, 1056, 1060, 1089, 1094, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1124, 1126, 1127, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1147, 1149, 1154, 1159, 1205, 1232, 1376, 1377, 1474, 1476, 1533, 1538, 1551, 1581, 1585, 1586, 1588, 1592, 1593, 1594, 1597, 1598, 1599, 1601, 1602, 1672, 1673, 1678, 1679, 1681, 1682, 1684, 1685, 1686, 1689, 1690, 1691, 1692, 1695, 1697, 1698, 1702, 1722, 1734, 1776, 1779, 1782, 1869, 1912, 1958, 1981, 2017, 2022, 2023, 2058, 2114, 2115, 2151, 2152, 2154, 2161, 2162], "set_except": [1946, 1948], "set_rank": [174, 193, 1205, 1232], "set_result": [1946, 1949], "setdeferredresult": [965, 1109], "setpermut": [393, 1110], "setpermutationfromstrid": [393, 1111], "setreadi": [965, 970, 972, 1109], "setresult": [526, 836, 838, 965, 970, 971, 972, 975, 986], "setresultwith": 975, "setup": [1687, 1689], "setuptool": 1689, "sever": [39, 174, 253, 1697, 1788], "sha256": 1689, "shallow": [174, 196], "shape": [8, 13, 18, 39, 45, 52, 71, 76, 84, 98, 109, 174, 178, 180, 181, 183, 194, 196, 197, 199, 201, 202, 204, 205, 207, 211, 216, 218, 219, 253, 258, 259, 260, 263, 264, 265, 266, 268, 269, 270, 271, 275, 281, 283, 284, 289, 290, 295, 298, 309, 313, 315, 318, 320, 324, 335, 339, 352, 392, 429, 433, 446, 559, 560, 580, 586, 593, 605, 612, 661, 694, 695, 798, 945, 951, 1089, 1094, 1097, 1099, 1106, 1113, 1205, 1206, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1222, 1225, 1228, 1232, 1233, 1236, 1255, 1306, 1334, 1372, 1688, 1700, 1703, 1706, 1707, 1709, 1711, 1712, 1717, 1718, 1720, 1722, 1732, 1734, 1736, 1780, 1788, 1799, 1806, 1809, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1822, 1823, 1824, 1825, 1826, 1832, 1839, 1852, 1860, 1951, 1954, 1955, 1956, 1957, 1958, 1965, 1971, 1974, 1981, 1982, 1983, 1992, 1997, 2008, 2009, 2017, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2056, 2058, 2059, 2065, 2066, 2069, 2114, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "shape_soft_constraint": [1707, 1709, 1718, 1720, 1722, 1733, 1734, 2164], "shaperank": [39, 45], "shapet": [174, 180], "shapevec": [174, 178, 181], "shard": [318, 1188, 1693, 1696, 1700, 2151, 2163, 2164], "shard_bit": [1682, 1696, 2151, 2163], "shard_data_encod": 1682, "sharded_index": [1693, 1700], "sharding_index": [1685, 1700], "shardingspec": [1682, 1696, 1700], "share": [0, 8, 9, 11, 21, 29, 30, 39, 79, 80, 108, 365, 371, 387, 390, 433, 435, 441, 490, 526, 527, 540, 572, 661, 761, 788, 891, 965, 973, 975, 976, 978, 1029, 1112, 1113, 1114, 1115, 1116, 1117, 1236, 1240, 1278, 1296, 1306, 1340, 1341, 1343, 1344, 1357, 1358, 1359, 1360, 1686, 1687, 1690, 1691, 1692, 1697, 1698, 1699, 1702, 1740, 1747, 1892, 1910, 1913, 2017, 2058, 2114, 2151, 2152, 2154, 2161], "shared_arrai": [39, 85], "shared_array_ref": [944, 951], "shared_array_view": [39, 86], "shared_ptr": [8, 11, 17, 39, 54, 416, 490, 497, 743, 761, 785, 963, 1112, 1113, 1296, 1306, 1340, 1341, 1357, 1358, 1360], "sharedarrai": [8, 18, 20, 39, 85, 841, 844, 845, 846, 847, 848, 853, 860, 1011, 1012, 1113, 1116, 1154, 1170, 1236, 1240, 1255, 1296, 1306, 1311, 1358, 1378], "sharedarrayview": [8, 39, 86, 108, 427, 433, 441, 773, 944, 951, 1089, 1092, 1113, 1114, 1117], "sharedelementpoint": [19, 39, 490, 944, 947, 1113, 1114, 1115, 1359, 1360], "sharedoffsetarrai": [39, 1116], "sharedoffsetarrayview": [39, 1117], "sharedsubarrai": [39, 79, 80, 1236], "shift": [427, 445, 447, 451, 548, 627, 699, 727, 728, 729, 730, 1118, 1120, 1776, 1783, 1784, 2115, 2162], "shiftinterv": [447, 627, 1118, 1119], "shiftintervalbackward": [445, 627, 1119], "shiftintervalto": [627, 1120], "shlex": 1689, "short": 247, "shortcut": 2162, "shorter": 1689, "shorthand": [2032, 2033], "should": [3, 4, 5, 13, 218, 253, 266, 365, 390, 425, 433, 435, 441, 526, 765, 836, 862, 864, 869, 872, 1056, 1188, 1262, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1689, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1789, 2053, 2069, 2095, 2096, 2161, 2164], "show": [526, 1689], "shown": [90, 95, 841, 842, 848, 849], "shrink_onli": [1056, 1616, 2053], "shrunk": 2053, "shuffl": [1681, 1684, 1685, 2019, 2026, 2027, 2028, 2029, 2035, 2037, 2047, 2055, 2058, 2065, 2151, 2164], "side": 526, "sign": [8, 247, 518, 519, 1434, 1622, 1685, 1688, 1702, 2140, 2141, 2142, 2143, 2144, 2165], "signal": [21, 24, 110, 526, 534, 1063, 1064, 1946], "signatur": [21, 25, 73, 328, 413, 414, 604, 680, 857, 1026, 1027, 1080, 1107, 1258, 1331, 1400, 1401, 1492, 1698], "signbit": [110, 1619], "signific": [1696, 1700, 2069], "significantli": 2059, "silent": 2162, "similar": [8, 19, 20, 39, 433, 465, 846, 1037, 1038, 1039, 1063, 1113, 1121, 1622, 1688, 1781, 1782, 1787, 1856, 1867, 1971, 1982, 2004, 2018, 2047, 2048, 2065, 2066, 2162], "similarli": [174, 847, 2020], "simpl": [430, 432, 443], "simpler": 1672, "simplest": 1689, "simpli": [8, 12, 343, 417, 430, 432, 443, 512, 693, 696, 850, 1187, 1357, 1358, 1379, 1685, 1697, 1778, 1789, 1826, 2097, 2161, 2162], "simplic": 1121, "simplifi": 1697, "simultan": 2151, "sin": [110, 1620], "sinc": [249, 263, 264, 266, 340, 458, 485, 1063, 1280, 1509, 1679, 1688, 1689, 1697, 1777, 1780, 1794, 1797, 1817, 1894, 1898, 1908, 1912, 1950, 2161, 2162, 2163], "sine": [110, 1406, 1407, 1620, 1621], "singl": [4, 8, 39, 165, 253, 291, 427, 431, 434, 478, 484, 526, 749, 750, 811, 822, 838, 943, 954, 983, 1060, 1089, 1103, 1121, 1205, 1345, 1421, 1425, 1498, 1499, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1702, 1777, 1786, 1799, 1803, 1869, 1900, 1901, 1903, 1909, 1912, 1917, 1925, 1928, 1958, 1964, 1981, 1983, 1991, 1992, 2017, 2035, 2038, 2080, 2114, 2132, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "single_input_dimens": [13, 563, 672, 740, 943, 954, 960, 990, 991, 1304, 1305, 1688, 1939, 1944], "singlecodec": 1685, "singleton": [39, 740, 811, 822, 829, 1343, 1344, 1702, 1778, 2146], "sinh": [110, 1621], "sink": [1345, 1346], "size": [0, 12, 13, 39, 63, 75, 80, 81, 84, 174, 178, 183, 196, 199, 205, 219, 220, 226, 247, 260, 266, 351, 393, 416, 423, 427, 433, 434, 435, 441, 443, 445, 447, 450, 451, 459, 464, 480, 486, 487, 490, 518, 519, 520, 559, 560, 564, 609, 627, 633, 636, 639, 640, 641, 643, 648, 649, 650, 651, 652, 654, 656, 660, 666, 695, 739, 756, 796, 894, 909, 914, 915, 930, 936, 940, 941, 961, 964, 995, 999, 1110, 1120, 1121, 1148, 1205, 1211, 1213, 1215, 1216, 1219, 1225, 1228, 1229, 1233, 1236, 1343, 1344, 1372, 1622, 1623, 1624, 1635, 1636, 1637, 1640, 1641, 1642, 1647, 1648, 1651, 1653, 1681, 1682, 1684, 1685, 1688, 1689, 1697, 1709, 1720, 1752, 1758, 1761, 1762, 1764, 1768, 1773, 1775, 1799, 1806, 1826, 1832, 1839, 1861, 1951, 1975, 1983, 2010, 2019, 2057, 2069, 2151, 2161, 2163, 2164], "size_byt": [1622, 1648], "size_t": [178, 181, 199, 202, 227, 231, 302, 811, 821, 871, 1121, 1125, 1127, 1133, 1145, 1148, 1213, 1216, 1225, 1228, 1278, 1293, 1500, 1503, 1622, 1649], "sizedinterv": [398, 427, 428, 429, 443, 444, 450, 520, 569, 605, 1011], "sizeof": [8, 143, 150, 165, 168, 227, 428, 433, 441, 751, 799, 1205, 1224], "skip": [8, 798, 799, 800, 892, 1054, 1262, 1679, 1681, 1682, 1684, 1685, 1689, 1918, 1919, 1920, 2017, 2058, 2092, 2093, 2162], "skip_repeated_el": [8, 800, 844, 860, 1054, 1296, 1306, 1311, 1454], "slice": [174, 188, 196, 212, 351, 427, 430, 432, 433, 434, 435, 441, 443, 459, 463, 518, 519, 520, 586, 605, 606, 627, 672, 739, 915, 1776, 1777, 1780, 1782, 1799, 1801, 1817, 1821, 1832, 1835, 1854, 1951, 1969, 1983, 2002, 2019, 2044, 2115, 2162, 2163], "slightli": 1692, "slower": [1681, 1684, 1685], "slowest": [1681, 1682, 1684], "small": [1670, 1682, 1697], "small_bit_set": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1659], "smallbitset": [8, 475, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151], "smaller": [574, 575, 734, 735, 736], "smallest": [558, 573, 627, 1205, 1672, 1682, 1684], "smart": [1474, 1533], "snappi": [1681, 1684, 1685, 1689], "snippet": [108, 1113, 1114], "so": [1689, 2163], "soft": [0, 8, 253, 263, 266, 269, 270, 282, 300, 312, 869, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1706, 1707, 1709, 1712, 1714, 1718, 1720, 1722, 1726, 1727, 1728, 1732, 1734, 1736, 2164, 2165], "softwar": 1345, "sole": [237, 563, 1777], "some": [8, 102, 104, 131, 391, 427, 489, 563, 778, 995, 1000, 1001, 1003, 1004, 1157, 1188, 1193, 1475, 1536, 1665, 1678, 1681, 1688, 1689, 1690, 1698, 2020, 2070, 2080, 2151, 2164], "somehow": 526, "soon": 1152, "sourc": [8, 12, 39, 99, 218, 219, 244, 245, 246, 353, 393, 397, 398, 399, 400, 401, 402, 405, 415, 480, 490, 493, 495, 502, 528, 535, 745, 760, 763, 764, 765, 782, 843, 845, 846, 861, 880, 1011, 1012, 1017, 1018, 1028, 1037, 1039, 1152, 1181, 1184, 1187, 1205, 1209, 1217, 1236, 1240, 1306, 1343, 1344, 1378, 1379, 1386, 1390, 1391, 1393, 1465, 1467, 1480, 1482, 1688, 1698, 2019, 2030, 2031, 2032, 2033, 2048, 2066, 2069, 2097, 2107], "source_arrai": 1306, "source_data_reference_restrict": [401, 405, 1390, 1393], "source_loc": [8, 861], "source_match": [8, 12], "source_rang": [1465, 1466, 1908], "source_shap": [1205, 1372], "source_staleness_bound": [1465, 1467, 1908], "source_transform": [8, 14], "sourcearrai": [1240, 1378], "sourceckind": [39, 661, 663, 665, 679, 1236], "sourcedatareferencerestrict": [398, 401, 405, 1152, 1240, 1378, 1390, 1393], "sourceel": [39, 744, 1240, 1246, 1248, 1257], "sourceinputrank": [661, 663, 665, 679], "sourcelayout": [39, 44], "sourcemod": [1240, 1246, 1248, 1257], "sourceoriginkind": [39, 744], "sourceoutputrank": [661, 663, 665, 679], "sourcepoint": [39, 42, 43, 44, 45, 490, 494, 743], "sourcerank": [39, 744, 1240, 1246, 1248, 1257], "sourceref": [8, 353, 790, 880, 1037, 1038, 1039, 1181, 1182, 1184, 1187], "sourceresult": [415, 1306], "sourcet": [526, 771], "sourcetensorstor": [1011, 1012, 1240], "south": 1698, "sp": 1692, "space": [8, 174, 180, 201, 253, 255, 256, 350, 427, 431, 433, 434, 435, 457, 465, 467, 477, 546, 549, 586, 606, 627, 661, 672, 681, 685, 886, 915, 990, 991, 994, 1055, 1089, 1100, 1154, 1164, 1165, 1167, 1170, 1175, 1304, 1305, 1689, 1690, 1702, 1706, 1730, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1799, 1824, 1832, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1851, 1855, 1856, 1859, 1867, 1958, 1981, 2012, 2017, 2114, 2146, 2151, 2152, 2154, 2161, 2162, 2164], "span": [8, 12, 18, 39, 52, 53, 63, 75, 80, 81, 84, 174, 178, 191, 194, 196, 199, 202, 214, 216, 218, 219, 260, 266, 300, 302, 352, 359, 363, 392, 393, 396, 397, 427, 433, 436, 441, 453, 465, 476, 477, 478, 481, 482, 484, 526, 559, 560, 564, 578, 580, 586, 591, 593, 597, 602, 609, 610, 612, 626, 661, 666, 668, 670, 675, 676, 678, 695, 752, 754, 772, 774, 777, 778, 780, 784, 796, 843, 848, 849, 869, 870, 871, 874, 876, 885, 887, 888, 889, 944, 946, 961, 964, 994, 1055, 1089, 1091, 1099, 1110, 1111, 1153, 1205, 1211, 1212, 1213, 1216, 1219, 1225, 1228, 1229, 1233, 1236, 1240, 1306, 1327, 1332, 1334, 1372, 1373, 1444, 1612, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657], "spanstaticext": [8, 1153], "spars": 563, "spec": [8, 188, 248, 340, 341, 342, 343, 345, 365, 367, 369, 370, 371, 373, 374, 380, 381, 382, 383, 384, 389, 390, 391, 459, 463, 481, 484, 697, 698, 879, 884, 888, 889, 891, 892, 893, 1042, 1089, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1240, 1251, 1262, 1295, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1482, 1490, 1495, 1504, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1679, 1681, 1682, 1683, 1684, 1685, 1687, 1692, 1740, 1743, 1744, 1745, 1747, 1748, 1749, 1751, 1777, 1868, 1869, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1905, 1910, 1911, 1913, 1953, 1954, 1966, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2037, 2058, 2110, 2114, 2117, 2151, 2152, 2154], "spec_result": 365, "specconvertopt": [1154, 1159, 1178, 1474, 1476, 1533, 1538, 1551, 1552, 1553, 1554], "special": [0, 131, 140, 174, 266, 282, 425, 451, 473, 486, 571, 585, 697, 811, 1040, 1041, 1049, 1050, 1051, 1052, 1113, 1181, 1188, 1193, 1194, 1196, 1198, 1278, 1290, 1445, 1458, 1459, 1460, 1484, 1507, 1509, 1510, 1535, 1556, 1558, 1569, 1579, 1682, 1685, 1688, 1689, 1690, 1691, 1692, 1698, 1699, 1702, 1765, 1766, 1771, 1772, 1777, 1872, 1875, 2139, 2162, 2164], "specif": [0, 8, 253, 257, 259, 260, 262, 263, 265, 290, 340, 365, 383, 390, 485, 545, 569, 684, 743, 884, 888, 972, 1089, 1111, 1113, 1154, 1160, 1168, 1188, 1262, 1345, 1350, 1474, 1504, 1533, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1683, 1684, 1685, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1697, 1698, 1699, 1702, 1737, 1740, 1743, 1744, 1869, 1882, 1892, 1893, 1894, 1897, 1913, 1915, 1983, 1993, 1994, 1996, 1997, 1999, 2008, 2017, 2058, 2059, 2080, 2151, 2164, 2165], "specifi": [0, 3, 4, 7, 8, 12, 13, 16, 17, 18, 19, 20, 21, 27, 28, 33, 39, 45, 57, 70, 74, 75, 80, 87, 90, 98, 99, 108, 143, 161, 174, 179, 193, 195, 196, 217, 220, 222, 223, 227, 243, 244, 245, 246, 249, 253, 258, 259, 260, 262, 263, 265, 266, 269, 271, 276, 277, 280, 281, 282, 291, 299, 300, 302, 305, 315, 318, 340, 351, 352, 353, 355, 359, 363, 365, 367, 369, 370, 371, 372, 390, 392, 393, 398, 401, 405, 406, 413, 416, 425, 427, 428, 430, 432, 434, 435, 436, 438, 441, 443, 444, 445, 447, 451, 453, 455, 456, 458, 459, 460, 461, 465, 469, 470, 473, 474, 477, 478, 480, 481, 482, 483, 484, 485, 489, 490, 494, 507, 511, 512, 518, 519, 520, 526, 550, 558, 559, 561, 569, 570, 576, 577, 578, 579, 580, 584, 586, 588, 591, 592, 593, 597, 599, 600, 601, 602, 609, 610, 612, 613, 615, 618, 626, 627, 633, 636, 637, 638, 639, 649, 650, 661, 668, 670, 671, 672, 684, 693, 695, 697, 739, 753, 755, 756, 758, 761, 778, 779, 798, 799, 800, 811, 817, 822, 833, 841, 842, 843, 845, 848, 849, 850, 853, 854, 856, 858, 860, 862, 867, 870, 876, 881, 882, 885, 888, 891, 892, 894, 896, 897, 899, 900, 903, 907, 908, 910, 911, 915, 917, 943, 960, 965, 966, 967, 981, 983, 984, 986, 990, 991, 995, 1006, 1011, 1012, 1013, 1015, 1021, 1026, 1028, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1068, 1089, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1113, 1114, 1121, 1126, 1127, 1137, 1147, 1149, 1152, 1154, 1157, 1159, 1181, 1184, 1186, 1187, 1188, 1199, 1202, 1203, 1205, 1211, 1212, 1213, 1214, 1215, 1216, 1225, 1228, 1232, 1234, 1235, 1236, 1238, 1240, 1262, 1268, 1270, 1278, 1283, 1294, 1296, 1297, 1304, 1311, 1342, 1345, 1357, 1358, 1360, 1361, 1375, 1376, 1377, 1378, 1390, 1393, 1394, 1400, 1444, 1445, 1468, 1469, 1470, 1474, 1475, 1476, 1480, 1482, 1495, 1504, 1505, 1506, 1507, 1509, 1511, 1512, 1514, 1515, 1516, 1517, 1519, 1530, 1532, 1533, 1536, 1538, 1541, 1551, 1553, 1554, 1555, 1559, 1561, 1562, 1563, 1565, 1569, 1570, 1571, 1622, 1623, 1642, 1654, 1655, 1656, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1706, 1709, 1720, 1722, 1727, 1728, 1732, 1734, 1736, 1737, 1752, 1756, 1757, 1758, 1776, 1777, 1780, 1782, 1783, 1784, 1785, 1786, 1787, 1789, 1794, 1797, 1799, 1801, 1803, 1804, 1806, 1817, 1821, 1828, 1829, 1830, 1831, 1832, 1835, 1839, 1840, 1854, 1863, 1864, 1865, 1866, 1867, 1869, 1870, 1872, 1877, 1892, 1894, 1900, 1903, 1907, 1908, 1909, 1910, 1912, 1913, 1917, 1918, 1946, 1948, 1949, 1950, 1951, 1958, 1961, 1962, 1964, 1967, 1969, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1993, 1994, 1996, 1997, 1999, 2000, 2002, 2008, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2022, 2023, 2034, 2044, 2051, 2053, 2054, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066, 2069, 2080, 2084, 2087, 2088, 2092, 2094, 2095, 2096, 2107, 2114, 2115, 2146, 2150, 2151, 2152, 2154, 2161, 2162, 2164, 2165], "specopt": [893, 1049, 1051, 1053, 1154, 1179, 1180], "specrequestopt": [879, 1154, 1178, 1180, 1240, 1262, 1482, 1495, 1533, 1555], "speed": [1673, 1684, 1685, 1689], "split": [1689, 1697], "spuriou": 1294, "sqrt": [110, 1658], "squar": [110, 1658, 2162], "src": [1063, 1066, 1077], "ssl": [1686, 1689, 1691, 1692], "ssl_cert_dir": 1686, "ssl_cert_fil": 1686, "sslkeylogfil": 1686, "st": 1698, "stack": [1679, 1689, 1693, 1694, 1702, 2114, 2152, 2154, 2165], "stage": [1702, 2070], "stale": [891, 1262, 1465, 1467, 1500, 1502, 1690, 1692], "staleness_bound": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1500, 1502, 1512, 1516, 1530, 1559, 1563, 1912, 2092, 2094], "stall": 1686, "stamp": [1517, 1518, 1520, 1521, 1530, 1869, 1877, 1878, 1879, 1910, 1912, 1917], "standard": [924, 1684, 1685, 1689], "start": [15, 39, 90, 92, 99, 220, 223, 227, 243, 253, 351, 427, 430, 432, 438, 443, 444, 448, 449, 450, 458, 459, 461, 478, 485, 518, 519, 520, 521, 811, 818, 819, 894, 907, 911, 915, 966, 1238, 1278, 1282, 1287, 1294, 1372, 1622, 1655, 1656, 1672, 1685, 1689, 1697, 1700, 1702, 1705, 1777, 1780, 1786, 1788, 1803, 1821, 1854, 1909, 1969, 2002, 2044, 2070, 2076, 2079, 2115, 2161, 2162], "startup": 1689, "stat": [569, 894, 898, 906], "state": [21, 29, 30, 227, 229, 365, 387, 391, 398, 406, 409, 526, 527, 532, 540, 572, 850, 857, 859, 965, 973, 975, 976, 978, 991, 1012, 1021, 1023, 1063, 1074, 1086, 1087, 1154, 1159, 1166, 1188, 1192, 1278, 1292, 1373, 1374, 1378, 1394, 1397, 1474, 1476, 1479, 1517, 1519, 1524, 1528, 1530, 1531, 1532, 1533, 1538, 1546, 1869, 1877, 1878, 1880, 1910, 1912, 1917], "statement": [3, 5], "static": [8, 39, 47, 55, 76, 90, 91, 131, 132, 174, 178, 184, 196, 208, 253, 306, 307, 318, 340, 342, 365, 368, 369, 371, 373, 374, 399, 400, 416, 429, 430, 432, 433, 434, 436, 441, 443, 444, 445, 446, 447, 451, 452, 453, 473, 478, 490, 491, 586, 587, 595, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 649, 650, 661, 662, 689, 690, 695, 752, 754, 765, 772, 798, 801, 802, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 880, 894, 904, 906, 907, 908, 930, 937, 981, 983, 984, 985, 986, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1037, 1039, 1040, 1041, 1049, 1050, 1051, 1052, 1089, 1094, 1121, 1124, 1125, 1126, 1127, 1128, 1133, 1148, 1153, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1205, 1208, 1237, 1240, 1243, 1245, 1268, 1271, 1306, 1313, 1472, 1473, 1482, 1504, 1517, 1518, 1520, 1521, 1533, 1537, 1551, 1552, 1622, 1634, 1636, 1641, 1689, 1869, 1910, 1946, 1947], "static_cast": [165, 169, 250, 318, 327, 790, 1089, 1181, 1182, 1664, 1665], "static_input_rank": [348, 661, 690, 1306, 1314, 1335, 1338], "static_mod": [1240, 1248, 1263], "static_output_rank": [661, 689, 855, 1338], "static_rank": [18, 39, 42, 43, 45, 58, 60, 63, 65, 74, 75, 79, 80, 81, 84, 86, 87, 98, 174, 176, 177, 178, 181, 182, 187, 191, 194, 195, 196, 197, 199, 202, 204, 211, 217, 576, 581, 586, 613, 661, 690, 747, 748, 844, 847, 855, 1011, 1055, 1205, 1209, 1210, 1212, 1213, 1216, 1217, 1223, 1224, 1225, 1228, 1234, 1240, 1248, 1264, 1296, 1306, 1313, 1316, 1321, 1324, 1327, 1329, 1332, 1334, 1335, 1337, 1338], "staticcast": [8, 665, 790, 1181, 1184, 1187, 1664], "staticcastresulttyp": [8, 353, 880, 1181, 1182, 1184, 1187], "staticdatatyp": [249, 416, 490, 786, 801, 802, 805, 1094, 1183, 1240, 1416, 1417, 1613], "staticdatatypecast": [8, 1184], "staticordynamicrank": [174, 184, 196, 208, 473, 562, 564, 579, 586, 595, 661, 677, 688, 930, 938, 941, 943, 944, 950, 955, 995, 1039, 1185, 1186, 1205, 1208, 1240, 1245, 1306, 1313], "staticrank": [473, 562, 579, 661, 995, 1186, 1187], "staticrankcast": [8, 1187], "statist": [100, 398, 406, 550, 569, 1012, 1021, 1240, 1378, 1394, 2019, 2020, 2022, 2023, 2059, 2150], "statu": [3, 4, 6, 7, 8, 12, 21, 32, 39, 219, 252, 253, 269, 270, 271, 274, 276, 277, 280, 281, 310, 311, 312, 313, 314, 315, 316, 317, 340, 343, 351, 371, 372, 400, 415, 427, 442, 459, 473, 477, 484, 524, 526, 531, 532, 565, 566, 567, 568, 627, 661, 666, 851, 857, 859, 861, 876, 884, 888, 889, 915, 986, 990, 992, 994, 1063, 1069, 1073, 1074, 1078, 1080, 1085, 1089, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1154, 1157, 1159, 1181, 1205, 1278, 1279, 1281, 1288, 1306, 1365, 1370, 1371, 1372, 1379, 1384, 1388, 1474, 1475, 1476, 1533, 1536, 1538, 2129], "status_testutil": [1, 2, 6], "statuscod": [6, 8, 12, 98, 218, 219, 248, 249, 252, 270, 348, 350, 351, 354, 400, 415, 430, 432, 433, 434, 435, 436, 438, 441, 442, 443, 444, 445, 447, 451, 452, 453, 478, 482, 518, 519, 520, 545, 547, 548, 563, 575, 587, 605, 628, 630, 633, 662, 666, 735, 740, 799, 845, 855, 861, 875, 877, 878, 884, 885, 886, 887, 888, 909, 986, 990, 991, 994, 1063, 1067, 1118, 1120, 1155, 1279, 1288, 1304, 1342, 1370, 1371, 1372, 1495], "statusor": 1063, "std": [8, 11, 13, 16, 17, 33, 38, 39, 40, 42, 43, 44, 45, 46, 54, 72, 74, 75, 78, 80, 89, 90, 92, 93, 94, 96, 98, 99, 100, 107, 111, 115, 143, 145, 149, 165, 174, 178, 189, 196, 197, 199, 206, 211, 220, 225, 227, 231, 238, 240, 241, 242, 243, 249, 251, 254, 307, 318, 329, 340, 346, 348, 357, 364, 392, 406, 410, 416, 417, 420, 421, 422, 426, 427, 436, 458, 459, 460, 461, 463, 465, 468, 469, 470, 472, 473, 474, 476, 477, 482, 483, 484, 490, 492, 493, 494, 495, 497, 501, 502, 505, 512, 518, 519, 520, 521, 526, 528, 533, 535, 536, 538, 561, 564, 570, 578, 586, 591, 602, 615, 620, 621, 627, 647, 649, 659, 661, 675, 685, 695, 700, 703, 738, 743, 753, 761, 762, 763, 764, 765, 773, 785, 811, 812, 813, 814, 817, 818, 819, 820, 822, 823, 825, 827, 831, 840, 844, 846, 847, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 875, 876, 885, 887, 888, 889, 891, 892, 894, 913, 915, 923, 924, 927, 960, 962, 963, 964, 965, 970, 971, 975, 983, 984, 985, 986, 990, 991, 992, 993, 995, 996, 997, 998, 1021, 1024, 1028, 1029, 1030, 1033, 1036, 1039, 1056, 1060, 1063, 1065, 1068, 1070, 1072, 1076, 1079, 1080, 1089, 1090, 1091, 1103, 1112, 1113, 1119, 1121, 1130, 1137, 1144, 1185, 1186, 1188, 1189, 1200, 1201, 1202, 1203, 1204, 1205, 1213, 1216, 1227, 1228, 1268, 1274, 1277, 1294, 1296, 1306, 1316, 1317, 1320, 1321, 1327, 1329, 1330, 1340, 1341, 1345, 1348, 1349, 1350, 1355, 1356, 1357, 1358, 1360, 1366, 1368, 1369, 1374, 1375, 1394, 1398, 1416, 1420, 1422, 1423, 1438, 1468, 1481, 1482, 1483, 1484, 1487, 1488, 1494, 1499, 1506, 1517, 1519, 1527, 1528, 1529, 1533, 1534, 1535, 1537, 1541, 1543, 1549, 1565, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1622, 1629, 1646, 1649, 1657, 1659, 1662], "stderr": 1686, "step": [13, 427, 458, 459, 460, 461, 463, 464, 1688, 1689, 1777, 2069, 2162], "stide": [430, 432, 443], "still": [263, 318, 563, 648, 892, 1279, 1282, 1297, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1690, 1802, 1805, 2017, 2058, 2070, 2079, 2151, 2161, 2162], "stop": [351, 427, 430, 432, 448, 449, 459, 460, 518, 519, 798, 799, 915, 1777, 1780, 1821, 1854, 1969, 2002, 2044, 2162], "stop_or_s": [351, 520, 521, 915], "storag": [39, 100, 110, 143, 174, 253, 300, 303, 525, 550, 569, 615, 616, 697, 795, 891, 1089, 1101, 1113, 1154, 1171, 1188, 1189, 1202, 1205, 1240, 1250, 1268, 1272, 1379, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1681, 1682, 1684, 1685, 1687, 1691, 1695, 1698, 1702, 1706, 1722, 1727, 1728, 1734, 1869, 1894, 1895, 1896, 1917, 1983, 2000, 2017, 2019, 2020, 2042, 2055, 2069, 2070, 2097, 2151, 2164], "storage_statist": [2019, 2020, 2022, 2023, 2059], "storagegener": [8, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1268, 1270, 1272, 1507, 1508, 1509, 1510, 1556, 1557, 1558, 1565, 1566, 1567, 1568, 1569], "storagestatist": [2019, 2020, 2021, 2022, 2023, 2059], "store": [8, 19, 39, 54, 70, 79, 80, 82, 100, 101, 102, 104, 143, 150, 165, 168, 174, 220, 249, 355, 398, 427, 468, 482, 490, 506, 526, 563, 569, 615, 627, 649, 672, 697, 860, 881, 891, 892, 965, 975, 1011, 1012, 1055, 1059, 1103, 1113, 1114, 1154, 1171, 1188, 1193, 1205, 1240, 1241, 1242, 1252, 1256, 1306, 1311, 1339, 1340, 1341, 1378, 1468, 1469, 1480, 1481, 1482, 1485, 1499, 1506, 1507, 1509, 1510, 1556, 1558, 1564, 1565, 1566, 1569, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1693, 1702, 1703, 1780, 1869, 1882, 1883, 1887, 1888, 1889, 1890, 1893, 1894, 1897, 1899, 1900, 1901, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1921, 1964, 1983, 2000, 2017, 2019, 2020, 2022, 2023, 2034, 2035, 2036, 2037, 2038, 2041, 2042, 2053, 2055, 2058, 2059, 2069, 2070, 2080, 2114, 2142, 2150, 2151, 2152, 2154, 2161, 2163, 2164, 2165], "store2": 2151, "store_data_equal_to_fill_valu": [1679, 1681, 1682, 1684, 1685], "storeresult": [569, 1055, 1059, 1240], "str": [1702, 1740, 1746, 1752, 1756, 1757, 1758, 1759, 1762, 1763, 1774, 1776, 1779, 1799, 1803, 1806, 1810, 1819, 1820, 1832, 1839, 1842, 1849, 1853, 1869, 1870, 1872, 1875, 1876, 1878, 1882, 1883, 1886, 1887, 1890, 1893, 1894, 1896, 1899, 1900, 1901, 1902, 1903, 1904, 1911, 1912, 1915, 1917, 1939, 1943, 1951, 1958, 1960, 1968, 1981, 1983, 1991, 2001, 2017, 2019, 2043, 2045, 2080, 2082, 2085, 2086, 2089, 2114, 2115, 2119, 2122, 2123, 2125, 2127, 2128, 2129, 2130, 2150, 2151, 2152, 2153, 2154, 2160, 2161, 2162], "str_cat": [1203, 1204, 1612], "strappend": [8, 1203, 1204], "strategi": 1690, "strcat": [8, 1204], "stream": [346, 960, 1121, 1144, 1607, 1686], "strictli": [605, 1697, 1801, 1835], "stride": [8, 13, 19, 20, 34, 39, 51, 63, 108, 227, 348, 351, 352, 355, 393, 427, 430, 432, 443, 444, 448, 449, 450, 518, 519, 520, 521, 563, 693, 694, 695, 740, 800, 833, 846, 847, 854, 860, 915, 943, 944, 949, 959, 960, 1111, 1113, 1114, 1205, 1212, 1219, 1235, 1296, 1304, 1305, 1306, 1311, 1316, 1337, 1338, 1342, 1343, 1344, 1672, 1685, 1688, 1776, 1782, 1839, 1841, 1862, 1925, 1927, 1928, 1934, 2115], "strided_layout": [99, 219, 556, 558, 570, 626, 693, 694, 695, 745, 750, 756, 791, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1372, 1580, 1603, 1669], "stridedlayout": [8, 19, 20, 39, 40, 51, 219, 348, 556, 558, 570, 693, 694, 695, 750, 756, 1039, 1113, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1306], "stridedlayoutview": [42, 108, 219, 570, 791, 944, 949, 1114, 1205, 1235], "string": [0, 33, 39, 90, 92, 93, 94, 96, 99, 220, 225, 249, 251, 307, 318, 329, 406, 410, 416, 425, 427, 436, 465, 468, 476, 477, 478, 483, 484, 578, 586, 591, 602, 615, 620, 627, 647, 649, 659, 661, 675, 685, 811, 817, 818, 819, 822, 823, 825, 827, 831, 840, 885, 887, 888, 889, 892, 894, 913, 915, 923, 1021, 1024, 1028, 1056, 1060, 1188, 1189, 1194, 1201, 1202, 1203, 1204, 1205, 1227, 1268, 1274, 1277, 1294, 1306, 1327, 1345, 1347, 1348, 1349, 1350, 1355, 1356, 1366, 1369, 1394, 1398, 1438, 1443, 1481, 1482, 1487, 1488, 1494, 1504, 1517, 1519, 1527, 1528, 1533, 1541, 1543, 1549, 1603, 1605, 1606, 1608, 1609, 1610, 1611, 1612, 1622, 1662, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1688, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1762, 1763, 1774, 1810, 1842, 1870, 1872, 1875, 1876, 1886, 1897, 1902, 1960, 1991, 2034, 2080, 2086, 2150, 2153, 2155, 2160, 2164, 2165], "string_t": [8, 1438], "string_view": [8, 174, 196, 251, 307, 318, 357, 364, 416, 420, 436, 465, 468, 470, 561, 578, 586, 591, 615, 620, 621, 661, 738, 811, 812, 813, 814, 819, 820, 823, 840, 861, 875, 887, 1028, 1188, 1200, 1203, 1345, 1349, 1468, 1482, 1483, 1484, 1506, 1533, 1534, 1535, 1537, 1565, 1662], "strip": [390, 1349, 1476, 1495, 1500, 1503, 1538, 1617, 1909, 2086, 2164], "strip_context": [390, 1617, 1892, 2017, 2058], "strip_prefix": 1689, "strip_prefix_length": [1500, 1503, 1909], "stripcontext": [371, 376, 1154, 1161, 1474, 1476, 1477, 1533, 1538, 1542], "stripe": 1417, "strong": 1687, "stronger": [259, 262, 265], "strongli": [253, 290, 1089, 1091, 1092, 1099, 1696, 1700], "struct": [8, 39, 90, 100, 131, 141, 220, 253, 259, 260, 262, 263, 265, 266, 282, 300, 393, 398, 401, 406, 413, 427, 459, 486, 490, 507, 550, 569, 778, 893, 894, 995, 1011, 1012, 1013, 1017, 1021, 1026, 1040, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1089, 1091, 1092, 1099, 1154, 1178, 1179, 1180, 1188, 1205, 1268, 1278, 1290, 1295, 1345, 1366, 1378, 1379, 1390, 1394, 1400, 1445, 1465, 1470, 1472, 1480, 1482, 1498, 1499, 1500, 1505, 1506, 1507, 1512, 1517, 1533, 1551, 1555, 1556, 1559, 1565, 1566, 1570, 1665], "structur": [365, 1697], "studio": 1689, "style": [459, 463, 1691, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1776, 1777, 1781, 1782, 1787, 1817, 1832, 1837, 1856, 1867, 1951, 1956, 1957, 1971, 1982, 1983, 1988, 1989, 2004, 2018, 2019, 2028, 2032, 2047, 2048, 2065, 2066, 2115], "sub": [39, 79, 80, 90, 93, 174, 860, 1236, 1237, 1238, 1311, 1680, 1685, 2163], "sub_rank": [570, 1205], "sub_stor": 1240, "subarrai": [39, 79, 1236, 1684], "subarraystaticrank": [39, 80, 1236, 1237], "subboxview": [174, 1238], "subclass": [259, 262, 265], "subdivid": [253, 2164], "subject": [460, 1297, 1379, 1565, 1697, 1908, 2019, 2054, 2097], "submit": [131, 133, 134, 137, 139, 1703, 1705, 1912, 2051, 2054, 2069, 2151], "subnorm": 110, "subrank": [570, 586, 609, 1205], "subscript": [39, 79, 80, 1236, 2030, 2031, 2032, 2033, 2048, 2066, 2162, 2163], "subsequ": [427, 892, 991, 1278, 1280, 1379, 1679, 1681, 1682, 1683, 1684, 1685, 1690, 1777, 1780, 2017, 2058, 2069, 2097, 2114, 2151, 2152, 2154, 2161, 2162], "subset": [13, 174, 358, 427, 563, 1379, 1677, 1688, 1689, 1788, 1799, 1804, 2162], "subspan": [1622, 1635, 1636, 1640, 1641, 1655, 1656], "substitut": 1186, "subsystem": 1686, "subtract": [39, 79, 110, 119, 120, 143, 155, 227, 238, 545, 570, 627, 699, 714, 715, 995, 1007, 1119, 1205], "subtre": 1697, "subtree_common_prefix_length": 1697, "subtyp": [1679, 1681, 1684, 1685, 1693, 1698, 2164, 2165], "succe": [13, 425, 1089, 1342, 1688, 1698], "success": [12, 218, 252, 348, 372, 415, 666, 798, 799, 851, 857, 884, 888, 994, 1063, 1074, 1088, 1155, 1282, 1469, 1565, 1797, 1901, 2075, 2077], "successfulli": [837, 1011, 1012, 1055, 1278, 1280, 1281, 1282, 1379, 1469, 1506, 1794, 1946, 1949, 2020, 2069, 2078, 2097], "successor": [811, 823], "sudo": 1689, "suffic": 1688, "suffici": [951, 2162], "suffix": [90, 94, 894, 899, 900, 907, 908, 911, 1468, 1482, 1484, 1506, 1533, 1535, 1565, 1690, 1697, 1869, 1882, 1883, 1899], "suffixlength": [894, 908], "suit": 108, "suitabl": [1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1689, 2151, 2164, 2165], "sum": [8, 441, 833, 996, 1225, 1228, 1296, 1319, 2162], "summari": [90, 95, 96, 97], "summary_edge_item": [90, 95, 96], "summary_ellips": [90, 96], "summary_threshold": [90, 97], "superset": [361, 563, 627], "suppli": [433, 435, 441, 1698, 2163], "support": [0, 39, 108, 188, 196, 212, 248, 249, 253, 306, 345, 353, 398, 400, 416, 417, 427, 435, 457, 473, 482, 490, 512, 516, 526, 550, 561, 585, 586, 606, 627, 661, 672, 682, 795, 801, 802, 803, 841, 842, 845, 848, 849, 890, 891, 1011, 1012, 1028, 1037, 1039, 1055, 1059, 1089, 1094, 1103, 1113, 1114, 1116, 1117, 1121, 1159, 1184, 1187, 1193, 1203, 1205, 1262, 1345, 1346, 1378, 1461, 1462, 1463, 1464, 1472, 1473, 1476, 1495, 1504, 1533, 1538, 1543, 1551, 1552, 1612, 1671, 1672, 1673, 1677, 1678, 1679, 1680, 1681, 1682, 1685, 1687, 1688, 1690, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1700, 1701, 1776, 1788, 1817, 1868, 1869, 1900, 1903, 1907, 1908, 1917, 1964, 1992, 2017, 2019, 2032, 2035, 2052, 2058, 2059, 2068, 2070, 2107, 2108, 2151, 2162, 2163, 2164, 2165], "suppress": [21, 24, 526, 534, 1063, 1064], "surpris": 1063, "surviv": 2069, "swap": [165, 172, 518, 519, 520, 1659], "sy": 2153, "symbol": 1689, "synchron": [526, 975, 1278, 1281, 1282, 1788, 1900, 1901, 1903, 2019, 2025, 2030, 2031, 2032, 2033, 2048, 2051, 2066, 2069, 2070, 2077, 2161, 2163], "syntax": [0, 1345, 1349, 1445, 1680, 1689, 1690, 1691, 1692, 1695, 1698, 2030, 2031, 2032, 2033, 2048, 2066, 2080, 2162, 2164], "system": [1188, 1686, 1689, 1690, 1691, 1692, 1693, 2069], "t": [8, 10, 11, 17, 34, 35, 38, 39, 73, 110, 111, 115, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 250, 251, 253, 306, 328, 348, 416, 427, 490, 507, 508, 509, 510, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 567, 571, 586, 661, 680, 699, 700, 703, 742, 743, 746, 747, 748, 757, 759, 761, 762, 763, 764, 765, 770, 773, 775, 776, 778, 779, 780, 781, 783, 785, 786, 787, 788, 792, 793, 801, 802, 803, 805, 850, 852, 855, 857, 859, 869, 870, 871, 872, 873, 874, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1094, 1107, 1109, 1112, 1121, 1130, 1137, 1183, 1188, 1205, 1240, 1258, 1279, 1282, 1306, 1319, 1331, 1338, 1357, 1358, 1360, 1362, 1363, 1364, 1365, 1372, 1416, 1417, 1472, 1473, 1492, 1551, 1552, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1659, 1681, 1682, 1683, 1684, 1685, 1689, 1690, 1697, 1703, 1729, 1730, 1732, 1733, 1736, 1742, 1746, 1747, 1748, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1762, 1763, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1792, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1859, 1862, 1863, 1864, 1865, 1866, 1867, 1869, 1874, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1915, 1916, 1917, 1918, 1919, 1921, 1926, 1927, 1928, 1946, 1948, 1949, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1973, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2046, 2047, 2048, 2050, 2051, 2053, 2055, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066, 2069, 2070, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2107, 2110, 2111, 2114, 2116, 2139, 2146, 2147, 2150, 2151, 2152, 2154, 2161, 2162, 2163], "t0": [626, 1205], "t1": [626, 1205], "tabl": [1688, 1695], "tag": [8, 39, 50, 131, 141, 490, 496, 507, 510, 789, 963, 1112, 1181, 1306, 1310, 1664, 1665], "take": [253, 263, 266, 312, 836, 875, 877, 878, 891, 892, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1694, 1722, 1734, 1958, 1981, 2017, 2058, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "taken": [1682, 1697, 1732, 1736, 1755, 2164], "tan": [110, 1660], "tangent": [110, 1408, 1409, 1660, 1661], "tanh": [110, 1661], "tar": 1689, "target": [8, 12, 14, 99, 218, 219, 248, 249, 253, 260, 261, 262, 263, 267, 271, 273, 277, 283, 288, 290, 293, 297, 308, 311, 315, 319, 323, 334, 338, 353, 393, 397, 398, 401, 402, 427, 438, 480, 490, 661, 682, 745, 760, 782, 790, 845, 1011, 1012, 1017, 1018, 1028, 1037, 1039, 1181, 1182, 1184, 1187, 1205, 1240, 1378, 1390, 1391, 1480, 1482, 1688, 1689, 1697, 1707, 1709, 1713, 1714, 1720, 1722, 1734, 1776, 1786, 1869, 1908, 2115, 2162, 2164], "target_byte_strid": [219, 1205], "target_data_file_s": 1697, "target_dimens": [427, 453], "target_domain": [39, 218, 219, 1205], "target_dtyp": [39, 248, 249, 845, 1154, 1240], "target_link_librari": 1689, "target_shap": [39, 218, 219, 1205, 1372], "targetarrai": [1012, 1240], "targetdimens": [427, 453], "targetel": [8, 39, 353, 845, 1037, 1184], "targetelementtyp": [249, 1240], "targetmod": [8, 880, 1038], "targetoriginkind": [39, 98], "targetpoint": [490, 743], "targetrank": [8, 1039, 1187], "task": 365, "templat": [7, 8, 9, 10, 11, 17, 18, 19, 20, 25, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 57, 58, 72, 73, 74, 75, 76, 77, 79, 80, 98, 108, 109, 111, 115, 143, 145, 165, 174, 176, 178, 180, 181, 182, 187, 188, 196, 197, 199, 202, 203, 204, 205, 211, 212, 218, 227, 228, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 260, 263, 266, 270, 290, 291, 302, 306, 310, 311, 313, 315, 328, 348, 350, 353, 358, 359, 363, 370, 371, 393, 395, 397, 398, 399, 400, 415, 417, 427, 428, 429, 430, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 473, 478, 482, 485, 486, 487, 488, 490, 493, 494, 495, 502, 504, 507, 510, 513, 523, 524, 526, 527, 528, 530, 532, 533, 535, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 567, 569, 570, 571, 576, 577, 578, 579, 580, 581, 582, 586, 587, 589, 591, 593, 594, 604, 605, 606, 607, 609, 615, 616, 622, 625, 626, 661, 662, 663, 665, 679, 680, 681, 682, 684, 691, 693, 694, 695, 700, 703, 740, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 802, 803, 805, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 869, 871, 880, 881, 883, 890, 891, 924, 930, 931, 943, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 981, 983, 984, 985, 986, 990, 991, 992, 993, 1011, 1012, 1029, 1030, 1033, 1037, 1038, 1039, 1055, 1059, 1063, 1065, 1068, 1070, 1072, 1076, 1079, 1080, 1082, 1083, 1087, 1090, 1094, 1101, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1124, 1125, 1126, 1127, 1130, 1137, 1153, 1155, 1159, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1203, 1204, 1205, 1209, 1212, 1213, 1215, 1216, 1217, 1223, 1224, 1225, 1226, 1228, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1246, 1248, 1257, 1258, 1262, 1267, 1296, 1306, 1311, 1314, 1316, 1317, 1319, 1320, 1321, 1329, 1330, 1331, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1374, 1375, 1376, 1377, 1378, 1416, 1417, 1473, 1476, 1492, 1495, 1504, 1538, 1552, 1612, 1613, 1622, 1636, 1641, 1649, 1650, 1651, 1652, 1656, 1659, 1664], "temporari": [427, 1682, 1690, 1698], "tenosrstor": 1690, "tensoprstor": 1686, "tensor": 174, "tensorflow": [110, 1684, 2108], "tensorread": [398, 1011, 1012, 1239, 1240], "tensorstortensorstore_assert_ok": [1, 1063], "tensorstore_assert_ok_and_assign": [2, 1063, 1252], "tensorstore_assign_or_return": [3, 188, 569, 587, 662, 891, 1063, 1242, 1306, 1485], "tensorstore_bazel_build_opt": 1689, "tensorstore_bazel_compilation_mod": 1689, "tensorstore_bazel_startup_opt": 1689, "tensorstore_bazelisk": 1689, "tensorstore_ca_bundl": 1686, "tensorstore_ca_path": 1686, "tensorstore_check_ok": [4, 8], "tensorstore_check_ok_and_assign": [5, 1063], "tensorstore_curl_low_speed_limit_byt": 1686, "tensorstore_curl_low_speed_time_second": 1686, "tensorstore_curl_verbos": 1686, "tensorstore_depend": 1689, "tensorstore_expect_ok": [1, 6, 442, 1063], "tensorstore_gcs_grpc_channel": 1686, "tensorstore_gcs_http_url": [1686, 1691], "tensorstore_gcs_http_vers": 1686, "tensorstore_gcs_rate_limiter_doubling_tim": 1686, "tensorstore_gcs_request_concurr": [1686, 1691], "tensorstore_grpc": 1699, "tensorstore_http2_max_concurrent_stream": 1686, "tensorstore_http_thread": 1686, "tensorstore_prebuilt_dir": 1689, "tensorstore_return_if_error": [7, 8, 253, 260, 263, 266, 282, 300, 315], "tensorstore_s3_rate_limiter_doubling_tim": 1698, "tensorstore_s3_request_concurr": 1698, "tensorstore_system_lib": [1686, 1689], "tensorstore_use_fallback_ssl_cert": 1686, "tensorstore_use_system_": 1689, "tensorstore_verbose_log": [1686, 1702, 2130], "tensorwrit": [398, 1240, 1267, 1378], "term": [8, 427, 1205, 1777, 1781, 1787, 1856, 1867, 1971, 1982, 2004, 2018, 2032, 2047, 2048, 2065, 2066, 2162], "termin": [4, 5, 8, 16, 1086, 2155, 2160], "test": [266, 282, 300, 442, 685, 1121, 1149, 1252, 1695, 1698, 1788], "th": [605, 1685, 1777, 1801, 1835, 2162], "than": [8, 79, 80, 90, 97, 108, 110, 174, 196, 227, 253, 258, 259, 262, 265, 266, 299, 363, 371, 380, 428, 435, 458, 490, 648, 650, 661, 672, 681, 891, 991, 995, 1000, 1001, 1003, 1004, 1042, 1048, 1051, 1112, 1205, 1262, 1359, 1411, 1450, 1512, 1516, 1530, 1559, 1563, 1622, 1679, 1680, 1681, 1682, 1684, 1685, 1688, 1689, 1690, 1697, 1698, 1722, 1727, 1728, 1734, 1777, 1804, 1908, 1912, 1950, 2017, 2058, 2092, 2094, 2107, 2114, 2151, 2152, 2154, 2161, 2162, 2164], "thei": [21, 23, 37, 433, 435, 459, 484, 586, 626, 684, 846, 875, 983, 990, 1082, 1101, 1104, 1205, 1262, 1279, 1282, 1681, 1695, 1697, 1698, 1745, 1802, 1805, 2155, 2160, 2161, 2162], "them": [43, 45, 110, 672, 891, 991, 1154, 1162, 1205, 1262, 1474, 1478, 1533, 1544, 1673, 1689, 2069], "themselv": 196, "therefor": [108, 247, 427, 526, 1682, 1686, 1698, 1912, 2051, 2054, 2069, 2151, 2162], "thi": [0, 3, 4, 5, 7, 13, 19, 21, 23, 24, 25, 29, 30, 31, 34, 35, 39, 42, 43, 45, 76, 79, 90, 97, 108, 110, 131, 133, 134, 137, 138, 139, 142, 143, 152, 165, 169, 174, 193, 196, 211, 220, 221, 237, 247, 253, 259, 260, 262, 263, 264, 265, 266, 269, 270, 283, 291, 300, 305, 312, 340, 343, 353, 365, 370, 371, 372, 376, 380, 382, 386, 389, 390, 399, 400, 416, 417, 424, 425, 427, 428, 429, 430, 432, 433, 435, 441, 442, 443, 444, 446, 452, 453, 454, 455, 456, 457, 460, 474, 485, 489, 490, 511, 518, 519, 520, 526, 527, 534, 540, 542, 543, 559, 560, 586, 587, 599, 605, 609, 614, 632, 646, 648, 661, 662, 671, 681, 683, 685, 692, 693, 694, 695, 778, 800, 823, 836, 837, 838, 839, 847, 862, 869, 870, 879, 891, 892, 894, 897, 898, 899, 900, 905, 930, 937, 943, 959, 963, 965, 966, 972, 973, 976, 977, 978, 981, 986, 990, 991, 995, 1010, 1012, 1029, 1049, 1051, 1053, 1056, 1060, 1063, 1064, 1065, 1070, 1074, 1080, 1086, 1087, 1097, 1100, 1109, 1113, 1114, 1119, 1121, 1125, 1127, 1154, 1155, 1156, 1163, 1177, 1183, 1184, 1185, 1186, 1187, 1192, 1194, 1205, 1211, 1214, 1220, 1224, 1240, 1241, 1242, 1249, 1250, 1252, 1255, 1256, 1261, 1262, 1266, 1278, 1280, 1282, 1284, 1285, 1286, 1287, 1290, 1294, 1296, 1297, 1304, 1306, 1322, 1342, 1343, 1378, 1379, 1387, 1388, 1389, 1465, 1466, 1469, 1474, 1476, 1482, 1485, 1489, 1495, 1497, 1500, 1501, 1504, 1507, 1509, 1510, 1533, 1538, 1543, 1545, 1550, 1556, 1558, 1569, 1622, 1653, 1664, 1670, 1672, 1677, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1693, 1697, 1698, 1699, 1703, 1705, 1722, 1734, 1740, 1746, 1747, 1750, 1751, 1775, 1780, 1781, 1787, 1788, 1790, 1795, 1799, 1801, 1805, 1817, 1819, 1821, 1826, 1828, 1829, 1830, 1831, 1832, 1833, 1835, 1836, 1838, 1853, 1854, 1856, 1857, 1860, 1861, 1863, 1864, 1865, 1866, 1867, 1869, 1882, 1888, 1900, 1901, 1903, 1905, 1907, 1908, 1909, 1912, 1914, 1916, 1917, 1952, 1958, 1961, 1968, 1969, 1971, 1972, 1974, 1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1989, 1992, 1993, 1994, 1996, 1997, 1999, 2001, 2002, 2004, 2005, 2006, 2008, 2009, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2022, 2023, 2024, 2025, 2028, 2029, 2032, 2033, 2035, 2037, 2043, 2044, 2047, 2048, 2049, 2050, 2053, 2055, 2056, 2057, 2058, 2059, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2069, 2070, 2080, 2084, 2087, 2088, 2089, 2097, 2114, 2119, 2120, 2151, 2152, 2154, 2161, 2162, 2163, 2164], "thing": 365, "third": [3, 2164], "those": [8, 427, 990, 1686, 1697, 1788, 2029], "though": [253, 425, 648, 1802, 1805, 2161], "thread": [0, 365, 512, 526, 540, 542, 543, 696, 836, 838, 1686, 1690, 1699, 1788, 1789, 1790, 1794, 1797, 1900, 1901, 1903, 2025, 2051, 2161], "thread_pool": 1686, "threadsafeti": [540, 542], "three": [811, 813, 814, 833, 1682, 1688, 1801, 1835, 2164], "threshold": [90, 97], "through": [8, 526, 1055, 1306, 1687, 1688, 1691, 1693, 1832], "throughput": 1687, "throw": [16, 836], "ti": [526, 836, 837, 839, 1056, 1373, 1374, 2053], "tie": 1672, "tiff": [1679, 1689, 2165], "time": [16, 17, 18, 21, 28, 39, 76, 87, 108, 174, 195, 196, 217, 227, 253, 291, 315, 399, 400, 416, 458, 473, 485, 490, 526, 570, 579, 586, 613, 650, 661, 689, 690, 697, 758, 765, 778, 779, 795, 836, 845, 891, 965, 1028, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1113, 1114, 1154, 1181, 1188, 1203, 1205, 1234, 1240, 1263, 1264, 1268, 1270, 1275, 1276, 1306, 1335, 1444, 1445, 1465, 1467, 1500, 1502, 1512, 1516, 1517, 1518, 1530, 1559, 1563, 1622, 1665, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1691, 1697, 1698, 1894, 1896, 1898, 1908, 1912, 1950, 2017, 2058, 2151, 2161, 2164], "timedelta": 1684, "timeout": [1690, 1699, 1788, 1794, 1797, 2097, 2104, 2106], "timeouterror": [1794, 1797], "timestamp": [8, 1268, 1269, 1271, 1273, 1275, 1517, 1530, 1697, 1869, 1877, 1879, 1894, 1895, 2161], "timestampedstoragegener": [8, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1468, 1482, 1517, 1518, 1520, 1521, 1530, 1565, 1869, 1877, 1878, 1879, 1894, 1895, 1896, 1897, 1898, 1910, 1912, 1917, 2161], "tinyxml2": 1689, "tl": 1689, "tmp": [891, 1689, 1690, 1703, 1883, 1885, 1886, 1887, 1889, 1890, 1891, 1899, 1902, 1904, 1906, 2070, 2163], "to_json": [1706, 1707, 1719, 1733, 1737, 1739, 1741, 1742, 1743, 1745, 1750, 1799, 1827, 1832, 1862, 1882, 1891, 1951, 1976, 1983, 2011, 2080, 2091, 2119, 2125], "to_str": [1028, 1345, 1356, 1662], "to_uint": [1121, 1150], "togeth": [526, 891, 1188, 1262, 1684, 1702, 1703], "tojson": [371, 377, 801], "tojsonopt": [340, 344, 365, 371, 377, 378, 385], "token": 1698, "too": 1697, "tool": 1689, "toolchain": 1689, "top": [253, 1113, 1154, 1176, 1240, 1671, 1683, 1685, 1696, 1697, 1700, 1701, 2163, 2164], "tostr": [39, 1277], "total": [0, 39, 71, 90, 97, 260, 406, 412, 1021, 1025, 1205, 1222, 1394, 1399, 1686, 1697, 1799, 1826, 1832, 1861, 1951, 1975, 1983, 2010, 2019, 2057], "total_byt": [1278, 1293], "total_bytes_limit": [0, 1679, 1681, 1682, 1684, 1685, 1696, 1700, 1742, 1746, 1748, 1750, 1751, 2017, 2058, 2151, 2161, 2163], "total_el": [406, 412, 1021, 1025, 1394, 1399], "tourl": [1482, 1488, 1533, 1543], "toward": [110, 430, 432, 443, 518, 519, 520, 545, 547, 627, 1577, 2162], "traceback": [1777, 1792, 1804, 1900, 1901, 1903, 1912, 1948, 1957, 2162], "track": 2069, "traffic": 1686, "trail": [458, 459, 1372, 2086, 2164], "trait": [416, 425, 490, 507], "transact": [8, 891, 1154, 1188, 1192, 1202, 1240, 1242, 1256, 1265, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1379, 1482, 1485, 1487, 1491, 1493, 1496, 1504, 1506, 1512, 1556, 1559, 1565, 1579, 1587, 1611, 1687, 1695, 1696, 1697, 1700, 1702, 1900, 1903, 1907, 1908, 1909, 1910, 1912, 1914, 1916, 1917, 2030, 2031, 2032, 2033, 2048, 2051, 2060, 2066, 2067, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2097, 2114, 2151, 2152, 2154], "transactionalopenopt": [891, 1154, 1240, 1295], "transactionalreadgenerationcondit": [1506, 1556, 1557, 1558, 1559, 1562], "transactionalreadopt": [1482, 1512, 1559, 1560, 1561, 1562, 1563], "transactionmod": [1278, 1283, 1289, 1290, 1291, 1294, 1587, 1611], "transfer": 1114, "transform": [12, 13, 34, 35, 39, 174, 188, 196, 212, 253, 254, 255, 256, 348, 349, 350, 415, 427, 430, 432, 433, 434, 435, 441, 442, 443, 445, 447, 451, 453, 456, 457, 477, 526, 545, 547, 548, 552, 563, 576, 577, 578, 579, 580, 581, 582, 586, 605, 606, 627, 662, 663, 664, 665, 667, 668, 669, 670, 671, 679, 680, 681, 683, 684, 685, 691, 740, 799, 844, 847, 855, 857, 860, 930, 933, 937, 938, 941, 943, 944, 950, 955, 960, 990, 991, 993, 994, 1055, 1089, 1090, 1100, 1154, 1155, 1156, 1158, 1164, 1165, 1167, 1170, 1175, 1176, 1240, 1261, 1296, 1304, 1305, 1306, 1311, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1324, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1342, 1377, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1687, 1702, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1799, 1802, 1805, 1832, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1856, 1859, 1862, 1867, 1925, 1926, 1927, 1928, 1935, 1951, 1954, 1955, 1956, 1957, 1958, 1971, 1981, 1982, 1983, 1986, 1987, 1988, 1989, 1992, 2004, 2011, 2012, 2017, 2018, 2019, 2026, 2027, 2028, 2029, 2030, 2031, 2033, 2034, 2035, 2039, 2047, 2058, 2065, 2111, 2114, 2146, 2151, 2152, 2154, 2161, 2163, 2165], "transform_a": 681, "transform_array_constraint": [882, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1576], "transform_b": 681, "transformarrai": [8, 844, 860, 1296, 1297, 1311], "transformarrayconstraint": [8, 860, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1306, 1311], "transformed_arrai": [34, 35, 348, 415, 553, 789, 792, 793, 799, 847, 855, 860, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1357], "transformedarrai": [8, 34, 35, 39, 188, 353, 553, 661, 682, 792, 799, 1012, 1037, 1039, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1357, 1378], "transformedarraytypefromarrai": [1306, 1337], "transformedarraytypefromarrayandtransform": [855, 1306, 1338], "transformedarrayview": [1306, 1339], "transformedsharedarrai": [1306, 1340, 1357], "transformedsharedarrayview": [1306, 1341], "transformindic": [661, 666], "transforminputdimensionunit": [477, 1304], "transforminputspaceschema": [1089, 1100], "transformoutputdimensionunit": [477, 1305], "transient": [1691, 1692, 1695, 1698], "transit": [526, 1697], "transitive_path": 1697, "translat": [12, 13, 39, 98, 218, 351, 427, 444, 445, 446, 447, 451, 480, 847, 1011, 1343, 1344, 1672, 1681, 1684, 1685, 1688, 1776, 1783, 1784, 1785, 1799, 1828, 1829, 1830, 1832, 1863, 1864, 1865, 1951, 1977, 1978, 1979, 1983, 2013, 2014, 2015, 2019, 2061, 2062, 2063, 2115, 2162], "translate_backward_bi": [1776, 1783, 1799, 1828, 1832, 1863, 1951, 1977, 1983, 2013, 2019, 2061, 2115], "translate_bi": [1776, 1777, 1779, 1784, 1799, 1802, 1829, 1832, 1834, 1836, 1864, 1951, 1978, 1983, 2011, 2012, 2014, 2019, 2062, 2115], "translate_origin_to": [351, 915], "translate_to": [1776, 1785, 1799, 1830, 1832, 1865, 1951, 1979, 1983, 2015, 2019, 2063, 2115, 2152], "translatebackwardbi": [427, 445], "translatebi": [427, 447], "translateboxslic": [427, 446], "translateclosedinterv": [427, 430, 448], "translatehalfopeninterv": [427, 432, 449], "translatesizedinterv": [427, 443, 446, 450, 1012, 1378], "translateto": [427, 448, 449, 450, 451, 1306], "transmit": [526, 537, 965, 979], "transpos": [427, 438, 452, 453, 586, 596, 597, 661, 667, 668, 1685, 1776, 1778, 1786, 1799, 1800, 1831, 1832, 1833, 1866, 1951, 1952, 1980, 1983, 1984, 2016, 2019, 2024, 2064, 2115], "transposeoutput": [661, 669, 670], "travers": 1697, "treat": [258, 266, 430, 432, 434, 443, 445, 447, 862, 864, 869, 872, 1060, 1188, 1238, 1692, 1789, 1912, 2162, 2164], "treatment": [1484, 1535, 1692], "tree": [1702, 2147, 2150], "tri": [627, 628, 630, 633, 859, 1063], "trigger": 23, "trip": 1688, "trivial": 692, "true": [8, 21, 26, 29, 30, 37, 38, 39, 76, 88, 99, 100, 102, 104, 110, 131, 134, 137, 138, 139, 142, 174, 185, 196, 197, 205, 207, 209, 211, 213, 253, 258, 260, 263, 266, 283, 286, 299, 300, 302, 305, 306, 340, 347, 356, 357, 358, 359, 360, 361, 362, 363, 365, 371, 372, 380, 382, 386, 387, 393, 416, 422, 424, 427, 437, 454, 490, 526, 527, 563, 571, 572, 583, 585, 586, 614, 627, 637, 638, 639, 661, 683, 742, 743, 745, 746, 747, 748, 751, 752, 754, 757, 759, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 790, 792, 793, 794, 796, 798, 799, 811, 824, 826, 828, 829, 833, 834, 836, 838, 862, 863, 869, 871, 883, 930, 936, 961, 965, 970, 971, 973, 976, 978, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1010, 1043, 1051, 1063, 1074, 1075, 1086, 1089, 1094, 1109, 1112, 1121, 1134, 1135, 1136, 1141, 1149, 1154, 1177, 1188, 1192, 1193, 1194, 1205, 1240, 1262, 1266, 1278, 1285, 1286, 1287, 1306, 1455, 1456, 1457, 1482, 1497, 1507, 1508, 1517, 1522, 1523, 1525, 1533, 1550, 1556, 1557, 1566, 1567, 1619, 1622, 1633, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1690, 1695, 1703, 1747, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1762, 1764, 1767, 1769, 1770, 1777, 1780, 1788, 1792, 1813, 1814, 1821, 1844, 1845, 1854, 1874, 1891, 1892, 1899, 1902, 1904, 1906, 1913, 1946, 1948, 1949, 1950, 1969, 2002, 2005, 2017, 2019, 2020, 2022, 2023, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2044, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2070, 2081, 2107, 2114, 2130, 2151, 2152, 2154, 2162, 2163], "trunc": [110, 1663], "truncat": [1690, 2162], "trust": 1686, "tryconverttoarrai": [1306, 1342], "tsgrpc_kvstore": [1686, 1693], "tupl": [39, 744, 798, 799, 1706, 1707, 1711, 1712, 1717, 1718, 1725, 1726, 1727, 1728, 1799, 1811, 1813, 1814, 1815, 1816, 1817, 1820, 1823, 1825, 1832, 1834, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1852, 1857, 1860, 1946, 1947, 1951, 1958, 1964, 1972, 1974, 1981, 1983, 1996, 2006, 2009, 2017, 2019, 2038, 2049, 2056, 2080, 2085, 2114, 2151, 2152, 2154, 2161, 2162], "turbo": 1689, "tutori": 1687, "two": [13, 36, 37, 39, 76, 110, 143, 153, 220, 224, 227, 239, 271, 279, 300, 304, 340, 342, 343, 345, 349, 350, 365, 387, 406, 409, 427, 459, 462, 465, 471, 511, 563, 574, 575, 586, 605, 607, 615, 627, 645, 649, 658, 661, 684, 732, 734, 735, 736, 811, 813, 830, 862, 866, 869, 873, 875, 876, 877, 878, 892, 915, 922, 996, 1007, 1021, 1023, 1028, 1056, 1060, 1063, 1082, 1083, 1092, 1093, 1104, 1121, 1138, 1139, 1140, 1143, 1188, 1200, 1268, 1273, 1294, 1297, 1301, 1345, 1353, 1379, 1394, 1397, 1451, 1452, 1517, 1526, 1583, 1584, 1585, 1586, 1587, 1590, 1591, 1592, 1593, 1680, 1685, 1688, 1702, 1706, 1707, 1708, 1721, 1894, 1895, 2069, 2070, 2080, 2081, 2097, 2140, 2141, 2142, 2143, 2144, 2162, 2164, 2165], "txn": [1869, 1916, 2032, 2069, 2070], "type": [0, 9, 16, 17, 18, 19, 20, 33, 36, 38, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 66, 68, 75, 76, 89, 108, 110, 111, 115, 141, 148, 150, 162, 163, 164, 167, 173, 176, 178, 184, 187, 188, 197, 206, 207, 208, 211, 212, 228, 232, 233, 244, 245, 246, 247, 248, 249, 250, 259, 260, 262, 265, 266, 283, 306, 315, 318, 353, 359, 363, 370, 379, 390, 391, 399, 400, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 433, 474, 478, 486, 489, 491, 493, 494, 496, 497, 500, 501, 502, 504, 508, 509, 510, 511, 514, 515, 516, 523, 525, 528, 535, 537, 539, 540, 550, 561, 571, 585, 595, 682, 692, 695, 699, 700, 703, 747, 748, 753, 758, 761, 762, 763, 764, 765, 767, 773, 780, 786, 790, 791, 798, 800, 801, 802, 805, 808, 842, 844, 845, 849, 850, 856, 858, 862, 869, 891, 926, 928, 931, 935, 962, 963, 979, 980, 982, 987, 1027, 1035, 1037, 1038, 1039, 1065, 1076, 1080, 1082, 1088, 1091, 1092, 1094, 1095, 1099, 1105, 1106, 1112, 1113, 1114, 1132, 1146, 1151, 1153, 1169, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1203, 1206, 1207, 1237, 1243, 1244, 1245, 1254, 1255, 1262, 1290, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1337, 1338, 1401, 1416, 1417, 1424, 1425, 1426, 1434, 1471, 1472, 1473, 1476, 1481, 1495, 1504, 1538, 1551, 1552, 1564, 1613, 1626, 1629, 1631, 1632, 1638, 1639, 1646, 1652, 1657, 1665, 1670, 1671, 1672, 1679, 1680, 1687, 1696, 1698, 1746, 1788, 1798, 1832, 1868, 1951, 1958, 1966, 1981, 1983, 1998, 2017, 2026, 2027, 2030, 2032, 2033, 2034, 2040, 2041, 2048, 2066, 2069, 2070, 2080, 2107, 2108, 2109, 2110, 2111, 2114, 2119, 2120, 2121, 2126, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2145, 2150, 2151, 2152, 2154, 2155, 2158, 2160, 2161, 2162, 2163, 2164, 2165], "type_identity_t": [8, 482, 661, 695, 990, 991, 992, 993, 1205], "type_index": 417, "type_info": [416, 421], "typenam": [8, 9, 10, 11, 17, 18, 19, 20, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 48, 52, 53, 54, 55, 57, 72, 73, 74, 75, 76, 77, 80, 98, 108, 109, 111, 115, 143, 145, 165, 176, 178, 180, 181, 182, 187, 188, 197, 203, 204, 211, 212, 218, 227, 228, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 254, 306, 328, 348, 353, 358, 359, 363, 370, 371, 397, 398, 399, 400, 415, 417, 427, 429, 430, 432, 433, 434, 435, 436, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 478, 482, 490, 493, 494, 495, 501, 502, 504, 507, 510, 513, 523, 524, 526, 528, 530, 532, 533, 535, 553, 554, 557, 559, 560, 564, 567, 569, 571, 576, 578, 580, 581, 604, 606, 626, 680, 682, 693, 694, 695, 700, 703, 742, 743, 744, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 802, 803, 805, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 869, 880, 881, 890, 891, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 981, 983, 984, 985, 986, 1011, 1012, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1055, 1059, 1063, 1065, 1068, 1070, 1072, 1076, 1079, 1080, 1082, 1083, 1087, 1090, 1094, 1101, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1124, 1126, 1130, 1137, 1153, 1155, 1159, 1181, 1182, 1183, 1184, 1187, 1203, 1204, 1212, 1224, 1225, 1228, 1236, 1237, 1238, 1239, 1240, 1241, 1246, 1248, 1257, 1258, 1262, 1267, 1296, 1306, 1308, 1312, 1314, 1316, 1317, 1319, 1320, 1321, 1329, 1330, 1331, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1374, 1375, 1378, 1416, 1417, 1473, 1476, 1492, 1495, 1504, 1538, 1552, 1612, 1613, 1622, 1649, 1650, 1651, 1652, 1659], "types": 1685, "typic": [416, 526, 672, 695, 966, 967, 1181, 1240, 1679, 1681, 1682, 1684, 1685, 1697, 1699, 1701], "u": [38, 73, 143, 145, 165, 227, 228, 230, 236, 237, 239, 253, 260, 263, 266, 290, 292, 293, 294, 295, 296, 297, 298, 310, 311, 313, 315, 328, 416, 476, 477, 507, 510, 523, 526, 528, 530, 532, 535, 604, 680, 743, 786, 850, 851, 852, 856, 858, 963, 965, 968, 970, 971, 974, 1029, 1030, 1033, 1063, 1065, 1068, 1070, 1072, 1076, 1079, 1080, 1082, 1083, 1087, 1107, 1109, 1258, 1331, 1345, 1352, 1354, 1417, 1492, 1622, 1649, 1652, 1659, 2089, 2090], "u1": 1684, "u2": [1684, 1997, 2008], "u4": [2019, 2028, 2029, 2035, 2047, 2058, 2065], "u8": 1684, "ubyt": 1697, "ucar": 1345, "udunit": 1345, "udunits2": [2080, 2164], "udunits2lib": 1345, "uint": [1121, 1128, 1132, 1146, 1150], "uint16": [425, 1681, 1682, 1684, 1685, 1702, 1703, 1995, 2008, 2070, 2156, 2165], "uint16_t": [8, 1439], "uint32": [416, 420, 1681, 1682, 1684, 1685, 1702, 1780, 1788, 1992, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2037, 2038, 2039, 2040, 2041, 2042, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2110, 2111, 2114, 2152, 2154, 2157, 2161, 2162, 2163, 2165], "uint32_t": [8, 165, 1440], "uint32b": [1697, 1700], "uint32l": 1697, "uint64": [1681, 1682, 1684, 1685, 1696, 1702, 2151, 2158, 2163, 2165], "uint64_t": [8, 1441], "uint64l": 1697, "uint8": [1673, 1674, 1675, 1676, 1677, 1678, 1681, 1682, 1684, 1685, 1697, 1702, 1958, 1959, 1960, 1963, 1966, 1973, 1976, 1981, 1995, 1998, 2159, 2165], "uint8_t": [8, 1442], "uintn_t": [247, 425], "ultim": [966, 1703], "um": 1996, "unambigu": 459, "unari": [110, 123, 130, 699, 711, 720, 731, 857], "unassign": 1683, "unbind": [365, 390, 1154, 1162, 1474, 1476, 1478, 1495, 1533, 1538, 1544, 1617], "unbind_context": [390, 1262, 1617, 1882, 1892, 1913, 2017, 2058], "unbindcontext": [1154, 1162, 1474, 1476, 1478, 1533, 1538, 1544], "unblock": 1690, "unbound": [174, 177, 179, 193, 196, 198, 200, 362, 390, 391, 578, 579, 586, 591, 592, 627, 648, 1154, 1157, 1162, 1262, 1322, 1459, 1474, 1475, 1476, 1478, 1504, 1533, 1536, 1538, 1544, 1688, 1702, 1732, 1736, 1752, 1759, 1765, 1766, 1771, 1772, 1775, 1806, 1839, 1892, 2017, 2139], "unbroadcastarrai": [39, 1106, 1343, 1344], "unbroadcastarraypreserverank": [39, 1344], "unchang": [143, 165, 170, 253, 881, 1156, 1782, 1783, 1784, 1785, 1828, 1829, 1830, 1863, 1864, 1865, 1892, 1910, 1977, 1978, 1979, 2013, 2014, 2015, 2017, 2061, 2062, 2063, 2162], "uncheck": [8, 39, 46, 174, 175, 182, 196, 203, 250, 353, 490, 495, 586, 594, 661, 665, 1181, 1182, 1184, 1187, 1205, 1217, 1240, 1248, 1306, 1320, 1321, 1664, 1665], "unchecked_result": [1184, 1187], "unchecked_t": [8, 39, 46, 174, 175, 182, 196, 203, 490, 495, 586, 594, 661, 665, 1205, 1217, 1240, 1248, 1306, 1320, 1321, 1664, 1665], "uncheckedclos": [627, 628, 634], "uncheckedhalfopen": [627, 630, 635], "uncheckeds": [627, 633, 636, 649, 650], "unchunk": 1682, "uncommit": [1188, 1192, 1202, 1242, 1485, 2051, 2069, 2070], "uncompress": [1682, 1697], "uncondit": [1268, 1271, 1276, 1690, 1697], "uncondition": [1787, 1867, 1982, 2018, 2065, 2066, 2162], "unconstrain": [8, 283, 285, 894, 902, 1103, 1361, 1964, 2151], "under": [1294, 1671, 1679, 1684, 1690, 1697, 1702, 1908, 1950, 2162], "underli": [365, 387, 490, 497, 501, 891, 930, 943, 1060, 1113, 1154, 1163, 1171, 1240, 1249, 1366, 1369, 1379, 1482, 1489, 1533, 1545, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1684, 1685, 1687, 1688, 1693, 1694, 1696, 1697, 1700, 1701, 1703, 1832, 1869, 1882, 1888, 1905, 1983, 1992, 2000, 2017, 2019, 2035, 2042, 2069, 2070, 2097, 2151, 2164], "unequ": [511, 2162], "unexpect": 1698, "unicod": [8, 1443, 1702, 2160, 2165], "unidata": 1345, "uniform": [1672, 1687, 2164], "uniniti": [16, 227, 229, 489, 1205, 1214], "union": [8, 416, 425, 480, 762, 892, 1028, 1056, 1060, 1063, 1121, 1139, 1294, 1587, 1588, 1589, 1590, 1591, 1592, 1593], "uniqu": [427, 453, 609, 740, 887, 1089, 1685, 1688, 1697, 1747, 2161], "unit": [8, 476, 477, 876, 1089, 1091, 1103, 1154, 1167, 1205, 1240, 1252, 1304, 1305, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1421, 1702, 1951, 1958, 1964, 1981, 1983, 1996, 2017, 2019, 2038, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2114, 2151, 2152, 2154, 2161], "unitless": 1685, "universal2": 1689, "unix": [1679, 1691, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1794, 1797, 1894, 1898, 1908, 1912, 1950], "unknown": [391, 758, 892, 894, 914, 995, 1009, 1103, 1154, 1169, 1172, 1174, 1188, 1194, 1198, 1255, 1417, 1445, 1507, 1509, 1510, 1556, 1558, 1565, 1569, 1688, 1958, 1964, 1981, 2017, 2037, 2038, 2041, 2114, 2151, 2152, 2154, 2161, 2164], "unknownerror": 1072, "unlabel": [13, 615, 617, 618, 1681, 1685, 1688, 1752, 1774, 1806, 1839, 2164], "unless": [531, 892, 1069, 1078, 1120, 1682, 1691, 1696, 1697, 1698, 2080, 2162, 2164], "unlik": [39, 264, 428, 765, 1063, 1225, 1344, 1374, 1679, 1681, 1682, 1684, 1685, 1692, 1777, 1788, 1790, 2162], "unmatch": [8, 12, 13, 1688], "unmodifi": [1154, 1157, 1162, 1474, 1475, 1476, 1478, 1504, 1533, 1536, 1538, 1544, 1697, 2161], "unnecessari": 108, "unown": [8, 39, 108, 131, 134, 174, 196, 490, 586, 599, 625, 661, 671, 691, 943, 951, 1112, 1113, 1114, 1205, 1220, 1235, 1236, 1306, 1339, 1341, 1622], "unownedtoshar": [39, 490, 1306, 1357, 1358, 1359, 1360], "unpickl": 2161, "unqualifi": [39, 89, 165, 247, 249, 416, 758, 1240, 1622, 1657], "unreferenc": 1697, "unregist": [526, 527, 540, 542, 543, 544, 966, 967, 1788, 1796], "unregisternonblock": [540, 542, 543], "unresolv": [365, 371, 1262], "unsaf": [427, 454, 1698], "unsafemarkboundsimplicit": [427, 454], "unset": [1682, 1686, 1698], "unshar": [2114, 2151, 2152, 2154, 2161], "unshard": 2164, "unsign": [8, 143, 165, 247, 811, 1121, 1128, 1132, 1150, 1434, 1685, 1702, 2156, 2157, 2158, 2159, 2165], "unspecifi": [12, 17, 253, 269, 300, 301, 325, 326, 331, 390, 416, 422, 786, 795, 876, 892, 995, 1005, 1028, 1040, 1044, 1089, 1108, 1113, 1154, 1171, 1188, 1190, 1194, 1197, 1198, 1210, 1214, 1255, 1268, 1269, 1271, 1294, 1304, 1305, 1517, 1519, 1520, 1551, 1554, 1672, 1679, 1681, 1682, 1684, 1685, 1688, 1697, 1707, 1716, 1722, 1732, 1734, 1736, 1877, 1878, 1880, 1897, 1908, 1909, 1912, 1951, 1965, 1966, 1973, 1983, 1998, 2007, 2012, 2017, 2058, 2151, 2161, 2162, 2164], "unspecified_ord": [8, 833, 1361, 1666], "unspecifiedlayoutord": [8, 1297, 1298, 1361, 1666], "unsuccessfulli": [1055, 1791, 1797, 1946, 1948], "until": [8, 21, 26, 28, 131, 398, 526, 540, 542, 543, 903, 1012, 1152, 1278, 1279, 1281, 1282, 1294, 1378, 1379, 1703, 1788, 1794, 1797, 1900, 1901, 1903, 1907, 1908, 1912, 1917, 2051, 2054, 2069, 2070, 2079, 2097, 2151, 2161, 2162], "untransform": 1055, "untypedexecutewhenreadi": [21, 25], "unus": [1673, 1675, 1676, 1678], "unverifi": 2151, "unwrap": [1379, 1383], "unwrapfuturetyp": [526, 856, 858, 1362], "unwrapqualifiedresulttyp": [859, 1063, 1363], "unwrapresult": [859, 1063, 1364], "unwrapresulttyp": [398, 415, 523, 1011, 1012, 1055, 1059, 1063, 1240, 1365, 1378], "up": [21, 27, 458, 459, 697, 795, 841, 842, 848, 849, 1445, 1682, 1689, 1690, 1691, 2164], "updat": [253, 310, 311, 313, 314, 672, 693, 694, 695, 1188, 1280, 1565, 1682, 1690, 1697, 1702, 1706, 1707, 1720, 1734, 1882, 1884, 1892, 1951, 1953, 1961, 1962, 1963, 1964, 1965, 1967, 1973, 1981, 1983, 1985, 1991, 1992, 1995, 2005, 2017, 2019, 2053, 2054, 2058, 2130, 2151], "upgrad": 1689, "upon": [372, 836, 838, 967, 994, 1100, 1788, 1790, 2162], "upper": [8, 37, 98, 348, 351, 362, 427, 428, 430, 431, 432, 434, 437, 443, 454, 479, 518, 519, 520, 545, 547, 574, 575, 576, 578, 579, 580, 581, 586, 601, 627, 628, 630, 634, 635, 641, 643, 647, 649, 652, 654, 661, 672, 673, 734, 735, 736, 739, 740, 811, 819, 825, 877, 878, 894, 910, 915, 918, 920, 923, 990, 991, 1459, 1681, 1684, 1685, 1688, 1752, 1756, 1757, 1758, 1759, 1765, 1770, 1771, 1776, 1778, 1780, 1799, 1806, 1811, 1814, 1815, 1817, 1821, 1832, 1839, 1845, 1846, 1847, 1854, 1870, 1872, 1875, 1951, 1969, 1983, 2002, 2019, 2044, 2115, 2162], "upto": [1121, 1133], "uri": 1698, "url": [1482, 1488, 1504, 1533, 1537, 1543, 1687, 1689, 1690, 1691, 1692, 1693, 1695, 1698, 1869, 1882, 1885, 1893, 1910, 1915, 2129], "url_hash": 1689, "us": [0, 4, 8, 13, 16, 17, 18, 19, 20, 33, 34, 35, 39, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 68, 79, 80, 89, 108, 110, 131, 140, 141, 143, 148, 149, 162, 163, 164, 165, 167, 173, 174, 184, 196, 206, 207, 208, 227, 232, 233, 244, 245, 246, 247, 250, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 272, 273, 275, 290, 292, 293, 295, 308, 309, 318, 319, 320, 340, 344, 348, 351, 354, 365, 370, 371, 372, 378, 385, 389, 390, 406, 413, 416, 427, 428, 430, 432, 433, 434, 435, 441, 443, 444, 445, 447, 451, 454, 458, 459, 473, 475, 476, 477, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 523, 524, 526, 527, 537, 539, 540, 542, 574, 585, 586, 595, 615, 620, 625, 661, 672, 681, 691, 693, 694, 695, 697, 734, 743, 778, 780, 790, 832, 836, 837, 838, 839, 842, 843, 846, 849, 850, 854, 855, 856, 857, 858, 860, 879, 883, 890, 891, 892, 894, 906, 915, 924, 926, 927, 928, 929, 930, 935, 939, 942, 943, 951, 954, 962, 963, 965, 966, 967, 970, 975, 979, 980, 981, 982, 983, 984, 986, 987, 991, 1021, 1026, 1028, 1029, 1035, 1037, 1038, 1039, 1040, 1049, 1051, 1053, 1056, 1063, 1071, 1073, 1084, 1088, 1089, 1113, 1114, 1115, 1116, 1117, 1121, 1122, 1123, 1129, 1132, 1146, 1151, 1152, 1153, 1154, 1157, 1158, 1162, 1171, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1203, 1205, 1206, 1207, 1208, 1235, 1239, 1240, 1242, 1243, 1244, 1245, 1250, 1256, 1262, 1267, 1280, 1282, 1287, 1290, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1337, 1338, 1339, 1340, 1341, 1345, 1349, 1357, 1358, 1359, 1360, 1362, 1363, 1365, 1379, 1394, 1400, 1416, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1445, 1459, 1474, 1475, 1476, 1478, 1481, 1482, 1485, 1495, 1496, 1504, 1507, 1509, 1512, 1513, 1516, 1519, 1533, 1536, 1538, 1544, 1559, 1560, 1563, 1564, 1578, 1613, 1618, 1622, 1626, 1627, 1628, 1629, 1631, 1632, 1638, 1639, 1643, 1645, 1646, 1657, 1664, 1665, 1670, 1672, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1695, 1696, 1697, 1698, 1699, 1700, 1702, 1703, 1706, 1724, 1746, 1747, 1752, 1776, 1777, 1782, 1783, 1784, 1785, 1788, 1789, 1790, 1795, 1798, 1799, 1802, 1805, 1817, 1828, 1829, 1830, 1832, 1863, 1864, 1865, 1869, 1883, 1892, 1899, 1908, 1910, 1912, 1913, 1916, 1918, 1946, 1951, 1954, 1955, 1956, 1957, 1971, 1977, 1978, 1979, 1982, 1983, 1986, 1987, 1988, 1989, 2000, 2004, 2005, 2013, 2014, 2015, 2017, 2018, 2019, 2020, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2037, 2042, 2047, 2048, 2051, 2053, 2054, 2055, 2058, 2060, 2061, 2062, 2063, 2065, 2066, 2067, 2069, 2070, 2075, 2079, 2080, 2086, 2092, 2095, 2097, 2107, 2114, 2115, 2145, 2146, 2150, 2152, 2154, 2155, 2160, 2161, 2162, 2163, 2164], "usabl": [8, 1063], "usag": [108, 174, 253, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 290, 291, 307, 308, 309, 310, 311, 313, 315, 318, 319, 320, 327, 329, 330, 365, 526, 569, 891, 1049, 1053, 1113, 1114, 1205, 1690, 1703, 2070], "use_conditional_writ": 1698, "user": [108, 264, 1205, 1685, 1690, 1698], "userguid": 1698, "usezlib": [1681, 2164], "ustr": [1702, 2160, 2165], "ustring_t": [8, 1443], "usual": [1194, 1203, 1872, 1876, 2162], "utf": [8, 1366, 1368, 1369, 1421, 1443, 2165], "utf8": [1366, 1369], "utf8_str": [1366, 1367, 1368, 1369], "utf8str": [8, 1366, 1367, 1368, 1369, 1443], "util": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 251, 475, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 564, 565, 567, 568, 572, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 743, 751, 752, 753, 754, 759, 760, 761, 763, 764, 765, 770, 771, 772, 774, 777, 784, 785, 787, 788, 800, 833, 834, 835, 836, 837, 838, 839, 850, 851, 852, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1054, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1109, 1112, 1115, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1203, 1204, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1373, 1374, 1375, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414, 1444, 1446, 1447, 1448, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1572, 1573, 1574, 1575, 1577, 1612, 1614, 1615, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1663, 1666, 1689], "uuid": [1697, 2150], "v": [110, 113, 114, 115, 435, 526, 533, 699, 702, 703, 1063, 1070, 1079, 1121, 1142, 1144, 1319], "v1": [13, 1188, 1688, 2151, 2163], "v2": [13, 1188, 1684, 1685, 1688], "v3": [1685, 1688, 1693, 1700], "v4": 1688, "valid": [0, 8, 12, 13, 39, 43, 45, 88, 98, 100, 102, 103, 104, 220, 221, 248, 253, 269, 300, 305, 340, 347, 350, 351, 365, 371, 373, 382, 393, 398, 416, 422, 424, 438, 445, 447, 451, 453, 467, 473, 478, 484, 518, 519, 564, 585, 586, 596, 597, 600, 601, 602, 603, 608, 609, 610, 612, 614, 627, 629, 637, 638, 639, 661, 665, 666, 668, 670, 672, 673, 675, 676, 677, 678, 683, 686, 687, 688, 697, 765, 779, 780, 794, 795, 796, 797, 860, 862, 867, 869, 874, 885, 892, 894, 905, 909, 930, 943, 952, 972, 990, 995, 1010, 1012, 1051, 1074, 1118, 1120, 1154, 1155, 1156, 1158, 1177, 1181, 1188, 1191, 1195, 1205, 1210, 1225, 1228, 1240, 1247, 1250, 1251, 1254, 1259, 1262, 1266, 1311, 1371, 1372, 1378, 1482, 1497, 1509, 1512, 1516, 1533, 1550, 1559, 1563, 1622, 1653, 1679, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1692, 1697, 1698, 1722, 1734, 1777, 1782, 1831, 1866, 1894, 1898, 1908, 1912, 1980, 2016, 2017, 2058, 2064, 2151, 2162, 2164], "validateindexarraybound": [661, 1370], "validaterank": [473, 1371], "validateshapebroadcast": [1205, 1372], "validclos": [627, 628, 634, 637], "validhalfopen": [627, 630, 635, 638], "valids": [627, 633, 636, 639, 650], "valu": [0, 2, 3, 5, 7, 13, 19, 20, 21, 32, 39, 70, 73, 108, 110, 131, 140, 143, 164, 165, 168, 169, 170, 171, 172, 174, 178, 220, 227, 228, 230, 250, 251, 253, 260, 263, 266, 271, 274, 276, 277, 280, 281, 282, 310, 311, 312, 313, 314, 315, 316, 317, 318, 327, 328, 340, 345, 351, 355, 365, 371, 373, 398, 416, 427, 430, 432, 433, 434, 435, 441, 443, 444, 451, 453, 460, 461, 473, 474, 484, 489, 490, 498, 499, 512, 518, 519, 520, 521, 526, 527, 528, 533, 535, 538, 539, 563, 564, 567, 569, 584, 585, 586, 604, 615, 627, 629, 648, 649, 650, 656, 661, 672, 680, 681, 692, 693, 694, 695, 697, 742, 743, 744, 751, 752, 754, 757, 758, 759, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 788, 789, 790, 792, 793, 795, 797, 798, 799, 801, 804, 805, 806, 807, 811, 813, 819, 833, 835, 836, 850, 852, 853, 854, 858, 859, 862, 863, 864, 865, 867, 868, 869, 872, 886, 891, 903, 915, 944, 948, 964, 965, 966, 967, 972, 975, 980, 981, 986, 991, 994, 995, 999, 1005, 1006, 1011, 1012, 1029, 1036, 1039, 1040, 1043, 1055, 1059, 1063, 1065, 1068, 1070, 1072, 1074, 1075, 1076, 1079, 1080, 1081, 1082, 1083, 1086, 1087, 1088, 1089, 1092, 1093, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1112, 1113, 1114, 1118, 1120, 1121, 1125, 1130, 1137, 1151, 1153, 1154, 1170, 1171, 1181, 1182, 1184, 1186, 1187, 1188, 1191, 1193, 1194, 1196, 1198, 1202, 1205, 1208, 1220, 1232, 1238, 1240, 1255, 1256, 1258, 1268, 1276, 1278, 1280, 1296, 1304, 1305, 1306, 1331, 1343, 1364, 1366, 1368, 1370, 1376, 1377, 1378, 1379, 1389, 1402, 1403, 1411, 1419, 1420, 1437, 1445, 1450, 1451, 1452, 1458, 1459, 1460, 1461, 1462, 1464, 1481, 1482, 1492, 1504, 1506, 1507, 1509, 1510, 1512, 1516, 1517, 1518, 1519, 1520, 1521, 1523, 1529, 1530, 1531, 1532, 1556, 1558, 1559, 1563, 1564, 1565, 1569, 1577, 1579, 1663, 1664, 1665, 1670, 1672, 1673, 1678, 1679, 1680, 1686, 1687, 1688, 1702, 1722, 1734, 1745, 1752, 1755, 1765, 1766, 1771, 1772, 1775, 1777, 1780, 1782, 1788, 1798, 1804, 1821, 1854, 1869, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1887, 1888, 1889, 1890, 1892, 1893, 1894, 1897, 1899, 1900, 1901, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1939, 1940, 1945, 1951, 1958, 1964, 1967, 1969, 1981, 1983, 1999, 2000, 2002, 2017, 2019, 2020, 2021, 2038, 2041, 2042, 2044, 2053, 2058, 2069, 2080, 2084, 2114, 2127, 2130, 2145, 2150, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "value_data_prefix": 1697, "value_init": [489, 1667], "value_kind": 1697, "value_length": 1697, "value_or": [1063, 1087], "value_typ": [8, 39, 89, 143, 164, 165, 173, 359, 363, 436, 453, 478, 526, 539, 578, 580, 695, 752, 754, 772, 774, 777, 778, 924, 928, 929, 930, 942, 965, 980, 1063, 1088, 1121, 1151, 1225, 1228, 1622, 1649, 1657], "valueerror": [1705, 1732, 1736, 1760, 1804, 1817, 1831, 1866, 1909, 1954, 1955, 1956, 1957, 1971, 1980, 1982, 1986, 1987, 1988, 1989, 2004, 2016, 2018, 2064], "vari": [1673, 1689], "variabl": [3, 7, 427, 458, 485, 1089, 1188, 1202, 1689, 1691, 1692, 1698, 1702, 2155, 2160], "variad": [4, 433, 478], "variant": [365, 371, 427, 465, 484, 1063, 1373, 1374], "varieti": [8, 1063, 1693], "varint": 1697, "variou": [365, 1297, 1298, 1697], "varlength": 1681, "vector": [39, 43, 63, 64, 75, 80, 81, 84, 99, 174, 181, 196, 197, 199, 202, 211, 253, 325, 326, 359, 363, 392, 427, 430, 432, 433, 434, 435, 436, 441, 443, 444, 445, 447, 451, 474, 476, 477, 560, 563, 580, 582, 586, 600, 601, 602, 605, 610, 612, 661, 672, 673, 681, 778, 779, 780, 798, 799, 848, 849, 869, 871, 884, 885, 888, 890, 991, 1055, 1089, 1116, 1117, 1121, 1128, 1130, 1131, 1205, 1206, 1207, 1210, 1219, 1229, 1233, 1237, 1252, 1306, 1319, 1327, 1332, 1334, 1482, 1499, 1685, 1688, 1776, 1777, 1787, 1799, 1806, 1832, 1834, 1839, 1867, 1951, 1982, 1983, 2018, 2019, 2065, 2066, 2115], "vector_dimens": [427, 435], "vendor": 1689, "venv": 1689, "verbos": [1686, 1702, 2130, 2162], "veri": [1113, 1677, 1682, 1696, 1700, 1802, 1805], "verifi": [1691, 1692], "versa": [425, 740, 876], "version": [1672, 1685, 1686, 1689, 1698, 1894, 1897, 2150, 2151, 2161, 2162], "version_nod": 1697, "version_tree_arity_log2": [1697, 2150], "version_tree_nod": 2150, "version_tree_node_data_prefix": 1697, "versionnod": 2150, "via": [6, 108, 398, 490, 526, 587, 662, 1012, 1063, 1112, 1154, 1173, 1181, 1290, 1304, 1305, 1378, 1533, 1548, 1670, 1672, 1681, 1682, 1684, 1685, 1687, 1689, 1690, 1697, 1727, 1728, 2017, 2058, 2162], "vice": [425, 740, 876], "view": [8, 39, 79, 80, 98, 108, 131, 134, 135, 136, 137, 138, 174, 196, 197, 198, 200, 211, 248, 249, 253, 283, 285, 290, 355, 365, 481, 482, 570, 586, 596, 597, 599, 608, 615, 623, 625, 661, 668, 670, 671, 691, 883, 890, 930, 943, 944, 1114, 1117, 1121, 1122, 1123, 1129, 1154, 1205, 1220, 1235, 1236, 1238, 1240, 1296, 1306, 1341, 1342, 1622, 1653, 1668, 1671, 1672, 1687, 1694, 1799, 1800, 1819, 1821, 1828, 1829, 1830, 1831, 1832, 1833, 1853, 1854, 1863, 1864, 1865, 1866, 1869, 1916, 1935, 1951, 1952, 1968, 1969, 1977, 1978, 1979, 1980, 1983, 1984, 2001, 2002, 2013, 2014, 2015, 2016, 2019, 2024, 2026, 2027, 2028, 2029, 2034, 2043, 2044, 2047, 2061, 2062, 2063, 2064, 2065, 2067, 2110, 2111, 2117, 2118, 2161, 2162, 2163], "vindex": [1776, 1777, 1787, 1832, 1837, 1867, 1951, 1956, 1957, 1971, 1982, 1983, 1988, 1989, 2004, 2018, 2019, 2028, 2029, 2032, 2033, 2047, 2048, 2065, 2066, 2115], "violat": [965, 972, 1908], "virtual": [1671, 1672, 1683, 1687, 1689, 1690, 1832, 2019, 2026, 2027, 2028, 2029, 2047, 2065, 2114, 2117, 2118, 2152, 2154, 2161], "virtual_chunk": [1702, 2092, 2095, 2161], "virtualchunkedreadparamet": [1702, 2092, 2093, 2094, 2161], "virtualchunkedwriteparamet": [1702, 2095, 2096, 2161], "visibl": [1294, 2070], "visual": 1689, "vocabulari": 1113, "void": [8, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 31, 33, 38, 39, 108, 131, 133, 165, 172, 174, 183, 193, 196, 204, 205, 227, 231, 237, 249, 352, 371, 376, 392, 393, 397, 399, 413, 414, 416, 426, 490, 494, 512, 516, 524, 526, 531, 534, 540, 542, 543, 544, 559, 692, 693, 694, 695, 741, 758, 762, 763, 764, 765, 778, 780, 785, 798, 799, 801, 804, 805, 806, 807, 845, 850, 851, 852, 891, 965, 977, 1012, 1026, 1027, 1063, 1064, 1069, 1071, 1076, 1078, 1082, 1083, 1084, 1089, 1092, 1109, 1110, 1111, 1113, 1114, 1154, 1161, 1162, 1170, 1181, 1184, 1203, 1205, 1232, 1239, 1240, 1267, 1277, 1278, 1279, 1280, 1282, 1288, 1345, 1346, 1365, 1373, 1374, 1379, 1380, 1381, 1385, 1386, 1387, 1389, 1400, 1401, 1416, 1417, 1469, 1474, 1477, 1478, 1480, 1482, 1483, 1484, 1533, 1534, 1535, 1542, 1544, 1613, 1650, 1659], "volatil": [1063, 1363, 1416, 1417, 1622], "volum": [1673, 1674, 1675, 1676, 1677, 1678, 1682, 1696], "voxel": [1682, 1685, 2164], "voxel_offset": [1682, 2151, 2163], "vv": 1689, "w": [13, 1688, 2045], "wa": [427, 465, 469, 470, 971, 1051, 1282, 1288, 1294, 1512, 1516, 1517, 1519, 1522, 1525, 1530, 1559, 1563, 1679, 1681, 1682, 1684, 1685, 1686, 1697, 1740, 1751, 1794, 1797, 1908, 1910, 1912, 1950, 1961, 2020, 2075, 2114, 2151, 2152, 2154, 2161, 2163], "wai": [0, 43, 45, 427, 490, 681, 811, 813, 814, 990, 991, 1357, 1358, 1360, 1681, 1682, 1684, 1685, 1687, 1689, 1697, 2161, 2164], "wait": [21, 26, 27, 28, 32, 526, 536, 565, 566, 1279, 1282, 1379, 1698, 1788, 2069, 2161, 2163], "waitallfutur": [526, 1373, 1374], "waitfor": [21, 27], "waituntil": [21, 28], "want": 264, "warn": [21, 24, 526, 534, 1063, 1064], "we": 4, "weak": 540, "weak_ord": [811, 813, 814], "web": 1692, "webp": [1679, 2165], "well": [108, 253, 459, 484, 778, 1154, 1168, 1682, 1683, 1684, 1689, 1777, 2108, 2151], "were": [426, 427, 970, 1517, 1522, 2020, 2162], "wg21": 1063, "what": [1679, 1702, 1950], "wheel": 1689, "when": [0, 3, 5, 6, 8, 21, 25, 32, 90, 96, 108, 133, 174, 237, 253, 365, 370, 416, 425, 427, 430, 432, 433, 434, 435, 441, 443, 458, 459, 489, 490, 526, 527, 571, 584, 736, 743, 798, 799, 836, 838, 845, 856, 857, 858, 891, 892, 915, 965, 966, 967, 990, 991, 1011, 1012, 1063, 1089, 1101, 1103, 1104, 1109, 1113, 1114, 1154, 1183, 1278, 1280, 1282, 1288, 1342, 1379, 1385, 1386, 1459, 1469, 1470, 1505, 1506, 1519, 1533, 1555, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1683, 1686, 1688, 1689, 1690, 1692, 1696, 1697, 1698, 1700, 1702, 1703, 1777, 1780, 1789, 1790, 1795, 1907, 1908, 1912, 1918, 1919, 1920, 1964, 2017, 2020, 2030, 2031, 2032, 2033, 2048, 2051, 2058, 2066, 2069, 2071, 2078, 2097, 2130, 2161, 2162, 2164, 2165], "where": [0, 8, 14, 19, 39, 260, 270, 428, 429, 430, 431, 432, 433, 434, 435, 438, 441, 443, 444, 445, 446, 447, 451, 452, 453, 459, 463, 490, 523, 526, 532, 542, 547, 597, 605, 627, 647, 668, 670, 743, 761, 764, 765, 785, 799, 856, 858, 915, 1063, 1106, 1114, 1306, 1339, 1340, 1341, 1417, 1672, 1682, 1685, 1686, 1688, 1690, 1691, 1694, 1697, 1698, 1700, 1702, 1777, 1780, 1781, 1787, 1798, 1801, 1817, 1821, 1835, 1837, 1839, 1841, 1854, 1856, 1867, 1958, 1969, 1981, 2002, 2017, 2020, 2044, 2150, 2151, 2161, 2162, 2164, 2165], "wherebi": 2162, "whether": [8, 38, 39, 70, 99, 100, 102, 196, 244, 245, 246, 300, 303, 355, 398, 416, 490, 584, 586, 599, 600, 601, 661, 671, 672, 673, 744, 758, 763, 778, 781, 791, 798, 799, 860, 862, 864, 882, 891, 1012, 1028, 1054, 1113, 1181, 1184, 1187, 1188, 1199, 1205, 1220, 1236, 1240, 1262, 1282, 1287, 1294, 1297, 1311, 1342, 1378, 1745, 1756, 1757, 1758, 1759, 1777, 1788, 1792, 1793, 1799, 1806, 1813, 1814, 1832, 1839, 1844, 1845, 2017, 2020, 2022, 2023, 2058, 2059, 2070, 2073, 2074, 2076, 2079, 2107, 2127, 2162], "which": [0, 8, 13, 39, 98, 100, 103, 108, 165, 174, 218, 219, 227, 251, 253, 260, 318, 349, 353, 354, 365, 370, 427, 428, 430, 432, 433, 434, 435, 442, 443, 444, 445, 447, 451, 453, 455, 456, 481, 482, 483, 489, 512, 518, 519, 520, 526, 540, 547, 548, 557, 558, 559, 560, 563, 569, 571, 575, 586, 605, 609, 627, 661, 681, 735, 740, 757, 778, 798, 799, 811, 820, 836, 837, 839, 842, 849, 854, 856, 858, 862, 869, 872, 877, 887, 891, 943, 944, 950, 960, 965, 972, 991, 1029, 1032, 1042, 1051, 1055, 1063, 1113, 1114, 1152, 1154, 1164, 1172, 1175, 1188, 1205, 1238, 1240, 1250, 1268, 1282, 1296, 1357, 1358, 1359, 1360, 1379, 1416, 1417, 1445, 1468, 1469, 1472, 1473, 1476, 1499, 1504, 1506, 1538, 1551, 1552, 1565, 1659, 1671, 1672, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1695, 1696, 1697, 1698, 1699, 1732, 1736, 1740, 1748, 1749, 1750, 1751, 1752, 1782, 1783, 1784, 1785, 1789, 1799, 1828, 1829, 1830, 1831, 1832, 1863, 1864, 1865, 1866, 1894, 1898, 1912, 1950, 1961, 1977, 1978, 1979, 1980, 1983, 2005, 2013, 2014, 2015, 2016, 2017, 2020, 2029, 2058, 2061, 2062, 2063, 2064, 2069, 2075, 2080, 2089, 2097, 2107, 2114, 2115, 2150, 2151, 2154, 2161, 2162, 2163, 2164], "while": [143, 165, 174, 253, 318, 365, 393, 398, 526, 563, 836, 838, 1012, 1193, 1205, 1236, 1294, 1378, 1672, 1673, 1681, 1682, 1684, 1685, 1688, 1690, 1692, 1697, 1703, 1722, 1727, 1734, 1788, 1900, 1903, 2025, 2080, 2155, 2160, 2161, 2162, 2163, 2164], "whitespac": [1349, 2086, 2164], "whose": 416, "why": [8, 1063], "wide": [8, 1063, 1690], "width": [8, 1421, 1673, 1674, 1675, 1676, 1677, 1678], "wiki": 110, "wikipedia": 110, "window": [247, 1686, 1689, 1690], "wireshark": 1686, "wise": [798, 799, 1671, 1681, 1684, 1685, 1702, 2161], "wish": 2161, "with_transact": [1869, 1910, 1916, 2019, 2032, 2067, 2069, 2070, 2114, 2151, 2152, 2154, 2161], "withexecutor": [512, 1375], "withimplicitdimens": [586, 661, 1376, 1377], "within": [0, 3, 7, 8, 100, 104, 143, 174, 220, 253, 300, 318, 351, 359, 360, 363, 365, 371, 373, 391, 518, 519, 520, 542, 545, 569, 585, 587, 605, 627, 662, 666, 769, 794, 798, 836, 909, 990, 991, 994, 1121, 1188, 1192, 1202, 1240, 1482, 1494, 1533, 1549, 1672, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1691, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1706, 1722, 1727, 1734, 1794, 1797, 1869, 1882, 1890, 1909, 1911, 1912, 2019, 2020, 2023, 2051, 2150, 2152, 2161, 2162, 2164], "without": [8, 18, 74, 178, 180, 359, 363, 365, 425, 427, 451, 478, 695, 697, 751, 752, 754, 772, 774, 778, 845, 965, 970, 972, 1040, 1051, 1154, 1188, 1192, 1294, 1342, 1512, 1516, 1559, 1563, 1681, 1686, 1688, 1691, 1692, 1698, 1776, 1783, 1784, 1785, 1883, 1899, 1900, 1901, 1903, 1908, 1910, 1912, 1917, 2069, 2070, 2114, 2115, 2151, 2152, 2154, 2161, 2162, 2163, 2164, 2165], "won": [1279, 1282, 1690, 1780, 1892, 1910, 2017], "word": 1080, "work": [23, 526, 966, 967, 1691, 1692, 1699], "workspac": 1689, "worst": [1681, 1682], "would": [98, 249, 270, 484, 545, 965, 972, 991, 994, 1056, 1118, 1120, 1304, 1697, 1698, 1779, 1780, 1817, 1819, 1821, 1853, 1854, 1968, 1969, 2001, 2002, 2043, 2044, 2053], "wrap": [7, 227, 229, 251, 398, 569, 626, 859, 1011, 1012, 1059, 1063, 1205, 1378, 1790], "wrapper": [8, 227, 1063, 1089, 1366], "writabl": [2019, 2068, 2107], "write": [8, 13, 246, 249, 253, 258, 259, 261, 262, 264, 265, 269, 270, 271, 283, 315, 318, 319, 320, 336, 337, 338, 339, 340, 346, 398, 627, 647, 891, 892, 1028, 1152, 1205, 1227, 1240, 1250, 1260, 1263, 1267, 1278, 1280, 1294, 1378, 1379, 1385, 1390, 1394, 1400, 1468, 1469, 1482, 1565, 1566, 1569, 1570, 1571, 1671, 1679, 1680, 1681, 1683, 1684, 1687, 1688, 1691, 1693, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1706, 1707, 1722, 1734, 1735, 1736, 1788, 1869, 1900, 1903, 1907, 1908, 1910, 1912, 1916, 1917, 2017, 2019, 2029, 2030, 2031, 2032, 2033, 2034, 2045, 2048, 2051, 2053, 2058, 2059, 2060, 2066, 2067, 2068, 2069, 2070, 2071, 2095, 2097, 2107, 2111, 2114, 2152, 2154, 2161, 2162, 2164], "write_chunk": [253, 336, 1681, 1682, 1684, 1685, 1706, 1722, 1733, 1734, 1735, 1736, 2008, 2036, 2055, 2164], "write_chunk_aspect_ratio": [253, 337, 1722, 1734], "write_chunk_aspect_ratio_soft_constraint": [1722, 1734], "write_chunk_el": [253, 338, 1682, 1685, 1722, 1734], "write_chunk_elements_soft_constraint": [1722, 1734], "write_chunk_shap": [253, 339, 1682, 1685, 1703, 1722, 1734, 1736], "write_chunk_shape_soft_constraint": [1722, 1733, 1734], "write_chunk_templ": [1706, 1732, 1736], "write_context": 2161, "write_funct": 2161, "write_futur": 2163, "write_r": [1691, 1698], "writeback": [1379, 1380, 1687, 2069, 2095, 2096], "writechunk": [253, 257, 315, 336], "writechunkaspectratio": [253, 258, 337], "writechunkel": [253, 319, 338], "writechunkshap": [253, 320, 339], "writecommit": [1468, 1482, 1565], "writefutur": [8, 398, 566, 1240, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1702, 1788, 2019, 2069, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106], "writegenerationcondit": [1565, 1566, 1567, 1568, 1569, 1570, 1571], "writeopt": [1240, 1378, 1390, 1391, 1392, 1393, 1468, 1482, 1565, 1570, 1571], "writeprogress": [1378, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401], "writeprogressfunct": [1378, 1390, 1392, 1394, 1400, 1401], "writer": [892, 1679, 1681, 1682, 1684, 1685, 1697, 2017, 2058, 2151], "written": [398, 1012, 1188, 1378, 1394, 1399, 1679, 1681, 1682, 1684, 1685, 1689, 1697, 1702, 1958, 1981, 2017, 2019, 2020, 2041, 2069, 2151, 2161, 2163], "www": [1063, 1345], "x": [2, 3, 5, 8, 9, 10, 11, 13, 39, 73, 110, 111, 143, 155, 156, 165, 172, 247, 251, 328, 416, 417, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 465, 472, 478, 484, 485, 490, 526, 528, 535, 547, 564, 605, 609, 627, 647, 649, 659, 681, 699, 700, 740, 791, 801, 811, 852, 853, 854, 915, 923, 965, 968, 974, 1080, 1107, 1153, 1205, 1258, 1268, 1274, 1306, 1331, 1345, 1352, 1354, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414, 1446, 1447, 1448, 1450, 1453, 1455, 1456, 1457, 1492, 1517, 1527, 1572, 1573, 1574, 1575, 1594, 1597, 1614, 1615, 1618, 1619, 1620, 1621, 1622, 1658, 1660, 1661, 1663, 1673, 1674, 1675, 1676, 1677, 1678, 1681, 1682, 1684, 1685, 1688, 1689, 1752, 1756, 1757, 1758, 1759, 1762, 1763, 1768, 1773, 1774, 1777, 1778, 1779, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1789, 1800, 1801, 1802, 1803, 1804, 1808, 1812, 1818, 1820, 1835, 1836, 1838, 1841, 1843, 1849, 1851, 1855, 1859, 1862, 1874, 1908, 1910, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1986, 1987, 2012, 2026, 2027, 2030, 2031, 2039, 2114, 2116, 2151, 2162, 2163], "x0": [8, 1153], "x86_64": 1689, "x_ref": 1205, "xcode": 1689, "xi": [433, 441], "xor": [699, 708, 709], "xre": 1682, "xxx": 857, "xxxxx": 1692, "xxxxxxxxxxxxxxxx": 1697, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": 1697, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": 1689, "xyz": 1682, "xz": [1681, 1689], "y": [13, 73, 110, 328, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 605, 609, 699, 740, 1080, 1107, 1258, 1306, 1331, 1453, 1492, 1614, 1615, 1673, 1674, 1675, 1676, 1677, 1678, 1681, 1682, 1684, 1685, 1688, 1777, 1778, 1779, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1800, 1801, 1802, 1803, 1804, 1807, 1808, 1812, 1818, 1820, 1835, 1836, 1841, 1843, 1849, 1851, 1855, 1859, 1862, 1874, 1908, 1910, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1986, 1987, 2012, 2026, 2027, 2030, 2031, 2039, 2114, 2151, 2162, 2163], "y1": 251, "y2": 251, "yet": [131, 134, 137, 139, 2019, 2041, 2051], "yield": [798, 799], "you": [1679, 1681, 1682, 1684, 1685, 1686, 1689, 1691, 1692, 1698, 1747, 2017, 2058, 2069, 2114, 2151, 2152, 2154, 2161, 2163], "your": 1689, "yre": 1682, "yuv": [1673, 1678], "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi": 1689, "z": [13, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 605, 609, 1681, 1682, 1685, 1688, 1777, 1779, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1800, 1801, 1802, 1803, 1804, 1808, 1820, 1835, 1841, 1843, 1849, 1851, 1855, 1859, 1862, 1954, 1955, 1956, 1957, 1965, 1971, 1982, 1986, 1987, 2026, 2027, 2030, 2031, 2151, 2162, 2163], "zarr": [891, 1671, 1672, 1679, 1685, 1687, 1693, 1698, 1700, 1780, 1788, 1962, 1986, 1987, 1988, 1989, 1992, 1993, 1994, 1997, 1999, 2004, 2005, 2008, 2018, 2019, 2025, 2028, 2029, 2032, 2033, 2035, 2036, 2037, 2040, 2041, 2047, 2048, 2051, 2053, 2055, 2058, 2059, 2065, 2066, 2069, 2110, 2151, 2162, 2164], "zarr3": [1679, 1700, 1703, 2164], "zarr3_sharding_index": 1693, "zarr_format": [1684, 1685, 2019, 2028, 2029, 2035, 2047, 2058, 2065, 2151], "zarrai": [1684, 2151], "zero": [33, 39, 43, 64, 98, 99, 110, 112, 196, 202, 416, 430, 431, 432, 435, 443, 511, 518, 519, 520, 692, 697, 699, 701, 847, 869, 870, 874, 894, 906, 1011, 1089, 1097, 1121, 1131, 1205, 1343, 1344, 1669, 1679, 1681, 1682, 1684, 1685, 1688, 1696, 1700, 1752, 1764, 1777, 1778, 1806, 1839, 1958, 1981, 2017, 2058, 2114, 2127, 2151, 2152, 2154, 2161, 2162, 2164], "zero_origin": [39, 98, 99, 108, 218, 847, 1113, 1114, 1205, 1235, 1296, 1669], "zi": [433, 441], "zip": [1686, 1693], "zip_detail": 1686, "zlib": [1681, 1682, 1684, 1685, 1689], "zre": 1682, "zstandard": 1697, "zstd": [1681, 1684, 1685, 1689, 2150]}, "titles": ["Context framework", "TENSORSTORE_ASSERT_OK", "TENSORSTORE_ASSERT_OK_AND_ASSIGN", "TENSORSTORE_ASSIGN_OR_RETURN", "TENSORSTORE_CHECK_OK", "TENSORSTORE_CHECK_OK_AND_ASSIGN", "TENSORSTORE_EXPECT_OK", "TENSORSTORE_RETURN_IF_ERROR", "API reference", "tensorstore::AddByteOffset[element_pointer]", "tensorstore::AddByteOffset[raw]", "tensorstore::AddByteOffset[shared_ptr]", "tensorstore::AlignDimensionsTo", "tensorstore::AlignDomainTo", "tensorstore::AlignTransformTo", "tensorstore::AllDims", "tensorstore::AllocateAndConstruct", "tensorstore::AllocateAndConstructShared", "tensorstore::AllocateArray", "tensorstore::AllocateArrayElementsLike", "tensorstore::AllocateArrayLike", "tensorstore::AnyFuture", "tensorstore::AnyFuture::AnyFuture", "tensorstore::AnyFuture::Force", "tensorstore::AnyFuture::IgnoreFuture", "tensorstore::AnyFuture::UntypedExecuteWhenReady", "tensorstore::AnyFuture::Wait", "tensorstore::AnyFuture::WaitFor", "tensorstore::AnyFuture::WaitUntil", "tensorstore::AnyFuture::null", "tensorstore::AnyFuture::ready", "tensorstore::AnyFuture::reset", "tensorstore::AnyFuture::status", "tensorstore::AppendToString", "tensorstore::ApplyIndexTransform[Array]", "tensorstore::ApplyIndexTransform[TransformedArray]", "tensorstore::AreArraysEqual", "tensorstore::AreCompatibleOrUnbounded", "tensorstore::AreElementTypesCompatible", "tensorstore::Array", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[convert]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[default]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[element_pointer]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[element_pointer, domain, order]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[element_pointer, layout]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[element_pointer, shape, order]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Array[unchecked]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::DataType", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Element", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::ElementPointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::ElementTag", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Layout", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::MaybeConstIndex", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::MaybeConstOriginIndex", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::Pointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::RankType", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::RawPointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::RebindElement", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::RebindRank", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::array_origin_kind", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::array_view", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::byte_strided_origin_pointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::byte_strided_pointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::byte_strides", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::data", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::domain", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::dtype", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::element_pointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::index_type", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::layout", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::layout_container_kind", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::num_elements", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator=", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator|", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator()[index...]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator()[indices]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator==", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator!=", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator&lt;&lt;", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator[][index]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::operator[][indices]", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::origin", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::pointer", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::rank", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::shape", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::shared_array", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::shared_array_view", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::static_rank", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::valid", "tensorstore::Array&lt;ElementTagType, Rank, OriginKind, LayoutContainerKind&gt;::value_type", "tensorstore::ArrayFormatOptions", "tensorstore::ArrayFormatOptions::Default", "tensorstore::ArrayFormatOptions::prefix", "tensorstore::ArrayFormatOptions::separator", "tensorstore::ArrayFormatOptions::suffix", "tensorstore::ArrayFormatOptions::summary_edge_items", "tensorstore::ArrayFormatOptions::summary_ellipses", "tensorstore::ArrayFormatOptions::summary_threshold", "tensorstore::ArrayOriginCast", "tensorstore::ArrayOriginKind", "tensorstore::ArrayStorageStatistics", "tensorstore::ArrayStorageStatistics::Mask", "tensorstore::ArrayStorageStatistics::fully_stored", "tensorstore::ArrayStorageStatistics::mask", "tensorstore::ArrayStorageStatistics::not_stored", "tensorstore::ArrayStorageStatistics::operator~", "tensorstore::ArrayStorageStatistics::operator==", "tensorstore::ArrayStorageStatistics::operator&lt;&lt;", "tensorstore::ArrayView", "tensorstore::ArraysHaveSameShapes", "tensorstore::BFloat16", "tensorstore::BFloat16::BFloat16[convert]", "tensorstore::BFloat16::BFloat16[zero]", "tensorstore::BFloat16::operator=[bool]", "tensorstore::BFloat16::operator=[float]", "tensorstore::BFloat16::operator=[integer]", "tensorstore::BFloat16::operator float", "tensorstore::BFloat16::operator/", "tensorstore::BFloat16::operator/=", "tensorstore::BFloat16::operator-[binary]", "tensorstore::BFloat16::operator-=", "tensorstore::BFloat16::operator*", "tensorstore::BFloat16::operator*=", "tensorstore::BFloat16::operator-[negate]", "tensorstore::BFloat16::operator+[binary]", "tensorstore::BFloat16::operator+=", "tensorstore::BFloat16::operator--[post]", "tensorstore::BFloat16::operator++[post]", "tensorstore::BFloat16::operator--[pre]", "tensorstore::BFloat16::operator++[pre]", "tensorstore::BFloat16::operator+[unary]", "tensorstore::Batch", "tensorstore::Batch::New", "tensorstore::Batch::Release", "tensorstore::Batch::View", "tensorstore::Batch::View::View[batch]", "tensorstore::Batch::View::View[no_batch]", "tensorstore::Batch::View::deferred", "tensorstore::Batch::View::operator bool", "tensorstore::Batch::deferred", "tensorstore::Batch::no_batch", "tensorstore::Batch::no_batch_t", "tensorstore::Batch::operator bool", "tensorstore::BitIterator", "tensorstore::BitIterator&lt;T&gt;::BitIterator[base, offset]", "tensorstore::BitIterator&lt;T&gt;::BitIterator[convert]", "tensorstore::BitIterator&lt;T&gt;::BitIterator[default]", "tensorstore::BitIterator&lt;T&gt;::base", "tensorstore::BitIterator&lt;T&gt;::difference_type", "tensorstore::BitIterator&lt;T&gt;::iterator_category", "tensorstore::BitIterator&lt;T&gt;::kBitsPerBlock", "tensorstore::BitIterator&lt;T&gt;::offset", "tensorstore::BitIterator&lt;T&gt;::operator*", "tensorstore::BitIterator&lt;T&gt;::operator==", "tensorstore::BitIterator&lt;T&gt;::operator-[iterator]", "tensorstore::BitIterator&lt;T&gt;::operator-[offset]", "tensorstore::BitIterator&lt;T&gt;::operator+", "tensorstore::BitIterator&lt;T&gt;::operator--", "tensorstore::BitIterator&lt;T&gt;::operator++", "tensorstore::BitIterator&lt;T&gt;::operator--", "tensorstore::BitIterator&lt;T&gt;::operator++", "tensorstore::BitIterator&lt;T&gt;::operator[]", "tensorstore::BitIterator&lt;T&gt;::pointer", "tensorstore::BitIterator&lt;T&gt;::reference", "tensorstore::BitIterator&lt;T&gt;::value_type", "tensorstore::BitRef", "tensorstore::BitRef&lt;T&gt;::BitRef", "tensorstore::BitRef&lt;T&gt;::block_type", "tensorstore::BitRef&lt;T&gt;::kBitsPerBlock", "tensorstore::BitRef&lt;T&gt;::operator=[BitRef]", "tensorstore::BitRef&lt;T&gt;::operator=[bool]", "tensorstore::BitRef&lt;T&gt;::operator bool", "tensorstore::BitRef&lt;T&gt;::swap", "tensorstore::BitRef&lt;T&gt;::value_type", "tensorstore::Box", "tensorstore::Box&lt;Rank&gt;::Box", "tensorstore::Box&lt;Rank&gt;::Box[convert]", "tensorstore::Box&lt;Rank&gt;::Box[default]", "tensorstore::Box&lt;Rank&gt;::Box[origin, shape]", "tensorstore::Box&lt;Rank&gt;::Box[rank]", "tensorstore::Box&lt;Rank&gt;::Box[rank, origin, shape]", "tensorstore::Box&lt;Rank&gt;::Box[shape]", "tensorstore::Box&lt;Rank&gt;::Box[unchecked]", "tensorstore::Box&lt;Rank&gt;::Fill", "tensorstore::Box&lt;Rank&gt;::RankType", "tensorstore::Box&lt;Rank&gt;::is_empty", "tensorstore::Box&lt;Rank&gt;::num_elements", "tensorstore::Box&lt;Rank&gt;::operator=", "tensorstore::Box&lt;Rank&gt;::operator()", "tensorstore::Box&lt;Rank&gt;::operator&lt;&lt;", "tensorstore::Box&lt;Rank&gt;::operator[]", "tensorstore::Box&lt;Rank&gt;::origin", "tensorstore::Box&lt;Rank&gt;::rank", "tensorstore::Box&lt;Rank&gt;::set_rank", "tensorstore::Box&lt;Rank&gt;::shape", "tensorstore::Box&lt;Rank&gt;::static_rank", "tensorstore::BoxView", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[convert]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[default]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[origin, shape]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[rank]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[rank, origin, shape]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[shape]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::BoxView[unchecked]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::DeepAssign", "tensorstore::BoxView&lt;Rank, Mutable&gt;::Fill", "tensorstore::BoxView&lt;Rank, Mutable&gt;::IndexIntervalType", "tensorstore::BoxView&lt;Rank, Mutable&gt;::IndexType", "tensorstore::BoxView&lt;Rank, Mutable&gt;::RankType", "tensorstore::BoxView&lt;Rank, Mutable&gt;::is_empty", "tensorstore::BoxView&lt;Rank, Mutable&gt;::num_elements", "tensorstore::BoxView&lt;Rank, Mutable&gt;::operator=", "tensorstore::BoxView&lt;Rank, Mutable&gt;::operator()", "tensorstore::BoxView&lt;Rank, Mutable&gt;::operator[]", "tensorstore::BoxView&lt;Rank, Mutable&gt;::origin", "tensorstore::BoxView&lt;Rank, Mutable&gt;::rank", "tensorstore::BoxView&lt;Rank, Mutable&gt;::shape", "tensorstore::BoxView&lt;Rank, Mutable&gt;::static_rank", "tensorstore::BroadcastArray", "tensorstore::BroadcastStridedLayout", "tensorstore::ByteRange", "tensorstore::ByteRange::SatisfiesInvariants", "tensorstore::ByteRange::exclusive_max", "tensorstore::ByteRange::inclusive_min", "tensorstore::ByteRange::operator==", "tensorstore::ByteRange::operator&lt;&lt;", "tensorstore::ByteRange::size", "tensorstore::ByteStridedPointer", "tensorstore::ByteStridedPointer&lt;T&gt;::ByteStridedPointer[convert]", "tensorstore::ByteStridedPointer&lt;T&gt;::ByteStridedPointer[default]", "tensorstore::ByteStridedPointer&lt;T&gt;::ByteStridedPointer[raw]", "tensorstore::ByteStridedPointer&lt;T&gt;::alignment", "tensorstore::ByteStridedPointer&lt;T&gt;::difference_type", "tensorstore::ByteStridedPointer&lt;T&gt;::element_type", "tensorstore::ByteStridedPointer&lt;T&gt;::get", "tensorstore::ByteStridedPointer&lt;T&gt;::operator-&gt;", "tensorstore::ByteStridedPointer&lt;T&gt;::operator T*", "tensorstore::ByteStridedPointer&lt;T&gt;::operator*", "tensorstore::ByteStridedPointer&lt;T&gt;::operator-[byte_offset]", "tensorstore::ByteStridedPointer&lt;T&gt;::operator-[pointer]", "tensorstore::ByteStridedPointer&lt;T&gt;::operator-=", "tensorstore::ByteStridedPointer&lt;T&gt;::operator+", "tensorstore::ByteStridedPointer&lt;T&gt;::operator+=", "tensorstore::ByteStridedPointer&lt;T&gt;::operator[]", "tensorstore::CanCopyTensorStoreToTensorStore", "tensorstore::CanReadTensorstoreToArray", "tensorstore::CanWriteArrayToTensorStore", "tensorstore::CanonicalElementType", "tensorstore::Cast[Spec]", "tensorstore::Cast[TensorStore]", "tensorstore::CastChecking", "tensorstore::ChainResult", "tensorstore::CheckContains", "tensorstore::ChunkLayout", "tensorstore::ChunkLayout::ApplyIndexTransform[expr]", "tensorstore::ChunkLayout::ApplyIndexTransform[transform]", "tensorstore::ChunkLayout::ApplyInverseIndexTransform", "tensorstore::ChunkLayout::Chunk", "tensorstore::ChunkLayout::ChunkAspectRatio", "tensorstore::ChunkLayout::ChunkAspectRatioBase", "tensorstore::ChunkLayout::ChunkAspectRatioFor", "tensorstore::ChunkLayout::ChunkElements", "tensorstore::ChunkLayout::ChunkElementsBase", "tensorstore::ChunkLayout::ChunkElementsFor", "tensorstore::ChunkLayout::ChunkShape", "tensorstore::ChunkLayout::ChunkShapeBase", "tensorstore::ChunkLayout::ChunkShapeFor", "tensorstore::ChunkLayout::CodecChunkElements", "tensorstore::ChunkLayout::CodecChunkShape", "tensorstore::ChunkLayout::Finalize", "tensorstore::ChunkLayout::GetChunkTemplate", "tensorstore::ChunkLayout::Grid", "tensorstore::ChunkLayout::Grid::AspectRatio", "tensorstore::ChunkLayout::Grid::Elements", "tensorstore::ChunkLayout::Grid::Set[GridView]", "tensorstore::ChunkLayout::Grid::Shape", "tensorstore::ChunkLayout::Grid::aspect_ratio", "tensorstore::ChunkLayout::Grid::elements", "tensorstore::ChunkLayout::Grid::operator=", "tensorstore::ChunkLayout::Grid::operator==", "tensorstore::ChunkLayout::Grid::rank", "tensorstore::ChunkLayout::Grid::shape", "tensorstore::ChunkLayout::GridOrigin", "tensorstore::ChunkLayout::GridView", "tensorstore::ChunkLayout::GridView::GridView[components]", "tensorstore::ChunkLayout::GridView::GridView[default]", "tensorstore::ChunkLayout::GridView::GridView[grid]", "tensorstore::ChunkLayout::GridView::aspect_ratio", "tensorstore::ChunkLayout::GridView::elements", "tensorstore::ChunkLayout::GridView::shape", "tensorstore::ChunkLayout::GridViewFor", "tensorstore::ChunkLayout::GridViewFor&lt;ChunkLayout::kUnspecifiedUsage&gt;[kUnspecifiedUsage]", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::AspectRatio", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::Elements", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::GridViewFor", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::Shape", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::aspect_ratio", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::elements", "tensorstore::ChunkLayout::GridViewFor&lt;U&gt;::shape", "tensorstore::ChunkLayout::HasHardConstraints", "tensorstore::ChunkLayout::InnerOrder", "tensorstore::ChunkLayout::InnerOrder::InnerOrder[default]", "tensorstore::ChunkLayout::InnerOrder::InnerOrder[order]", "tensorstore::ChunkLayout::InnerOrder::hard_constraint", "tensorstore::ChunkLayout::InnerOrder::operator==", "tensorstore::ChunkLayout::InnerOrder::valid", "tensorstore::ChunkLayout::IsOption", "tensorstore::ChunkLayout::ParseUsage", "tensorstore::ChunkLayout::ReadChunkElements", "tensorstore::ChunkLayout::ReadChunkShape", "tensorstore::ChunkLayout::Set[ChunkAspectRatioFor]", "tensorstore::ChunkLayout::Set[ChunkElementsFor]", "tensorstore::ChunkLayout::Set[ChunkLayout]", "tensorstore::ChunkLayout::Set[ChunkShapeFor]", "tensorstore::ChunkLayout::Set[GridOrigin]", "tensorstore::ChunkLayout::Set[GridViewFor]", "tensorstore::ChunkLayout::Set[InnerOrder]", "tensorstore::ChunkLayout::Set[RankConstraint]", "tensorstore::ChunkLayout::Usage", "tensorstore::ChunkLayout::WriteChunkElements", "tensorstore::ChunkLayout::WriteChunkShape", "tensorstore::ChunkLayout::codec_chunk", "tensorstore::ChunkLayout::codec_chunk_aspect_ratio", "tensorstore::ChunkLayout::codec_chunk_elements", "tensorstore::ChunkLayout::codec_chunk_shape", "tensorstore::ChunkLayout::grid_origin", "tensorstore::ChunkLayout::inner_order", "tensorstore::ChunkLayout::kUnspecifiedUsage", "tensorstore::ChunkLayout::operator|", "tensorstore::ChunkLayout::operator&lt;&lt;", "tensorstore::ChunkLayout::operator[]", "tensorstore::ChunkLayout::rank", "tensorstore::ChunkLayout::read_chunk", "tensorstore::ChunkLayout::read_chunk_aspect_ratio", "tensorstore::ChunkLayout::read_chunk_elements", "tensorstore::ChunkLayout::read_chunk_shape", "tensorstore::ChunkLayout::write_chunk", "tensorstore::ChunkLayout::write_chunk_aspect_ratio", "tensorstore::ChunkLayout::write_chunk_elements", "tensorstore::ChunkLayout::write_chunk_shape", "tensorstore::CodecSpec", "tensorstore::CodecSpec::CodecSpec[default]", "tensorstore::CodecSpec::Merge", "tensorstore::CodecSpec::MergeFrom", "tensorstore::CodecSpec::ToJsonOptions", "tensorstore::CodecSpec::operator==", "tensorstore::CodecSpec::operator&lt;&lt;", "tensorstore::CodecSpec::valid", "tensorstore::ComposeLayoutAndTransform", "tensorstore::ComposeOptionalTransforms", "tensorstore::ComposeTransforms", "tensorstore::ComputeStridedSliceMap", "tensorstore::ComputeStrides", "tensorstore::ConstDataTypeCast", "tensorstore::ConstrainIndexDomain", "tensorstore::ContainerKind", "tensorstore::Contains[KeyRange, KeyRange]", "tensorstore::Contains[KeyRange, string]", "tensorstore::Contains[box, box]", "tensorstore::Contains[box, indices]", "tensorstore::Contains[interval, index]", "tensorstore::Contains[interval, interval]", "tensorstore::ContainsOrUnbounded", "tensorstore::ContainsPartial[box, indices]", "tensorstore::ContainsPrefix[KeyRange, string]", "tensorstore::Context", "tensorstore::Context::Context[null]", "tensorstore::Context::Context[spec, parent]", "tensorstore::Context::Default", "tensorstore::Context::FromJson", "tensorstore::Context::GetResource", "tensorstore::Context::Resource", "tensorstore::Context::Resource&lt;Provider&gt;::BindContext", "tensorstore::Context::Resource&lt;Provider&gt;::DefaultSpec", "tensorstore::Context::Resource&lt;Provider&gt;::FromJson", "tensorstore::Context::Resource&lt;Provider&gt;::Resource", "tensorstore::Context::Resource&lt;Provider&gt;::StripContext", "tensorstore::Context::Resource&lt;Provider&gt;::ToJson", "tensorstore::Context::Resource&lt;Provider&gt;::ToJsonOptions", "tensorstore::Context::Resource&lt;Provider&gt;::get", "tensorstore::Context::Resource&lt;Provider&gt;::has_resource", "tensorstore::Context::Resource&lt;Provider&gt;::operator==", "tensorstore::Context::Resource&lt;Provider&gt;::valid", "tensorstore::Context::Spec", "tensorstore::Context::Spec::Spec", "tensorstore::Context::ToJsonOptions", "tensorstore::Context::operator bool[bool]", "tensorstore::Context::operator==", "tensorstore::Context::parent", "tensorstore::Context::spec", "tensorstore::ContextBindingMode", "tensorstore::ContextBindingState", "tensorstore::ContiguousLayoutOrder", "tensorstore::ContiguousLayoutPermutation", "tensorstore::ContiguousLayoutPermutation&lt;Rank&gt;::ContiguousLayoutPermutation", "tensorstore::ContiguousLayoutPermutation&lt;Rank&gt;::ContiguousLayoutPermutation[convert]", "tensorstore::ContiguousLayoutPermutation&lt;Rank&gt;::ContiguousLayoutPermutation[span]", "tensorstore::ConvertToContiguousLayoutPermutation", "tensorstore::Copy[TensorStore, TensorStore]", "tensorstore::CopyArray", "tensorstore::CopyConvertedArray", "tensorstore::CopyOptions", "tensorstore::CopyOptions::alignment_options", "tensorstore::CopyOptions::batch", "tensorstore::CopyOptions::progress_function", "tensorstore::CopyOptions::source_data_reference_restriction", "tensorstore::CopyProgress", "tensorstore::CopyProgress::committed_elements", "tensorstore::CopyProgress::copied_elements", "tensorstore::CopyProgress::operator==", "tensorstore::CopyProgress::operator&lt;&lt;", "tensorstore::CopyProgress::read_elements", "tensorstore::CopyProgress::total_elements", "tensorstore::CopyProgressFunction", "tensorstore::CopyProgressFunction::Function", "tensorstore::CopyTransformedArray", "tensorstore::DataType", "tensorstore::DataType::AbslHashValue", "tensorstore::DataType::DataType", "tensorstore::DataType::alignment", "tensorstore::DataType::name", "tensorstore::DataType::operator==", "tensorstore::DataType::operator&lt;&lt;", "tensorstore::DataType::size", "tensorstore::DataType::valid", "tensorstore::DataTypeConversionFlags", "tensorstore::DestroyAndFree", "tensorstore::DimExpression", "tensorstore::DimExpression&lt;Op...&gt;::AddNew", "tensorstore::DimExpression&lt;Op...&gt;::BoxSlice", "tensorstore::DimExpression&lt;Op...&gt;::ClosedInterval", "tensorstore::DimExpression&lt;Op...&gt;::Diagonal", "tensorstore::DimExpression&lt;Op...&gt;::HalfOpenInterval", "tensorstore::DimExpression&lt;Op...&gt;::IndexArraySlice", "tensorstore::DimExpression&lt;Op...&gt;::IndexSlice", "tensorstore::DimExpression&lt;Op...&gt;::IndexVectorArraySlice", "tensorstore::DimExpression&lt;Op...&gt;::Label", "tensorstore::DimExpression&lt;Op...&gt;::MarkBoundsExplicit", "tensorstore::DimExpression&lt;Op...&gt;::MoveTo", "tensorstore::DimExpression&lt;Op...&gt;::MoveToBack", "tensorstore::DimExpression&lt;Op...&gt;::MoveToFront", "tensorstore::DimExpression&lt;Op...&gt;::OuterIndexArraySlice", "tensorstore::DimExpression&lt;Op...&gt;::Resolve", "tensorstore::DimExpression&lt;Op...&gt;::SizedInterval", "tensorstore::DimExpression&lt;Op...&gt;::Stride", "tensorstore::DimExpression&lt;Op...&gt;::TranslateBackwardBy", "tensorstore::DimExpression&lt;Op...&gt;::TranslateBoxSlice", "tensorstore::DimExpression&lt;Op...&gt;::TranslateBy", "tensorstore::DimExpression&lt;Op...&gt;::TranslateClosedInterval", "tensorstore::DimExpression&lt;Op...&gt;::TranslateHalfOpenInterval", "tensorstore::DimExpression&lt;Op...&gt;::TranslateSizedInterval", "tensorstore::DimExpression&lt;Op...&gt;::TranslateTo", "tensorstore::DimExpression&lt;Op...&gt;::Transpose[consecutive]", "tensorstore::DimExpression&lt;Op...&gt;::Transpose[target_dimensions]", "tensorstore::DimExpression&lt;Op...&gt;::UnsafeMarkBoundsImplicit", "tensorstore::DimExpression&lt;Op...&gt;::operator()[domain]", "tensorstore::DimExpression&lt;Op...&gt;::operator()[transform]", "tensorstore::DimExpression&lt;Op...&gt;::operator()[transformable]", "tensorstore::DimRange", "tensorstore::DimRangeSpec", "tensorstore::DimRangeSpec::exclusive_stop", "tensorstore::DimRangeSpec::inclusive_start", "tensorstore::DimRangeSpec::operator==", "tensorstore::DimRangeSpec::operator&lt;&lt;", "tensorstore::DimRangeSpec::step", "tensorstore::DimensionIdentifier", "tensorstore::DimensionIdentifier::DimensionIdentifier[default]", "tensorstore::DimensionIdentifier::DimensionIdentifier[index]", "tensorstore::DimensionIdentifier::DimensionIdentifier[label]", "tensorstore::DimensionIdentifier::index", "tensorstore::DimensionIdentifier::label", "tensorstore::DimensionIdentifier::operator==", "tensorstore::DimensionIdentifier::operator&lt;&lt;", "tensorstore::DimensionIndex", "tensorstore::DimensionIndexBuffer", "tensorstore::DimensionSet", "tensorstore::DimensionUnitsToString", "tensorstore::DimensionUnitsVector", "tensorstore::Dims", "tensorstore::DividePositiveRoundOut", "tensorstore::DomainAlignmentOptions", "tensorstore::Downsample[Spec]", "tensorstore::Downsample[TensorStore]", "tensorstore::DownsampleMethod", "tensorstore::DynamicDimSpec", "tensorstore::DynamicDims", "tensorstore::DynamicRank", "tensorstore::DynamicRank::operator()", "tensorstore::DynamicRank::operator DimensionIndex", "tensorstore::ElementInitialization", "tensorstore::ElementPointer", "tensorstore::ElementPointer&lt;ElementTagType&gt;::DataType", "tensorstore::ElementPointer&lt;ElementTagType&gt;::ElementPointer[default]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::ElementPointer[element_pointer]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::ElementPointer[pointer]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::ElementPointer[unchecked]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::ElementTag", "tensorstore::ElementPointer&lt;ElementTagType&gt;::Pointer", "tensorstore::ElementPointer&lt;ElementTagType&gt;::byte_strided_pointer", "tensorstore::ElementPointer&lt;ElementTagType&gt;::data", "tensorstore::ElementPointer&lt;ElementTagType&gt;::dtype", "tensorstore::ElementPointer&lt;ElementTagType&gt;::element_type", "tensorstore::ElementPointer&lt;ElementTagType&gt;::operator=", "tensorstore::ElementPointer&lt;ElementTagType&gt;::operator bool", "tensorstore::ElementPointer&lt;ElementTagType&gt;::operator==[element_pointer]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::operator==[nullptr]", "tensorstore::ElementPointer&lt;ElementTagType&gt;::pointer", "tensorstore::ElementTagTraits", "tensorstore::ElementTagTraits&lt;T&gt;::Element", "tensorstore::ElementTagTraits&lt;T&gt;::Pointer", "tensorstore::ElementTagTraits&lt;T&gt;::rebind", "tensorstore::EqualityComparisonKind", "tensorstore::Executor", "tensorstore::ExecutorBoundFunction", "tensorstore::ExecutorBoundFunction&lt;ExecutorType, FunctionType&gt;::Executor", "tensorstore::ExecutorBoundFunction&lt;ExecutorType, FunctionType&gt;::Function", "tensorstore::ExecutorTask", "tensorstore::ExplicitIndexOr", "tensorstore::ExtractClosedStridedSlice", "tensorstore::ExtractHalfOpenStridedSlice", "tensorstore::ExtractSizedStridedSlice", "tensorstore::ExtractStridedSlice", "tensorstore::FiniteSubset", "tensorstore::FlatMapResultType", "tensorstore::FlatResult", "tensorstore::Float8e4m3fn", "tensorstore::Future", "tensorstore::Future&lt;T&gt;::ExecuteWhenReady", "tensorstore::Future&lt;T&gt;::Future[convert]", "tensorstore::Future&lt;T&gt;::Future[default]", "tensorstore::Future&lt;T&gt;::Future[result]", "tensorstore::Future&lt;T&gt;::Future[status]", "tensorstore::Future&lt;T&gt;::Future[unwrap]", "tensorstore::Future&lt;T&gt;::Future[value]", "tensorstore::Future&lt;T&gt;::IgnoreFuture", "tensorstore::Future&lt;T&gt;::operator=", "tensorstore::Future&lt;T&gt;::result", "tensorstore::Future&lt;T&gt;::result_type", "tensorstore::Future&lt;T&gt;::value", "tensorstore::Future&lt;T&gt;::value_type", "tensorstore::FutureCallbackRegistration", "tensorstore::FutureCallbackRegistration::FutureCallbackRegistration", "tensorstore::FutureCallbackRegistration::Unregister", "tensorstore::FutureCallbackRegistration::UnregisterNonBlocking", "tensorstore::FutureCallbackRegistration::operator()", "tensorstore::GetAffineTransformDomain", "tensorstore::GetAffineTransformDomain[OptionallyImplicitIndexInterval]", "tensorstore::GetAffineTransformInverseDomain", "tensorstore::GetAffineTransformRange[IndexInterval]", "tensorstore::GetAffineTransformRange[OptionallyImplicitIndexInterval]", "tensorstore::GetArrayStorageStatisticsOptions", "tensorstore::GetBoxDomainOf[IndexDomain]", "tensorstore::GetBoxDomainOf[IndexTransform]", "tensorstore::GetBoxDomainOf[TransformedArray]", "tensorstore::GetBoxDomainOf[array]", "tensorstore::GetBoxDomainOf[box]", "tensorstore::GetBoxDomainOf[strided_layout]", "tensorstore::GetByteExtent[array]", "tensorstore::GetByteExtent[strided_layout]", "tensorstore::GetContiguousIndices", "tensorstore::GetContiguousOffset", "tensorstore::GetDataType", "tensorstore::GetDefaultRank", "tensorstore::GetOutputRange", "tensorstore::GetStaticOrDynamicExtent", "tensorstore::GetStatus[AnyFuture]", "tensorstore::GetStatus[WriteFutures]", "tensorstore::GetStatus[result]", "tensorstore::GetStatus[status]", "tensorstore::GetStorageStatistics", "tensorstore::GetSubLayoutView", "tensorstore::HasBoxDomain", "tensorstore::HaveSameSharedState", "tensorstore::Hull[IndexInterval]", "tensorstore::Hull[OptionallyImplicitIndexInterval]", "tensorstore::HullIndexDomains", "tensorstore::IdentityTransform[box]", "tensorstore::IdentityTransform[domain]", "tensorstore::IdentityTransform[labels]", "tensorstore::IdentityTransform[rank]", "tensorstore::IdentityTransform[shape]", "tensorstore::IdentityTransformLike[array]", "tensorstore::IdentityTransformLike[transform]", "tensorstore::ImplicitOrEqual", "tensorstore::IncludeDefaults", "tensorstore::Index", "tensorstore::IndexDomain", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::ApplyIndexTransform", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[box]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[convert]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[default]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[labels]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[rank]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[shape]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::IndexDomain[unchecked]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::RankType", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::Transpose", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::Transpose[permutation]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::box", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::container_kind", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::implicit_lower_bounds", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::implicit_upper_bounds", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::labels", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::num_elements", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator|", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator()[transform]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator()[transformable]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator==", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator[][dim]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::operator[][dims]", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::origin", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::rank", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::shape", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::static_rank", "tensorstore::IndexDomain&lt;Rank, CKind&gt;::valid", "tensorstore::IndexDomainDimension", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::IndexDomainDimension[convert]", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::IndexDomainDimension[default]", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::IndexDomainDimension[interval]", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::IndexDomainDimension[interval, label]", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::Label", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::label", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::operator=", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::operator==", "tensorstore::IndexDomainDimension&lt;LabelCKind&gt;::optionally_implicit_interval", "tensorstore::IndexDomainView", "tensorstore::IndexInnerProduct", "tensorstore::IndexInterval", "tensorstore::IndexInterval::Closed", "tensorstore::IndexInterval::FiniteRange", "tensorstore::IndexInterval::HalfOpen", "tensorstore::IndexInterval::IndexInterval", "tensorstore::IndexInterval::Infinite", "tensorstore::IndexInterval::Sized", "tensorstore::IndexInterval::UncheckedClosed", "tensorstore::IndexInterval::UncheckedHalfOpen", "tensorstore::IndexInterval::UncheckedSized", "tensorstore::IndexInterval::ValidClosed", "tensorstore::IndexInterval::ValidHalfOpen", "tensorstore::IndexInterval::ValidSized", "tensorstore::IndexInterval::empty", "tensorstore::IndexInterval::exclusive_max", "tensorstore::IndexInterval::exclusive_min", "tensorstore::IndexInterval::inclusive_max", "tensorstore::IndexInterval::inclusive_min", "tensorstore::IndexInterval::operator==", "tensorstore::IndexInterval::operator-", "tensorstore::IndexInterval::operator&lt;&lt;", "tensorstore::IndexInterval::size", "tensorstore::IndexIntervalRef", "tensorstore::IndexIntervalRef::UncheckedSized", "tensorstore::IndexIntervalRef::empty", "tensorstore::IndexIntervalRef::exclusive_max", "tensorstore::IndexIntervalRef::exclusive_min", "tensorstore::IndexIntervalRef::inclusive_max", "tensorstore::IndexIntervalRef::inclusive_min", "tensorstore::IndexIntervalRef::operator=", "tensorstore::IndexIntervalRef::operator IndexInterval", "tensorstore::IndexIntervalRef::operator==", "tensorstore::IndexIntervalRef::operator&lt;&lt;", "tensorstore::IndexIntervalRef::size", "tensorstore::IndexTransform", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::ApplyIndexTransform", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::IndexTransform[convert]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::IndexTransform[default]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::IndexTransform[unchecked]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::TransformIndices", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::Transpose", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::Transpose[permutation]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::TransposeOutput", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::TransposeOutput[permutation]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::container_kind", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::implicit_lower_bounds", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::implicit_upper_bounds", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::input_domain", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::input_labels", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::input_origin", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::input_rank", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::input_shape", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator=", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator|", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator()[compose]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator()[transformable]", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator bool", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator==", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::operator&lt;&lt;", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::output_index_map", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::output_index_maps", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::output_rank", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::static_output_rank", "tensorstore::IndexTransform&lt;InputRank, OutputRank, CKind&gt;::static_rank", "tensorstore::IndexTransformView", "tensorstore::InitializeArray", "tensorstore::InitializeContiguousLayout[domain, layout]", "tensorstore::InitializeContiguousLayout[layout]", "tensorstore::InitializeContiguousLayout[shape, layout]", "tensorstore::InlineExecutor", "tensorstore::InlineRank", "tensorstore::InlineRankLimit", "tensorstore::Int4Padded", "tensorstore::Int4Padded::Int4Padded[convert]", "tensorstore::Int4Padded::Int4Padded[zero]", "tensorstore::Int4Padded::operator=[bool]", "tensorstore::Int4Padded::operator=[integer]", "tensorstore::Int4Padded::operator&amp;[binary]", "tensorstore::Int4Padded::operator&amp;=", "tensorstore::Int4Padded::operator|[binary]", "tensorstore::Int4Padded::operator|=", "tensorstore::Int4Padded::operator^[binary]", "tensorstore::Int4Padded::operator^=", "tensorstore::Int4Padded::operator int8_t", "tensorstore::Int4Padded::operator~[negate]", "tensorstore::Int4Padded::operator/", "tensorstore::Int4Padded::operator/=", "tensorstore::Int4Padded::operator-[binary]", "tensorstore::Int4Padded::operator-=", "tensorstore::Int4Padded::operator%", "tensorstore::Int4Padded::operator%=", "tensorstore::Int4Padded::operator*", "tensorstore::Int4Padded::operator*=", "tensorstore::Int4Padded::operator-[negate]", "tensorstore::Int4Padded::operator+[binary]", "tensorstore::Int4Padded::operator+=", "tensorstore::Int4Padded::operator--[post]", "tensorstore::Int4Padded::operator++[post]", "tensorstore::Int4Padded::operator--[pre]", "tensorstore::Int4Padded::operator++[pre]", "tensorstore::Int4Padded::operator&lt;&lt;[binary]", "tensorstore::Int4Padded::operator&lt;&lt;=", "tensorstore::Int4Padded::operator&gt;&gt;[binary]", "tensorstore::Int4Padded::operator&gt;&gt;=", "tensorstore::Int4Padded::operator+[unary]", "tensorstore::Intersect[IndexInterval]", "tensorstore::Intersect[KeyRange]", "tensorstore::Intersect[OptionallyImplicitIndexInterval]", "tensorstore::IntersectIndexDomains", "tensorstore::IntersectPreferringExplicit", "tensorstore::Intersects[KeyRange]", "tensorstore::IntersectsPrefix[KeyRange, string]", "tensorstore::IntervalForm", "tensorstore::InverseTransform", "tensorstore::InvertPermutation", "tensorstore::IsArray", "tensorstore::IsArrayBasePointerConvertible", "tensorstore::IsArrayExplicitlyConvertible", "tensorstore::IsArrayOriginKindConvertible", "tensorstore::IsBoxLike", "tensorstore::IsBoxLikeExplicitlyConvertibleToRank", "tensorstore::IsBoxLikeImplicitlyConvertibleToRank", "tensorstore::IsBroadcastScalar[array]", "tensorstore::IsBroadcastScalar[strided_layout]", "tensorstore::IsCompatibleFullIndexPack", "tensorstore::IsCompatibleFullIndexVector", "tensorstore::IsCompatibleOptionSequence", "tensorstore::IsCompatiblePartialIndexVector", "tensorstore::IsContiguousLayout[array]", "tensorstore::IsContiguousLayout[strided_layout]", "tensorstore::IsContiguousLayoutOrder", "tensorstore::IsDataTypeConversionSupported", "tensorstore::IsElementPointer", "tensorstore::IsElementPointerCastConvertible", "tensorstore::IsElementTag", "tensorstore::IsElementType", "tensorstore::IsElementTypeExplicitlyConvertible", "tensorstore::IsElementTypeImplicitlyConvertible", "tensorstore::IsElementTypeOnlyExplicitlyConvertible", "tensorstore::IsFinite", "tensorstore::IsFinite[box]", "tensorstore::IsFinite[interval]", "tensorstore::IsFiniteIndex", "tensorstore::IsFuture", "tensorstore::IsFutureConvertible", "tensorstore::IsImplicitlyCompatibleFullIndexVector", "tensorstore::IsIndexArray", "tensorstore::IsIndexConvertibleVector", "tensorstore::IsIndexDomain", "tensorstore::IsIndexTransform", "tensorstore::IsIndexVector", "tensorstore::IsIndexVectorOrScalar", "tensorstore::IsIndexVectorOrScalar&lt;T&gt;::extent", "tensorstore::IsIndexVectorOrScalar&lt;T&gt;::normalized_type", "tensorstore::IsIndexVectorOrScalar&lt;T&gt;::value", "tensorstore::IsModeExplicitlyConvertible[ReadWriteMode]", "tensorstore::IsMutableBoxLike", "tensorstore::IsMutableIndexVector", "tensorstore::IsNonVoidArrayBasePointer", "tensorstore::IsPossiblySameDataType", "tensorstore::IsResult", "tensorstore::IsShared", "tensorstore::IsSharedArrayLike", "tensorstore::IsStaticCastConstructible", "tensorstore::IsStridedLayout", "tensorstore::IsTransformedArray", "tensorstore::IsTransformedArrayLike", "tensorstore::IsValidIndex", "tensorstore::IsValidInlineRank", "tensorstore::IsValidPermutation", "tensorstore::IsValidRank", "tensorstore::IterateOverArrays", "tensorstore::IterateOverTransformedArrays", "tensorstore::IterationConstraints", "tensorstore::JsonSerializationOptions", "tensorstore::JsonSerializationOptions::IsOption", "tensorstore::JsonSerializationOptions::JsonSerializationOptions", "tensorstore::JsonSerializationOptions::Set", "tensorstore::JsonSerializationOptions::Set[DataType]", "tensorstore::JsonSerializationOptions::Set[IncludeDefaults]", "tensorstore::JsonSerializationOptions::Set[RankConstraint]", "tensorstore::JsonSerializationOptions::dtype", "tensorstore::JsonSerializationOptions::operator IncludeDefaults[IncludeDefaults]", "tensorstore::JsonSerializationOptions::rank", "tensorstore::KeyRange", "tensorstore::KeyRange::AddPrefix", "tensorstore::KeyRange::CompareExclusiveMax", "tensorstore::KeyRange::CompareKeyAndExclusiveMax", "tensorstore::KeyRange::EmptyRange", "tensorstore::KeyRange::KeyRange[default]", "tensorstore::KeyRange::KeyRange[inclusive_min, exclusive_max]", "tensorstore::KeyRange::Prefix", "tensorstore::KeyRange::PrefixExclusiveMax", "tensorstore::KeyRange::RemovePrefix", "tensorstore::KeyRange::RemovePrefixLength", "tensorstore::KeyRange::Singleton", "tensorstore::KeyRange::Successor", "tensorstore::KeyRange::empty", "tensorstore::KeyRange::exclusive_max", "tensorstore::KeyRange::full", "tensorstore::KeyRange::inclusive_min", "tensorstore::KeyRange::is_non_empty_prefix", "tensorstore::KeyRange::is_singleton", "tensorstore::KeyRange::operator==", "tensorstore::KeyRange::operator&lt;&lt;", "tensorstore::KvStore", "tensorstore::LayoutOrderConstraint", "tensorstore::LayoutOrderConstraint::operator bool", "tensorstore::LayoutOrderConstraint::order", "tensorstore::Link", "tensorstore::LinkError", "tensorstore::LinkResult", "tensorstore::LinkValue", "tensorstore::LongestPrefix[KeyRange]", "tensorstore::MakeArray[array]", "tensorstore::MakeArrayView[array]", "tensorstore::MakeArrayView[span]", "tensorstore::MakeCopy", "tensorstore::MakeCopy[cast]", "tensorstore::MakeCopy[copy]", "tensorstore::MakeCopy[transformed_array]", "tensorstore::MakeOffsetArray[array]", "tensorstore::MakeOffsetArrayView[array]", "tensorstore::MakeReadyFuture", "tensorstore::MakeResult[status]", "tensorstore::MakeResult[value]", "tensorstore::MakeScalarArray", "tensorstore::MakeScalarArrayView", "tensorstore::MakeTransformedArray", "tensorstore::MapFuture", "tensorstore::MapFutureError", "tensorstore::MapFutureValue", "tensorstore::MapResult", "tensorstore::Materialize", "tensorstore::MaybeAnnotateStatus", "tensorstore::MaybeHardConstraintIndex", "tensorstore::MaybeHardConstraintIndex::MaybeHardConstraintIndex", "tensorstore::MaybeHardConstraintIndex::hard_constraint", "tensorstore::MaybeHardConstraintIndex::operator Index", "tensorstore::MaybeHardConstraintIndex::operator==", "tensorstore::MaybeHardConstraintIndex::valid", "tensorstore::MaybeHardConstraintIndex::value", "tensorstore::MaybeHardConstraintSpan", "tensorstore::MaybeHardConstraintSpan&lt;T&gt;::MaybeHardConstraintSpan[default]", "tensorstore::MaybeHardConstraintSpan&lt;T&gt;::MaybeHardConstraintSpan[span, hard_constraint]", "tensorstore::MaybeHardConstraintSpan&lt;T&gt;::hard_constraint", "tensorstore::MaybeHardConstraintSpan&lt;T&gt;::operator==", "tensorstore::MaybeHardConstraintSpan&lt;T&gt;::valid", "tensorstore::MergeDimensionLabels", "tensorstore::MergeDimensionUnits", "tensorstore::MergeIndexDomains", "tensorstore::MergeOptionallyImplicitIndexIntervals", "tensorstore::MinimalSpec", "tensorstore::ModeCast[compile_time]", "tensorstore::ModeCast[runtime]", "tensorstore::MustAllocateConstraint", "tensorstore::MutableBoxView", "tensorstore::NormalizeDimRangeSpec", "tensorstore::NormalizeDimensionIdentifier", "tensorstore::NormalizeDimensionIndex", "tensorstore::NormalizeDimensionLabel", "tensorstore::NormalizeDynamicDimSpec", "tensorstore::NormalizeDynamicDimSpecs", "tensorstore::OffsetArrayView", "tensorstore::Open", "tensorstore::OpenMode", "tensorstore::OpenOptions", "tensorstore::OptionalByteRangeRequest", "tensorstore::OptionalByteRangeRequest::AsByteRange", "tensorstore::OptionalByteRangeRequest::IsFull", "tensorstore::OptionalByteRangeRequest::IsRange", "tensorstore::OptionalByteRangeRequest::IsStat", "tensorstore::OptionalByteRangeRequest::IsSuffix", "tensorstore::OptionalByteRangeRequest::IsSuffixLength", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest[ByteRange]", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest[full]", "tensorstore::OptionalByteRangeRequest::OptionalByteRangeRequest[inclusive_min, exclusive_max]", "tensorstore::OptionalByteRangeRequest::Range", "tensorstore::OptionalByteRangeRequest::SatisfiesInvariants", "tensorstore::OptionalByteRangeRequest::Stat", "tensorstore::OptionalByteRangeRequest::Suffix", "tensorstore::OptionalByteRangeRequest::SuffixLength", "tensorstore::OptionalByteRangeRequest::Validate", "tensorstore::OptionalByteRangeRequest::exclusive_max", "tensorstore::OptionalByteRangeRequest::inclusive_min", "tensorstore::OptionalByteRangeRequest::operator==", "tensorstore::OptionalByteRangeRequest::operator&lt;&lt;", "tensorstore::OptionalByteRangeRequest::size", "tensorstore::OptionallyImplicitIndexInterval", "tensorstore::OptionallyImplicitIndexInterval::OptionallyImplicitIndexInterval[default]", "tensorstore::OptionallyImplicitIndexInterval::OptionallyImplicitIndexInterval[interval, implicit]", "tensorstore::OptionallyImplicitIndexInterval::effective_interval", "tensorstore::OptionallyImplicitIndexInterval::implicit_lower", "tensorstore::OptionallyImplicitIndexInterval::implicit_upper", "tensorstore::OptionallyImplicitIndexInterval::interval", "tensorstore::OptionallyImplicitIndexInterval::operator==", "tensorstore::OptionallyImplicitIndexInterval::operator&lt;&lt;", "tensorstore::OutputIndexMapIterator", "tensorstore::OutputIndexMapIterator&lt;InputRank&gt;::OutputIndexMapIterator", "tensorstore::OutputIndexMapIterator&lt;InputRank&gt;::difference_type", "tensorstore::OutputIndexMapIterator&lt;InputRank&gt;::iterator_category", "tensorstore::OutputIndexMapIterator&lt;InputRank&gt;::pointer", "tensorstore::OutputIndexMapIterator&lt;InputRank&gt;::value_type", "tensorstore::OutputIndexMapRange", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::OutputIndexMapRange[convert]", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::OutputIndexMapRange[default]", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::OutputIndexMapRange[transform]", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::begin", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::difference_type", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::empty", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::extent", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::input_rank", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::iterator", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::operator[]", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::size", "tensorstore::OutputIndexMapRange&lt;InputRank, OutputRank, CKind&gt;::value_type", "tensorstore::OutputIndexMapRef", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::array_ref", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::byte_strides", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::element_pointer", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::index_range", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::layout", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::rank", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::IndexArrayView::shared_array_ref", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::OutputIndexMapRef", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::index_array", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::input_dimension", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::input_rank", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::method", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::offset", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::operator=", "tensorstore::OutputIndexMapRef&lt;InputRank&gt;::stride", "tensorstore::OutputIndexMethod", "tensorstore::PermutationMatchesOrder", "tensorstore::PipelineResultType", "tensorstore::PointerElementTag", "tensorstore::ProductOfExtents", "tensorstore::Promise", "tensorstore::Promise&lt;T&gt;::ExecuteWhenForced", "tensorstore::Promise&lt;T&gt;::ExecuteWhenNotNeeded", "tensorstore::Promise&lt;T&gt;::Promise[convert]", "tensorstore::Promise&lt;T&gt;::Promise[default]", "tensorstore::Promise&lt;T&gt;::SetReady", "tensorstore::Promise&lt;T&gt;::SetResult", "tensorstore::Promise&lt;T&gt;::future", "tensorstore::Promise&lt;T&gt;::null", "tensorstore::Promise&lt;T&gt;::operator=[convert]", "tensorstore::Promise&lt;T&gt;::raw_result", "tensorstore::Promise&lt;T&gt;::ready", "tensorstore::Promise&lt;T&gt;::reset", "tensorstore::Promise&lt;T&gt;::result_needed", "tensorstore::Promise&lt;T&gt;::result_type", "tensorstore::Promise&lt;T&gt;::value_type", "tensorstore::PromiseFuturePair", "tensorstore::PromiseFuturePair&lt;T&gt;::FutureType", "tensorstore::PromiseFuturePair&lt;T&gt;::Link", "tensorstore::PromiseFuturePair&lt;T&gt;::LinkError", "tensorstore::PromiseFuturePair&lt;T&gt;::LinkValue", "tensorstore::PromiseFuturePair&lt;T&gt;::Make", "tensorstore::PromiseFuturePair&lt;T&gt;::PromiseType", "tensorstore::PromiseFuturePair&lt;T&gt;::future", "tensorstore::PromiseFuturePair&lt;T&gt;::promise", "tensorstore::PropagateBounds", "tensorstore::PropagateBoundsToTransform", "tensorstore::PropagateExplicitBounds", "tensorstore::PropagateExplicitBoundsToTransform", "tensorstore::PropagateInputDomainResizeToOutput", "tensorstore::RankConstraint", "tensorstore::RankConstraint::Add", "tensorstore::RankConstraint::And", "tensorstore::RankConstraint::EqualOrUnspecified", "tensorstore::RankConstraint::FromInlineRank", "tensorstore::RankConstraint::GreaterEqualOrUnspecified", "tensorstore::RankConstraint::GreaterOrUnspecified", "tensorstore::RankConstraint::Implies", "tensorstore::RankConstraint::LessEqualOrUnspecified", "tensorstore::RankConstraint::LessOrUnspecified", "tensorstore::RankConstraint::RankConstraint[dynamic]", "tensorstore::RankConstraint::RankConstraint[rank]", "tensorstore::RankConstraint::Subtract", "tensorstore::RankConstraint::operator DimensionIndex", "tensorstore::RankConstraint::rank", "tensorstore::RankConstraint::valid", "tensorstore::Read[TensorStore]", "tensorstore::Read[TensorStore, Array]", "tensorstore::ReadIntoNewArrayOptions", "tensorstore::ReadIntoNewArrayOptions::batch", "tensorstore::ReadIntoNewArrayOptions::layout_order", "tensorstore::ReadIntoNewArrayOptions::progress_function", "tensorstore::ReadOptions", "tensorstore::ReadOptions::alignment_options", "tensorstore::ReadOptions::batch", "tensorstore::ReadOptions::progress_function", "tensorstore::ReadProgress", "tensorstore::ReadProgress::copied_elements", "tensorstore::ReadProgress::operator==", "tensorstore::ReadProgress::operator&lt;&lt;", "tensorstore::ReadProgress::total_elements", "tensorstore::ReadProgressFunction", "tensorstore::ReadProgressFunction::Function", "tensorstore::ReadWriteMode", "tensorstore::ReadyFuture", "tensorstore::ReadyFuture&lt;T&gt;::ReadyFuture[convert]", "tensorstore::ReadyFuture&lt;T&gt;::ReadyFuture[default]", "tensorstore::ReadyFuture&lt;T&gt;::ReadyFuture[future]", "tensorstore::ReadyFuture&lt;T&gt;::operator=", "tensorstore::ReadyFuture&lt;T&gt;::result", "tensorstore::ReadyFuture&lt;T&gt;::result_type", "tensorstore::ReadyFuture&lt;T&gt;::value", "tensorstore::RebindDataType", "tensorstore::RebindMode", "tensorstore::RebindRank", "tensorstore::RecheckCacheOption", "tensorstore::RecheckCacheOption::AtOpen", "tensorstore::RecheckCacheOption::Flags", "tensorstore::RecheckCacheOption::RecheckCacheOption[bool]", "tensorstore::RecheckCacheOption::RecheckCacheOption[default]", "tensorstore::RecheckCacheOption::RecheckCacheOption[time]", "tensorstore::RecheckCacheOption::flags", "tensorstore::RecheckCacheOption::specified", "tensorstore::RecheckCacheOption::time", "tensorstore::RecheckCached", "tensorstore::RecheckCached::AtOpen", "tensorstore::RecheckCachedData", "tensorstore::RecheckCachedData::AtOpen", "tensorstore::RecheckCachedMetadata", "tensorstore::RepeatedElementsConstraint", "tensorstore::Resize", "tensorstore::ResizeMode", "tensorstore::ResizeOptions", "tensorstore::ResizeOptions::mode", "tensorstore::ResolveBounds", "tensorstore::ResolveBoundsMode", "tensorstore::ResolveBoundsOptions", "tensorstore::ResolveBoundsOptions::batch", "tensorstore::Result", "tensorstore::Result&lt;T&gt;::IgnoreResult", "tensorstore::Result&lt;T&gt;::Result[convert]", "tensorstore::Result&lt;T&gt;::Result[copy]", "tensorstore::Result&lt;T&gt;::Result[default]", "tensorstore::Result&lt;T&gt;::Result[in_place]", "tensorstore::Result&lt;T&gt;::Result[status]", "tensorstore::Result&lt;T&gt;::Result[value]", "tensorstore::Result&lt;T&gt;::const_reference_type", "tensorstore::Result&lt;T&gt;::emplace", "tensorstore::Result&lt;T&gt;::error_type", "tensorstore::Result&lt;T&gt;::ok", "tensorstore::Result&lt;T&gt;::operator-&gt;", "tensorstore::Result&lt;T&gt;::operator=[convert]", "tensorstore::Result&lt;T&gt;::operator=[copy]", "tensorstore::Result&lt;T&gt;::operator=[status]", "tensorstore::Result&lt;T&gt;::operator=[value]", "tensorstore::Result&lt;T&gt;::operator|", "tensorstore::Result&lt;T&gt;::operator*", "tensorstore::Result&lt;T&gt;::operator==", "tensorstore::Result&lt;T&gt;::operator!=", "tensorstore::Result&lt;T&gt;::reference_type", "tensorstore::Result&lt;T&gt;::status", "tensorstore::Result&lt;T&gt;::value", "tensorstore::Result&lt;T&gt;::value_or", "tensorstore::Result&lt;T&gt;::value_type", "tensorstore::Schema", "tensorstore::Schema::ApplyIndexTransform", "tensorstore::Schema::DimensionUnits", "tensorstore::Schema::FillValue", "tensorstore::Schema::FillValue::operator==", "tensorstore::Schema::IsOption", "tensorstore::Schema::Override", "tensorstore::Schema::Override[IndexDomain]", "tensorstore::Schema::Set", "tensorstore::Schema::Set[Schema]", "tensorstore::Schema::Shape", "tensorstore::Schema::TransformInputSpaceSchema", "tensorstore::Schema::chunk_layout", "tensorstore::Schema::codec", "tensorstore::Schema::dimension_units", "tensorstore::Schema::domain", "tensorstore::Schema::dtype", "tensorstore::Schema::fill_value", "tensorstore::Schema::operator|", "tensorstore::Schema::rank", "tensorstore::SetDeferredResult", "tensorstore::SetPermutation", "tensorstore::SetPermutationFromStrides", "tensorstore::Shared", "tensorstore::SharedArray", "tensorstore::SharedArrayView", "tensorstore::SharedElementPointer", "tensorstore::SharedOffsetArray", "tensorstore::SharedOffsetArrayView", "tensorstore::ShiftInterval", "tensorstore::ShiftIntervalBackward", "tensorstore::ShiftIntervalTo", "tensorstore::SmallBitSet", "tensorstore::SmallBitSet&lt;N&gt;::BoolsView", "tensorstore::SmallBitSet&lt;N&gt;::ConstBoolsView", "tensorstore::SmallBitSet&lt;N&gt;::FromBoolRange", "tensorstore::SmallBitSet&lt;N&gt;::FromBools", "tensorstore::SmallBitSet&lt;N&gt;::FromIndexRange", "tensorstore::SmallBitSet&lt;N&gt;::FromIndices", "tensorstore::SmallBitSet&lt;N&gt;::FromUint", "tensorstore::SmallBitSet&lt;N&gt;::IndexView", "tensorstore::SmallBitSet&lt;N&gt;::SmallBitSet[bool]", "tensorstore::SmallBitSet&lt;N&gt;::SmallBitSet[default]", "tensorstore::SmallBitSet&lt;N&gt;::Uint", "tensorstore::SmallBitSet&lt;N&gt;::UpTo", "tensorstore::SmallBitSet&lt;N&gt;::all", "tensorstore::SmallBitSet&lt;N&gt;::any", "tensorstore::SmallBitSet&lt;N&gt;::none", "tensorstore::SmallBitSet&lt;N&gt;::operator=", "tensorstore::SmallBitSet&lt;N&gt;::operator&amp;", "tensorstore::SmallBitSet&lt;N&gt;::operator|", "tensorstore::SmallBitSet&lt;N&gt;::operator^", "tensorstore::SmallBitSet&lt;N&gt;::operator bool", "tensorstore::SmallBitSet&lt;N&gt;::operator~", "tensorstore::SmallBitSet&lt;N&gt;::operator==", "tensorstore::SmallBitSet&lt;N&gt;::operator&lt;&lt;", "tensorstore::SmallBitSet&lt;N&gt;::operator[]", "tensorstore::SmallBitSet&lt;N&gt;::reference", "tensorstore::SmallBitSet&lt;N&gt;::set", "tensorstore::SmallBitSet&lt;N&gt;::size", "tensorstore::SmallBitSet&lt;N&gt;::test", "tensorstore::SmallBitSet&lt;N&gt;::to_uint", "tensorstore::SmallBitSet&lt;N&gt;::value_type", "tensorstore::SourceDataReferenceRestriction", "tensorstore::SpanStaticExtent", "tensorstore::Spec", "tensorstore::Spec::ApplyIndexTransform[expr]", "tensorstore::Spec::ApplyIndexTransform[transform]", "tensorstore::Spec::BindContext", "tensorstore::Spec::GetTransformForIndexingOperation", "tensorstore::Spec::Set", "tensorstore::Spec::Spec[default]", "tensorstore::Spec::StripContext", "tensorstore::Spec::UnbindContext", "tensorstore::Spec::base", "tensorstore::Spec::chunk_layout", "tensorstore::Spec::codec", "tensorstore::Spec::context_binding_state", "tensorstore::Spec::dimension_units", "tensorstore::Spec::domain", "tensorstore::Spec::dtype", "tensorstore::Spec::fill_value", "tensorstore::Spec::kvstore", "tensorstore::Spec::open_mode", "tensorstore::Spec::operator==", "tensorstore::Spec::rank", "tensorstore::Spec::schema", "tensorstore::Spec::transform", "tensorstore::Spec::valid", "tensorstore::SpecConvertOptions", "tensorstore::SpecOptions", "tensorstore::SpecRequestOptions", "tensorstore::StaticCast", "tensorstore::StaticCastResultType", "tensorstore::StaticDataType", "tensorstore::StaticDataTypeCast", "tensorstore::StaticOrDynamicRank", "tensorstore::StaticRank", "tensorstore::StaticRankCast", "tensorstore::StorageGeneration", "tensorstore::StorageGeneration::DebugString", "tensorstore::StorageGeneration::EqualOrUnspecified", "tensorstore::StorageGeneration::Invalid", "tensorstore::StorageGeneration::IsClean", "tensorstore::StorageGeneration::IsNoValue", "tensorstore::StorageGeneration::IsUnknown", "tensorstore::StorageGeneration::IsValid", "tensorstore::StorageGeneration::NoValue", "tensorstore::StorageGeneration::NotEqualOrUnspecified", "tensorstore::StorageGeneration::Unknown", "tensorstore::StorageGeneration::operator bool", "tensorstore::StorageGeneration::operator==", "tensorstore::StorageGeneration::operator&lt;&lt;", "tensorstore::StorageGeneration::value", "tensorstore::StrAppend", "tensorstore::StrCat", "tensorstore::StridedLayout", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::MaybeConstIndex", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::MaybeConstOriginIndex", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::RankType", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[convert]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[default]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[domain, byte_strides]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[order]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[origin, shape, byte_strides]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[rank]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[rank, components]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[shape, byte_strides]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::StridedLayout[unchecked]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::array_origin_kind", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::byte_strides", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::container_kind", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::domain", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::num_elements", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator=[convert]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator()[pack]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator()[vector]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator==", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator&lt;&lt;", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::operator[]", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::origin", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::origin_byte_offset", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::rank", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::set_rank", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::shape", "tensorstore::StridedLayout&lt;Rank, OriginKind, CKind&gt;::static_rank", "tensorstore::StridedLayoutView", "tensorstore::SubArray", "tensorstore::SubArrayStaticRank", "tensorstore::SubBoxView", "tensorstore::TensorReader", "tensorstore::TensorStore", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::ApplyIndexTransform", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::ApplyTensorStoreTransaction", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::DataType", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::Element", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::RankType", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::TensorStore[convert]", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::TensorStore[default]", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::TensorStore[unchecked]", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::base", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::chunk_layout", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::codec", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::dimension_units", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::domain", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::dtype", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::fill_value", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::kvstore", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::operator=", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::operator|", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::rank", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::read_write_mode", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::schema", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::spec", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::static_mode", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::static_rank", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::transaction", "tensorstore::TensorStore&lt;ElementType, Rank, Mode&gt;::valid", "tensorstore::TensorWriter", "tensorstore::TimestampedStorageGeneration", "tensorstore::TimestampedStorageGeneration::TimestampedStorageGeneration[default]", "tensorstore::TimestampedStorageGeneration::TimestampedStorageGeneration[generation, time]", "tensorstore::TimestampedStorageGeneration::Unconditional", "tensorstore::TimestampedStorageGeneration::generation", "tensorstore::TimestampedStorageGeneration::operator==", "tensorstore::TimestampedStorageGeneration::operator&lt;&lt;", "tensorstore::TimestampedStorageGeneration::time", "tensorstore::TimestampedStorageGeneration::unconditional", "tensorstore::ToString", "tensorstore::Transaction", "tensorstore::Transaction::Abort", "tensorstore::Transaction::Barrier", "tensorstore::Transaction::Commit", "tensorstore::Transaction::CommitAsync", "tensorstore::Transaction::Transaction[mode]", "tensorstore::Transaction::Transaction[no_transaction]", "tensorstore::Transaction::aborted", "tensorstore::Transaction::atomic", "tensorstore::Transaction::commit_started", "tensorstore::Transaction::future", "tensorstore::Transaction::mode", "tensorstore::Transaction::no_transaction_t", "tensorstore::Transaction::no_transaction_t::operator TransactionMode[TransactionMode]", "tensorstore::Transaction::operator==", "tensorstore::Transaction::total_bytes", "tensorstore::TransactionMode", "tensorstore::TransactionalOpenOptions", "tensorstore::TransformArray", "tensorstore::TransformArrayConstraints", "tensorstore::TransformArrayConstraints::TransformArrayConstraints", "tensorstore::TransformArrayConstraints::allocate_constraint", "tensorstore::TransformArrayConstraints::iteration_constraints", "tensorstore::TransformArrayConstraints::operator==", "tensorstore::TransformArrayConstraints::order_constraint", "tensorstore::TransformArrayConstraints::repeated_elements_constraint", "tensorstore::TransformInputDimensionUnits", "tensorstore::TransformOutputDimensionUnits", "tensorstore::TransformedArray", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::DataType", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::Element", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::ElementPointer", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::ElementTag", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::Materialize", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::Pointer", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::RankType", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::RebindTransform", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::Transform", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[array]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[convert]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[default]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[element_pointer, transform]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[unchecked]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::TransformedArray[unchecked, array]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::base_array", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::data", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::domain", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::dtype", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::element_pointer", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::labels", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::layout_container_kind", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::operator=[array]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::operator=[convert]", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::operator|", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::origin", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::rank", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::shape", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::static_rank", "tensorstore::TransformedArray&lt;ElementTagType, Rank, LayoutCKind&gt;::transform", "tensorstore::TransformedArrayTypeFromArray", "tensorstore::TransformedArrayTypeFromArrayAndTransform", "tensorstore::TransformedArrayView", "tensorstore::TransformedSharedArray", "tensorstore::TransformedSharedArrayView", "tensorstore::TryConvertToArray", "tensorstore::UnbroadcastArray", "tensorstore::UnbroadcastArrayPreserveRank", "tensorstore::Unit", "tensorstore::Unit::AbslStringify", "tensorstore::Unit::Unit[default]", "tensorstore::Unit::Unit[multiplier, base_unit]", "tensorstore::Unit::Unit[string]", "tensorstore::Unit::base_unit", "tensorstore::Unit::multiplier", "tensorstore::Unit::operator/", "tensorstore::Unit::operator==", "tensorstore::Unit::operator*", "tensorstore::Unit::operator&lt;&lt;", "tensorstore::Unit::to_string", "tensorstore::UnownedToShared", "tensorstore::UnownedToShared[array]", "tensorstore::UnownedToShared[element_pointer]", "tensorstore::UnownedToShared[owned, element_pointer]", "tensorstore::UnspecifiedLayoutOrder", "tensorstore::UnwrapFutureType", "tensorstore::UnwrapQualifiedResultType", "tensorstore::UnwrapResult", "tensorstore::UnwrapResultType", "tensorstore::Utf8String", "tensorstore::Utf8String::operator&lt;", "tensorstore::Utf8String::operator&lt;&lt;", "tensorstore::Utf8String::utf8", "tensorstore::ValidateIndexArrayBounds", "tensorstore::ValidateRank", "tensorstore::ValidateShapeBroadcast", "tensorstore::WaitAllFuture[span]", "tensorstore::WaitAllFuture[variadic]", "tensorstore::WithExecutor", "tensorstore::WithImplicitDimensions[domain]", "tensorstore::WithImplicitDimensions[transform]", "tensorstore::Write[Array, TensorStore]", "tensorstore::WriteFutures", "tensorstore::WriteFutures::Force", "tensorstore::WriteFutures::WriteFutures[copy_future, commit_future]", "tensorstore::WriteFutures::WriteFutures[default]", "tensorstore::WriteFutures::WriteFutures[result]", "tensorstore::WriteFutures::WriteFutures[status]", "tensorstore::WriteFutures::commit_future", "tensorstore::WriteFutures::copy_future", "tensorstore::WriteFutures::result", "tensorstore::WriteFutures::status", "tensorstore::WriteFutures::value", "tensorstore::WriteOptions", "tensorstore::WriteOptions::alignment_options", "tensorstore::WriteOptions::progress_function", "tensorstore::WriteOptions::source_data_reference_restriction", "tensorstore::WriteProgress", "tensorstore::WriteProgress::committed_elements", "tensorstore::WriteProgress::copied_elements", "tensorstore::WriteProgress::operator==", "tensorstore::WriteProgress::operator&lt;&lt;", "tensorstore::WriteProgress::total_elements", "tensorstore::WriteProgressFunction", "tensorstore::WriteProgressFunction::Function", "tensorstore::abs[bfloat16]", "tensorstore::abs[int4padded]", "tensorstore::acos[bfloat16]", "tensorstore::acosh[bfloat16]", "tensorstore::asin[bfloat16]", "tensorstore::asinh[bfloat16]", "tensorstore::atan[bfloat16]", "tensorstore::atanh[bfloat16]", "tensorstore::c_order", "tensorstore::ceil[bfloat16]", "tensorstore::container", "tensorstore::cos[bfloat16]", "tensorstore::cosh[bfloat16]", "tensorstore::default_init", "tensorstore::dtype_t", "tensorstore::dtype_v", "tensorstore::dtypes::bfloat16_t", "tensorstore::dtypes::bool_t", "tensorstore::dtypes::byte_t", "tensorstore::dtypes::char_t", "tensorstore::dtypes::complex128_t", "tensorstore::dtypes::complex64_t", "tensorstore::dtypes::float16_t", "tensorstore::dtypes::float32_t", "tensorstore::dtypes::float64_t", "tensorstore::dtypes::float8_e4m3b11fnuz_t", "tensorstore::dtypes::float8_e4m3fn_t", "tensorstore::dtypes::float8_e4m3fnuz_t", "tensorstore::dtypes::float8_e5m2_t", "tensorstore::dtypes::float8_e5m2fnuz_t", "tensorstore::dtypes::int16_t", "tensorstore::dtypes::int32_t", "tensorstore::dtypes::int4_t", "tensorstore::dtypes::int64_t", "tensorstore::dtypes::int8_t", "tensorstore::dtypes::json_t", "tensorstore::dtypes::string_t", "tensorstore::dtypes::uint16_t", "tensorstore::dtypes::uint32_t", "tensorstore::dtypes::uint64_t", "tensorstore::dtypes::uint8_t", "tensorstore::dtypes::ustring_t", "tensorstore::dynamic_extent", "tensorstore::dynamic_rank", "tensorstore::exp[bfloat16]", "tensorstore::exp2[bfloat16]", "tensorstore::expm1[bfloat16]", "tensorstore::fix_resizable_bounds", "tensorstore::floor[bfloat16]", "tensorstore::fmax[bfloat16]", "tensorstore::fmin[bfloat16]", "tensorstore::fmod[bfloat16]", "tensorstore::include_repeated_elements", "tensorstore::isfinite", "tensorstore::isinf", "tensorstore::isnan", "tensorstore::kImplicit", "tensorstore::kInfIndex", "tensorstore::kInfSize", "tensorstore::kMaxFiniteIndex", "tensorstore::kMaxFiniteSize", "tensorstore::kMaxRank", "tensorstore::kMinFiniteIndex", "tensorstore::kvstore::CopyRangeOptions", "tensorstore::kvstore::CopyRangeOptions::source_range", "tensorstore::kvstore::CopyRangeOptions::source_staleness_bound", "tensorstore::kvstore::Delete", "tensorstore::kvstore::DeleteRange", "tensorstore::kvstore::DriverOpenOptions", "tensorstore::kvstore::DriverPtr", "tensorstore::kvstore::DriverSpecOptions", "tensorstore::kvstore::DriverSpecOptions::IsOption", "tensorstore::kvstore::DriverSpecPtr", "tensorstore::kvstore::DriverSpecPtr::BindContext", "tensorstore::kvstore::DriverSpecPtr::Set", "tensorstore::kvstore::DriverSpecPtr::StripContext", "tensorstore::kvstore::DriverSpecPtr::UnbindContext", "tensorstore::kvstore::DriverSpecPtr::context_binding_state", "tensorstore::kvstore::ExperimentalCopyRange", "tensorstore::kvstore::Key", "tensorstore::kvstore::KvStore", "tensorstore::kvstore::KvStore::AppendPathComponent", "tensorstore::kvstore::KvStore::AppendSuffix", "tensorstore::kvstore::KvStore::ApplyTensorStoreTransaction", "tensorstore::kvstore::KvStore::KvStore[default]", "tensorstore::kvstore::KvStore::KvStore[driver]", "tensorstore::kvstore::KvStore::ToUrl", "tensorstore::kvstore::KvStore::base", "tensorstore::kvstore::KvStore::driver", "tensorstore::kvstore::KvStore::non_transactional", "tensorstore::kvstore::KvStore::operator|", "tensorstore::kvstore::KvStore::operator==", "tensorstore::kvstore::KvStore::path", "tensorstore::kvstore::KvStore::spec", "tensorstore::kvstore::KvStore::transaction", "tensorstore::kvstore::KvStore::valid", "tensorstore::kvstore::ListEntry", "tensorstore::kvstore::ListFuture", "tensorstore::kvstore::ListOptions", "tensorstore::kvstore::ListOptions::range", "tensorstore::kvstore::ListOptions::staleness_bound", "tensorstore::kvstore::ListOptions::strip_prefix_length", "tensorstore::kvstore::Open", "tensorstore::kvstore::OpenOptions", "tensorstore::kvstore::Read", "tensorstore::kvstore::ReadGenerationConditions", "tensorstore::kvstore::ReadGenerationConditions::Matches", "tensorstore::kvstore::ReadGenerationConditions::if_equal", "tensorstore::kvstore::ReadGenerationConditions::if_not_equal", "tensorstore::kvstore::ReadGenerationConditions::operator bool", "tensorstore::kvstore::ReadOptions", "tensorstore::kvstore::ReadOptions::batch", "tensorstore::kvstore::ReadOptions::byte_range", "tensorstore::kvstore::ReadOptions::generation_conditions", "tensorstore::kvstore::ReadOptions::staleness_bound", "tensorstore::kvstore::ReadResult", "tensorstore::kvstore::ReadResult::Missing[stamp]", "tensorstore::kvstore::ReadResult::State", "tensorstore::kvstore::ReadResult::Unspecified[default]", "tensorstore::kvstore::ReadResult::Value[value, stamp]", "tensorstore::kvstore::ReadResult::aborted", "tensorstore::kvstore::ReadResult::has_value", "tensorstore::kvstore::ReadResult::kUnspecified", "tensorstore::kvstore::ReadResult::not_found", "tensorstore::kvstore::ReadResult::operator==", "tensorstore::kvstore::ReadResult::operator&lt;&lt;[ReadResult]", "tensorstore::kvstore::ReadResult::operator&lt;&lt;[State]", "tensorstore::kvstore::ReadResult::optional_value", "tensorstore::kvstore::ReadResult::stamp", "tensorstore::kvstore::ReadResult::state", "tensorstore::kvstore::ReadResult::value", "tensorstore::kvstore::Spec", "tensorstore::kvstore::Spec::AppendPathComponent", "tensorstore::kvstore::Spec::AppendSuffix", "tensorstore::kvstore::Spec::BindContext", "tensorstore::kvstore::Spec::FromUrl", "tensorstore::kvstore::Spec::Set", "tensorstore::kvstore::Spec::Spec[default]", "tensorstore::kvstore::Spec::Spec[driver]", "tensorstore::kvstore::Spec::Spec[driver, path]", "tensorstore::kvstore::Spec::StripContext", "tensorstore::kvstore::Spec::ToUrl", "tensorstore::kvstore::Spec::UnbindContext", "tensorstore::kvstore::Spec::base", "tensorstore::kvstore::Spec::context_binding_state", "tensorstore::kvstore::Spec::driver", "tensorstore::kvstore::Spec::operator==", "tensorstore::kvstore::Spec::path", "tensorstore::kvstore::Spec::valid", "tensorstore::kvstore::SpecConvertOptions", "tensorstore::kvstore::SpecConvertOptions::IsOption", "tensorstore::kvstore::SpecConvertOptions::context", "tensorstore::kvstore::SpecConvertOptions::context_binding_mode", "tensorstore::kvstore::SpecRequestOptions", "tensorstore::kvstore::TransactionalReadGenerationConditions", "tensorstore::kvstore::TransactionalReadGenerationConditions::Matches", "tensorstore::kvstore::TransactionalReadGenerationConditions::if_not_equal", "tensorstore::kvstore::TransactionalReadOptions", "tensorstore::kvstore::TransactionalReadOptions::batch", "tensorstore::kvstore::TransactionalReadOptions::byte_range", "tensorstore::kvstore::TransactionalReadOptions::generation_conditions", "tensorstore::kvstore::TransactionalReadOptions::staleness_bound", "tensorstore::kvstore::Value", "tensorstore::kvstore::Write", "tensorstore::kvstore::WriteGenerationConditions", "tensorstore::kvstore::WriteGenerationConditions::Matches", "tensorstore::kvstore::WriteGenerationConditions::MatchesNoValue", "tensorstore::kvstore::WriteGenerationConditions::if_equal", "tensorstore::kvstore::WriteOptions", "tensorstore::kvstore::WriteOptions::generation_conditions", "tensorstore::log[bfloat16]", "tensorstore::log10[bfloat16]", "tensorstore::log1p[bfloat16]", "tensorstore::log2[bfloat16]", "tensorstore::may_allocate", "tensorstore::nextafter[bfloat16]", "tensorstore::no_batch", "tensorstore::no_transaction", "tensorstore::offset_origin", "tensorstore::operator&amp;[DataTypeConversionFlags]", "tensorstore::operator&amp;[DomainAlignmentOptions]", "tensorstore::operator&amp;[OpenMode]", "tensorstore::operator&amp;[ReadWriteMode]", "tensorstore::operator&amp;[ResizeMode]", "tensorstore::operator&amp;[ResolveBoundsMode]", "tensorstore::operator|", "tensorstore::operator|[DataTypeConversionFlags]", "tensorstore::operator|[DomainAlignmentOptions]", "tensorstore::operator|[OpenMode]", "tensorstore::operator|[ReadWriteMode]", "tensorstore::operator|[ResizeMode]", "tensorstore::operator|[ResolveBoundsMode]", "tensorstore::operator~[DataTypeConversionFlags]", "tensorstore::operator~[OpenMode]", "tensorstore::operator~[ReadWriteMode]", "tensorstore::operator![DataTypeConversionFlags]", "tensorstore::operator![DomainAlignmentOptions]", "tensorstore::operator![OpenMode]", "tensorstore::operator![ReadWriteMode]", "tensorstore::operator![ResizeMode]", "tensorstore::operator![ResolveBoundsMode]", "tensorstore::operator&lt;&lt;[ArrayOriginKind]", "tensorstore::operator&lt;&lt;[ContiguousLayoutOrder]", "tensorstore::operator&lt;&lt;[DownsampleMethod]", "tensorstore::operator&lt;&lt;[OpenMode]", "tensorstore::operator&lt;&lt;[OutputIndexMethod]", "tensorstore::operator&lt;&lt;[ReadWriteMode]", "tensorstore::operator&lt;&lt;[ResizeMode]", "tensorstore::operator&lt;&lt;[ResolveBoundsMode]", "tensorstore::operator&lt;&lt;[TransactionMode]", "tensorstore::operator&lt;&lt;[span]", "tensorstore::pointee_dtype_t", "tensorstore::pow[bfloat16]", "tensorstore::pow[int4padded]", "tensorstore::resize_metadata_only", "tensorstore::retain_context", "tensorstore::rint[bfloat16]", "tensorstore::signbit", "tensorstore::sin[bfloat16]", "tensorstore::sinh[bfloat16]", "tensorstore::span", "tensorstore::span&lt;T, Extent&gt;::at", "tensorstore::span&lt;T, Extent&gt;::back", "tensorstore::span&lt;T, Extent&gt;::begin", "tensorstore::span&lt;T, Extent&gt;::const_iterator", "tensorstore::span&lt;T, Extent&gt;::const_pointer", "tensorstore::span&lt;T, Extent&gt;::const_reference", "tensorstore::span&lt;T, Extent&gt;::const_reverse_iterator", "tensorstore::span&lt;T, Extent&gt;::data", "tensorstore::span&lt;T, Extent&gt;::difference_type", "tensorstore::span&lt;T, Extent&gt;::element_type", "tensorstore::span&lt;T, Extent&gt;::empty", "tensorstore::span&lt;T, Extent&gt;::extent", "tensorstore::span&lt;T, Extent&gt;::first[dynamic]", "tensorstore::span&lt;T, Extent&gt;::first[static]", "tensorstore::span&lt;T, Extent&gt;::front", "tensorstore::span&lt;T, Extent&gt;::index_type", "tensorstore::span&lt;T, Extent&gt;::iterator", "tensorstore::span&lt;T, Extent&gt;::last[dynamic]", "tensorstore::span&lt;T, Extent&gt;::last[static]", "tensorstore::span&lt;T, Extent&gt;::operator[]", "tensorstore::span&lt;T, Extent&gt;::pointer", "tensorstore::span&lt;T, Extent&gt;::rbegin", "tensorstore::span&lt;T, Extent&gt;::reference", "tensorstore::span&lt;T, Extent&gt;::reverse_iterator", "tensorstore::span&lt;T, Extent&gt;::size", "tensorstore::span&lt;T, Extent&gt;::size_bytes", "tensorstore::span&lt;T, Extent&gt;::span[array]", "tensorstore::span&lt;T, Extent&gt;::span[begin, end]", "tensorstore::span&lt;T, Extent&gt;::span[container]", "tensorstore::span&lt;T, Extent&gt;::span[convert]", "tensorstore::span&lt;T, Extent&gt;::span[default]", "tensorstore::span&lt;T, Extent&gt;::span[pointer, count]", "tensorstore::span&lt;T, Extent&gt;::subspan[dynamic]", "tensorstore::span&lt;T, Extent&gt;::subspan[static]", "tensorstore::span&lt;T, Extent&gt;::value_type", "tensorstore::sqrt[bfloat16]", "tensorstore::swap", "tensorstore::tan[bfloat16]", "tensorstore::tanh[bfloat16]", "tensorstore::to_string[ReadWriteMode]", "tensorstore::trunc[bfloat16]", "tensorstore::unchecked", "tensorstore::unchecked_t", "tensorstore::unspecified_order", "tensorstore::value_init", "tensorstore::view", "tensorstore::zero_origin", "<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">bmp</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tiff</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">webp</span></code> Driver", "Drivers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr3</span></code> Driver", "Environment variables", "TensorStore", "Index space", "Building and Installing", "<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver", "Key-Value Storage Layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">kvstack</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ocdbt</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">s3</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tsgrpc_kvstore</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr3_sharding_indexed</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zip</span></code> Key-Value Store driver", "API reference", "tensorstore.Batch", "tensorstore.Batch.__init__", "tensorstore.Batch.submit", "tensorstore.ChunkLayout", "tensorstore.ChunkLayout.Grid", "tensorstore.ChunkLayout.Grid.__eq__", "tensorstore.ChunkLayout.Grid.__init__(components)", "tensorstore.ChunkLayout.Grid.__init__(json)", "tensorstore.ChunkLayout.Grid.aspect_ratio", "tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint", "tensorstore.ChunkLayout.Grid.elements", "tensorstore.ChunkLayout.Grid.elements_soft_constraint", "tensorstore.ChunkLayout.Grid.ndim", "tensorstore.ChunkLayout.Grid.rank", "tensorstore.ChunkLayout.Grid.shape", "tensorstore.ChunkLayout.Grid.shape_soft_constraint", "tensorstore.ChunkLayout.Grid.to_json", "tensorstore.ChunkLayout.Grid.update", "tensorstore.ChunkLayout.__eq__", "tensorstore.ChunkLayout.__init__(components)", "tensorstore.ChunkLayout.__init__(json)", "tensorstore.ChunkLayout.codec_chunk", "tensorstore.ChunkLayout.grid_origin", "tensorstore.ChunkLayout.grid_origin_soft_constraint", "tensorstore.ChunkLayout.inner_order", "tensorstore.ChunkLayout.inner_order_soft_constraint", "tensorstore.ChunkLayout.ndim", "tensorstore.ChunkLayout.rank", "tensorstore.ChunkLayout.read_chunk", "tensorstore.ChunkLayout.read_chunk_template", "tensorstore.ChunkLayout.to_json", "tensorstore.ChunkLayout.update", "tensorstore.ChunkLayout.write_chunk", "tensorstore.ChunkLayout.write_chunk_template", "tensorstore.CodecSpec", "tensorstore.CodecSpec.__init__", "tensorstore.CodecSpec.to_json", "tensorstore.Context", "tensorstore.Context.Resource", "tensorstore.Context.Resource.to_json", "tensorstore.Context.Spec", "tensorstore.Context.Spec.__init__", "tensorstore.Context.Spec.to_json", "tensorstore.Context.__getitem__", "tensorstore.Context.__init__(default)", "tensorstore.Context.__init__(json)", "tensorstore.Context.__init__(spec)", "tensorstore.Context.parent", "tensorstore.Context.spec", "tensorstore.Dim", "tensorstore.Dim.__contains__(dim)", "tensorstore.Dim.__contains__(index)", "tensorstore.Dim.__eq__", "tensorstore.Dim.__init__(exclusive_max)", "tensorstore.Dim.__init__(inclusive_max)", "tensorstore.Dim.__init__(size)", "tensorstore.Dim.__init__(unbounded)", "tensorstore.Dim.__iter__", "tensorstore.Dim.__len__", "tensorstore.Dim.__repr__", "tensorstore.Dim.__str__", "tensorstore.Dim.empty", "tensorstore.Dim.exclusive_max", "tensorstore.Dim.exclusive_min", "tensorstore.Dim.finite", "tensorstore.Dim.hull", "tensorstore.Dim.implicit_lower", "tensorstore.Dim.implicit_upper", "tensorstore.Dim.inclusive_max", "tensorstore.Dim.inclusive_min", "tensorstore.Dim.intersect", "tensorstore.Dim.label", "tensorstore.Dim.size", "tensorstore.DimExpression", "tensorstore.DimExpression.__getitem__", "tensorstore.DimExpression.diagonal", "tensorstore.DimExpression.label", "tensorstore.DimExpression.mark_bounds_implicit", "tensorstore.DimExpression.oindex", "tensorstore.DimExpression.stride", "tensorstore.DimExpression.translate_backward_by", "tensorstore.DimExpression.translate_by", "tensorstore.DimExpression.translate_to", "tensorstore.DimExpression.transpose", "tensorstore.DimExpression.vindex", "tensorstore.Future", "tensorstore.Future.__new__", "tensorstore.Future.add_done_callback", "tensorstore.Future.cancel", "tensorstore.Future.cancelled", "tensorstore.Future.done", "tensorstore.Future.exception", "tensorstore.Future.force", "tensorstore.Future.remove_done_callback", "tensorstore.Future.result", "tensorstore.FutureLike", "tensorstore.IndexDomain", "tensorstore.IndexDomain.T", "tensorstore.IndexDomain.__getitem__(domain)", "tensorstore.IndexDomain.__getitem__(expr)", "tensorstore.IndexDomain.__getitem__(identifier)", "tensorstore.IndexDomain.__getitem__(selection)", "tensorstore.IndexDomain.__getitem__(transform)", "tensorstore.IndexDomain.__init__(components)", "tensorstore.IndexDomain.__init__(dimensions)", "tensorstore.IndexDomain.__init__(json)", "tensorstore.IndexDomain.__len__", "tensorstore.IndexDomain.__repr__", "tensorstore.IndexDomain.exclusive_max", "tensorstore.IndexDomain.hull", "tensorstore.IndexDomain.implicit_lower_bounds", "tensorstore.IndexDomain.implicit_upper_bounds", "tensorstore.IndexDomain.inclusive_max", "tensorstore.IndexDomain.inclusive_min", "tensorstore.IndexDomain.index_exp", "tensorstore.IndexDomain.intersect", "tensorstore.IndexDomain.label", "tensorstore.IndexDomain.labels", "tensorstore.IndexDomain.mark_bounds_implicit", "tensorstore.IndexDomain.ndim", "tensorstore.IndexDomain.origin", "tensorstore.IndexDomain.rank", "tensorstore.IndexDomain.shape", "tensorstore.IndexDomain.size", "tensorstore.IndexDomain.to_json", "tensorstore.IndexDomain.translate_backward_by", "tensorstore.IndexDomain.translate_by", "tensorstore.IndexDomain.translate_to", "tensorstore.IndexDomain.transpose", "tensorstore.IndexTransform", "tensorstore.IndexTransform.T", "tensorstore.IndexTransform.__call__", "tensorstore.IndexTransform.__getitem__(domain)", "tensorstore.IndexTransform.__getitem__(expr)", "tensorstore.IndexTransform.__getitem__(indices)", "tensorstore.IndexTransform.__getitem__(transform)", "tensorstore.IndexTransform.__init__(components)", "tensorstore.IndexTransform.__init__(domain)", "tensorstore.IndexTransform.__init__(json)", "tensorstore.IndexTransform.__repr__", "tensorstore.IndexTransform.domain", "tensorstore.IndexTransform.implicit_lower_bounds", "tensorstore.IndexTransform.implicit_upper_bounds", "tensorstore.IndexTransform.input_exclusive_max", "tensorstore.IndexTransform.input_inclusive_max", "tensorstore.IndexTransform.input_inclusive_min", "tensorstore.IndexTransform.input_labels", "tensorstore.IndexTransform.input_origin", "tensorstore.IndexTransform.input_rank", "tensorstore.IndexTransform.input_shape", "tensorstore.IndexTransform.label", "tensorstore.IndexTransform.mark_bounds_implicit", "tensorstore.IndexTransform.ndim", "tensorstore.IndexTransform.oindex", "tensorstore.IndexTransform.origin", "tensorstore.IndexTransform.output", "tensorstore.IndexTransform.output_rank", "tensorstore.IndexTransform.shape", "tensorstore.IndexTransform.size", "tensorstore.IndexTransform.to_json", "tensorstore.IndexTransform.translate_backward_by", "tensorstore.IndexTransform.translate_by", "tensorstore.IndexTransform.translate_to", "tensorstore.IndexTransform.transpose", "tensorstore.IndexTransform.vindex", "tensorstore.Indexable", "tensorstore.KvStore", "tensorstore.KvStore.KeyRange", "tensorstore.KvStore.KeyRange.__eq__", "tensorstore.KvStore.KeyRange.__init__", "tensorstore.KvStore.KeyRange.copy", "tensorstore.KvStore.KeyRange.empty", "tensorstore.KvStore.KeyRange.exclusive_max", "tensorstore.KvStore.KeyRange.inclusive_min", "tensorstore.KvStore.ReadResult", "tensorstore.KvStore.ReadResult.__init__", "tensorstore.KvStore.ReadResult.stamp", "tensorstore.KvStore.ReadResult.state", "tensorstore.KvStore.ReadResult.value", "tensorstore.KvStore.Spec", "tensorstore.KvStore.Spec.__add__", "tensorstore.KvStore.Spec.__eq__", "tensorstore.KvStore.Spec.__new__", "tensorstore.KvStore.Spec.__repr__", "tensorstore.KvStore.Spec.__truediv__", "tensorstore.KvStore.Spec.base", "tensorstore.KvStore.Spec.copy", "tensorstore.KvStore.Spec.path", "tensorstore.KvStore.Spec.to_json", "tensorstore.KvStore.Spec.update", "tensorstore.KvStore.Spec.url", "tensorstore.KvStore.TimestampedStorageGeneration", "tensorstore.KvStore.TimestampedStorageGeneration.__eq__", "tensorstore.KvStore.TimestampedStorageGeneration.__init__", "tensorstore.KvStore.TimestampedStorageGeneration.generation", "tensorstore.KvStore.TimestampedStorageGeneration.time", "tensorstore.KvStore.__add__", "tensorstore.KvStore.__delitem__", "tensorstore.KvStore.__getitem__", "tensorstore.KvStore.__repr__", "tensorstore.KvStore.__setitem__", "tensorstore.KvStore.__truediv__", "tensorstore.KvStore.base", "tensorstore.KvStore.copy", "tensorstore.KvStore.delete_range", "tensorstore.KvStore.experimental_copy_range_to", "tensorstore.KvStore.list", "tensorstore.KvStore.open", "tensorstore.KvStore.path", "tensorstore.KvStore.read", "tensorstore.KvStore.spec", "tensorstore.KvStore.transaction", "tensorstore.KvStore.url", "tensorstore.KvStore.with_transaction", "tensorstore.KvStore.write", "tensorstore.OpenMode", "tensorstore.OpenMode.__init__", "tensorstore.OpenMode.assume_cached_metadata", "tensorstore.OpenMode.assume_metadata", "tensorstore.OpenMode.create", "tensorstore.OpenMode.delete_existing", "tensorstore.OpenMode.open", "tensorstore.OutputIndexMap", "tensorstore.OutputIndexMap.__init__(constant)", "tensorstore.OutputIndexMap.__init__(index_array)", "tensorstore.OutputIndexMap.__init__(input_dimension)", "tensorstore.OutputIndexMap.index_array", "tensorstore.OutputIndexMap.index_range", "tensorstore.OutputIndexMap.input_dimension", "tensorstore.OutputIndexMap.method", "tensorstore.OutputIndexMap.offset", "tensorstore.OutputIndexMap.stride", "tensorstore.OutputIndexMaps", "tensorstore.OutputIndexMaps.__getitem__", "tensorstore.OutputIndexMaps.__len__", "tensorstore.OutputIndexMaps.rank", "tensorstore.OutputIndexMethod", "tensorstore.OutputIndexMethod.__init__", "tensorstore.OutputIndexMethod.array", "tensorstore.OutputIndexMethod.constant", "tensorstore.OutputIndexMethod.name", "tensorstore.OutputIndexMethod.single_input_dimension", "tensorstore.OutputIndexMethod.value", "tensorstore.Promise", "tensorstore.Promise.new", "tensorstore.Promise.set_exception", "tensorstore.Promise.set_result", "tensorstore.RecheckCacheOption", "tensorstore.Schema", "tensorstore.Schema.T", "tensorstore.Schema.__eq__", "tensorstore.Schema.__getitem__(domain)", "tensorstore.Schema.__getitem__(expr)", "tensorstore.Schema.__getitem__(indices)", "tensorstore.Schema.__getitem__(transform)", "tensorstore.Schema.__init__(components)", "tensorstore.Schema.__init__(json)", "tensorstore.Schema.__repr__", "tensorstore.Schema.chunk_layout", "tensorstore.Schema.codec", "tensorstore.Schema.copy", "tensorstore.Schema.dimension_units", "tensorstore.Schema.domain", "tensorstore.Schema.dtype", "tensorstore.Schema.fill_value", "tensorstore.Schema.label", "tensorstore.Schema.mark_bounds_implicit", "tensorstore.Schema.ndim", "tensorstore.Schema.oindex", "tensorstore.Schema.origin", "tensorstore.Schema.rank", "tensorstore.Schema.shape", "tensorstore.Schema.size", "tensorstore.Schema.to_json", "tensorstore.Schema.translate_backward_by", "tensorstore.Schema.translate_by", "tensorstore.Schema.translate_to", "tensorstore.Schema.transpose", "tensorstore.Schema.update", "tensorstore.Schema.vindex", "tensorstore.Spec", "tensorstore.Spec.T", "tensorstore.Spec.__eq__", "tensorstore.Spec.__getitem__(domain)", "tensorstore.Spec.__getitem__(expr)", "tensorstore.Spec.__getitem__(indices)", "tensorstore.Spec.__getitem__(transform)", "tensorstore.Spec.__new__", "tensorstore.Spec.__repr__", "tensorstore.Spec.base", "tensorstore.Spec.chunk_layout", "tensorstore.Spec.codec", "tensorstore.Spec.copy", "tensorstore.Spec.dimension_units", "tensorstore.Spec.domain", "tensorstore.Spec.dtype", "tensorstore.Spec.fill_value", "tensorstore.Spec.kvstore", "tensorstore.Spec.label", "tensorstore.Spec.mark_bounds_implicit", "tensorstore.Spec.ndim", "tensorstore.Spec.oindex", "tensorstore.Spec.open_mode", "tensorstore.Spec.origin", "tensorstore.Spec.rank", "tensorstore.Spec.schema", "tensorstore.Spec.shape", "tensorstore.Spec.size", "tensorstore.Spec.to_json", "tensorstore.Spec.transform", "tensorstore.Spec.translate_backward_by", "tensorstore.Spec.translate_by", "tensorstore.Spec.translate_to", "tensorstore.Spec.transpose", "tensorstore.Spec.update", "tensorstore.Spec.vindex", "tensorstore.TensorStore", "tensorstore.TensorStore.StorageStatistics", "tensorstore.TensorStore.StorageStatistics.__init__", "tensorstore.TensorStore.StorageStatistics.fully_stored", "tensorstore.TensorStore.StorageStatistics.not_stored", "tensorstore.TensorStore.T", "tensorstore.TensorStore.__array__", "tensorstore.TensorStore.__getitem__(domain)", "tensorstore.TensorStore.__getitem__(expr)", "tensorstore.TensorStore.__getitem__(indices)", "tensorstore.TensorStore.__getitem__(transform)", "tensorstore.TensorStore.__setitem__(domain)", "tensorstore.TensorStore.__setitem__(expr)", "tensorstore.TensorStore.__setitem__(indices)", "tensorstore.TensorStore.__setitem__(transform)", "tensorstore.TensorStore.astype", "tensorstore.TensorStore.base", "tensorstore.TensorStore.chunk_layout", "tensorstore.TensorStore.codec", "tensorstore.TensorStore.dimension_units", "tensorstore.TensorStore.domain", "tensorstore.TensorStore.dtype", "tensorstore.TensorStore.fill_value", "tensorstore.TensorStore.kvstore", "tensorstore.TensorStore.label", "tensorstore.TensorStore.mark_bounds_implicit", "tensorstore.TensorStore.mode", "tensorstore.TensorStore.ndim", "tensorstore.TensorStore.oindex", "tensorstore.TensorStore.oindex.__setitem__", "tensorstore.TensorStore.origin", "tensorstore.TensorStore.rank", "tensorstore.TensorStore.read", "tensorstore.TensorStore.readable", "tensorstore.TensorStore.resize", "tensorstore.TensorStore.resolve", "tensorstore.TensorStore.schema", "tensorstore.TensorStore.shape", "tensorstore.TensorStore.size", "tensorstore.TensorStore.spec", "tensorstore.TensorStore.storage_statistics", "tensorstore.TensorStore.transaction", "tensorstore.TensorStore.translate_backward_by", "tensorstore.TensorStore.translate_by", "tensorstore.TensorStore.translate_to", "tensorstore.TensorStore.transpose", "tensorstore.TensorStore.vindex", "tensorstore.TensorStore.vindex.__setitem__", "tensorstore.TensorStore.with_transaction", "tensorstore.TensorStore.writable", "tensorstore.TensorStore.write", "tensorstore.Transaction", "tensorstore.Transaction.__init__", "tensorstore.Transaction.abort", "tensorstore.Transaction.aborted", "tensorstore.Transaction.atomic", "tensorstore.Transaction.commit_async", "tensorstore.Transaction.commit_started", "tensorstore.Transaction.commit_sync", "tensorstore.Transaction.future", "tensorstore.Transaction.open", "tensorstore.Unit", "tensorstore.Unit.__eq__", "tensorstore.Unit.__init__(components)", "tensorstore.Unit.__init__(json)", "tensorstore.Unit.__init__(multiplier)", "tensorstore.Unit.__init__(pair)", "tensorstore.Unit.__init__(unit)", "tensorstore.Unit.__mul__", "tensorstore.Unit.__truediv__", "tensorstore.Unit.base_unit", "tensorstore.Unit.multiplier", "tensorstore.Unit.to_json", "tensorstore.VirtualChunkedReadParameters", "tensorstore.VirtualChunkedReadParameters.if_not_equal", "tensorstore.VirtualChunkedReadParameters.staleness_bound", "tensorstore.VirtualChunkedWriteParameters", "tensorstore.VirtualChunkedWriteParameters.if_equal", "tensorstore.WriteFutures", "tensorstore.WriteFutures.add_done_callback", "tensorstore.WriteFutures.cancel", "tensorstore.WriteFutures.cancelled", "tensorstore.WriteFutures.commit", "tensorstore.WriteFutures.copy", "tensorstore.WriteFutures.done", "tensorstore.WriteFutures.exception", "tensorstore.WriteFutures.remove_done_callback", "tensorstore.WriteFutures.result", "tensorstore.array", "tensorstore.bfloat16", "tensorstore.bool", "tensorstore.cast(spec)", "tensorstore.cast(store)", "tensorstore.complex128", "tensorstore.complex64", "tensorstore.concat", "tensorstore.d", "tensorstore.d.__class_getitem__", "tensorstore.downsample(spec)", "tensorstore.downsample(store)", "tensorstore.dtype", "tensorstore.dtype.__call__", "tensorstore.dtype.__init__(dtype)", "tensorstore.dtype.__init__(name)", "tensorstore.dtype.name", "tensorstore.dtype.numpy_dtype", "tensorstore.dtype.to_json", "tensorstore.dtype.type", "tensorstore.experimental_collect_matching_metrics", "tensorstore.experimental_collect_prometheus_format_metrics", "tensorstore.experimental_push_metrics_to_prometheus", "tensorstore.experimental_update_verbose_logging", "tensorstore.float16", "tensorstore.float32", "tensorstore.float64", "tensorstore.float8_e4m3b11fnuz", "tensorstore.float8_e4m3fn", "tensorstore.float8_e4m3fnuz", "tensorstore.float8_e5m2", "tensorstore.float8_e5m2fnuz", "tensorstore.inf", "tensorstore.int16", "tensorstore.int32", "tensorstore.int4", "tensorstore.int64", "tensorstore.int8", "tensorstore.json", "tensorstore.newaxis", "tensorstore.ocdbt.DistributedCoordinatorServer", "tensorstore.ocdbt.DistributedCoordinatorServer.__init__", "tensorstore.ocdbt.DistributedCoordinatorServer.port", "tensorstore.ocdbt.dump", "tensorstore.open", "tensorstore.overlay", "tensorstore.parse_tensorstore_flags", "tensorstore.stack", "tensorstore.string", "tensorstore.uint16", "tensorstore.uint32", "tensorstore.uint64", "tensorstore.uint8", "tensorstore.ustring", "tensorstore.virtual_chunked", "Indexing", "Tutorial", "Schema", "JSON Spec"], "titleterms": {"0": 1697, "For": 547, "accessor": [174, 227, 490, 627, 661, 915, 1205, 1297, 1706, 1740, 1741, 1743, 1752, 1788, 1799, 1832, 1869, 1870, 1882, 1894, 1918, 1951, 1983, 2019, 2070, 2080], "ad": [1777, 2162], "align": [8, 1688], "all": [605, 1801, 1835], "alloc": 416, "also": [943, 1114, 1685, 1724, 1725, 1726, 1727, 1728, 1731, 1732, 1735, 1736, 1740, 1752, 1777, 1781, 1787, 1788, 1799, 1800, 1819, 1821, 1828, 1829, 1830, 1831, 1832, 1833, 1837, 1853, 1854, 1856, 1863, 1864, 1865, 1866, 1867, 1888, 1900, 1901, 1903, 1905, 1912, 1917, 1925, 1935, 1939, 1946, 1952, 1954, 1955, 1956, 1957, 1968, 1969, 1971, 1977, 1978, 1979, 1980, 1982, 1984, 1986, 1987, 1988, 1989, 2001, 2002, 2004, 2013, 2014, 2015, 2016, 2018, 2020, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2043, 2044, 2047, 2048, 2051, 2061, 2062, 2063, 2064, 2065, 2066, 2075, 2077, 2097, 2114, 2152, 2154], "an": 2151, "api": [8, 1683, 1689, 1702], "arithmet": [110, 143, 227, 490, 699, 2080], "arrai": [8, 1670, 1681, 1682, 1684, 1685, 1777, 2151, 2162], "aspect": [1681, 1684], "assign": [110, 174, 699, 1205], "assume_metadata": 2151, "asynchron": [8, 1702], "authent": [1691, 1698], "avif": 1673, "b": 1697, "basic": 110, "bazel": 1689, "behavior": 1692, "bitwis": 699, "block": 1788, "bmp": 1674, "boolean": [1777, 2162], "bound": 661, "broadcast": [39, 1205, 1688], "build": 1689, "byte": 1685, "c": [1684, 1689], "ca": [1686, 1691, 1692], "cach": [1689, 1692, 2161], "callback": 1788, "cast": 1671, "certif": [1686, 1691, 1692], "checkout": 1689, "checksum": 1685, "chunk": [1679, 1681, 1682, 1683, 1684, 1685, 1706, 2164], "class": [1706, 1740, 1869, 2164], "classif": 110, "cloud": 1686, "cmake": 1689, "codec": [1681, 1682, 1683, 1684, 1685, 2164], "compar": 2162, "comparison": [39, 490, 995, 1706, 1707, 1870, 1882, 1894, 1951, 1983, 2080], "compil": 8, "compos": 2162, "composit": [586, 995], "compress": [1681, 1682, 1685, 1697], "compressor": 1684, "concept": [1687, 1697], "concurr": 2151, "configur": [1686, 1697], "constant": [39, 99, 131, 174, 355, 390, 392, 398, 416, 473, 489, 490, 526, 585, 586, 661, 882, 1012, 1054, 1056, 1060, 1063, 1112, 1205, 1278, 1306, 1361, 1378, 1622, 1665], "constraint": [8, 1681, 1682, 1684, 1685], "construct": 2162, "constructor": [21, 39, 110, 134, 143, 165, 174, 196, 227, 283, 290, 300, 340, 365, 371, 383, 393, 416, 465, 490, 526, 540, 586, 615, 627, 661, 699, 801, 811, 862, 869, 894, 915, 924, 930, 943, 965, 995, 1029, 1040, 1063, 1121, 1154, 1205, 1240, 1268, 1278, 1297, 1306, 1345, 1379, 1482, 1533, 1622, 1703, 1706, 1707, 1737, 1740, 1743, 1752, 1788, 1799, 1832, 1869, 1870, 1877, 1882, 1894, 1918, 1925, 1939, 1946, 1951, 1983, 2020, 2070, 2080, 2115, 2119, 2147], "context": 0, "convers": [110, 131, 134, 165, 365, 486, 490, 649, 699, 801, 833, 862, 995, 1121, 1188, 1290, 1507], "copi": 39, "core": [8, 1702], "creat": [1681, 1682, 1684, 1685, 2151], "creation": 39, "credenti": 1686, "curl": 1686, "data": [8, 39, 90, 100, 131, 143, 165, 174, 196, 220, 227, 253, 300, 318, 401, 406, 459, 586, 661, 778, 801, 811, 862, 869, 894, 930, 981, 995, 1013, 1017, 1021, 1040, 1057, 1061, 1089, 1188, 1205, 1240, 1268, 1306, 1345, 1366, 1379, 1390, 1394, 1465, 1472, 1482, 1500, 1507, 1512, 1517, 1519, 1533, 1551, 1556, 1559, 1566, 1570, 1622, 1681, 1682, 1683, 1684, 1685, 1697, 1702, 2019], "dataset": 2163, "debug": 1686, "depend": 1689, "develop": 1689, "diagon": 2162, "differ": 2162, "dimens": [13, 605, 1681, 1682, 1683, 1685, 1777, 1801, 1835, 2162, 2164], "document": 1689, "domain": [1681, 1682, 1683, 1684, 1685, 1688], "downsampl": [8, 1672], "driver": [1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "durabl": 1690, "effici": 2151, "element": [1681, 1684], "ellipsi": [1777, 2162], "encod": [1682, 1685], "entri": 1697, "environ": 1686, "error": [8, 1777], "exampl": [0, 13, 518, 519, 520, 547, 605, 609, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1688, 1690, 1691, 1692, 1695, 1696, 1698, 1700, 1701, 1729, 1730, 1732, 1733, 1736, 1742, 1746, 1747, 1748, 1750, 1751, 1752, 1753, 1754, 1756, 1757, 1758, 1759, 1760, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1787, 1789, 1792, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1822, 1823, 1824, 1825, 1826, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1855, 1856, 1859, 1862, 1867, 1869, 1874, 1883, 1884, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1911, 1912, 1913, 1915, 1916, 1917, 1926, 1927, 1928, 1948, 1949, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1970, 1971, 1973, 1976, 1981, 1982, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2007, 2008, 2011, 2012, 2017, 2018, 2019, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2046, 2050, 2051, 2053, 2055, 2058, 2059, 2069, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2110, 2111, 2116, 2139, 2146, 2147, 2150, 2151, 2162, 2164], "exist": 2151, "experiment": 1702, "explicit": [1681, 1682, 1684, 1685], "exponenti": 110, "express": 2162, "file": [1679, 1690, 1697], "fill": [1681, 1682, 1683, 1684, 1685], "float": 110, "flyem": 2163, "footer": 1697, "format": [39, 1697], "fortran": 1684, "framework": 0, "friend": [39, 100, 143, 165, 174, 220, 253, 271, 300, 318, 340, 365, 371, 406, 416, 459, 465, 586, 615, 627, 649, 661, 811, 862, 869, 894, 915, 1021, 1063, 1089, 1092, 1121, 1154, 1188, 1205, 1240, 1268, 1278, 1297, 1345, 1366, 1394, 1482, 1517, 1519, 1533], "from": 1689, "fulli": [605, 1801, 1835], "function": [21, 39, 99, 100, 110, 143, 165, 174, 220, 253, 271, 300, 318, 340, 365, 371, 392, 393, 406, 416, 425, 427, 459, 465, 473, 477, 480, 483, 484, 512, 526, 585, 586, 615, 627, 649, 661, 697, 699, 811, 862, 869, 892, 894, 915, 960, 965, 995, 1021, 1028, 1056, 1060, 1063, 1089, 1092, 1121, 1154, 1188, 1205, 1240, 1268, 1278, 1294, 1297, 1306, 1345, 1366, 1379, 1394, 1482, 1517, 1519, 1533, 1622], "gc": 1691, "gener": 1689, "geometr": 1799, "get": 1687, "googl": 1686, "handl": 8, "header": 1697, "height": 1697, "hemibrain": 2163, "highlight": 1687, "http": [1686, 1692], "hyperbol": 110, "i": [1240, 1869, 2019], "ident": 661, "import": [1696, 1700], "improv": 2151, "index": [8, 39, 1205, 1688, 1702, 1777, 1799, 1832, 1951, 1983, 2019, 2162], "inner": 1697, "input": 13, "instal": 1689, "integ": [1777, 2162], "integr": 1689, "interfac": 1788, "interior": 1697, "interv": [1777, 2162], "ipython": 1689, "iter": 8, "janelia": 2163, "jpeg": 1675, "json": [8, 1680, 1682, 1696, 1700, 1701, 2165], "kei": [8, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "kind": 1697, "kvstack": 1694, "label": [605, 1801, 1835, 2162], "layer": 1693, "layout": [1681, 1682, 1683, 1684, 1685, 2164], "leaf": 1697, "librari": 1689, "limit": [1681, 1682, 1684, 1690, 1696, 1699, 1700, 1701], "link": 526, "local": [1689, 2163], "macro": 1063, "manifest": 1697, "manipul": 110, "map": [526, 1681, 1682, 1684, 1685], "mark_bounds_implicit": 2162, "member": [39, 90, 100, 131, 143, 165, 174, 196, 220, 227, 253, 300, 318, 401, 406, 459, 586, 661, 778, 801, 811, 862, 869, 894, 930, 981, 995, 1013, 1017, 1021, 1040, 1057, 1061, 1089, 1188, 1205, 1240, 1268, 1306, 1345, 1366, 1379, 1390, 1394, 1465, 1472, 1482, 1500, 1507, 1512, 1517, 1519, 1533, 1551, 1556, 1559, 1566, 1570, 1622, 1707, 1737, 1752, 1788, 1877, 1925, 1935, 1939, 1946, 2020, 2092, 2095, 2097, 2115, 2119, 2147], "memori": 1695, "metadata": 2151, "metafunct": 490, "method": [21, 39, 90, 131, 134, 143, 165, 174, 196, 220, 253, 271, 283, 290, 300, 318, 340, 365, 371, 416, 427, 465, 486, 490, 526, 540, 586, 615, 627, 649, 661, 801, 811, 833, 862, 869, 894, 930, 943, 944, 965, 981, 995, 1029, 1040, 1049, 1051, 1063, 1089, 1121, 1154, 1188, 1205, 1240, 1268, 1278, 1306, 1345, 1379, 1474, 1482, 1507, 1517, 1533, 1556, 1566, 1622, 1688], "mix": [605, 1801, 1835], "mode": [8, 2162], "mutat": [1882, 1951, 1983], "n5": [1681, 2163], "neuroglancer_precomput": 1682, "neuroglancer_uint64_shard": 1696, "new": [1681, 1682, 1684, 1685, 2151], "node": 1697, "non": 2069, "note": [4, 16, 30, 169, 174, 542, 836, 841, 842, 843, 848, 849, 854, 966, 967, 976, 978, 1065, 1070, 1506, 1622, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1688, 1689, 1690, 1692, 1697, 1699, 1732, 1736, 1747, 1775, 1778, 1782, 1799, 1801, 1802, 1805, 1835, 1900, 1901, 1903, 1908, 1910, 1912, 1958, 1961, 1981, 1993, 1994, 1996, 1997, 1999, 2005, 2008, 2017, 2069, 2114, 2151, 2152, 2154, 2155, 2160, 2161, 2162, 2164], "number": 1697, "numpi": 2162, "o": [1240, 1869, 2019], "ocdbt": [1697, 1702], "oindex": 2162, "open": 2151, "oper": [110, 131, 134, 143, 165, 227, 365, 486, 490, 649, 699, 801, 833, 862, 995, 1121, 1188, 1290, 1507, 1683, 1703, 1706, 1707, 1752, 1776, 1799, 1869, 1870, 1882, 1894, 1951, 1983, 2070, 2080, 2115, 2162], "option": 1686, "order": 1684, "outer": [1697, 2162], "output": [13, 1688], "ownership": 490, "parti": 1689, "pickl": 2161, "png": 1676, "point": 110, "power": [110, 699], "propag": 661, "proxi": 1686, "public": [1707, 1737, 1752, 1788, 1877, 1925, 1935, 1939, 1946, 2020, 2092, 2095, 2097, 2115, 2119, 2147], "pypi": 1689, "python": [1683, 1689], "rank": 8, "ratio": [1681, 1684], "raw": 1682, "read": [1682, 1685, 2151, 2163], "refer": [8, 13, 1702], "relat": [21, 39, 99, 131, 165, 174, 355, 365, 390, 392, 393, 398, 406, 416, 425, 427, 459, 465, 473, 477, 480, 483, 484, 489, 490, 512, 526, 569, 585, 586, 615, 627, 661, 697, 811, 882, 892, 915, 930, 943, 960, 965, 995, 1011, 1012, 1021, 1028, 1054, 1055, 1056, 1059, 1060, 1063, 1089, 1112, 1121, 1154, 1205, 1240, 1278, 1294, 1297, 1306, 1361, 1378, 1379, 1394, 1445, 1480, 1482, 1499, 1506, 1533, 1565, 1622, 1665], "represent": [1752, 1799, 1832, 1869, 1882, 1951, 1983], "request": 1686, "requir": 1689, "round": 110, "run": 1689, "s3": 1698, "scalar": 1684, "schema": [1681, 1682, 1683, 1684, 1685, 2164], "see": [943, 1114, 1685, 1724, 1725, 1726, 1727, 1728, 1731, 1732, 1735, 1736, 1740, 1752, 1777, 1781, 1787, 1788, 1799, 1800, 1819, 1821, 1828, 1829, 1830, 1831, 1832, 1833, 1837, 1853, 1854, 1856, 1863, 1864, 1865, 1866, 1867, 1888, 1900, 1901, 1903, 1905, 1912, 1917, 1925, 1935, 1939, 1946, 1952, 1954, 1955, 1956, 1957, 1968, 1969, 1971, 1977, 1978, 1979, 1980, 1982, 1984, 1986, 1987, 1988, 1989, 2001, 2002, 2004, 2013, 2014, 2015, 2016, 2018, 2020, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2043, 2044, 2047, 2048, 2051, 2061, 2062, 2063, 2064, 2065, 2066, 2075, 2077, 2097, 2114, 2152, 2154], "segment": 1682, "select": [1681, 1682, 1684, 1685, 2162], "semant": 2069, "separ": [1682, 1685], "sequenc": 1799, "serial": 8, "set": 1121, "setter": 1706, "shape": [1681, 1682, 1684, 1685], "shard": [1682, 1685], "shell": 1689, "singl": [1679, 1697], "singleton": [1777, 2162], "skip": 2151, "sourc": [13, 1689], "space": 1688, "spec": [1702, 2165], "specif": [1682, 1696, 1700, 1701], "stack": 1683, "start": 1687, "storag": [8, 1679, 1686, 1693, 1697], "store": [1690, 1691, 1692, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "stride": 2162, "string": [8, 1752, 1799, 1832, 1869, 1882, 1951, 1983], "structur": 1684, "style": 2162, "support": [8, 1063, 1683, 1684, 1689, 1702, 2161], "synchron": 1869, "tabl": 1697, "target": 13, "templat": 1706, "tensorstor": [1681, 1682, 1683, 1684, 1685, 1686, 1687, 2151], "test": [1063, 1689, 1691], "third": 1689, "tiff": 1677, "time": 8, "tip": 2051, "tl": [1686, 1691, 1692], "transact": [1869, 2019, 2069, 2161], "transform": [8, 661, 1688, 2162], "translate_backward_bi": 2162, "translate_bi": 2162, "translate_to": 2162, "transpos": 2162, "tree": 1697, "trigonometr": 110, "tsgrpc_kvstore": 1699, "tutori": 2163, "type": [8, 39, 100, 131, 143, 165, 174, 196, 227, 253, 271, 290, 340, 365, 371, 398, 406, 413, 416, 427, 473, 490, 507, 512, 513, 526, 569, 586, 615, 627, 661, 778, 924, 930, 943, 965, 981, 1011, 1012, 1021, 1026, 1029, 1040, 1055, 1059, 1063, 1089, 1121, 1154, 1205, 1240, 1278, 1297, 1306, 1378, 1394, 1400, 1445, 1480, 1482, 1499, 1506, 1517, 1533, 1565, 1622, 1681, 1682, 1683, 1684, 1685, 1702, 2019], "unconstrain": [1681, 1682, 1684, 1685], "unit": [1681, 1682, 1683, 1685, 2164], "unlabel": [605, 1801, 1835], "unshard": 1682, "us": 2151, "util": 8, "valu": [8, 1681, 1682, 1683, 1684, 1685, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701], "variabl": 1686, "vector": [8, 2162], "version": 1697, "view": 1702, "vindex": 2162, "virtual": 1702, "warn": [7, 43, 45, 64, 427, 527, 563, 758, 842, 849, 990, 1193, 1357, 1358, 1679, 1681, 1682, 1684, 1685, 1689, 1693, 1698, 1703, 1780, 1788, 1789, 1790, 1908, 1909, 1912, 2017, 2025, 2030, 2031, 2032, 2033, 2048, 2051, 2054, 2058, 2059, 2066, 2069, 2151, 2161, 2162], "webp": 1678, "when": [1681, 1682, 1684, 1685, 2151], "while": 13, "without": [1685, 1689], "write": [1682, 1685, 1690, 2151, 2163], "zarr": 1684, "zarr3": 1685, "zarr3_sharding_index": 1700, "zip": 1701, "zstd": 1697}})