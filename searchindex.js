Search.setIndex({"titles": ["Context framework", "<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">bmp</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tiff</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">webp</span></code> Driver", "Drivers", "<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr3</span></code> Driver", "Environment variables", "TensorStore", "Index space", "Building and Installing", "<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver", "Key-Value Storage Layer", "<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ocdbt</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">s3</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">tsgrpc_kvstore</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr_sharding_indexed</span></code> Key-Value Store driver", "<code class=\"docutils literal notranslate\"><span class=\"pre\">zip</span></code> Key-Value Store driver", "API reference", "tensorstore.Batch", "tensorstore.Batch.__init__", "tensorstore.Batch.submit", "tensorstore.ChunkLayout", "tensorstore.ChunkLayout.Grid", "tensorstore.ChunkLayout.Grid.__eq__", "tensorstore.ChunkLayout.Grid.__init__(components)", "tensorstore.ChunkLayout.Grid.__init__(json)", "tensorstore.ChunkLayout.Grid.aspect_ratio", "tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint", "tensorstore.ChunkLayout.Grid.elements", "tensorstore.ChunkLayout.Grid.elements_soft_constraint", "tensorstore.ChunkLayout.Grid.ndim", "tensorstore.ChunkLayout.Grid.rank", "tensorstore.ChunkLayout.Grid.shape", "tensorstore.ChunkLayout.Grid.shape_soft_constraint", "tensorstore.ChunkLayout.Grid.to_json", "tensorstore.ChunkLayout.Grid.update", "tensorstore.ChunkLayout.__eq__", "tensorstore.ChunkLayout.__init__(components)", "tensorstore.ChunkLayout.__init__(json)", "tensorstore.ChunkLayout.codec_chunk", "tensorstore.ChunkLayout.grid_origin", "tensorstore.ChunkLayout.grid_origin_soft_constraint", "tensorstore.ChunkLayout.inner_order", "tensorstore.ChunkLayout.inner_order_soft_constraint", "tensorstore.ChunkLayout.ndim", "tensorstore.ChunkLayout.rank", "tensorstore.ChunkLayout.read_chunk", "tensorstore.ChunkLayout.read_chunk_template", "tensorstore.ChunkLayout.to_json", "tensorstore.ChunkLayout.update", "tensorstore.ChunkLayout.write_chunk", "tensorstore.ChunkLayout.write_chunk_template", "tensorstore.CodecSpec", "tensorstore.CodecSpec.__init__", "tensorstore.CodecSpec.to_json", "tensorstore.Context", "tensorstore.Context.Resource", "tensorstore.Context.Resource.to_json", "tensorstore.Context.Spec", "tensorstore.Context.Spec.__init__", "tensorstore.Context.Spec.to_json", "tensorstore.Context.__getitem__", "tensorstore.Context.__init__(default)", "tensorstore.Context.__init__(json)", "tensorstore.Context.__init__(spec)", "tensorstore.Context.parent", "tensorstore.Context.spec", "tensorstore.Dim", "tensorstore.Dim.__contains__(dim)", "tensorstore.Dim.__contains__(index)", "tensorstore.Dim.__eq__", "tensorstore.Dim.__init__(exclusive_max)", "tensorstore.Dim.__init__(inclusive_max)", "tensorstore.Dim.__init__(size)", "tensorstore.Dim.__init__(unbounded)", "tensorstore.Dim.__iter__", "tensorstore.Dim.__len__", "tensorstore.Dim.__repr__", "tensorstore.Dim.__str__", "tensorstore.Dim.empty", "tensorstore.Dim.exclusive_max", "tensorstore.Dim.exclusive_min", "tensorstore.Dim.finite", "tensorstore.Dim.hull", "tensorstore.Dim.implicit_lower", "tensorstore.Dim.implicit_upper", "tensorstore.Dim.inclusive_max", "tensorstore.Dim.inclusive_min", "tensorstore.Dim.intersect", "tensorstore.Dim.label", "tensorstore.Dim.size", "tensorstore.DimExpression", "tensorstore.DimExpression.__getitem__", "tensorstore.DimExpression.diagonal", "tensorstore.DimExpression.label", "tensorstore.DimExpression.mark_bounds_implicit", "tensorstore.DimExpression.oindex", "tensorstore.DimExpression.stride", "tensorstore.DimExpression.translate_backward_by", "tensorstore.DimExpression.translate_by", "tensorstore.DimExpression.translate_to", "tensorstore.DimExpression.transpose", "tensorstore.DimExpression.vindex", "tensorstore.Future", "tensorstore.Future.__new__", "tensorstore.Future.add_done_callback", "tensorstore.Future.cancel", "tensorstore.Future.cancelled", "tensorstore.Future.done", "tensorstore.Future.exception", "tensorstore.Future.force", "tensorstore.Future.remove_done_callback", "tensorstore.Future.result", "tensorstore.FutureLike", "tensorstore.IndexDomain", "tensorstore.IndexDomain.T", "tensorstore.IndexDomain.__getitem__(domain)", "tensorstore.IndexDomain.__getitem__(expr)", "tensorstore.IndexDomain.__getitem__(identifier)", "tensorstore.IndexDomain.__getitem__(selection)", "tensorstore.IndexDomain.__getitem__(transform)", "tensorstore.IndexDomain.__init__(components)", "tensorstore.IndexDomain.__init__(dimensions)", "tensorstore.IndexDomain.__init__(json)", "tensorstore.IndexDomain.__len__", "tensorstore.IndexDomain.__repr__", "tensorstore.IndexDomain.exclusive_max", "tensorstore.IndexDomain.hull", "tensorstore.IndexDomain.implicit_lower_bounds", "tensorstore.IndexDomain.implicit_upper_bounds", "tensorstore.IndexDomain.inclusive_max", "tensorstore.IndexDomain.inclusive_min", "tensorstore.IndexDomain.index_exp", "tensorstore.IndexDomain.intersect", "tensorstore.IndexDomain.label", "tensorstore.IndexDomain.labels", "tensorstore.IndexDomain.mark_bounds_implicit", "tensorstore.IndexDomain.ndim", "tensorstore.IndexDomain.origin", "tensorstore.IndexDomain.rank", "tensorstore.IndexDomain.shape", "tensorstore.IndexDomain.size", "tensorstore.IndexDomain.to_json", "tensorstore.IndexDomain.translate_backward_by", "tensorstore.IndexDomain.translate_by", "tensorstore.IndexDomain.translate_to", "tensorstore.IndexDomain.transpose", "tensorstore.IndexTransform", "tensorstore.IndexTransform.T", "tensorstore.IndexTransform.__call__", "tensorstore.IndexTransform.__getitem__(domain)", "tensorstore.IndexTransform.__getitem__(expr)", "tensorstore.IndexTransform.__getitem__(indices)", "tensorstore.IndexTransform.__getitem__(transform)", "tensorstore.IndexTransform.__init__(components)", "tensorstore.IndexTransform.__init__(domain)", "tensorstore.IndexTransform.__init__(json)", "tensorstore.IndexTransform.__repr__", "tensorstore.IndexTransform.domain", "tensorstore.IndexTransform.implicit_lower_bounds", "tensorstore.IndexTransform.implicit_upper_bounds", "tensorstore.IndexTransform.input_exclusive_max", "tensorstore.IndexTransform.input_inclusive_max", "tensorstore.IndexTransform.input_inclusive_min", "tensorstore.IndexTransform.input_labels", "tensorstore.IndexTransform.input_origin", "tensorstore.IndexTransform.input_rank", "tensorstore.IndexTransform.input_shape", "tensorstore.IndexTransform.label", "tensorstore.IndexTransform.mark_bounds_implicit", "tensorstore.IndexTransform.ndim", "tensorstore.IndexTransform.oindex", "tensorstore.IndexTransform.origin", "tensorstore.IndexTransform.output", "tensorstore.IndexTransform.output_rank", "tensorstore.IndexTransform.shape", "tensorstore.IndexTransform.size", "tensorstore.IndexTransform.to_json", "tensorstore.IndexTransform.translate_backward_by", "tensorstore.IndexTransform.translate_by", "tensorstore.IndexTransform.translate_to", "tensorstore.IndexTransform.transpose", "tensorstore.IndexTransform.vindex", "tensorstore.Indexable", "tensorstore.KvStore", "tensorstore.KvStore.KeyRange", "tensorstore.KvStore.KeyRange.__eq__", "tensorstore.KvStore.KeyRange.__init__", "tensorstore.KvStore.KeyRange.copy", "tensorstore.KvStore.KeyRange.empty", "tensorstore.KvStore.KeyRange.exclusive_max", "tensorstore.KvStore.KeyRange.inclusive_min", "tensorstore.KvStore.ReadResult", "tensorstore.KvStore.ReadResult.__init__", "tensorstore.KvStore.ReadResult.stamp", "tensorstore.KvStore.ReadResult.state", "tensorstore.KvStore.ReadResult.value", "tensorstore.KvStore.Spec", "tensorstore.KvStore.Spec.__add__", "tensorstore.KvStore.Spec.__eq__", "tensorstore.KvStore.Spec.__new__", "tensorstore.KvStore.Spec.__repr__", "tensorstore.KvStore.Spec.__truediv__", "tensorstore.KvStore.Spec.base", "tensorstore.KvStore.Spec.copy", "tensorstore.KvStore.Spec.path", "tensorstore.KvStore.Spec.to_json", "tensorstore.KvStore.Spec.update", "tensorstore.KvStore.Spec.url", "tensorstore.KvStore.TimestampedStorageGeneration", "tensorstore.KvStore.TimestampedStorageGeneration.__eq__", "tensorstore.KvStore.TimestampedStorageGeneration.__init__", "tensorstore.KvStore.TimestampedStorageGeneration.generation", "tensorstore.KvStore.TimestampedStorageGeneration.time", "tensorstore.KvStore.__add__", "tensorstore.KvStore.__delitem__", "tensorstore.KvStore.__getitem__", "tensorstore.KvStore.__repr__", "tensorstore.KvStore.__setitem__", "tensorstore.KvStore.__truediv__", "tensorstore.KvStore.base", "tensorstore.KvStore.copy", "tensorstore.KvStore.delete_range", "tensorstore.KvStore.experimental_copy_range_to", "tensorstore.KvStore.list", "tensorstore.KvStore.open", "tensorstore.KvStore.path", "tensorstore.KvStore.read", "tensorstore.KvStore.spec", "tensorstore.KvStore.transaction", "tensorstore.KvStore.url", "tensorstore.KvStore.with_transaction", "tensorstore.KvStore.write", "tensorstore.OpenMode", "tensorstore.OpenMode.__init__", "tensorstore.OpenMode.assume_cached_metadata", "tensorstore.OpenMode.assume_metadata", "tensorstore.OpenMode.create", "tensorstore.OpenMode.delete_existing", "tensorstore.OpenMode.open", "tensorstore.OutputIndexMap", "tensorstore.OutputIndexMap.__init__(constant)", "tensorstore.OutputIndexMap.__init__(index_array)", "tensorstore.OutputIndexMap.__init__(input_dimension)", "tensorstore.OutputIndexMap.index_array", "tensorstore.OutputIndexMap.index_range", "tensorstore.OutputIndexMap.input_dimension", "tensorstore.OutputIndexMap.method", "tensorstore.OutputIndexMap.offset", "tensorstore.OutputIndexMap.stride", "tensorstore.OutputIndexMaps", "tensorstore.OutputIndexMaps.__getitem__", "tensorstore.OutputIndexMaps.__len__", "tensorstore.OutputIndexMaps.rank", "tensorstore.OutputIndexMethod", "tensorstore.OutputIndexMethod.__init__", "tensorstore.OutputIndexMethod.__str__", "tensorstore.OutputIndexMethod.array", "tensorstore.OutputIndexMethod.constant", "tensorstore.OutputIndexMethod.name", "tensorstore.OutputIndexMethod.single_input_dimension", "tensorstore.OutputIndexMethod.value", "tensorstore.Promise", "tensorstore.Promise.new", "tensorstore.Promise.set_exception", "tensorstore.Promise.set_result", "tensorstore.Schema", "tensorstore.Schema.T", "tensorstore.Schema.__eq__", "tensorstore.Schema.__getitem__(domain)", "tensorstore.Schema.__getitem__(expr)", "tensorstore.Schema.__getitem__(indices)", "tensorstore.Schema.__getitem__(transform)", "tensorstore.Schema.__init__(components)", "tensorstore.Schema.__init__(json)", "tensorstore.Schema.__repr__", "tensorstore.Schema.chunk_layout", "tensorstore.Schema.codec", "tensorstore.Schema.copy", "tensorstore.Schema.dimension_units", "tensorstore.Schema.domain", "tensorstore.Schema.dtype", "tensorstore.Schema.fill_value", "tensorstore.Schema.label", "tensorstore.Schema.mark_bounds_implicit", "tensorstore.Schema.ndim", "tensorstore.Schema.oindex", "tensorstore.Schema.origin", "tensorstore.Schema.rank", "tensorstore.Schema.shape", "tensorstore.Schema.size", "tensorstore.Schema.to_json", "tensorstore.Schema.translate_backward_by", "tensorstore.Schema.translate_by", "tensorstore.Schema.translate_to", "tensorstore.Schema.transpose", "tensorstore.Schema.update", "tensorstore.Schema.vindex", "tensorstore.Spec", "tensorstore.Spec.T", "tensorstore.Spec.__eq__", "tensorstore.Spec.__getitem__(domain)", "tensorstore.Spec.__getitem__(expr)", "tensorstore.Spec.__getitem__(indices)", "tensorstore.Spec.__getitem__(transform)", "tensorstore.Spec.__new__", "tensorstore.Spec.__repr__", "tensorstore.Spec.base", "tensorstore.Spec.chunk_layout", "tensorstore.Spec.codec", "tensorstore.Spec.copy", "tensorstore.Spec.dimension_units", "tensorstore.Spec.domain", "tensorstore.Spec.dtype", "tensorstore.Spec.fill_value", "tensorstore.Spec.kvstore", "tensorstore.Spec.label", "tensorstore.Spec.mark_bounds_implicit", "tensorstore.Spec.ndim", "tensorstore.Spec.oindex", "tensorstore.Spec.open_mode", "tensorstore.Spec.origin", "tensorstore.Spec.rank", "tensorstore.Spec.schema", "tensorstore.Spec.shape", "tensorstore.Spec.size", "tensorstore.Spec.to_json", "tensorstore.Spec.transform", "tensorstore.Spec.translate_backward_by", "tensorstore.Spec.translate_by", "tensorstore.Spec.translate_to", "tensorstore.Spec.transpose", "tensorstore.Spec.update", "tensorstore.Spec.vindex", "tensorstore.TensorStore", "tensorstore.TensorStore.StorageStatistics", "tensorstore.TensorStore.StorageStatistics.__init__", "tensorstore.TensorStore.StorageStatistics.fully_stored", "tensorstore.TensorStore.StorageStatistics.not_stored", "tensorstore.TensorStore.T", "tensorstore.TensorStore.__array__", "tensorstore.TensorStore.__getitem__(domain)", "tensorstore.TensorStore.__getitem__(expr)", "tensorstore.TensorStore.__getitem__(indices)", "tensorstore.TensorStore.__getitem__(transform)", "tensorstore.TensorStore.__setitem__(domain)", "tensorstore.TensorStore.__setitem__(expr)", "tensorstore.TensorStore.__setitem__(indices)", "tensorstore.TensorStore.__setitem__(transform)", "tensorstore.TensorStore.astype", "tensorstore.TensorStore.base", "tensorstore.TensorStore.chunk_layout", "tensorstore.TensorStore.codec", "tensorstore.TensorStore.dimension_units", "tensorstore.TensorStore.domain", "tensorstore.TensorStore.dtype", "tensorstore.TensorStore.fill_value", "tensorstore.TensorStore.kvstore", "tensorstore.TensorStore.label", "tensorstore.TensorStore.mark_bounds_implicit", "tensorstore.TensorStore.mode", "tensorstore.TensorStore.ndim", "tensorstore.TensorStore.oindex", "tensorstore.TensorStore.oindex.__setitem__", "tensorstore.TensorStore.origin", "tensorstore.TensorStore.rank", "tensorstore.TensorStore.read", "tensorstore.TensorStore.readable", "tensorstore.TensorStore.resize", "tensorstore.TensorStore.resolve", "tensorstore.TensorStore.schema", "tensorstore.TensorStore.shape", "tensorstore.TensorStore.size", "tensorstore.TensorStore.spec", "tensorstore.TensorStore.storage_statistics", "tensorstore.TensorStore.transaction", "tensorstore.TensorStore.translate_backward_by", "tensorstore.TensorStore.translate_by", "tensorstore.TensorStore.translate_to", "tensorstore.TensorStore.transpose", "tensorstore.TensorStore.vindex", "tensorstore.TensorStore.vindex.__setitem__", "tensorstore.TensorStore.with_transaction", "tensorstore.TensorStore.writable", "tensorstore.TensorStore.write", "tensorstore.Transaction", "tensorstore.Transaction.__init__", "tensorstore.Transaction.abort", "tensorstore.Transaction.aborted", "tensorstore.Transaction.atomic", "tensorstore.Transaction.commit_async", "tensorstore.Transaction.commit_started", "tensorstore.Transaction.commit_sync", "tensorstore.Transaction.future", "tensorstore.Transaction.open", "tensorstore.Unit", "tensorstore.Unit.__eq__", "tensorstore.Unit.__init__(components)", "tensorstore.Unit.__init__(json)", "tensorstore.Unit.__init__(multiplier)", "tensorstore.Unit.__init__(pair)", "tensorstore.Unit.__init__(unit)", "tensorstore.Unit.__mul__", "tensorstore.Unit.__truediv__", "tensorstore.Unit.base_unit", "tensorstore.Unit.multiplier", "tensorstore.Unit.to_json", "tensorstore.VirtualChunkedReadParameters", "tensorstore.VirtualChunkedReadParameters.if_not_equal", "tensorstore.VirtualChunkedReadParameters.staleness_bound", "tensorstore.VirtualChunkedWriteParameters", "tensorstore.VirtualChunkedWriteParameters.if_equal", "tensorstore.WriteFutures", "tensorstore.WriteFutures.add_done_callback", "tensorstore.WriteFutures.cancel", "tensorstore.WriteFutures.cancelled", "tensorstore.WriteFutures.commit", "tensorstore.WriteFutures.copy", "tensorstore.WriteFutures.done", "tensorstore.WriteFutures.exception", "tensorstore.WriteFutures.remove_done_callback", "tensorstore.WriteFutures.result", "tensorstore.array", "tensorstore.bfloat16", "tensorstore.bool", "tensorstore.cast(spec)", "tensorstore.cast(store)", "tensorstore.complex128", "tensorstore.complex64", "tensorstore.concat", "tensorstore.d", "tensorstore.d.__class_getitem__", "tensorstore.downsample(spec)", "tensorstore.downsample(store)", "tensorstore.dtype", "tensorstore.dtype.__call__", "tensorstore.dtype.__init__(dtype)", "tensorstore.dtype.__init__(name)", "tensorstore.dtype.name", "tensorstore.dtype.numpy_dtype", "tensorstore.dtype.to_json", "tensorstore.dtype.type", "tensorstore.experimental_collect_matching_metrics", "tensorstore.experimental_collect_prometheus_format_metrics", "tensorstore.experimental_push_metrics_to_prometheus", "tensorstore.float16", "tensorstore.float32", "tensorstore.float64", "tensorstore.float8_e4m3b11fnuz", "tensorstore.float8_e4m3fn", "tensorstore.float8_e4m3fnuz", "tensorstore.float8_e5m2", "tensorstore.float8_e5m2fnuz", "tensorstore.inf", "tensorstore.int16", "tensorstore.int32", "tensorstore.int4", "tensorstore.int64", "tensorstore.int8", "tensorstore.json", "tensorstore.newaxis", "tensorstore.ocdbt.DistributedCoordinatorServer", "tensorstore.ocdbt.DistributedCoordinatorServer.__init__", "tensorstore.ocdbt.DistributedCoordinatorServer.port", "tensorstore.ocdbt.dump", "tensorstore.open", "tensorstore.overlay", "tensorstore.stack", "tensorstore.string", "tensorstore.uint16", "tensorstore.uint32", "tensorstore.uint64", "tensorstore.uint8", "tensorstore.ustring", "tensorstore.virtual_chunked", "Indexing", "Tutorial", "Schema", "JSON Spec"], "terms": {"configur": [0, 16, 18, 20, 22, 23, 28, 30], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 82, 129, 281, 288, 311, 313, 323, 324, 326, 327, 329, 338, 347, 383, 388, 389, 422, 425, 444, 476, 480, 481, 482, 489, 492, 493], "tensorstor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 22, 23, 24, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "driver": [0, 18, 32, 33, 67, 107, 110, 118, 199, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 281, 292, 294, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 341, 342, 347, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 410, 440, 441, 444, 479, 480, 481, 482, 490, 491, 492, 493], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 39, 50, 52, 62, 64, 66, 75, 85, 107, 108, 111, 116, 117, 129, 131, 132, 135, 165, 186, 197, 198, 199, 214, 238, 239, 240, 242, 288, 294, 301, 311, 312, 315, 321, 323, 324, 326, 327, 329, 334, 338, 347, 348, 350, 353, 362, 377, 378, 383, 388, 389, 395, 396, 399, 400, 410, 438, 457, 480, 483, 488, 489, 490, 492, 493], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 39, 50, 52, 57, 58, 62, 64, 66, 67, 82, 86, 87, 88, 106, 107, 110, 112, 113, 114, 115, 116, 117, 119, 124, 127, 129, 131, 133, 134, 136, 147, 151, 158, 159, 160, 161, 162, 165, 169, 170, 184, 193, 194, 195, 196, 197, 199, 200, 202, 207, 222, 224, 230, 233, 237, 238, 239, 240, 242, 243, 247, 248, 277, 279, 280, 281, 288, 291, 292, 294, 297, 299, 307, 308, 309, 310, 311, 312, 313, 323, 324, 326, 327, 329, 330, 332, 338, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 364, 374, 381, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 399, 410, 414, 417, 418, 422, 424, 425, 426, 444, 445, 475, 479, 480, 481, 482, 489, 490, 492, 493], "us": [0, 1, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 54, 76, 77, 82, 106, 107, 112, 113, 114, 115, 118, 119, 120, 125, 128, 129, 132, 135, 147, 158, 159, 160, 162, 193, 194, 195, 199, 213, 222, 229, 238, 240, 242, 243, 246, 248, 277, 281, 284, 285, 286, 287, 301, 307, 308, 309, 312, 313, 316, 317, 318, 319, 330, 334, 335, 343, 344, 345, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 367, 372, 377, 378, 381, 383, 384, 385, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 405, 409, 410, 416, 422, 425, 427, 437, 444, 445, 474, 475, 479, 481, 482, 483, 488, 489, 490, 491, 492], "which": [0, 2, 3, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 62, 66, 70, 78, 79, 80, 81, 82, 112, 113, 114, 115, 119, 129, 158, 159, 160, 161, 162, 193, 194, 195, 196, 224, 228, 242, 291, 307, 308, 309, 310, 313, 335, 343, 344, 345, 346, 350, 359, 391, 392, 393, 394, 399, 405, 410, 419, 427, 437, 444, 445, 479, 482, 489, 490, 491, 492], "allow": [0, 15, 19, 20, 21, 22, 23, 27, 28, 107, 248, 249, 252, 254, 347, 362, 363, 388, 399, 400, 444, 480, 481, 482, 492], "resourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 70, 71, 72, 76, 77, 214, 222, 240, 243, 315, 321, 347, 388, 444, 479, 480, 481, 482, 489, 493], "cach": [0, 10, 11, 12, 13, 15, 16, 18, 26, 30, 32, 70, 238, 242, 243, 349, 381, 384, 388, 399, 422, 423, 424, 444, 480, 481, 482, 491], "pool": [0, 26, 30, 243, 388, 444, 480, 481, 482, 489], "concurr": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 118, 120, 243, 347, 388, 399], "execut": [0, 20, 118, 125, 480, 489], "authent": [0, 17, 29], "credenti": [0, 22, 28, 32, 70, 491], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 36, 37, 40, 49, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 129, 138, 157, 162, 171, 192, 199, 212, 214, 215, 216, 221, 232, 240, 281, 283, 289, 290, 306, 313, 315, 320, 321, 341, 410, 413, 421, 474, 476, 477, 479, 480, 492], "wai": [0, 12, 13, 15, 16, 18, 20, 27, 489, 492], "share": [0, 17, 18, 21, 22, 23, 28, 29, 32, 70, 77, 222, 240, 243, 347, 388, 444, 480, 481, 482, 489], "multipl": [0, 3, 10, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 294, 347, 360, 361, 362, 363, 378, 388, 396, 399, 400, 444, 480, 481, 482, 489, 490], "object": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 98, 103, 118, 119, 124, 127, 129, 137, 142, 147, 148, 169, 170, 223, 241, 245, 277, 279, 280, 291, 335, 355, 399, 400, 410, 427, 434, 436, 449, 450, 456, 490, 491, 492, 493], "A": [0, 12, 13, 15, 16, 21, 27, 107, 116, 238, 242, 277, 288, 294, 311, 347, 368, 381, 383, 410, 444, 445, 459, 480, 481, 482, 489, 490, 492], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 52, 57, 58, 62, 64, 66, 76, 77, 80, 82, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 131, 134, 135, 136, 142, 143, 144, 147, 148, 149, 151, 156, 158, 159, 160, 161, 162, 163, 165, 169, 174, 175, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 212, 213, 214, 218, 222, 224, 228, 229, 230, 231, 233, 235, 237, 238, 239, 242, 243, 247, 257, 258, 282, 283, 284, 285, 286, 287, 288, 294, 298, 299, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 329, 331, 332, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 356, 359, 360, 361, 362, 363, 365, 367, 368, 371, 373, 374, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 404, 407, 409, 410, 414, 416, 419, 422, 423, 427, 444, 471, 474, 479, 480, 481, 482, 483, 488, 489, 490, 491, 492, 493], "map": [0, 14, 19, 26, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 135, 162, 164, 165, 166, 167, 168, 169, 170, 171, 186, 188, 197, 199, 255, 256, 257, 258, 265, 342, 475, 490], "identifi": [0, 10, 12, 15, 16, 19, 20, 24, 27, 28, 129, 131, 133, 165, 199, 224, 227, 459, 489, 490, 492, 493], "contextresourc": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31], "specif": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 67, 70, 73, 74, 199, 212, 222, 223, 224, 227, 243, 245, 313, 323, 324, 326, 327, 329, 338, 347, 388, 389, 410, 480, 492, 493], "member": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 52, 54, 55, 56, 57, 58, 61, 64, 65, 75, 492, 493], "type": [0, 1, 2, 3, 10, 11, 18, 26, 76, 118, 128, 162, 198, 281, 288, 296, 311, 313, 328, 347, 352, 356, 357, 360, 362, 363, 364, 370, 371, 378, 396, 399, 400, 410, 437, 438, 439, 440, 441, 444, 449, 450, 451, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 486, 488, 489, 490, 491, 492, 493], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 347, 388, 480, 493], "default": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 70, 75, 77, 78, 79, 86, 87, 88, 106, 107, 119, 136, 162, 167, 169, 199, 222, 240, 243, 281, 286, 313, 318, 347, 349, 358, 362, 388, 444, 445, 479, 480, 481, 482, 489, 490, 492], "given": [0, 3, 14, 16, 21, 27, 70, 76, 82, 84, 107, 112, 113, 114, 115, 158, 159, 160, 193, 194, 195, 307, 308, 309, 343, 344, 345, 350, 391, 392, 393, 490, 492], "must": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 27, 28, 30, 52, 64, 77, 98, 103, 107, 110, 116, 125, 135, 151, 184, 238, 242, 284, 287, 288, 299, 311, 316, 319, 332, 347, 350, 356, 359, 360, 363, 374, 383, 388, 399, 444, 480, 481, 482, 489, 490, 492, 493], "support": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 106, 118, 147, 198, 199, 230, 233, 237, 238, 247, 294, 322, 347, 349, 362, 365, 382, 388, 389, 398, 400, 438, 480, 490, 491, 492, 493], "id": [0, 15, 22, 26, 27, 76, 349, 358, 359, 365, 367, 377, 385, 388, 395, 479, 480, 492], "defin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 107, 129, 281, 438, 489, 490, 492], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 52, 62, 64, 66, 76, 82, 98, 103, 108, 109, 110, 112, 113, 114, 115, 118, 124, 127, 128, 129, 131, 142, 147, 148, 158, 159, 160, 162, 165, 168, 170, 193, 194, 195, 199, 213, 214, 222, 229, 230, 231, 233, 237, 238, 242, 243, 246, 247, 283, 284, 288, 294, 307, 308, 309, 311, 313, 315, 316, 342, 343, 344, 345, 347, 356, 368, 369, 371, 388, 389, 391, 392, 393, 397, 399, 400, 409, 410, 427, 444, 479, 480, 481, 482, 483, 488, 489, 490, 492, 493], "compat": [0, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 24, 28, 129, 147, 288, 311, 347, 360, 362, 363, 371, 378, 396, 399, 480, 490, 491, 492], "cache_pool": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 27, 30, 31, 72, 76, 78, 80, 81, 321, 349, 356, 357, 358, 359, 365, 377, 388, 395, 399, 479, 480, 489, 491], "total_bytes_limit": [0, 10, 12, 13, 15, 16, 26, 30, 72, 76, 78, 80, 81, 489, 491], "10000000": [0, 72, 76, 80, 81, 480], "remot": [0, 17, 18], "100000000": [0, 489, 491], "data_copy_concurr": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 28, 29, 30, 31, 107, 118, 321, 349, 356, 357, 358, 359, 364, 365, 377, 388, 395, 441, 444, 479, 480, 481, 482, 489, 490, 491], "limit": [0, 8, 17, 18, 19, 20, 22, 23, 24, 27, 28, 80, 81, 427, 489], "8": [0, 4, 13, 14, 15, 16, 19, 20, 26, 32, 33, 107, 112, 113, 114, 131, 132, 135, 138, 141, 147, 165, 167, 168, 169, 171, 176, 186, 192, 197, 284, 301, 312, 316, 334, 348, 349, 356, 360, 362, 368, 377, 378, 381, 395, 396, 399, 444, 463, 464, 465, 466, 467, 471, 473, 480, 481, 482, 487, 490, 491, 493], "boolean": [0, 9, 10, 12, 13, 15, 16, 21, 25, 28, 32, 111, 186, 301, 334, 377, 378, 439, 493], "number": [0, 3, 4, 6, 7, 8, 9, 10, 12, 13, 16, 17, 19, 20, 21, 22, 23, 26, 28, 29, 32, 33, 36, 37, 39, 43, 44, 46, 50, 52, 60, 64, 109, 112, 113, 114, 115, 124, 127, 129, 136, 139, 147, 149, 154, 156, 160, 162, 169, 183, 191, 195, 239, 281, 298, 305, 309, 313, 331, 340, 345, 349, 373, 380, 387, 393, 410, 416, 442, 443, 444, 482, 490, 492, 493], "string": [0, 3, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 92, 93, 104, 140, 172, 200, 202, 205, 206, 216, 227, 232, 290, 321, 364, 410, 416, 479, 483, 488, 492, 493], "null": [0, 8, 13, 14, 15, 16, 27, 483, 488, 492], "particular": [0, 16, 18, 33, 120], "One": [0, 3, 10, 12, 15, 16, 27, 493], "directli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 27, 28, 147, 162, 213, 229, 323, 324, 326, 327, 329, 338, 360, 361, 362, 363, 378, 396, 410, 489, 490, 492, 493], "ani": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 27, 28, 32, 33, 35, 36, 37, 40, 49, 52, 53, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 107, 111, 115, 117, 118, 120, 124, 129, 131, 134, 138, 147, 157, 160, 162, 165, 171, 186, 192, 195, 197, 199, 212, 213, 214, 215, 221, 222, 229, 230, 231, 233, 237, 238, 240, 242, 243, 247, 248, 249, 253, 281, 289, 301, 306, 309, 312, 313, 315, 320, 323, 324, 326, 327, 329, 334, 338, 341, 345, 347, 348, 350, 358, 360, 362, 363, 369, 377, 378, 381, 383, 388, 389, 393, 395, 396, 399, 400, 409, 410, 413, 421, 457, 476, 477, 479, 480, 489, 490, 491, 492, 493], "constraint": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 27, 36, 37, 39, 42, 44, 47, 48, 50, 52, 55, 56, 57, 58, 62, 64, 66, 110, 281, 288, 291, 292, 294, 311, 313, 323, 324, 326, 327, 329, 338, 347, 388, 410, 444, 480, 481, 482, 489, 492, 493], "valu": [0, 1, 3, 4, 9, 10, 11, 17, 18, 19, 32, 52, 64, 75, 82, 85, 95, 96, 101, 102, 105, 107, 110, 112, 118, 128, 134, 151, 184, 199, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 222, 223, 224, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 269, 270, 276, 281, 288, 294, 297, 299, 311, 313, 329, 330, 332, 347, 349, 350, 351, 368, 371, 372, 374, 383, 388, 399, 410, 414, 444, 457, 474, 479, 480, 481, 482, 489, 490, 491, 492, 493], "determin": [0, 10, 12, 14, 19, 26, 28, 131, 165, 199, 350, 480, 492], "refer": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 107, 222, 238, 243, 347, 388, 399, 479, 490, 492, 493], "anoth": [0, 82, 83, 85, 98, 103, 129, 131, 142, 148, 162, 165, 168, 200, 201, 212, 214, 281, 283, 313, 315, 489, 490], "same": [0, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 27, 77, 109, 110, 112, 113, 114, 115, 158, 159, 160, 193, 194, 195, 222, 238, 243, 307, 308, 309, 343, 344, 345, 347, 367, 385, 388, 391, 392, 393, 399, 400, 401, 427, 480, 489, 490, 491, 492], "current": [0, 8, 15, 19, 27, 110, 118, 230, 231, 233, 238, 242, 349, 355, 381, 383, 399, 400, 401, 489, 491], "parent": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 70, 78, 79, 80, 81, 493], "syntax": [0, 11, 20, 21, 22, 23, 25, 28, 360, 361, 362, 363, 378, 396, 410, 490, 492], "where": [0, 3, 13, 16, 17, 19, 21, 22, 27, 28, 30, 32, 107, 110, 111, 117, 128, 131, 147, 151, 165, 167, 169, 171, 184, 186, 197, 288, 299, 311, 332, 347, 350, 374, 479, 480, 489, 490, 492, 493], "match": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 23, 25, 27, 32, 98, 103, 109, 112, 113, 114, 115, 131, 149, 160, 165, 183, 195, 239, 242, 247, 288, 298, 309, 311, 331, 345, 347, 373, 388, 393, 425, 426, 444, 457, 480, 481, 482, 489, 490, 492, 493], "thi": [0, 1, 3, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 27, 28, 29, 33, 35, 52, 64, 70, 76, 77, 80, 81, 105, 110, 111, 117, 118, 120, 125, 129, 131, 135, 147, 149, 151, 156, 158, 159, 160, 161, 162, 163, 165, 166, 168, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 199, 212, 218, 230, 231, 233, 235, 237, 238, 239, 242, 244, 246, 247, 282, 288, 291, 298, 299, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 319, 322, 323, 324, 326, 327, 329, 331, 332, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 358, 359, 362, 363, 365, 367, 373, 374, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 410, 414, 417, 418, 419, 427, 444, 449, 450, 480, 481, 482, 489, 490, 491, 492], "new": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 18, 19, 27, 32, 33, 34, 35, 78, 79, 107, 108, 109, 110, 112, 113, 114, 115, 122, 129, 134, 135, 149, 151, 158, 159, 160, 161, 162, 183, 184, 193, 194, 195, 196, 199, 222, 243, 247, 248, 249, 252, 253, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 291, 294, 298, 299, 301, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 331, 332, 334, 343, 344, 345, 346, 347, 348, 349, 367, 373, 374, 383, 385, 388, 391, 392, 393, 394, 400, 401, 444, 475, 479, 481, 482, 489, 490, 491, 492, 493], "instanc": [0, 28, 77, 121, 449, 450, 459], "onli": [0, 3, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 27, 28, 31, 52, 62, 64, 66, 107, 108, 118, 136, 169, 247, 288, 311, 323, 324, 326, 327, 329, 335, 338, 347, 375, 381, 383, 389, 399, 400, 427, 444, 480, 481, 482, 489, 490, 491, 492], "valid": [0, 10, 12, 13, 14, 15, 16, 19, 23, 27, 28, 52, 64, 107, 112, 161, 196, 224, 228, 238, 242, 310, 346, 347, 388, 394, 480, 490, 492], "within": [0, 3, 10, 11, 12, 13, 14, 15, 16, 19, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 52, 57, 64, 124, 127, 199, 212, 220, 239, 241, 242, 349, 350, 353, 381, 479, 481, 489, 490, 492], "size": [0, 12, 13, 15, 16, 19, 20, 27, 39, 50, 82, 88, 91, 92, 94, 98, 103, 105, 129, 136, 156, 162, 169, 191, 281, 305, 313, 340, 349, 387, 399, 480, 489, 491, 492], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 32, 33, 35, 62, 66, 82, 89, 104, 106, 107, 108, 110, 112, 113, 114, 118, 119, 121, 128, 129, 131, 132, 135, 136, 137, 138, 147, 151, 158, 159, 162, 164, 165, 169, 170, 171, 184, 193, 194, 199, 202, 205, 206, 212, 217, 227, 230, 231, 233, 234, 239, 240, 242, 247, 248, 249, 254, 255, 257, 265, 269, 277, 281, 284, 287, 288, 294, 299, 307, 308, 311, 313, 316, 319, 322, 332, 343, 344, 347, 349, 350, 355, 356, 359, 360, 362, 363, 365, 374, 378, 388, 391, 392, 396, 399, 400, 407, 410, 427, 437, 438, 444, 445, 449, 451, 468, 474, 479, 481, 482, 489, 490, 491, 492, 493], "memori": [0, 1, 10, 12, 13, 15, 16, 18, 19, 23, 24, 32, 110, 118, 199, 214, 218, 222, 230, 231, 233, 235, 237, 238, 239, 240, 242, 243, 246, 247, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 341, 342, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 437, 440, 479, 480, 489, 490, 491, 493], "least": [0, 12, 14, 19, 131, 165, 350, 490], "recent": [0, 27, 107, 122, 134, 230, 231, 233, 242, 279, 287, 490], "lru": 0, "each": [0, 3, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 26, 27, 39, 50, 77, 109, 110, 112, 113, 114, 115, 129, 136, 143, 144, 147, 149, 150, 151, 158, 159, 160, 161, 162, 169, 174, 175, 179, 183, 184, 193, 194, 195, 196, 281, 288, 291, 294, 298, 299, 307, 308, 309, 310, 311, 313, 326, 331, 332, 343, 344, 345, 346, 347, 349, 350, 355, 368, 373, 374, 391, 392, 393, 394, 444, 480, 481, 482, 489, 490, 492, 493], "separ": [0, 10, 11, 12, 15, 17, 20, 22, 27, 33, 213, 229, 230, 231, 233, 242, 247, 355, 399, 490, 493], "integ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 21, 22, 23, 26, 27, 28, 29, 32, 82, 111, 132, 133, 135, 186, 301, 334, 377, 378, 469, 470, 471, 472, 473, 484, 485, 486, 487, 492, 493], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 26, 28, 30, 32, 33, 52, 57, 59, 60, 63, 64, 88, 92, 98, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 131, 132, 133, 134, 135, 136, 137, 142, 147, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 173, 186, 192, 193, 194, 196, 197, 239, 255, 256, 257, 258, 269, 273, 284, 285, 286, 287, 288, 289, 291, 295, 301, 303, 306, 307, 308, 310, 312, 316, 317, 318, 319, 322, 327, 334, 338, 341, 342, 343, 344, 346, 347, 348, 349, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 377, 378, 381, 383, 385, 388, 391, 392, 394, 395, 396, 399, 400, 421, 439, 441, 444, 446, 475, 479, 480, 481, 482, 489, 490, 491, 492, 493], "soft": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 36, 37, 39, 42, 44, 48, 50, 52, 56, 57, 58, 62, 64, 66, 492, 493], "total": [0, 17, 27, 129, 156, 162, 191, 281, 305, 313, 340, 349, 387], "byte": [0, 12, 15, 26, 27, 30, 32, 199, 200, 207, 211, 224, 227, 231, 239, 422, 423, 425, 426, 479, 483, 493], "data": [0, 1, 2, 3, 10, 11, 18, 21, 23, 24, 25, 26, 29, 30, 213, 215, 216, 217, 219, 220, 229, 232, 234, 236, 238, 242, 248, 249, 253, 281, 288, 296, 311, 313, 328, 347, 350, 352, 353, 358, 360, 362, 363, 364, 367, 370, 371, 378, 381, 383, 388, 389, 396, 399, 422, 423, 424, 425, 426, 437, 438, 439, 440, 441, 444, 449, 450, 451, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 488, 489, 490, 492, 493], "evict": 0, "from": [0, 1, 2, 3, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 27, 28, 31, 32, 36, 37, 40, 52, 53, 64, 67, 68, 70, 73, 74, 78, 79, 80, 81, 107, 108, 116, 118, 120, 129, 133, 136, 137, 138, 147, 162, 169, 170, 171, 200, 202, 212, 215, 224, 226, 239, 240, 242, 281, 288, 289, 291, 313, 320, 350, 351, 355, 399, 400, 410, 412, 413, 415, 416, 419, 437, 444, 445, 446, 449, 451, 479, 480, 482, 490, 491, 492], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 19, 20, 23, 26, 27, 28, 30, 32, 33, 107, 110, 119, 120, 125, 237, 238, 242, 248, 249, 250, 294, 347, 350, 360, 361, 362, 363, 378, 381, 388, 396, 399, 401, 408, 427, 489, 490, 492, 493], "reach": [0, 27], "cpu": [0, 20, 21, 29], "core": [0, 18, 21, 29, 490], "copi": [0, 19, 20, 29, 199, 200, 203, 212, 214, 219, 236, 238, 281, 283, 291, 293, 313, 315, 325, 383, 399, 427, 432, 490], "encod": [0, 4, 6, 9, 12, 15, 18, 20, 23, 26, 27, 29, 30, 32, 67, 480, 491, 492, 493], "decod": [0, 16, 18, 27, 29, 30, 32, 67, 492], "1": [0, 1, 3, 4, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 52, 57, 59, 60, 63, 64, 82, 83, 84, 90, 95, 96, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 131, 132, 133, 134, 135, 141, 142, 145, 146, 147, 148, 150, 153, 155, 156, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 186, 189, 192, 196, 197, 257, 258, 269, 275, 282, 284, 285, 286, 287, 288, 289, 291, 294, 301, 303, 306, 310, 312, 314, 318, 319, 326, 338, 341, 342, 346, 349, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 376, 377, 378, 380, 383, 385, 388, 394, 395, 396, 399, 400, 410, 414, 416, 439, 441, 444, 446, 468, 475, 479, 480, 481, 482, 489, 490, 491, 492, 493], "maximum": [0, 3, 17, 21, 22, 23, 27, 28, 29, 124, 127], "mai": [0, 3, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 82, 110, 112, 113, 114, 115, 116, 119, 120, 128, 129, 134, 136, 158, 159, 160, 161, 169, 193, 194, 195, 196, 199, 230, 231, 233, 238, 240, 242, 243, 246, 277, 294, 307, 308, 309, 310, 343, 344, 345, 346, 347, 349, 350, 355, 360, 362, 363, 367, 378, 381, 383, 385, 388, 389, 391, 392, 393, 394, 396, 397, 399, 405, 409, 410, 422, 424, 444, 445, 480, 489, 490, 492, 493], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 52, 57, 58, 62, 64, 66, 90, 95, 96, 101, 102, 105, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 124, 127, 131, 134, 136, 147, 149, 151, 160, 161, 165, 169, 170, 183, 184, 195, 196, 222, 230, 231, 233, 237, 238, 239, 242, 247, 284, 285, 286, 287, 288, 298, 299, 301, 309, 310, 311, 312, 316, 317, 318, 319, 331, 332, 334, 335, 345, 346, 347, 348, 350, 353, 373, 374, 381, 383, 384, 388, 389, 393, 394, 399, 400, 416, 425, 426, 444, 479, 480, 481, 482, 489, 490, 492, 493], "special": [0, 13, 16, 19, 20, 21, 22, 23, 27, 28, 29, 32, 95, 96, 101, 102, 107, 202, 205, 468, 490, 492], "global": [0, 21, 22, 23, 28, 29, 489], "equal": [0, 1, 12, 13, 15, 16, 19, 21, 26, 27, 29, 32, 36, 37, 38, 51, 57, 58, 75, 82, 85, 95, 96, 101, 102, 105, 107, 108, 135, 200, 201, 212, 214, 224, 225, 281, 283, 284, 285, 287, 288, 311, 313, 315, 316, 317, 319, 322, 330, 335, 347, 350, 353, 356, 359, 360, 363, 365, 367, 371, 372, 410, 411, 444, 468, 480, 481, 482, 489, 490, 492], "thread": [0, 21, 29, 118, 119, 120, 124, 127, 230, 231, 233, 355, 381, 489], "avail": [0, 17, 20, 21, 27, 28, 29, 422, 423, 438], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 27, 29, 52, 64, 106, 107, 111, 117, 129, 132, 162, 166, 167, 186, 197, 286, 301, 312, 318, 334, 348, 357, 369, 377, 378, 445, 480, 490, 492, 493], "back": [1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 18, 400, 491], "contigu": [1, 82, 381], "via": [1, 3, 12, 13, 15, 16, 18, 20, 27, 57, 58, 490], "small": [1, 13, 27], "constant": [1, 19, 32, 255, 256, 269, 273, 468, 490], "c": [1, 16, 18, 21, 52, 57, 64, 107, 116, 237, 323, 338, 349, 358, 359, 365, 377, 381, 388, 395, 480, 490, 492], "python": [1, 3, 15, 18, 32, 33, 82, 92, 362, 363, 474, 483, 488, 490], "api": [1, 17, 18, 22, 28, 238], "adapt": [1, 24, 26, 27, 30, 31, 199, 212, 218, 235, 313, 322, 349, 365], "exist": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 27, 32, 107, 112, 131, 161, 165, 169, 170, 196, 230, 231, 233, 237, 238, 240, 242, 247, 248, 249, 253, 254, 288, 294, 310, 311, 346, 347, 360, 362, 363, 378, 383, 388, 394, 396, 399, 425, 426, 444, 449, 451, 481, 482, 489, 490, 492, 493], "extend": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 471, 493], "open": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 26, 27, 32, 33, 82, 86, 110, 118, 199, 200, 202, 222, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 254, 294, 313, 335, 347, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 409, 444, 479, 481, 482, 489, 490, 491, 492, 493], "creat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 18, 20, 27, 32, 33, 34, 70, 73, 74, 76, 110, 118, 199, 222, 240, 243, 248, 249, 252, 253, 277, 278, 294, 313, 335, 347, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 401, 444, 481, 482, 489, 490, 491, 492, 493], "requir": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 118, 136, 169, 238, 347, 381, 388, 401, 480, 491, 492, 493], "dtype": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 33, 107, 110, 118, 281, 283, 288, 289, 290, 293, 296, 303, 306, 311, 313, 322, 325, 327, 328, 329, 338, 347, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 380, 381, 383, 385, 388, 389, 395, 396, 399, 400, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "nest": [1, 14, 19, 222, 240, 347], "rank": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 30, 36, 37, 39, 45, 46, 50, 52, 57, 59, 60, 62, 64, 66, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 131, 132, 135, 136, 139, 143, 144, 147, 152, 154, 161, 162, 165, 166, 167, 168, 169, 170, 171, 181, 185, 186, 189, 196, 197, 265, 267, 268, 281, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 296, 300, 301, 303, 306, 310, 311, 312, 313, 319, 333, 337, 338, 342, 346, 347, 349, 359, 360, 363, 376, 380, 383, 385, 394, 444, 475, 480, 481, 482, 489, 490, 492, 493], "initi": [1, 20, 22, 23, 28, 383, 489, 490], "context": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 107, 118, 214, 221, 222, 229, 232, 234, 235, 236, 240, 243, 315, 321, 347, 349, 355, 356, 357, 358, 359, 364, 365, 372, 377, 388, 395, 399, 400, 437, 441, 444, 479, 480, 481, 482, 489, 490, 491, 493], "augment": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 479, 493], "32": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 22, 23, 27, 28, 30, 32, 470, 472, 485, 492, 493], "transform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 129, 132, 135, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 189, 192, 197, 255, 256, 257, 258, 265, 281, 284, 285, 286, 287, 288, 301, 311, 312, 313, 316, 317, 318, 319, 322, 334, 341, 342, 347, 348, 349, 356, 357, 358, 359, 360, 361, 363, 364, 365, 369, 377, 388, 395, 441, 444, 475, 480, 481, 482, 489, 491, 493], "also": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 52, 64, 85, 106, 112, 113, 114, 115, 199, 240, 288, 311, 347, 383, 388, 399, 400, 438, 480, 489, 490, 491, 492, 493], "input": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 32, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 134, 151, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 197, 255, 258, 288, 299, 311, 332, 342, 347, 374, 444, 445, 475, 480, 481, 482, 489, 490, 493], "otherwis": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 30, 86, 87, 88, 119, 131, 136, 165, 169, 322, 407, 492, 493], "indextransform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 132, 135, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 255, 256, 257, 258, 265, 269, 281, 286, 287, 301, 312, 313, 316, 317, 318, 319, 334, 342, 348, 349, 356, 357, 359, 363, 475, 490, 493], "schema": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 28, 32, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 338, 347, 349, 385, 444, 480, 481, 482, 489, 493], "fail": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 242, 383, 400, 489, 490, 493], "do": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 26, 27, 110, 490, 493], "chunk_layout": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 33, 281, 284, 285, 286, 287, 288, 289, 291, 301, 303, 306, 311, 312, 313, 323, 338, 347, 349, 366, 385, 480, 489, 492, 493], "ignor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 62, 66, 492, 493], "suitabl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 480, 492, 493], "select": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 32, 98, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 129, 134, 142, 148, 160, 195, 294, 309, 345, 393, 445, 446, 493], "automat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 27, 28, 125, 349, 355, 400, 480, 492, 493], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 26, 27, 30, 31, 32, 128, 198, 199, 212, 214, 216, 218, 220, 232, 235, 238, 241, 281, 283, 290, 313, 315, 321, 322, 347, 349, 364, 365, 388, 410, 412, 415, 419, 440, 441, 442, 443, 447, 448, 479, 480, 490, 492, 493], "combin": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 27, 410, 480, 490, 492, 493], "previous": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 118, 126, 240, 444, 480, 481, 482, 489], "It": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 25, 26, 27, 29, 30, 31, 107, 131, 165, 347, 410, 480, 490, 492], "normal": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 26, 30, 131, 165, 288, 311, 347, 399, 400, 480, 490], "more": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 24, 26, 27, 29, 30, 31, 107, 134, 359, 399, 489, 490, 493], "conveni": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 26, 27, 29, 30, 31, 359], "2": [1, 3, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 26, 27, 32, 33, 59, 60, 63, 82, 90, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 156, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 186, 192, 197, 257, 258, 269, 272, 284, 285, 286, 287, 288, 289, 291, 293, 301, 303, 306, 312, 319, 322, 333, 337, 338, 342, 349, 358, 359, 361, 362, 363, 364, 365, 366, 376, 377, 378, 380, 383, 388, 395, 396, 399, 400, 417, 418, 441, 444, 446, 468, 475, 479, 480, 481, 482, 489, 490, 491, 492, 493], "3": [1, 3, 9, 12, 13, 14, 15, 16, 19, 20, 23, 26, 33, 59, 60, 82, 90, 98, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 189, 192, 197, 257, 283, 284, 285, 286, 287, 288, 289, 293, 294, 296, 300, 301, 303, 306, 311, 312, 318, 319, 334, 338, 348, 358, 359, 361, 363, 364, 376, 377, 380, 383, 395, 396, 400, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 441, 444, 446, 475, 479, 480, 481, 482, 489, 490, 491, 493], "4": [1, 3, 4, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 27, 30, 32, 33, 83, 90, 96, 101, 107, 111, 113, 114, 115, 116, 117, 131, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 156, 165, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 189, 192, 287, 294, 319, 322, 359, 362, 363, 365, 376, 380, 383, 396, 400, 416, 441, 444, 471, 479, 480, 481, 482, 489, 490, 491, 492, 493], "5": [1, 12, 14, 15, 16, 19, 20, 33, 62, 66, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 111, 112, 113, 114, 115, 116, 117, 118, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 156, 158, 159, 160, 165, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 189, 193, 194, 195, 256, 257, 258, 277, 279, 280, 284, 285, 286, 287, 290, 301, 307, 308, 309, 312, 316, 317, 318, 319, 334, 341, 342, 343, 344, 345, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 376, 377, 378, 380, 381, 385, 388, 389, 391, 392, 393, 395, 396, 399, 400, 412, 413, 414, 415, 418, 420, 441, 444, 475, 480, 481, 482, 489, 490, 491, 492, 493], "6": [1, 3, 4, 12, 13, 14, 15, 16, 19, 20, 33, 62, 66, 84, 90, 107, 111, 112, 113, 114, 115, 117, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 147, 148, 165, 167, 170, 174, 175, 176, 186, 197, 284, 285, 286, 316, 317, 318, 349, 356, 357, 358, 359, 360, 361, 362, 363, 376, 378, 380, 383, 396, 399, 400, 444, 480, 481, 482, 489, 490, 491, 492], "int32": [1, 2, 12, 13, 14, 15, 16, 32, 107, 283, 376, 380, 470, 480, 490, 493], "virtual": [2, 3, 14, 18, 20, 162, 349, 356, 357, 358, 359, 377, 395, 444, 447, 448, 481, 482, 489], "read": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 52, 61, 62, 64, 199, 207, 208, 231, 238, 240, 242, 246, 247, 248, 249, 250, 335, 347, 349, 355, 358, 359, 360, 361, 362, 363, 364, 375, 378, 381, 382, 383, 388, 390, 396, 397, 399, 400, 401, 422, 423, 424, 427, 437, 441, 444, 481, 482, 489, 490, 492], "write": [2, 10, 11, 12, 14, 15, 18, 19, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 52, 64, 65, 66, 118, 199, 230, 233, 237, 238, 240, 242, 246, 247, 347, 349, 359, 360, 361, 362, 363, 364, 375, 378, 381, 383, 388, 389, 390, 396, 397, 398, 399, 400, 401, 425, 427, 437, 441, 444, 481, 482, 489, 490, 492], "view": [2, 3, 18, 129, 130, 149, 151, 158, 159, 160, 161, 162, 163, 183, 184, 193, 194, 195, 196, 199, 246, 265, 281, 282, 298, 299, 307, 308, 309, 310, 313, 314, 331, 332, 343, 344, 345, 346, 349, 354, 356, 357, 358, 359, 364, 373, 374, 377, 391, 392, 393, 394, 395, 397, 440, 441, 447, 448, 489, 490, 491], "perform": [2, 3, 13, 16, 18, 19, 21, 33, 106, 230, 233, 237, 238, 240, 246, 247, 323, 324, 326, 327, 329, 338, 360, 361, 362, 363, 378, 381, 396, 397, 444, 480, 481, 482, 489, 490, 491, 492], "element": [2, 3, 13, 16, 36, 37, 39, 43, 44, 50, 52, 57, 58, 63, 64, 107, 129, 156, 162, 191, 281, 305, 313, 321, 340, 349, 350, 352, 353, 383, 387, 389, 490, 492], "wise": [2, 12, 15, 16, 32, 489], "convers": [2, 349, 355, 491], "top": [2, 14, 16, 26, 27, 30, 31, 491, 492], "level": [2, 7, 12, 14, 15, 16, 17, 18, 27, 28, 242, 491, 492], "compos": [2, 18, 19, 135, 162, 168, 287, 319], "under": [2, 10, 15, 21, 238, 490], "convert": [2, 4, 12, 16, 32, 36, 37, 49, 52, 63, 64, 67, 69, 118, 119, 134, 212, 221, 222, 243, 281, 288, 306, 311, 313, 341, 347, 360, 362, 363, 365, 378, 388, 396, 399, 410, 421, 437, 440, 441, 480, 490], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 18, 19, 23, 24, 27, 32, 33, 106, 110, 111, 117, 118, 132, 135, 147, 151, 162, 167, 169, 171, 184, 186, 197, 248, 249, 253, 255, 257, 269, 272, 281, 286, 297, 299, 301, 312, 313, 318, 321, 329, 332, 334, 347, 348, 349, 350, 355, 358, 359, 360, 361, 362, 363, 364, 369, 370, 371, 374, 376, 377, 378, 380, 381, 383, 388, 395, 396, 399, 400, 437, 438, 441, 444, 445, 481, 482, 489, 491, 492, 493], "zarr": [2, 3, 10, 16, 18, 24, 30, 110, 118, 292, 316, 317, 318, 319, 322, 323, 324, 327, 329, 334, 335, 338, 348, 349, 355, 358, 359, 362, 363, 365, 366, 367, 370, 371, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 440, 480, 490, 492], "kvstore": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 110, 118, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 341, 342, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 440, 479, 480, 489, 490, 491], "gc": [2, 3, 11, 15, 16, 24, 25, 27, 223, 241, 245, 399, 480, 491], "bucket": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 16, 22, 26, 28, 30, 31, 223, 241, 245, 480, 491], "my": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 16, 22, 23, 26, 28, 30, 31, 223, 241, 245], "fly": 3, "comput": [3, 14, 19, 22, 27, 129, 142, 230, 231, 233, 284, 316, 349, 356, 357, 358, 359, 377, 389, 395, 489, 490], "exactli": [3, 12, 13, 15, 107, 480, 489, 490], "posit": [3, 14, 16, 19, 288, 311, 347, 349, 371, 480, 490, 491], "alwai": [3, 10, 11, 12, 13, 15, 16, 107, 112, 360, 361, 362, 363, 378, 396, 401, 490, 492], "respect": [3, 13, 14, 39, 50, 82, 108, 110, 112, 151, 184, 299, 332, 374, 399, 490], "origin": [3, 12, 13, 15, 16, 19, 36, 52, 55, 56, 64, 106, 112, 113, 114, 115, 129, 146, 153, 158, 159, 160, 162, 180, 187, 193, 194, 195, 222, 243, 281, 288, 302, 307, 308, 309, 311, 313, 336, 343, 344, 345, 347, 349, 379, 388, 391, 392, 393, 444, 445, 480, 481, 482, 489, 490, 492], "all": [3, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 31, 32, 33, 52, 62, 64, 66, 107, 112, 113, 114, 115, 116, 136, 158, 159, 160, 162, 169, 193, 194, 195, 238, 239, 243, 288, 307, 308, 309, 311, 343, 344, 345, 347, 350, 352, 353, 359, 381, 384, 388, 389, 391, 392, 393, 399, 400, 444, 480, 481, 482, 489, 490, 492, 493], "dimens": [3, 15, 18, 19, 32, 36, 37, 39, 46, 50, 52, 60, 62, 64, 66, 82, 86, 87, 88, 89, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 130, 132, 133, 134, 136, 137, 139, 143, 144, 147, 149, 150, 151, 154, 158, 159, 160, 161, 162, 163, 166, 169, 174, 175, 179, 183, 184, 193, 194, 195, 196, 197, 255, 258, 281, 282, 284, 285, 288, 294, 298, 299, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 326, 331, 332, 333, 337, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 356, 357, 361, 368, 373, 374, 380, 391, 392, 393, 394, 395, 396, 400, 410, 414, 444, 445, 446, 475, 480, 481, 482, 489, 491], "To": [3, 10, 12, 13, 15, 16, 18, 20, 22, 27, 28, 77, 118, 213, 229, 240, 335, 347, 358, 388, 444, 480, 481, 482, 489, 490], "differ": [3, 10, 12, 13, 15, 16, 19, 23, 24, 27, 28, 111, 117, 118, 186, 197, 242, 288, 301, 311, 312, 334, 347, 348, 377, 378, 385, 388, 395, 396, 444, 480, 481, 482, 483, 488, 489], "translat": [3, 12, 15, 16, 19, 106, 113, 114, 115, 129, 158, 159, 160, 162, 193, 194, 195, 281, 307, 308, 309, 313, 343, 344, 345, 349, 391, 392, 393, 445, 490], "domain": [3, 18, 32, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 190, 191, 196, 197, 281, 282, 284, 285, 286, 287, 288, 294, 295, 298, 299, 301, 302, 304, 305, 310, 311, 312, 313, 314, 316, 319, 322, 326, 327, 331, 332, 336, 337, 338, 339, 340, 342, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 368, 369, 373, 374, 378, 379, 380, 381, 383, 385, 386, 387, 389, 394, 395, 396, 399, 444, 445, 468, 475, 480, 481, 482, 489, 490, 491, 492], "properti": [3, 12, 15, 16, 18, 24, 26, 174, 175, 176, 177, 178, 179, 180, 182, 291, 400, 480, 489, 492, 493], "offset": [3, 14, 19, 27, 36, 62, 66, 106, 113, 114, 129, 135, 158, 159, 162, 168, 169, 170, 171, 189, 192, 193, 194, 255, 256, 257, 258, 263, 281, 307, 308, 313, 341, 343, 344, 349, 391, 392, 444, 445, 479, 481, 490, 491, 492], "equival": [3, 4, 12, 15, 16, 20, 23, 32, 33, 52, 64, 82, 91, 107, 108, 112, 113, 114, 116, 129, 135, 147, 149, 151, 158, 159, 160, 161, 163, 183, 184, 187, 190, 191, 193, 194, 195, 196, 238, 242, 282, 288, 298, 299, 302, 304, 305, 307, 308, 309, 310, 311, 314, 331, 332, 336, 339, 340, 343, 344, 345, 346, 347, 350, 354, 355, 359, 373, 374, 379, 380, 386, 387, 388, 391, 392, 393, 394, 399, 407, 414, 444, 471, 480, 481, 482, 489, 490, 492, 493], "downsample_factor": [3, 32, 322, 365, 447, 448], "howev": [3, 15, 16, 20, 22, 107, 118, 162, 489], "factor": 3, "length": [3, 12, 15, 16, 19, 27, 32, 164, 383, 479, 483, 488, 490, 492], "indic": [3, 12, 13, 15, 16, 19, 27, 28, 30, 32, 75, 82, 86, 87, 88, 89, 90, 97, 99, 100, 104, 106, 107, 110, 111, 112, 116, 117, 129, 131, 136, 143, 144, 147, 151, 162, 164, 165, 167, 169, 174, 175, 184, 186, 197, 200, 202, 204, 205, 206, 207, 210, 227, 238, 242, 247, 269, 281, 286, 287, 288, 294, 299, 301, 311, 312, 313, 318, 319, 321, 332, 334, 347, 348, 349, 350, 352, 353, 358, 359, 362, 363, 368, 374, 377, 378, 382, 383, 388, 389, 395, 396, 398, 399, 400, 403, 404, 406, 409, 410, 427, 444, 445, 446, 457, 468, 480, 481, 482, 489, 490, 492], "downsample_method": [3, 322, 365], "downsamplemethod": [3, 447, 448], "mean": [3, 10, 11, 12, 13, 15, 16, 21, 322, 365, 490], "follow": [3, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 27, 128, 131, 165, 288, 311, 347, 410, 444, 480, 481, 482, 489, 490, 492, 493], "method": [3, 12, 15, 16, 22, 27, 32, 35, 255, 262, 269, 322, 359, 365, 447, 448, 490, 491], "stride": [3, 16, 19, 106, 112, 169, 171, 192, 255, 257, 258, 264, 445], "median": 3, "mode": [3, 20, 32, 107, 111, 117, 248, 249, 313, 335, 347, 349, 375, 388, 400, 480], "min": [3, 19, 27, 383], "max": [3, 383], "quit": 3, "effici": [3, 13, 16, 18, 19, 27, 32, 33, 36, 61, 62, 65, 66, 399, 400, 492, 493], "addit": [3, 10, 11, 12, 13, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 30, 36, 37, 50, 64, 85, 106, 107, 199, 212, 217, 234, 281, 288, 311, 313, 347, 400, 409, 410, 427, 444, 480, 481, 482, 489, 490, 492], "buffer": [3, 15, 489], "index": [3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 26, 27, 30, 36, 60, 82, 84, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 131, 132, 133, 134, 135, 136, 137, 138, 147, 151, 154, 161, 164, 165, 166, 167, 168, 169, 170, 171, 173, 184, 186, 188, 196, 197, 198, 255, 257, 265, 269, 284, 286, 287, 288, 294, 299, 301, 310, 311, 312, 316, 318, 319, 327, 332, 334, 342, 346, 347, 348, 356, 358, 359, 360, 362, 363, 368, 374, 377, 378, 394, 395, 396, 444, 445, 468, 475, 480, 481, 482, 489, 492], "while": [3, 4, 12, 13, 15, 16, 19, 23, 27, 33, 52, 57, 64, 118, 230, 233, 355, 410, 483, 488, 489, 490, 491, 492], "offer": 3, "function": [3, 19, 26, 32, 118, 129, 489, 491], "uniform": [3, 18, 492], "other": [3, 12, 13, 15, 16, 19, 20, 27, 36, 37, 38, 39, 50, 51, 62, 66, 77, 82, 84, 85, 98, 103, 107, 129, 131, 136, 142, 148, 162, 200, 201, 212, 214, 224, 225, 230, 231, 233, 281, 283, 313, 315, 359, 383, 410, 411, 480, 489, 490, 492], "simpler": 3, "note": [3, 14, 107], "For": [3, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 30, 62, 66, 110, 112, 132, 162, 218, 235, 350, 352, 353, 355, 399, 427, 489, 492], "dimension": [3, 16, 18, 19, 32, 107, 129, 349, 490], "etc": [3, 17, 20, 22, 23, 385], "return": [3, 10, 11, 12, 13, 15, 16, 19, 32, 71, 72, 73, 75, 76, 77, 78, 79, 82, 92, 93, 94, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 127, 129, 133, 134, 135, 139, 140, 149, 151, 157, 158, 159, 160, 161, 162, 164, 172, 183, 184, 192, 193, 194, 195, 196, 199, 200, 203, 212, 213, 216, 217, 219, 229, 231, 232, 234, 236, 237, 238, 239, 242, 246, 247, 265, 267, 268, 281, 284, 285, 286, 287, 290, 291, 293, 298, 299, 301, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 321, 325, 331, 332, 334, 335, 337, 343, 344, 345, 346, 348, 349, 352, 353, 355, 356, 357, 358, 359, 364, 373, 374, 375, 381, 383, 384, 388, 389, 391, 392, 393, 394, 397, 399, 401, 405, 407, 437, 440, 441, 444, 447, 448, 457, 458, 459, 479, 480, 481, 482, 489, 492], "rectangular": [3, 13, 19], "region": [3, 13, 19, 28, 350, 490, 491], "non": [3, 10, 11, 12, 13, 15, 16, 19, 20, 22, 24, 25, 26, 30, 98, 103, 107, 116, 131, 165, 199, 218, 235, 240, 288, 311, 347, 400, 425, 426, 427, 444, 480, 481, 482, 489, 490, 492], "complex": [3, 16, 32, 442, 443, 490, 493], "numer": [3, 16, 19, 410, 490, 492], "bool": [3, 15, 16, 32, 36, 37, 38, 49, 51, 52, 64, 67, 69, 71, 72, 73, 75, 82, 83, 84, 85, 86, 87, 88, 89, 94, 97, 99, 100, 106, 107, 110, 118, 121, 122, 123, 129, 136, 143, 144, 151, 162, 169, 174, 175, 184, 199, 200, 201, 204, 212, 214, 221, 222, 224, 225, 243, 248, 249, 250, 251, 252, 253, 254, 281, 283, 299, 306, 313, 315, 332, 341, 347, 349, 350, 351, 352, 353, 374, 382, 383, 384, 388, 389, 398, 400, 401, 403, 404, 406, 409, 410, 411, 427, 429, 430, 433, 439, 444, 445, 457, 480, 481, 482, 490, 493], "present": [3, 12, 17, 19, 27], "In": [3, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 85, 147, 202, 206, 359, 400, 410, 427, 490, 491, 492], "case": [3, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 33, 112, 113, 114, 115, 131, 147, 158, 159, 160, 162, 165, 193, 194, 195, 202, 205, 242, 307, 308, 309, 343, 344, 345, 350, 359, 391, 392, 393, 490, 492], "contain": [3, 11, 14, 17, 19, 20, 27, 28, 82, 83, 84, 90, 107, 112, 129, 142, 200, 204, 383, 416, 479, 489, 490, 491, 492], "odd": 3, "lower": [3, 4, 19, 82, 86, 87, 88, 89, 96, 99, 102, 106, 108, 110, 112, 115, 129, 136, 143, 146, 147, 151, 153, 160, 162, 169, 174, 178, 180, 184, 187, 195, 200, 202, 206, 281, 299, 302, 309, 313, 332, 336, 345, 349, 374, 379, 393, 445, 490, 492], "most": [3, 13, 15, 16, 17, 19, 20, 22, 24, 27, 107, 122, 134, 136, 169, 199, 230, 231, 233, 242, 279, 287, 359, 399, 490, 492], "frequent": 3, "tie": 3, "lowest": 3, "among": [3, 14], "set": [3, 4, 9, 13, 17, 20, 21, 22, 23, 25, 27, 28, 32, 52, 64, 106, 109, 112, 199, 242, 288, 311, 347, 352, 353, 388, 444, 445, 480, 481, 482, 489, 490], "common": [3, 10, 14, 17, 24, 27, 32, 52, 64, 162, 481, 490], "chosen": [3, 12, 13, 15, 16, 27, 480], "lexicograph": [3, 16, 52, 57, 64, 199, 200, 202, 206, 381, 492], "smallest": [3, 13, 15], "unspecifi": [3, 10, 12, 13, 15, 16, 19, 27, 37, 46, 52, 62, 64, 66, 207, 208, 210, 227, 238, 239, 242, 281, 295, 296, 303, 313, 328, 337, 342, 347, 388, 480, 489, 490, 492], "determinist": 3, "version": [3, 16, 17, 20, 224, 227, 479, 480, 489, 490], "arithmet": 3, "averag": 3, "over": [3, 10, 12, 13, 15, 16, 17, 19, 20, 22, 28, 82, 90, 135, 169, 170, 347, 388, 399, 480, 490, 492], "bound": [3, 10, 12, 13, 14, 15, 16, 19, 23, 32, 82, 85, 86, 87, 88, 89, 95, 96, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 115, 117, 129, 131, 136, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 160, 162, 165, 167, 169, 171, 174, 175, 176, 177, 178, 180, 184, 186, 187, 195, 197, 199, 200, 202, 205, 206, 214, 222, 240, 242, 243, 244, 246, 281, 288, 299, 302, 309, 311, 313, 315, 321, 332, 336, 345, 347, 349, 369, 374, 379, 383, 384, 388, 393, 397, 422, 424, 444, 445, 480, 481, 482, 489, 490, 492], "round": [3, 13, 19, 490], "nearest": 3, "even": [3, 10, 11, 12, 13, 15, 16, 18, 23, 75, 230, 233, 347, 350, 383, 388, 480, 490], "block": [3, 12, 13, 15, 16, 21, 33, 119, 124, 127, 230, 231, 233, 355, 360, 361, 362, 363, 378, 381, 396, 399, 400, 489, 492], "start": [3, 16, 20, 27, 30, 32, 35, 107, 110, 116, 118, 133, 151, 184, 239, 299, 332, 374, 400, 406, 409, 445, 489, 490], "interv": [3, 19, 22, 28, 32, 62, 66, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 101, 102, 105, 199, 200], "9": [3, 12, 13, 15, 16, 19, 20, 33, 85, 107, 131, 135, 147, 165, 258, 284, 285, 316, 317, 356, 357, 360, 361, 362, 383, 444, 480, 490, 491, 492], "minimum": [3, 20, 129, 142], "imag": [4, 5, 6, 7, 8, 9, 13], "file": [4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 22, 24, 25, 28, 31, 33, 213, 215, 216, 217, 219, 220, 221, 229, 232, 234, 236, 399, 400, 479, 480, 491], "volum": [4, 5, 6, 7, 8, 9, 13, 26], "height": [4, 5, 6, 7, 8, 9, 479], "y": [4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 130, 131, 132, 133, 134, 137, 138, 142, 148, 150, 165, 166, 171, 173, 179, 181, 185, 189, 192, 204, 238, 240, 284, 285, 286, 287, 295, 301, 312, 316, 317, 342, 356, 357, 360, 361, 369, 444, 480, 490, 491], "width": [4, 5, 6, 7, 8, 9], "x": [4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 19, 20, 82, 86, 87, 88, 89, 92, 93, 98, 103, 104, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 130, 131, 132, 133, 134, 138, 142, 148, 150, 165, 166, 168, 171, 173, 179, 181, 185, 189, 192, 204, 238, 240, 284, 285, 286, 287, 295, 301, 312, 316, 317, 342, 356, 357, 360, 361, 369, 444, 446, 480, 490, 491], "channel": [4, 5, 6, 7, 8, 9, 13, 480, 491], "between": [4, 9, 16, 19, 22, 28, 444, 480, 481, 482, 489], "yuv": [4, 9], "plane": 4, "vari": [4, 20], "bit": [4, 12, 15, 16, 19, 26, 27, 32, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 484, 485, 486, 487, 493], "represent": [4, 16, 19, 21, 22, 23, 24, 25, 27, 28, 30, 32, 36, 37, 40, 49, 53, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 92, 93, 138, 140, 157, 171, 172, 192, 214, 215, 216, 221, 223, 232, 245, 283, 289, 290, 306, 315, 320, 321, 341, 349, 383, 410, 413, 421, 449, 479, 490, 492, 493], "them": [4, 20, 399], "regardless": [4, 10, 11, 12, 13, 15, 16, 490], "depth": 4, "grei": 4, "greya": 4, "rgb": [4, 9], "rgba": [4, 9], "underli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 24, 26, 27, 30, 31, 33, 162, 199, 212, 218, 235, 313, 322, 330, 347, 349, 365, 372, 399, 400, 427, 480, 492], "storag": [4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 22, 25, 28, 32, 36, 52, 57, 58, 64, 199, 224, 225, 226, 247, 313, 330, 347, 349, 350, 372, 385, 399, 400, 427, 480, 492], "mechan": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 199, 427, 490], "uint8": [4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 27, 32, 288, 289, 290, 293, 296, 303, 306, 311, 325, 328, 487, 493], "quantiz": 4, "unus": [4, 6, 7, 9], "higher": [4, 9, 12, 15, 16, 242], "qualiti": [4, 6, 9, 13], "speed": [4, 15, 16, 20], "g": [4, 5, 6, 7, 8, 9, 13, 15, 17, 21, 22, 24, 26, 30, 31, 32, 107, 112, 113, 114, 115, 158, 159, 160, 193, 194, 195, 223, 243, 245, 291, 307, 308, 309, 343, 344, 345, 388, 391, 392, 393, 400, 489, 490, 491], "path": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 199, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 247, 330, 365, 372, 400, 480, 491], "experiment": [5, 8, 15, 22, 28, 29, 238], "75": [6, 13], "rang": [6, 19, 27, 82, 106, 113, 114, 115, 116, 118, 199, 200, 201, 202, 203, 204, 205, 206, 237, 238, 239, 257, 258, 399, 445, 446, 490], "100": [6, 9, 12, 13, 15, 16, 19, 27, 62, 63, 66, 110, 139, 152, 154, 284, 285, 286, 287, 295, 301, 312, 322, 323, 333, 337, 338, 341, 342, 347, 365, 367, 368, 371, 372, 385, 389, 489, 490, 491], "jpg": 6, "compression_level": 7, "compress": [7, 15, 31, 356, 357, 400, 479, 480, 491, 492], "veri": [8, 13, 26, 30, 132, 135], "subset": [8, 19, 20, 118, 129, 134, 490], "page": 8, "either": [9, 10, 12, 13, 15, 16, 19, 20, 22, 32, 82, 131, 134, 161, 165, 196, 310, 346, 360, 361, 362, 363, 378, 383, 394, 396, 399, 400, 408, 445, 480, 490], "lossi": 9, "422": 9, "incur": 9, "some": [9, 12, 19, 20, 350, 400, 410, 480, 492], "perceptu": 9, "loss": 9, "lossless": 9, "true": [9, 10, 11, 12, 13, 15, 16, 21, 25, 33, 77, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 97, 99, 100, 107, 110, 118, 122, 143, 144, 151, 174, 175, 184, 204, 221, 222, 229, 232, 234, 236, 243, 277, 279, 280, 299, 332, 335, 347, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 400, 411, 444, 480, 481, 482, 490, 491], "avif": [9, 10, 493], "95": 9, "better": [9, 355, 489], "cast": [10, 32, 322, 364, 365, 440, 441, 493], "downsampl": [10, 32, 322, 365, 447, 448, 493], "stack": [10, 20, 32, 444, 481, 482, 493], "bmp": [10, 493], "jpeg": [10, 13, 20, 26, 493], "png": [10, 20, 493], "tiff": [10, 20, 493], "webp": [10, 493], "zarr3": [10, 30, 33, 492], "n5": [10, 18, 315, 320, 321, 325, 326, 328, 330, 333, 337, 341, 342, 347, 356, 357, 360, 361, 368, 369, 372, 400, 480, 492], "neuroglancer_precomput": [10, 26, 294, 480, 491, 492], "keyvaluestorebackedchunkdriv": [10, 12, 13, 15, 16, 493], "subtyp": [10, 12, 15, 16, 24, 492, 493], "kvstoreurl": [10, 11, 12, 13, 15, 16, 21, 22, 23, 24, 25, 28], "join": [10, 11, 12, 13, 15, 16, 199, 212, 217, 234], "compon": [10, 11, 12, 13, 15, 16, 23, 36, 52, 129, 136, 162, 169, 199, 212, 217, 234, 281, 288, 493], "after": [10, 11, 12, 13, 15, 16, 20, 35, 242, 288, 311, 347, 383, 399, 416, 427, 480, 489, 490, 492], "backward": [10, 11, 12, 13, 15, 16, 106, 113, 129, 158, 162, 193, 281, 307, 313, 343, 349, 391, 445, 490], "should": [10, 11, 12, 13, 15, 16, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 119, 383, 399, 425, 426, 489, 492], "instead": [10, 11, 12, 13, 14, 15, 16, 17, 20, 27, 118, 147, 162, 213, 229, 242, 347, 359, 388, 399, 480, 489, 490], "neither": [10, 11, 12, 13, 15, 16, 19, 347, 388, 444, 480, 481, 482, 489], "nor": [10, 12, 13, 15, 16, 19, 31, 347, 388, 444, 480, 481, 482, 489], "fals": [10, 12, 13, 15, 16, 21, 25, 28, 37, 49, 67, 69, 71, 72, 73, 75, 83, 84, 86, 87, 88, 89, 97, 99, 100, 105, 107, 110, 119, 122, 143, 144, 151, 174, 175, 184, 204, 212, 221, 222, 243, 248, 249, 277, 279, 280, 281, 299, 306, 313, 332, 341, 347, 350, 353, 374, 383, 384, 388, 389, 400, 401, 457, 480, 490, 492], "both": [10, 12, 13, 15, 16, 19, 20, 27, 52, 64, 110, 131, 151, 165, 184, 288, 299, 311, 332, 347, 374, 444, 480, 481, 482, 489, 492], "permit": [10, 11, 12, 13, 15, 16, 17, 19, 28, 106, 107, 116, 132, 135, 288, 311, 347, 383, 444, 480, 481, 482, 489, 490], "doe": [10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 77, 107, 109, 112, 113, 114, 115, 118, 147, 149, 160, 161, 162, 183, 195, 196, 298, 309, 310, 323, 324, 326, 327, 329, 330, 331, 335, 338, 345, 346, 347, 358, 372, 373, 388, 389, 393, 394, 399, 410, 438, 480, 490, 492], "alreadi": [10, 12, 13, 14, 15, 16, 19, 20, 27, 35, 121, 222, 240, 288, 311, 347, 400, 402, 405, 406, 444, 480, 481, 482, 489], "delete_exist": [10, 12, 13, 15, 16, 33, 248, 249, 253, 335, 347, 388, 400, 480, 491], "delet": [10, 12, 13, 15, 16, 22, 27, 28, 199, 230, 233, 237, 247, 248, 249, 253, 347, 383, 388, 480], "befor": [10, 12, 13, 15, 16, 238, 242, 248, 249, 253, 347, 388, 480], "assume_metadata": [10, 12, 13, 15, 16, 248, 249, 251, 347, 388], "store": [10, 11, 12, 13, 15, 16, 17, 19, 24, 32, 33, 110, 199, 212, 213, 217, 218, 219, 220, 223, 224, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 294, 313, 330, 347, 349, 350, 352, 353, 364, 365, 366, 367, 368, 371, 372, 383, 385, 388, 389, 399, 400, 410, 444, 471, 479, 480, 481, 482, 489, 491, 492, 493], "metadata": [10, 12, 13, 15, 16, 22, 26, 28, 248, 249, 250, 251, 294, 323, 324, 326, 327, 328, 329, 333, 337, 338, 341, 342, 347, 349, 356, 357, 358, 359, 365, 377, 383, 388, 395, 400, 491], "just": [10, 12, 13, 15, 16, 17, 19, 347, 388, 480, 490, 491], "assum": [10, 11, 12, 13, 15, 16, 19, 347, 388, 480, 492], "necessari": [10, 12, 13, 15, 16, 17, 19, 20, 21, 131, 165, 347, 388, 480, 493], "spec": [10, 12, 13, 14, 15, 16, 18, 23, 70, 73, 74, 75, 77, 78, 79, 81, 107, 198, 199, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 235, 240, 241, 243, 283, 284, 296, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 367, 388, 440, 444, 447, 480, 481, 482], "need": [10, 12, 13, 14, 15, 16, 19, 20, 107, 120, 162, 347, 388, 410, 444, 480, 482, 490, 492], "oper": [10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26, 28, 30, 32, 35, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 132, 135, 162, 167, 186, 197, 198, 207, 230, 233, 237, 238, 240, 242, 246, 247, 277, 286, 301, 312, 318, 334, 347, 348, 349, 358, 360, 361, 362, 363, 378, 381, 383, 388, 389, 390, 396, 397, 399, 409, 427, 444, 480, 481, 482, 489], "resiz": [10, 12, 13, 14, 15, 16, 19, 82, 99, 100, 110, 347, 349, 383, 384, 388, 480, 490], "modifi": [10, 11, 12, 13, 15, 16, 19, 20, 129, 212, 222, 291, 347, 349, 383, 388, 399, 480], "take": [10, 12, 13, 14, 15, 16, 17, 18, 52, 64, 288, 311, 347, 388, 444, 480, 481, 482, 489, 490, 492], "preced": [10, 12, 13, 14, 15, 16, 17, 52, 64, 288, 311, 347, 388, 444, 480, 481, 482, 489, 492], "assume_cached_metadata": [10, 12, 13, 15, 16, 248, 249, 250, 347, 388, 480], "can": [10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 28, 33, 147, 239, 284, 288, 294, 311, 316, 347, 356, 388, 399, 400, 422, 423, 444, 480, 481, 482, 489, 490, 491, 492], "lead": [10, 12, 13, 15, 16, 19, 20, 33, 119, 242, 347, 381, 384, 388, 416, 480, 492], "corrupt": [10, 12, 13, 15, 16, 347, 388, 480], "writer": [10, 12, 13, 15, 16, 347, 388, 480], "skip": [10, 12, 13, 15, 16, 20, 248, 249, 250, 347, 388, 422, 423, 490], "still": [10, 11, 12, 13, 15, 16, 19, 132, 135, 347, 388, 400, 409, 480, 489, 490], "access": [10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 27, 28, 57, 58, 248, 249, 251, 291, 347, 388, 427, 444, 480, 481, 482, 490, 491], "subsequ": [10, 12, 13, 14, 15, 16, 107, 110, 347, 388, 399, 427, 444, 480, 481, 482, 489, 490], "re": [10, 12, 13, 15, 16, 20, 26, 30, 199, 222, 238, 243, 347, 349, 388, 480, 489], "unlik": [10, 12, 13, 15, 16, 23, 107, 118, 120, 490], "recheck_cached_metadata": [10, 12, 13, 15, 16], "cacherevalidationbound": [10, 11, 12, 13, 15, 16], "time": [10, 11, 12, 13, 15, 16, 19, 22, 27, 28, 224, 226, 228, 238, 242, 489, 492], "fresh": [10, 11, 12, 13, 15, 16], "older": [10, 11, 12, 13, 15, 16, 27, 238, 242, 422, 424], "than": [10, 11, 12, 13, 15, 16, 19, 20, 21, 27, 28, 52, 57, 58, 64, 107, 134, 238, 242, 422, 424, 444, 481, 482, 489, 490, 492], "revalid": [10, 11, 12, 13, 15, 16, 23], "prior": [10, 11, 12, 13, 15, 16, 20, 109, 110, 112, 113, 114, 115, 383, 489, 490], "check": [10, 12, 13, 15, 16, 82, 83, 84, 389, 405, 490], "everi": [10, 11, 12, 13, 15, 16, 18, 19, 23, 26, 30, 108, 350, 480, 489, 492], "With": [10, 11, 12, 13, 15, 16, 350], "recheck": [10, 11, 12, 13, 15, 16], "recheck_cached_data": [10, 11, 12, 13, 15, 16, 491], "being": [10, 11, 12, 13, 15, 16, 27, 33, 238, 242, 400, 489, 490], "partial": [10, 12, 13, 15, 16, 19, 480], "consist": [10, 11, 12, 13, 15, 16, 18, 27, 107, 147, 242, 490], "enabl": [10, 12, 13, 15, 16, 17, 18, 20, 22, 27, 28, 82, 90, 162, 389, 399, 489, 490], "you": [10, 12, 13, 15, 16, 17, 20, 22, 23, 28, 77, 399, 444, 480, 481, 482, 489, 491], "zero": [10, 12, 13, 15, 16, 19, 26, 30, 82, 94, 107, 108, 136, 169, 288, 311, 347, 444, 457, 480, 481, 482, 489, 490, 492], "explicit": [10, 14, 19, 33, 82, 106, 110, 129, 135, 136, 143, 144, 151, 162, 169, 174, 175, 184, 281, 284, 287, 288, 299, 311, 313, 316, 319, 332, 347, 349, 356, 359, 360, 363, 374, 384, 399, 444, 445, 480, 481, 482, 489, 490, 492], "what": 10, "circumst": 10, "never": [10, 381, 399, 490], "wa": [10, 17, 27, 70, 81, 124, 127, 238, 240, 242, 291, 350, 405, 444, 480, 481, 482, 489, 491], "second": [10, 19, 22, 27, 28, 124, 127, 224, 228, 238, 242], "sinc": [10, 19, 20, 27, 107, 110, 124, 127, 147, 224, 228, 238, 242, 489, 490, 491], "unix": [10, 22, 24, 25, 26, 27, 28, 29, 30, 31, 124, 127, 224, 228, 238, 242], "epoch": [10, 27, 124, 127, 224, 228, 238, 242], "provid": [11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 28, 118, 350, 399, 400, 427, 480, 490], "kei": [11, 12, 13, 15, 18, 32, 70, 76, 199, 200, 202, 204, 207, 211, 212, 213, 217, 218, 219, 220, 223, 224, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 313, 330, 347, 349, 372, 399, 400, 479, 480, 491, 492], "layer": [11, 12, 13, 14, 15, 16, 32, 399, 444, 481, 482, 492], "itself": [11, 14, 20, 27, 399, 427, 490], "expos": 11, "singl": [11, 12, 13, 15, 16, 17, 19, 32, 107, 116, 129, 133, 199, 230, 231, 233, 239, 242, 247, 255, 258, 288, 294, 311, 313, 321, 322, 347, 365, 368, 410, 444, 461, 480, 481, 482, 489, 490, 491, 492, 493], "sub": [11, 16, 491], "pointer": [11, 27], "rfc": [11, 23], "6901": 11, "guarante": [11, 18, 21, 118, 230, 233, 237, 238, 242, 247, 353, 399, 400, 427, 438], "presenc": [11, 16], "becaus": [11, 13, 20, 110, 118, 399, 489, 490], "implement": [11, 15, 18, 20, 26, 27, 29, 30, 31, 33, 238, 242], "atom": [11, 18, 25, 27, 400, 401, 404, 489], "individu": [11, 13, 16, 444, 481, 482, 490, 492], "two": [11, 16, 19, 32, 36, 37, 38, 51, 224, 225, 399, 400, 410, 411, 427, 469, 470, 471, 472, 473, 490, 492, 493], "process": [11, 18, 21, 355], "overlap": [11, 14, 238], "lost": [11, 21], "json_point": 11, "entir": [11, 13, 15, 16, 19, 26, 27, 30, 131, 165, 350, 355, 399, 416, 490, 492, 493], "empti": [11, 12, 16, 19, 27, 82, 94, 98, 103, 104, 131, 165, 200, 202, 204, 205, 206, 227, 247, 288, 311, 347, 410, 425, 426, 444, 480, 481, 482, 489, 490, 492], "full": [11, 15, 19, 25, 27, 107, 388, 490, 492], "b": [11, 20, 32, 85, 116, 131, 165, 168, 199, 204, 208, 214, 219, 227, 230, 231, 233, 236, 237, 238, 239, 240, 242, 246, 247, 283, 293, 315, 325, 476, 479, 480, 490], "42": [11, 15, 16, 20, 119, 283, 297, 329, 349, 360, 371, 385, 399, 400, 480, 489], "error": [11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 27, 28, 35, 118, 119, 124, 127, 131, 165, 230, 231, 233, 242, 277, 279, 288, 311, 347, 407, 444, 480, 481, 482, 489, 490], "attempt": [11, 14, 22, 23, 28, 35, 480, 489, 490], "ancestor": 11, "inconsist": 11, "attribut": [11, 12, 16, 350, 351, 490], "dataset": [12, 21, 22, 25, 28, 33, 118, 221, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 370, 376, 377, 378, 380, 381, 383, 388, 395, 396, 399, 400], "metdata": 12, "except": [12, 13, 15, 16, 112, 118, 119, 122, 124, 125, 214, 230, 231, 233, 277, 279, 288, 311, 315, 347, 400, 427, 434, 444, 480, 481, 482, 489, 490, 492], "obtain": [12, 15, 16, 27, 28, 30, 107, 129, 291, 349, 384, 389, 490, 491], "arbitrari": [12, 19, 23, 24, 27, 32, 474, 489, 490], "ones": 12, "list": [12, 17, 19, 20, 22, 27, 28, 32, 90, 133, 199, 237, 238, 239, 242, 447, 448, 457, 458, 480, 490], "here": 12, "thei": [12, 25, 27, 28, 75, 132, 135, 483, 488, 489, 490], "includ": [12, 13, 14, 15, 17, 18, 20, 23, 25, 27, 32, 75, 129, 134, 218, 235, 238, 313, 322, 323, 324, 326, 327, 329, 338, 360, 362, 363, 365, 378, 381, 388, 396, 399, 457, 479, 490, 492], "ident": [12, 13, 16, 19, 26, 135, 169, 170, 214, 243, 315, 388, 480, 491], "500": [12, 13, 15, 16], "blocksiz": [12, 15, 16, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 400, 480, 491], "have": [12, 13, 14, 15, 16, 19, 20, 22, 23, 27, 82, 109, 110, 131, 149, 151, 165, 183, 184, 222, 243, 284, 288, 298, 299, 311, 316, 331, 332, 347, 350, 356, 369, 373, 374, 388, 400, 438, 444, 480, 481, 482, 490, 491, 492], "accord": [12, 13, 15, 16, 19, 20, 27, 131, 165, 199, 200, 202, 206], "64": [12, 13, 15, 16, 19, 26, 27, 32, 480, 486, 491, 493], "datatyp": [12, 16, 328, 356, 357, 400, 480, 491], "uint16": [12, 13, 15, 16, 32, 33, 325, 338, 400, 484, 493], "uint32": [12, 13, 15, 16, 32, 110, 118, 322, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 395, 396, 399, 440, 441, 444, 481, 482, 485, 489, 490, 491, 493], "uint64": [12, 13, 15, 16, 26, 32, 480, 486, 491, 493], "int8": [12, 13, 15, 16, 32, 473, 493], "int16": [12, 13, 15, 16, 32, 469, 493], "int64": [12, 15, 16, 32, 472, 490, 493], "float32": [12, 13, 15, 16, 32, 322, 329, 365, 366, 441, 443, 461, 480, 493], "float64": [12, 15, 16, 32, 442, 462, 493], "ax": [12, 129, 161, 162, 196, 281, 310, 313, 342, 346, 349, 356, 357, 394], "label": [12, 13, 14, 15, 16, 18, 19, 32, 82, 85, 86, 87, 88, 89, 92, 93, 98, 103, 104, 106, 107, 108, 109, 116, 129, 130, 132, 133, 134, 136, 137, 138, 142, 148, 149, 150, 161, 162, 166, 169, 179, 183, 196, 281, 284, 285, 286, 287, 288, 295, 298, 301, 310, 311, 312, 313, 316, 331, 346, 347, 349, 356, 357, 360, 361, 369, 373, 394, 444, 445, 446, 480, 481, 482, 489, 492], "unlabel": [12, 16, 19, 82, 104, 136, 169, 492], "order": [12, 13, 16, 19, 20, 22, 26, 27, 28, 32, 36, 52, 57, 58, 64, 107, 110, 116, 129, 130, 161, 162, 163, 196, 199, 200, 202, 206, 239, 281, 282, 310, 313, 314, 323, 338, 346, 349, 350, 354, 358, 359, 365, 377, 381, 388, 394, 395, 399, 480, 490, 492, 493], "As": [12, 15, 16, 19, 107, 133, 202, 205, 438, 490], "overridden": [12, 16, 20, 222, 240, 347, 480], "z": [12, 13, 16, 19, 107, 109, 111, 112, 113, 114, 115, 116, 117, 130, 131, 132, 133, 134, 138, 150, 165, 171, 173, 179, 181, 185, 189, 192, 284, 285, 286, 287, 295, 301, 312, 316, 317, 356, 357, 360, 361, 480, 490, 491], "physic": [12, 16, 32, 281, 288, 294, 311, 313, 326, 347, 349, 368, 410, 444, 480, 481, 482, 489, 492], "nm": [12, 13, 16, 294, 326, 368, 411, 412, 413, 415, 416, 417, 418, 419, 421, 492], "": [12, 16, 17, 20, 27, 32, 110, 469, 470, 471, 472, 473, 490, 493], "resolut": [12, 13, 16, 326, 480, 491, 492], "multipli": [12, 13, 19, 410, 412, 414, 415, 416, 417, 420, 492], "dimension_unit": [12, 13, 14, 16, 281, 288, 294, 311, 313, 326, 347, 349, 368, 444, 480, 481, 482, 489, 492], "consid": [12, 20, 29, 399, 492], "40": [12, 13, 110, 322, 365, 389, 490], "remain": [12, 15, 19, 27, 107, 115, 160, 195, 222, 240, 309, 345, 347, 383, 393, 409, 416, 490, 492], "blosc": [12, 15, 16, 20, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "bzip2": [12, 15, 20], "gzip": [12, 13, 15, 16, 26, 480, 491, 492], "raw": [12, 26, 27, 400], "xz": [12, 20], "compressor": [12, 292, 324, 329, 349, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "big": [12, 15, 16, 26, 493], "endian": [12, 13, 15, 16, 26, 30, 493], "without": [12, 17, 19, 22, 23, 28, 106, 113, 114, 115, 213, 229, 230, 231, 233, 238, 240, 242, 247, 399, 400, 444, 445, 480, 481, 482, 489, 490, 491, 492, 493], "zlib": [12, 15, 16, 20], "header": [12, 15, 23, 28], "fastest": [12, 15, 20], "indicaet": 12, "best": [12, 13, 15], "slowest": [12, 15], "usezlib": [12, 492], "100kb": 12, "preset": 12, "correspond": [12, 13, 14, 15, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 50, 52, 64, 98, 103, 107, 108, 118, 119, 142, 147, 148, 161, 196, 277, 288, 294, 310, 311, 346, 347, 350, 368, 394, 427, 438, 439, 442, 443, 444, 460, 461, 462, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493], "worst": [12, 13], "cname": [12, 15, 16, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "blosclz": [12, 15, 16], "lz4": [12, 15, 16, 20, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "lz4hc": [12, 15, 16], "snappi": [12, 15, 16, 20], "zstd": [12, 15, 16, 20, 479], "clevel": [12, 15, 16, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "slower": [12, 15, 16], "achiev": [12, 15, 16, 21], "shuffl": [12, 15, 16, 349, 356, 357, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "No": [12, 15, 16], "1000": [12, 13, 15, 16, 284, 285, 286, 287, 301, 312, 327, 338, 349, 366, 480, 491], "2000": [12, 13, 15, 16, 284, 285, 286, 287, 301, 312, 327, 338, 366, 480], "3000": [12, 13, 15, 16, 284, 285, 286, 287, 301, 312, 327, 338, 366, 480], "200": [12, 13, 15, 16, 62, 63, 66, 110, 139, 152, 154, 284, 285, 286, 287, 295, 301, 312, 322, 323, 326, 333, 337, 338, 341, 342, 347, 365, 368, 372, 389, 490], "300": [12, 13, 15, 16, 62, 66, 110, 139, 152, 154, 284, 285, 286, 287, 295, 301, 312, 323, 326, 338, 347, 490], "grid_origin": [12, 13, 15, 16, 36, 52, 55, 56, 62, 64, 66, 284, 285, 286, 287, 288, 289, 291, 301, 303, 306, 312, 338, 366, 385, 492], "inner_ord": [12, 13, 15, 16, 36, 52, 57, 58, 59, 60, 63, 64, 284, 285, 286, 287, 288, 289, 291, 301, 306, 312, 338, 366, 385, 480, 492], "read_chunk": [12, 13, 15, 16, 36, 52, 61, 62, 63, 64, 338, 366, 385, 492], "write_chunk": [12, 13, 15, 16, 36, 52, 63, 64, 65, 66, 338, 366, 385, 492], "exclusive_max": [12, 13, 15, 16, 19, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 110, 129, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 147, 148, 165, 169, 170, 176, 192, 200, 202, 205, 284, 285, 286, 301, 312, 316, 322, 338, 347, 356, 360, 383, 385, 444, 481, 482, 490], "inclusive_min": [12, 13, 15, 16, 19, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 129, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 156, 165, 169, 170, 178, 192, 200, 202, 206, 239, 284, 285, 286, 301, 312, 316, 322, 338, 347, 356, 360, 383, 385, 444, 468, 481, 482], "name": [12, 13, 15, 16, 17, 20, 23, 27, 28, 30, 269, 271, 274, 449, 452, 453, 457, 458, 459, 489, 490], "intern": [12, 13, 17, 32, 238, 242, 471, 479, 493], "format": [12, 13, 15, 16, 17, 18, 24, 26, 30, 31, 32, 458, 480, 492, 493], "upper": [12, 15, 16, 19, 82, 86, 87, 88, 89, 95, 100, 101, 106, 108, 110, 129, 136, 141, 144, 145, 147, 151, 162, 169, 175, 176, 177, 184, 200, 202, 205, 281, 299, 313, 332, 349, 374, 445, 490], "e": [12, 13, 15, 16, 17, 19, 21, 22, 27, 32, 52, 57, 64, 105, 107, 112, 113, 114, 115, 131, 135, 158, 159, 160, 165, 193, 194, 195, 238, 242, 243, 291, 307, 308, 309, 343, 344, 345, 381, 388, 391, 392, 393, 400, 471, 489, 490, 492, 493], "implicit": [12, 13, 14, 15, 16, 19, 27, 32, 33, 82, 86, 87, 88, 89, 98, 99, 100, 103, 106, 107, 108, 110, 129, 131, 136, 142, 143, 144, 148, 151, 162, 165, 169, 174, 175, 184, 281, 288, 299, 311, 313, 332, 347, 349, 374, 444, 445, 480, 481, 482, 489, 490, 492], "nativ": [12, 15, 16, 18, 490], "ha": [12, 13, 14, 15, 16, 19, 20, 22, 28, 35, 107, 115, 116, 118, 121, 122, 123, 160, 195, 222, 237, 238, 243, 288, 309, 311, 330, 345, 347, 350, 371, 388, 393, 399, 400, 402, 403, 405, 406, 408, 409, 427, 444, 480, 481, 482, 489, 490], "indexdomain": [12, 13, 15, 16, 19, 32, 36, 62, 66, 82, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 170, 173, 281, 284, 285, 286, 287, 288, 295, 301, 311, 312, 313, 316, 327, 347, 349, 356, 357, 360, 361, 369, 444, 480, 481, 482, 489, 490, 492], "chunklayout": [12, 13, 15, 16, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 281, 284, 285, 286, 287, 288, 291, 301, 303, 306, 311, 312, 313, 323, 347, 349, 366, 480, 489, 492], "grid": [12, 13, 15, 16, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 61, 64, 65, 399, 492], "hard": [12, 13, 15, 19, 36, 37, 39, 47, 50, 52, 55, 57, 58, 62, 64, 66, 492], "codec_chunk": [12, 13, 15, 36, 52, 54, 64, 492], "colexicograph": [12, 13, 16, 52, 57, 64, 381, 492], "fortran": [12, 13, 16, 52, 57, 64, 381, 492], "constrain": [12, 13, 16, 18, 19, 27, 110, 288, 311, 347, 444, 480, 481, 482, 489, 490, 492], "explicitli": [12, 13, 15, 16, 27, 125, 350, 490, 492], "implicitli": [12, 13, 15, 16, 19, 27, 33, 490, 491, 492], "aspect_ratio": [12, 13, 15, 16, 37, 39, 41, 50, 52, 64, 492], "million": [12, 13, 15, 16], "per": [12, 13, 15, 16, 17, 19, 20, 22, 26, 28, 37, 39, 43, 44, 50, 492], "t": [12, 13, 14, 15, 16, 20, 21, 27, 33, 59, 60, 62, 63, 66, 72, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 192, 193, 194, 195, 196, 197, 199, 204, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 256, 257, 258, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 385, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 440, 441, 444, 446, 468, 475, 476, 479, 480, 481, 482, 489, 490, 491], "result": [12, 13, 14, 15, 16, 18, 19, 20, 27, 32, 33, 35, 107, 108, 109, 110, 117, 118, 119, 124, 125, 127, 128, 131, 149, 151, 165, 168, 183, 184, 197, 199, 207, 208, 222, 230, 231, 233, 238, 239, 242, 243, 277, 279, 280, 284, 298, 299, 312, 316, 331, 332, 347, 348, 355, 356, 358, 360, 361, 362, 363, 373, 374, 378, 381, 388, 395, 396, 399, 400, 401, 407, 408, 427, 436, 479, 480, 489, 490, 491, 492], "101": [12, 15, 16, 366, 480, 489], "chunk_shap": [12, 15, 16, 52, 64, 480], "chunk_aspect_ratio": [12, 13, 15, 16, 52, 64, 480], "128": [12, 15, 27, 30], "chunk_el": [12, 15, 52, 64, 480], "2000000": [12, 13, 15, 16], "79": [12, 13, 15], "159": [12, 13, 15], "paramet": [12, 13, 15, 22, 23, 24, 28, 32, 39, 50, 52, 64, 67, 75, 76, 78, 79, 86, 87, 88, 89, 98, 103, 109, 110, 112, 113, 114, 115, 116, 119, 120, 124, 127, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 158, 159, 160, 161, 164, 169, 170, 183, 184, 193, 194, 195, 196, 202, 222, 230, 231, 233, 237, 238, 239, 240, 242, 243, 247, 249, 284, 287, 288, 298, 299, 307, 308, 309, 310, 311, 316, 319, 331, 332, 343, 344, 345, 346, 347, 356, 359, 360, 362, 363, 373, 374, 378, 381, 383, 384, 388, 389, 391, 392, 393, 394, 396, 399, 401, 437, 444, 457, 458, 459, 479, 480, 481, 482, 489, 492, 493], "repres": [12, 13, 15, 16, 19, 25, 27, 32, 82, 128, 162, 255, 277, 381, 399, 410, 490, 492, 493], "possibl": [12, 13, 16, 19, 20, 350, 489], "leav": [12, 16, 112, 113, 114, 158, 159, 193, 194, 307, 308, 343, 344, 391, 392, 489], "one": [12, 14, 15, 16, 17, 19, 20, 22, 26, 27, 107, 108, 110, 131, 136, 151, 165, 169, 184, 288, 299, 311, 332, 347, 350, 359, 374, 444, 479, 480, 481, 482, 489, 490, 492], "assign": [12, 13, 14, 19, 360, 361, 362, 363, 378, 396, 489, 490, 491], "dimensionless": [12, 410, 492], "varlength": 12, "neuroglanc": [13, 18, 24, 26, 480, 491, 492], "precomput": [13, 18, 24, 26, 492], "multiscal": 13, "scale": [13, 22, 28, 294], "scale_index": [13, 480, 491], "first": [13, 19, 20, 27, 107, 108, 117, 197, 312, 348, 395, 396, 480, 490, 492], "left": [13, 16, 19, 131, 165, 480, 489], "multiscale_metadata": [13, 480, 491], "independ": [13, 19, 32, 281, 480, 492], "info": 13, "bear": 13, "pick": 13, "data_typ": [13, 16], "num_channel": [13, 480, 491], "scale_metadata": [13, 26, 480, 491], "chunk_siz": [13, 480, 491], "place": [13, 17, 28, 107], "serv": [13, 27, 131, 165, 294, 489, 492], "rel": [13, 23, 27, 116, 237, 238, 490, 492], "xre": 13, "_": 13, "yre": 13, "zre": 13, "voxel": [13, 16, 492], "xyz": 13, "voxel_offset": [13, 480, 491], "nanomet": 13, "compressed_segment": [13, 480, 491], "jpeg_qual": 13, "ijg": 13, "group": [13, 26, 30, 32, 33, 400], "recommend": [13, 16, 20, 26, 30, 33, 360, 361, 362, 363, 378, 396, 410, 490, 492], "largest": 13, "compressed_segmentation_block_s": [13, 480, 491], "neuroglancer_uint64_shard": [13, 24, 30, 218, 235], "shardingspec": [13, 26, 30], "4nm": [13, 294, 416, 492], "40nm": 13, "4_4_40": 13, "40000": 13, "50000": 13, "10000": 13, "neuroglancer_multiscale_volum": 13, "8_8_8": 13, "20": [13, 19, 33, 97, 107, 110, 113, 114, 115, 286, 301, 312, 318, 322, 334, 348, 355, 358, 365, 377, 389, 395, 490], "30": [13, 107, 110, 322, 365, 369, 389, 490], "1020": 13, "2030": 13, "3040": 13, "neuroglancer_uint64_sharded_v1": [13, 26, 480, 491], "data_encod": [13, 26, 480, 491], "hash": [13, 26, 480, 491], "minishard_bit": [13, 26, 480, 491], "minishard_index_encod": [13, 26, 480, 491], "preshift_bit": [13, 26, 480, 491], "shard_bit": [13, 26, 480, 491], "15": [13, 20, 33, 88, 115, 480, 490, 491, 493], "34432": [13, 480, 491], "39552": [13, 480, 491], "51508": 13, "2048": 13, "shard_data_encod": 13, "34452": 13, "39582": 13, "51548": 13, "littl": [13, 15, 16, 30, 493], "well": [13, 14, 15, 20, 107, 438, 480], "granular": [13, 16, 492], "unchunk": 13, "up": [13, 20, 22, 492], "along": [13, 14, 20, 28, 32, 288, 294, 311, 347, 368, 444, 480, 481, 482, 489, 492], "satisfi": [13, 14, 20, 381, 490], "due": [13, 21, 26, 30, 33, 242], "512": [13, 16], "80": [13, 118, 316, 317, 318, 319, 334, 348, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 369, 370, 377, 378, 381, 388, 395, 396, 399, 491], "codecspec": [13, 32, 67, 68, 69, 281, 288, 292, 311, 313, 324, 347, 349, 367, 480], "read_chunk_el": [13, 16, 52, 63, 64], "write_chunk_el": [13, 16, 52, 64], "1000000000": [13, 16, 26, 30], "1113": 13, "1264": 13, "632": 13, "read_chunk_shap": [13, 16, 33, 52, 62, 64, 489], "write_chunk_shap": [13, 16, 33, 52, 64, 66], "three": [13, 19, 131, 165, 492], "final": [13, 52, 64], "1nm": [13, 492], "updat": [13, 27, 36, 37, 50, 64, 212, 214, 222, 281, 283, 291, 292, 293, 294, 295, 297, 303, 311, 313, 315, 321, 322, 325, 335, 347, 349, 383, 384, 388, 480], "rewrit": 13, "ineffici": 13, "unless": [13, 22, 26, 27, 410, 490, 492], "care": [13, 110, 480], "taken": [13, 27, 62, 66, 85, 492], "temporari": [13, 28], "therefor": [13, 17, 242, 381, 384, 480, 490], "advis": 13, "kept": [13, 20], "avoid": [13, 15, 20, 119, 131, 165, 480, 490], "excess": 13, "overlai": [14, 32, 444, 481, 482], "sequenc": [14, 16, 32, 39, 50, 52, 64, 106, 107, 109, 112, 113, 114, 115, 131, 134, 136, 137, 149, 158, 159, 160, 162, 164, 165, 169, 170, 183, 193, 194, 195, 281, 288, 298, 307, 308, 309, 311, 313, 331, 343, 344, 345, 347, 349, 373, 383, 391, 392, 393, 444, 445, 446, 480, 481, 482, 489, 490], "last": [14, 19, 33, 107, 122, 133, 134, 230, 231, 233, 242, 279, 287, 490], "said": 14, "By": [14, 15, 19, 20, 21, 199, 240, 388, 444, 480, 481, 482, 489], "choos": [14, 492], "appropri": [14, 22, 28, 489], "concaten": [14, 17, 27, 32, 444], "construct": [14, 27, 36, 37, 39, 40, 52, 53, 67, 68, 70, 77, 78, 79, 81, 82, 86, 87, 88, 89, 129, 136, 137, 138, 162, 169, 170, 171, 200, 202, 207, 208, 212, 215, 224, 226, 248, 249, 255, 256, 257, 258, 281, 288, 289, 313, 320, 350, 351, 410, 412, 413, 414, 415, 416, 445, 446, 449, 450, 451, 452], "concat": [14, 32, 444, 481, 482], "demand": [14, 444, 481, 482], "describ": [14, 15, 19, 24, 27, 32, 36, 37], "input_inclusive_min": [14, 19, 107, 112, 113, 114, 118, 162, 165, 169, 171, 174, 175, 176, 177, 178, 179, 180, 192, 316, 317, 318, 319, 322, 334, 341, 347, 348, 349, 356, 357, 358, 359, 364, 365, 377, 388, 395, 441, 444, 480, 481, 482, 490, 491], "output": [14, 20, 32, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 135, 162, 164, 165, 166, 167, 168, 169, 170, 171, 186, 188, 189, 192, 197, 255, 256, 257, 258, 265, 267, 268, 269, 287, 288, 311, 318, 319, 334, 341, 342, 347, 348, 358, 359, 363, 377, 395, 444, 445, 475, 480, 481, 482, 489, 490, 491], "input_dimens": [14, 19, 135, 168, 169, 170, 171, 192, 255, 258, 261, 318, 341, 358, 395, 444, 481, 482, 490, 491], "input_exclusive_max": [14, 19, 107, 118, 162, 165, 169, 171, 174, 175, 176, 192, 316, 317, 318, 319, 322, 334, 341, 347, 348, 349, 356, 357, 358, 359, 364, 365, 377, 388, 395, 441, 444, 480, 481, 482, 490, 491], "fix": [14, 16, 110, 399, 483, 488], "becom": [14, 120, 124, 127, 237, 238, 242, 381, 384, 399, 408, 480], "affect": [14, 20, 106, 113, 114, 115, 132, 135, 291, 335, 383, 399, 445, 489, 490, 492], "hull": [14, 82, 98, 129, 142], "effect": [14, 19, 107, 131, 165, 222, 243, 313, 323, 324, 326, 327, 329, 338, 347, 388, 402, 405, 490], "finit": [14, 19, 82, 89, 90, 97, 105, 147, 288, 311, 347, 444, 480, 481, 482, 489, 492], "merg": [14, 39, 50, 288, 311, 347, 444, 480, 481, 482, 489, 492], "agreement": 14, "unassign": 14, "v2": [15, 16, 19], "numpi": [15, 19, 20, 32, 106, 107, 111, 112, 117, 129, 147, 162, 167, 186, 197, 281, 286, 287, 301, 312, 313, 318, 319, 334, 348, 349, 355, 358, 362, 377, 378, 395, 396, 438, 439, 442, 443, 444, 445, 449, 451, 454, 460, 461, 462, 469, 470, 471, 472, 473, 474, 482, 483, 484, 485, 486, 487, 488, 491], "model": 15, "field": [15, 27, 98, 103, 479, 492], "pack": 15, "togeth": [15, 32, 33], "fulli": [15, 18, 19, 162, 222, 243, 347, 388, 399, 480], "zarrai": [15, 480], "zarr_format": [15, 16, 349, 358, 359, 365, 377, 388, 395, 480], "extens": [15, 16, 20, 107, 438], "bfloat16": [15, 16, 32, 438, 493], "float": [15, 16, 32, 37, 39, 41, 42, 50, 52, 64, 118, 124, 127, 224, 226, 228, 238, 242, 410, 412, 414, 415, 417, 418, 420, 422, 424, 427, 434, 436, 438, 460, 461, 462, 463, 464, 465, 466, 467, 489, 492, 493], "point": [15, 16, 32, 399, 400, 410, 438, 460, 461, 462, 463, 464, 465, 466, 467, 492, 493], "float8_e4m3fn": [15, 32, 464, 493], "float8_e4m3fnuz": [15, 32, 465, 493], "float8_e4m3b11fnuz": [15, 32, 463, 493], "float8_e5m2": [15, 32, 466, 493], "float8_e5m2fnuz": [15, 32, 467, 493], "ml_dtype": [15, 463, 464, 465, 466, 467], "pad": [15, 27], "int4": [15, 16, 32, 471, 493], "fill_valu": [15, 16, 281, 283, 288, 297, 311, 313, 329, 347, 349, 350, 353, 358, 359, 365, 371, 377, 385, 388, 395, 480, 492], "f": [15, 16, 118, 349, 381, 399, 480, 489], "disabl": [15, 17], "filter": [15, 292, 349, 358, 359, 365, 367, 377, 385, 388, 395, 480, 492], "dimension_separ": [15, 349, 358, 359, 365, 377, 388, 395, 480], "nesteddirectorystor": 15, "metadata_kei": 15, "rare": [15, 490], "problem": [15, 22, 23], "caus": [15, 16, 490], "dot": 15, "awar": [15, 490], "break": 15, "key_encod": 15, "deprec": [15, 490], "i2": 15, "bz2": 15, "131072": [15, 16], "22": [15, 16, 33], "improv": [15, 16, 32, 33, 399, 400], "densiti": [15, 16], "reduc": [15, 16, 20, 33, 359, 383], "u2": [15, 327, 338], "f4": [15, 329, 480], "aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye": 15, "10": [15, 19, 20, 21, 27, 33, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 95, 96, 97, 101, 102, 107, 113, 114, 115, 118, 131, 138, 147, 165, 192, 285, 286, 301, 312, 317, 318, 334, 348, 349, 355, 357, 358, 360, 361, 362, 377, 378, 381, 389, 395, 396, 399, 444, 480, 490], "11": [15, 20, 33, 87, 95, 107, 132, 171, 257, 258, 444, 490, 493], "12": [15, 19, 20, 33, 107, 113, 114, 132, 381, 444, 490], "13": [15, 33, 114, 132, 192, 258], "14": [15, 20, 33, 115, 135], "b1": 15, "u1": 15, "i1": 15, "i4": [15, 480], "u8": 15, "i8": 15, "float16": [15, 16, 32, 460, 493], "f2": 15, "f8": 15, "complex64": [15, 16, 32, 443, 493], "c8": 15, "complex128": [15, 16, 32, 442, 493], "c16": 15, "standard": [15, 16, 20], "On": [15, 17, 20, 22, 131, 165], "platform": [15, 20], "offici": 15, "librari": [15, 18, 147, 162, 490], "capabl": [15, 27, 490], "been": [15, 19, 35, 118, 122, 123, 288, 311, 330, 347, 350, 369, 399, 400, 402, 403, 405, 408, 409, 444, 480, 481, 482, 489], "regist": [15, 118, 120, 126], "tensorflow": [15, 438], "jax": [15, 32, 438, 463, 464, 465, 466, 467, 471], "datetim": 15, "timedelta": 15, "subarrai": 15, "persist": [15, 24, 25, 349, 383, 400], "extent": [15, 19, 156, 230, 233, 237, 238, 247, 492], "inner": [15, 16, 57, 58, 82, 83], "latter": [15, 27], "broadcast": [15, 107, 117, 197, 284, 288, 311, 312, 316, 347, 348, 356, 360, 362, 363, 371, 378, 395, 396, 399, 480, 490, 492], "optim": [15, 16, 20], "written": [15, 20, 27, 32, 288, 311, 347, 349, 350, 371, 399, 480, 489, 491], "v3": [16, 19, 24, 30], "chunk_grid": 16, "regular": [16, 23, 36, 37, 218, 235, 399, 400, 490, 492], "chunk_key_encod": 16, "node_typ": 16, "node": [16, 479], "400": 16, "chunkkeyencod": 16, "codecchain": [16, 30], "user": [16, 21, 28], "certain": [16, 19, 24], "interpret": [16, 23, 27, 147, 207, 210, 410, 490, 492, 493], "unitless": 16, "quantiti": [16, 32, 288, 294, 311, 347, 368, 410, 414, 444, 480, 481, 482, 489, 492], "omit": [16, 480, 490], "2nm": 16, "3nm": [16, 294, 411, 421], "50nm": 16, "50": [16, 110, 322, 365, 369, 489, 490], "dimension_nam": 16, "singlecodec": 16, "chain": [16, 30, 107, 490], "its": [16, 19, 20, 21, 27, 32, 70, 73, 74, 78, 110, 129, 138, 162, 171, 238, 242, 281, 289, 410, 413, 471, 490, 492, 493], "actual": [16, 20, 27, 147, 199, 230, 233, 237, 238, 247, 288, 311, 347, 350, 358, 399, 480, 490, 492], "plain": [16, 106], "crc32c": [16, 27, 30], "append": [16, 23, 199, 212, 213, 229, 230, 231, 233, 242, 247], "crc": [16, 27], "32c": [16, 27], "detect": 16, "sharding_index": [16, 30], "hierarch": [16, 492], "transpos": [16, 106, 108, 116, 129, 130, 161, 162, 163, 196, 281, 282, 310, 313, 314, 346, 349, 354, 394, 445], "permut": [16, 19, 36, 52, 57, 58, 64, 161, 196, 310, 346, 394, 492], "th": [16, 107, 131, 165, 490], "liter": [16, 490], "n": [16, 19, 30, 32, 107, 129, 490], "revers": [16, 116, 129, 130, 161, 162, 163, 196, 281, 282, 310, 313, 314, 346, 349, 354, 394], "row": [16, 52, 57, 64, 381, 492], "major": [16, 52, 57, 64, 381, 492], "column": [16, 27, 52, 57, 64, 381, 492], "index_codec": [16, 30], "index_loc": [16, 30], "end": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 116, 147, 444, 482, 490], "locat": [16, 17, 22, 23, 27, 28, 30, 385, 479, 480], "ratio": [16, 37, 39, 41, 42, 50, 52, 64, 492], "noshuffl": 16, "bitshuffl": 16, "types": 16, "255": 16, "detail": [16, 17, 18, 20, 22, 23, 28, 463, 464, 465, 466, 467], "charact": [16, 20, 23, 493], "sign": [16, 19, 32, 469, 470, 471, 472, 473, 493], "complement": [16, 32, 469, 470, 471, 472, 473, 493], "unsign": [16, 32, 484, 485, 486, 487, 493], "16": [16, 20, 27, 32, 33, 114, 469, 484, 493], "ieee": [16, 32, 460, 461, 462, 493], "754": [16, 32, 460, 461, 462, 493], "binary16": [16, 32, 460, 493], "half": [16, 32, 82, 86, 199, 200, 202, 460, 493], "precis": [16, 27, 32, 52, 64, 399, 410, 460, 461, 462, 474, 483, 488, 492, 493], "binary32": [16, 32, 461, 493], "binary64": [16, 32, 462, 493], "doubl": [16, 32, 410, 462, 492, 493], "real": [16, 118, 288, 311, 347, 444, 480, 481, 482, 489, 493], "imaginari": [16, 493], "distinguish": 16, "uniqu": [16, 19, 27, 77, 489], "simpli": [16, 27, 108, 119, 156, 427, 489, 490], "vector": [16, 19, 106, 107, 117, 129, 136, 162, 164, 169, 197, 281, 312, 313, 348, 349, 395, 396, 445], "depend": [16, 17, 22, 23, 27, 28, 33, 107, 238, 350, 381, 383, 399, 490, 493], "alter": 16, "impli": [16, 313, 323, 324, 326, 327, 329, 338, 401], "insert": [16, 490], "scalar": [16, 107, 112, 113, 114, 115, 158, 159, 160, 193, 194, 195, 307, 308, 309, 343, 344, 345, 360, 362, 363, 378, 391, 392, 393, 396, 399, 438, 449, 450, 490], "runtim": [17, 20, 22, 23], "behavior": [17, 19, 20, 25, 28, 33, 107, 131, 165, 238, 242, 381, 399, 490], "libcurl": 17, "make": [17, 20, 21, 492], "secur": [17, 22, 23, 28], "connect": [17, 18, 22, 23, 29], "server": [17, 22, 23, 24, 27, 28, 29, 32, 476], "m": [17, 19, 20, 492], "window": [17, 20, 21], "mac": 17, "o": [17, 18, 21, 33, 230, 231, 233, 323, 324, 326, 327, 329, 338, 381, 490, 491], "facil": 17, "system": [17, 20, 22, 23, 24, 399], "linux": [17, 20], "bsd": 17, "built": [17, 20, 438, 490], "bundl": [17, 20], "expect": [17, 20, 128, 294, 490], "find": [17, 20], "author": [17, 22, 23], "pem": 17, "ssl": [17, 20, 22, 23], "cert": [17, 22, 23], "crt": [17, 22, 23], "distribut": [17, 20, 27, 32, 476, 480], "altern": [17, 399, 490], "directori": [17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "tensorstore_ca_bundl": 17, "tensorstore_ca_path": 17, "local": [17, 18, 21, 22, 24], "mani": [17, 19, 22, 23, 33, 107, 162, 480, 490], "document": [17, 24, 492, 493], "prepar": 17, "openssl": 17, "c_rehash": 17, "command": [17, 20], "tensoprstor": 17, "dynam": 17, "link": [17, 20, 277, 278, 279, 280], "tensorstore_system_lib": [17, 20], "se_curl": [17, 20], "how": [17, 20, 22, 23, 27, 492], "like": [17, 18, 20, 22, 23, 33, 120, 132, 135, 294, 459, 480, 490], "all_proxi": 17, "http_proxi": 17, "https_proxi": 17, "no_proxi": 17, "comma": [17, 20], "hostnam": 17, "ip": 17, "address": [17, 27, 29], "tensorstore_verbose_log": 17, "log": [17, 27], "subsystem": 17, "int": [17, 32, 36, 37, 39, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 59, 60, 64, 82, 84, 86, 87, 88, 91, 95, 96, 101, 102, 105, 106, 112, 113, 114, 115, 118, 126, 129, 133, 136, 139, 141, 145, 146, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 169, 176, 177, 178, 180, 181, 182, 185, 187, 189, 190, 191, 193, 194, 195, 239, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 269, 270, 276, 281, 288, 300, 302, 303, 304, 305, 307, 308, 309, 311, 313, 333, 336, 337, 339, 340, 343, 344, 345, 347, 349, 376, 379, 380, 383, 386, 387, 391, 392, 393, 427, 435, 444, 445, 447, 448, 459, 468, 476, 478, 480, 481, 482, 489, 490], "verbos": [17, 490], "subsytem": 17, "those": [17, 27, 118, 359], "flag": [17, 20, 98, 103, 142, 148], "curl": [17, 20, 22, 23], "gcs_grpc": 17, "gcs_http": 17, "gfile": 17, "http_kvstore": 17, "kvstore_cach": 17, "ocdbt": [17, 24, 218, 235, 238, 476, 477, 478, 479], "s3": [17, 24], "test": [17, 25, 28, 118], "zip": [17, 24], "zip_detail": 17, "tensorstore_curl_verbos": 17, "inform": [17, 20, 22, 23, 350, 389, 480], "print": [17, 86, 87, 88, 89, 93, 118, 292, 294, 295, 296, 297, 303, 328, 333, 337, 342, 489], "stderr": 17, "sslkeylogfil": 17, "decrypt": 17, "traffic": 17, "save": 17, "wireshark": 17, "google_application_credenti": [17, 22], "section": [17, 18, 20, 22, 23], "tensorstore_gcs_http_url": [17, 22], "googleapi": 17, "com": [17, 20, 22, 23, 28, 32, 459, 463, 464, 465, 466, 467], "oauth2": 17, "trust": 17, "tensorstore_gcs_request_concurr": [17, 22], "gcs_request_concurr": [17, 22, 480, 491], "tensorstore_http2_max_concurrent_stream": 17, "stream": 17, "activ": [17, 20], "unset": 17, "larg": [18, 27, 29, 239, 355], "multi": [18, 20, 25, 32, 349], "googl": [18, 20, 22, 24, 399, 491], "cloud": [18, 22, 24, 399, 480, 491], "network": [18, 21, 22, 23, 28], "filesystem": [18, 21, 24, 480, 491], "writeback": [18, 399, 425, 426], "transact": [18, 25, 26, 30, 32, 230, 233, 237, 238, 239, 240, 242, 244, 246, 247, 360, 361, 362, 363, 378, 381, 390, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 427, 444, 480, 481, 482], "strong": 18, "isol": [18, 400, 401], "durabl": [18, 230, 233, 237, 238, 247, 399, 427], "acid": 18, "safe": [18, 21, 22, 27, 399, 480], "machin": [18, 21, 22, 480], "optimist": 18, "high": [18, 480], "advantag": [18, 399], "satur": 18, "bandwidth": 18, "asynchron": [18, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 277, 349, 360, 361, 362, 363, 378, 381, 396, 399, 400, 405, 427, 491], "throughput": 18, "latenc": [18, 399, 480], "advanc": [18, 32, 106, 490], "tutori": 18, "guid": [18, 28], "setup": [18, 20], "instruct": 18, "build": 18, "instal": [18, 22], "abstract": [18, 32, 128, 162, 198], "interfac": [18, 26, 199, 277, 360, 361, 362, 363, 378, 396, 427], "done": [18, 20, 22, 112, 118, 119, 123, 277, 279, 280, 288, 311, 347, 427, 433, 480, 490], "analog": 18, "url": [18, 20, 21, 22, 23, 24, 25, 28, 199, 212, 215, 223, 240, 245, 459], "databas": [18, 27, 32, 476, 479], "introduc": 18, "through": [18, 19, 22, 24, 162], "express": [18, 32, 82, 92, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 132, 147, 162, 166, 281, 285, 313, 317, 349, 357, 361, 445, 475], "chunk": [18, 26, 32, 37, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 54, 57, 61, 62, 64, 65, 66, 281, 288, 291, 311, 313, 323, 338, 347, 349, 350, 358, 359, 365, 366, 377, 383, 388, 395, 399, 480, 489], "layout": [18, 32, 36, 37, 51, 52, 59, 60, 62, 63, 64, 66, 281, 288, 291, 311, 313, 323, 347, 349, 366, 381, 480, 489], "fill": [18, 116, 281, 288, 297, 311, 313, 329, 347, 349, 350, 371, 383, 480, 491, 492], "queri": [18, 23, 27, 118, 122, 123, 389], "close": [19, 82, 87], "62": [19, 32, 82, 468], "pm": 19, "infti": 19, "reserv": 19, "less": [19, 288, 294, 311, 347, 368, 410, 414, 444, 480, 481, 482, 489, 490, 492], "impos": [19, 410, 492], "inclus": [19, 82, 86, 87, 88, 101, 102, 129, 136, 145, 146, 153, 162, 169, 177, 178, 180, 187, 200, 202, 206, 281, 302, 313, 336, 349, 379, 383, 490], "unbound": [19, 32, 62, 66, 82, 89, 95, 96, 101, 102, 105, 136, 169, 222, 347, 468], "below": [19, 20, 27, 96, 102, 105, 490], "abov": [19, 20, 95, 101, 105, 107, 490], "mark": [19, 82, 106, 110, 121, 151, 184, 277, 279, 280, 299, 332, 374, 384, 445, 490], "chang": [19, 20, 106, 109, 110, 129, 149, 151, 162, 183, 184, 238, 242, 281, 298, 299, 313, 331, 332, 335, 347, 349, 373, 374, 383, 400, 445, 490], "unknown": [19, 288, 294, 311, 347, 367, 368, 371, 444, 480, 481, 482, 489, 492], "infinit": [19, 82, 147, 288, 311, 347, 444, 480, 481, 482, 489, 492], "similar": [19, 111, 112, 117, 186, 197, 301, 312, 334, 348, 377, 378, 395, 396, 490], "out": [19, 20, 27, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 165, 166, 167, 168, 169, 170, 171, 186, 197, 342, 383, 475, 490], "serial": 19, "shape": [19, 30, 33, 36, 37, 39, 41, 42, 47, 48, 50, 52, 62, 64, 66, 110, 118, 129, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 162, 169, 182, 190, 281, 284, 285, 286, 287, 288, 295, 301, 304, 311, 312, 313, 322, 327, 338, 339, 347, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 381, 383, 385, 386, 388, 389, 395, 396, 399, 444, 480, 481, 482, 489, 490, 492], "receiv": [19, 22, 23, 124, 127], "At": [19, 136, 169, 490], "inclusive_max": [19, 82, 85, 87, 95, 96, 100, 101, 102, 105, 129, 136, 145, 177, 468], "none": [19, 22, 23, 32, 33, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 62, 63, 64, 66, 70, 77, 78, 79, 82, 86, 87, 88, 89, 106, 107, 110, 112, 113, 114, 115, 118, 119, 120, 124, 125, 126, 127, 129, 136, 147, 151, 158, 159, 160, 161, 162, 169, 170, 184, 193, 194, 195, 196, 199, 212, 218, 222, 230, 233, 235, 237, 238, 239, 240, 242, 243, 244, 246, 247, 255, 259, 260, 261, 264, 277, 279, 280, 281, 284, 285, 286, 287, 288, 292, 294, 295, 296, 297, 299, 300, 301, 303, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 322, 324, 326, 327, 328, 329, 330, 332, 333, 334, 337, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 359, 360, 361, 362, 363, 365, 367, 368, 371, 372, 374, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 405, 407, 408, 427, 428, 431, 432, 434, 435, 436, 437, 444, 445, 475, 479, 480, 481, 482, 489, 490], "leq": 19, "exclus": [19, 82, 86, 95, 96, 129, 136, 141, 162, 169, 176, 200, 202, 205, 383, 490], "7": [19, 20, 33, 62, 66, 105, 107, 113, 131, 132, 135, 138, 145, 147, 165, 167, 169, 170, 171, 177, 186, 192, 197, 257, 258, 301, 312, 334, 348, 377, 383, 395, 417, 444, 481, 482, 490, 493], "occur": [19, 118, 230, 231, 233, 490], "onc": [19, 27, 32, 134, 247, 383, 399, 400, 409, 427, 489], "j": [19, 27, 131, 165], "form": [19, 76, 359, 479, 490], "mathtt": 19, "cdot": 19, "_dimens": 19, "_arrai": 19, "composit": 19, "complet": [19, 33, 118, 120, 121, 123, 124, 127, 230, 231, 233, 237, 238, 242, 247, 277, 279, 280, 360, 361, 362, 363, 378, 381, 383, 396, 399, 427, 490, 491], "suffic": 19, "low": [19, 26], "cost": [19, 389], "larger": [19, 27, 491], "tabl": [19, 25], "relationship": 19, "sourc": [19, 349, 360, 361, 362, 363, 378, 396, 399, 427, 437], "target": [19, 20, 27, 37, 39, 43, 44, 50, 52, 64, 106, 116, 199, 238, 445, 490, 492], "input_rank": [19, 107, 110, 135, 162, 164, 165, 166, 168, 169, 174, 175, 181, 185, 256, 258, 287, 319, 359, 475, 490], "input_inclusive_max": [19, 112, 162, 169, 177], "input_shap": [19, 108, 113, 114, 115, 116, 162, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 189, 192, 257, 287, 316, 317, 318, 319, 334, 348, 359, 363, 490], "input_label": [19, 107, 108, 111, 112, 113, 114, 115, 116, 117, 162, 165, 169, 171, 173, 179, 181, 185, 189, 192, 316, 317, 356, 357, 480, 490, 491], "outputindexmap": [19, 32, 135, 162, 168, 169, 170, 188, 189, 192, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 287, 319, 359, 363], "logic": [19, 27, 129, 399, 493], "index_arrai": [19, 171, 192, 255, 257, 259, 287, 318, 319, 334, 348, 358, 359, 363, 377, 395], "conjunct": [19, 28, 347, 388, 480, 492], "index_array_bound": [19, 171], "indexinterv": 19, "inf": [19, 32, 62, 66, 82, 86, 87, 89, 93, 95, 96, 101, 102, 107, 108, 109, 110, 111, 115, 117, 130, 135, 136, 138, 160, 166, 167, 168, 169, 171, 186, 195, 197, 208, 226, 238, 242, 309, 345, 393, 468, 475, 489, 490], "immedi": [19, 27, 119, 128, 242, 381, 384, 480, 490], "correctli": 19, "trip": 19, "manual": [19, 20], "involv": [19, 490], "rule": [19, 20], "m1": 19, "_rank": 19, "m2": 19, "unmatch": 19, "right": [19, 22, 23, 131, 165], "v1": [19, 480, 491], "_shape": 19, "neq": 19, "drop": [19, 399], "step": [19, 20, 107, 399, 490], "v4": 19, "_origin": 19, "succe": [19, 28], "a1": 19, "single_input_dimens": [19, 269, 275], "a2": 19, "rightarrow": 19, "mathrm": [19, 26], "mismatch": 19, "w": [19, 375], "addition": [19, 20, 82, 222, 240, 294, 347, 400, 489, 490], "simplest": 20, "packag": 20, "bind": [20, 222, 240, 243, 347, 388, 489], "later": [20, 21, 480, 481], "pip": 20, "environ": [20, 22, 23, 28], "latest": [20, 27, 28], "publish": [20, 32, 459], "vv": 20, "show": 20, "progress": [20, 29], "python3": 20, "py": [20, 129, 137, 167, 350, 352, 383], "pre": 20, "binari": [20, 27], "your": 20, "tool": 20, "code": [20, 459], "git": 20, "repositori": 20, "prerequisit": 20, "venv": 20, "bin": 20, "upgrad": 20, "setuptool": 20, "clone": 20, "http": [20, 22, 24, 28, 32, 458, 459, 463, 464, 465, 466, 467], "github": [20, 32, 459, 463, 464, 465, 466, 467], "cd": 20, "invok": [20, 118, 120], "modul": [20, 489], "rebuild": 20, "faster": [20, 21], "increment": [20, 288, 294, 311, 347, 368, 444, 480, 481, 482, 489, 492], "variabl": [20, 22, 23, 28, 32, 483, 488], "tensorstore_bazelisk": 20, "bazelisk": 20, "script": 20, "pass": [20, 32, 422, 425], "bazelisk_hom": 20, "download": 20, "tensorstore_bazel_compilation_mod": 20, "compil": 20, "opt": 20, "tensorstore_bazel_startup_opt": 20, "startup": 20, "space": [20, 32, 36, 60, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 154, 162, 165, 166, 167, 168, 169, 170, 171, 181, 185, 186, 189, 197, 288, 311, 342, 347, 444, 475, 480, 481, 482, 489, 490, 492], "posix": [20, 21], "escap": 20, "shlex": 20, "split": [20, 27], "output_user_root": 20, "bazel_cach": 20, "tensorstore_bazel_build_opt": 20, "debug": 20, "see": [20, 22, 28, 32, 458, 459], "bool_flag": 20, "archflag": 20, "maco": 20, "architectur": 20, "cross": 20, "arch": 20, "x86_64": 20, "arm64": 20, "universal2": 20, "macosx_deployment_target": 20, "earlier": [20, 27], "tensorstore_prebuilt_dir": 20, "invoc": [20, 490], "build_ext": 20, "tmp": [20, 21, 33, 213, 215, 216, 217, 219, 220, 221, 229, 232, 234, 236, 400, 491], "prebuilt": 20, "wheel": 20, "project": [20, 22], "ad": [20, 22, 28, 108, 109, 111, 112, 113, 114, 115, 116, 117, 197, 312, 348, 395, 396], "so": [20, 491], "static": [20, 199, 240, 277, 278], "part": [20, 33, 36, 52, 281, 288, 294, 445], "overal": 20, "add": [20, 36, 37, 50, 64, 107, 281, 311, 313, 347, 490], "workspac": 20, "load": 20, "bazel_tool": 20, "build_def": 20, "repo": 20, "bzl": 20, "http_archiv": 20, "util": 20, "mayb": 20, "strip_prefix": 20, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": 20, "archiv": [20, 24, 31], "tar": 20, "gz": 20, "sha256": 20, "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi": 20, "extern": [20, 222, 242, 243, 347, 388, 400], "tensorstore_depend": 20, "17": [20, 33, 113, 138, 171], "bazelrc": 20, "toolchain": 20, "msvc": 20, "max_path": 20, "260": 20, "fatal": 20, "c1083": 20, "cannot": [20, 106, 107, 118, 287, 400], "Such": 20, "shorter": 20, "output_bas": 20, "fetchcont": 20, "fetchcontent_declar": 20, "url_hash": 20, "call": [20, 21, 22, 28, 33, 35, 77, 107, 110, 118, 119, 122, 125, 134, 230, 231, 233, 242, 279, 287, 291, 358, 381, 399, 402, 405, 489, 490], "fetchcontent_makeavail": 20, "target_link_librari": 20, "my_target": 20, "privat": 20, "all_driv": 20, "ninja": 20, "config": [20, 22, 27, 28, 479], "makefil": 20, "visual": 20, "studio": 20, "xcode": 20, "pull": 20, "basi": 20, "tensorstore_use_system_": 20, "line": [20, 23, 27], "dtensorstore_use_system_": 20, "ON": 20, "vendor": 20, "symbol": 20, "collis": 20, "crash": [20, 21, 399], "incorrect": 20, "exampl": [20, 33, 215, 240, 350, 400, 489, 491], "dtensorstore_use_system_curl": 20, "dtensorstore_use_system_zlib": 20, "ensur": [20, 21, 27, 118, 125, 213, 229, 294, 399, 400, 480, 490], "safest": 20, "often": [20, 22, 399], "help": [20, 26, 30], "sccach": 20, "dcmake_": 20, "cxx": 20, "_compiler_launch": 20, "ccach": 20, "doc": [20, 22, 28, 32, 458], "build_doc": 20, "gcc": 20, "clang": 20, "microsoft": 20, "2019": 20, "29": [20, 33], "30037": 20, "cl": 20, "mingw64": 20, "lld": 20, "ld": 20, "appl": 20, "bug": 20, "relat": [20, 22, 23, 349, 350, 483, 488], "align": [20, 131, 165, 284, 316, 356, 360, 396, 399, 492], "debian": 20, "sudo": 20, "apt": 20, "get": 20, "essenti": [20, 28], "nasm": 20, "dev": 20, "don": [20, 248, 249, 251], "org": 20, "tl": 20, "certif": 20, "applic": [20, 22, 335, 367, 371, 383, 489, 492], "readm": 20, "rtf": 20, "fetch": 20, "effort": 20, "date": [20, 23], "python_bin_path": 20, "blake3": 20, "64747d48ffe9": 20, "com_google_boringssl": 20, "boringssl": 20, "098695591f3a": 20, "com_google_brotli": 20, "brotli": 20, "6d03dfbedda1": 20, "org_sourceware_bzip2": 20, "com_github_cares_car": 20, "6654436a307a": 20, "org_blosc_cblosc": 20, "21": [20, 33, 490], "net_zlib": 20, "chromium": 20, "3787595bbbd3a374613713164db935e8331f5825": 20, "org_aomedia_avif": 20, "libavif": 20, "d1c26facaf5a": 20, "libjpeg": 20, "turbo": 20, "libpng": 20, "libwebp": 20, "org_lz4": 20, "05": 20, "org_nghttp2": 20, "nghttp2": 20, "55": 20, "com_github_nlohmann_json": 20, "nlohmann": 20, "com_github_pybind_pybind11": 20, "pybind11": 20, "com_google_snappi": 20, "984b191f0fef": 20, "libtiff": 20, "tinyxml2": 20, "org_tukaani_xz": 20, "3alpha": 20, "net_zstd": 20, "export": 20, "24": [20, 33], "libaom": 20, "dav1d": 20, "Not": [20, 31], "gnu": 20, "patch": 20, "root": [21, 27, 479], "content": [21, 32, 480, 489], "lock": 21, "protocol": [21, 24, 29, 490], "reader": [21, 400], "file_io_concurr": [21, 80, 81, 221, 229, 232, 234, 236], "file_io_sync": [21, 221, 229, 232, 234, 236], "scheme": [21, 22, 23, 24, 25, 27, 28], "wide": 21, "abc": [21, 213, 217, 219, 221, 222, 229, 234, 236, 240, 243, 330, 365, 372], "fewer": [21, 490], "fsync": [21, 399], "event": [21, 118, 119, 120, 489], "commit": [21, 27, 32, 230, 233, 237, 238, 242, 247, 381, 399, 400, 401, 405, 406, 407, 408, 409, 427, 431, 489], "won": [21, 110, 222, 240, 347], "rs1": 21, "relianc": 21, "semant": [21, 106, 107, 111, 117, 162, 167, 186, 197, 281, 286, 301, 312, 313, 318, 334, 348, 349, 358, 362, 377, 378, 395, 396, 445, 490], "condit": [22, 27, 131, 165, 242, 247, 425, 426], "account": [22, 28, 62, 66, 85, 492], "permiss": 22, "requestor": 22, "pai": [22, 28], "bill": 22, "gcs_user_project": [22, 480, 491], "prefix": [22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 199, 212, 220, 241, 457, 458, 459, 490], "intend": [22, 24, 25, 26, 27, 28, 29, 30, 31, 110], "style": [22, 24, 25, 26, 27, 28, 29, 30, 31, 106, 107, 111, 112, 117, 147, 162, 167, 186, 197, 281, 286, 287, 301, 312, 313, 318, 319, 334, 348, 349, 358, 362, 377, 378, 395, 396, 445], "gcs_request_retri": [22, 480, 491], "request": [22, 23, 27, 28, 29, 33, 118, 121, 238, 242, 383, 389, 422, 423, 480, 489], "project_id": 22, "own": 22, "retri": [22, 23, 28, 29], "handl": [22, 23, 28, 32, 70, 71, 76, 118, 269, 271, 277, 349, 427, 489], "transient": [22, 23, 25, 28], "exponenti": [22, 28], "delai": [22, 23, 28, 33], "consecut": [22, 28, 30, 107, 490], "max_retri": [22, 23, 28], "initial_delai": [22, 23, 28], "backoff": [22, 23, 28], "max_delai": [22, 23, 28], "experimental_gcs_rate_limit": 22, "rate": [22, 28, 492], "read_rat": [22, 28], "issu": [22, 28, 399], "ramp": 22, "write_r": [22, 28], "doubling_tim": [22, 28], "2x": [22, 28], "gsutil": 22, "public": [22, 28, 491], "allus": 22, "servic": [22, 28, 29], "sdk": 22, "run": [22, 119, 124, 127, 489], "gcloud": 22, "auth": 22, "login": 22, "application_default_credenti": 22, "cloudsdk_config": 22, "develop": 22, "engin": 22, "gce": 22, "retriev": [22, 27, 28, 70, 76, 491], "work": [22, 23, 29], "77": [22, 23], "verifi": [22, 23], "cafil": [22, 23], "capath": [22, 23], "fake": 22, "localhost": [22, 28, 459], "4443": 22, "base_url": 23, "fragment": 23, "percent": 23, "8000": 23, "begin": [23, 107, 118, 125, 490], "treat": [23, 119, 242, 490, 492], "absolut": 23, "restrict": [23, 239, 490], "treatment": 23, "slightli": 23, "web": 23, "browser": 23, "20data": 23, "send": [23, 28], "insensit": 23, "sensit": 23, "7230": 23, "obsolet": 23, "fold": 23, "crlf": 23, "sp": 23, "htab": 23, "bearer": 23, "xxxxx": 23, "http_request_concurr": 23, "http_request_retri": 23, "8080": 23, "20base": 23, "stale": 23, "respons": [23, 459], "control": [23, 399], "etag": 23, "varieti": 24, "tsgrpc_kvstore": 24, "zarr_sharding_index": 24, "shard": [24, 26, 30, 480, 491, 492], "amazon": [24, 28], "grpc": [24, 27, 29], "sharded_index": [24, 30], "concis": 24, "exclud": [24, 27, 490], "pair": [25, 27, 277, 278, 410, 415], "manipul": 25, "memory_key_value_stor": [25, 222, 235, 243, 321, 349, 356, 357, 358, 359, 365, 372, 377, 388, 395, 480], "purpos": [25, 27, 132, 489, 490], "custom": 25, "minishard": 26, "contribut": 26, "murmurhash3_x86_128": 26, "_bit": 26, "good": 26, "choic": 26, "1gb": 26, "strongli": [26, 30], "signific": [26, 30, 399], "amplif": [26, 30, 492], "repeatedli": [26, 30], "cooper": [27, 32, 476], "coordin": [27, 32, 107, 476, 490], "ocdbt_coordin": 27, "subject": [27, 238, 349, 384, 427], "uuid": [27, 479], "hex": 27, "digit": 27, "randomli": 27, "gener": [27, 107, 199, 207, 209, 224, 225, 226, 227, 228, 242, 247, 359, 381, 384, 410, 422, 423, 425, 426, 480, 489, 490, 492], "manifest_kind": 27, "max_inline_value_byt": [27, 479], "1048576": 27, "inlin": [27, 490], "max_decoded_node_byt": [27, 479], "4294967295": 27, "83951616": 27, "uncompress": 27, "exce": 27, "version_tree_arity_log2": [27, 479], "logarithm": 27, "ariti": 27, "structur": 27, "target_data_file_s": 27, "2147483648": 27, "flush": 27, "flle": 27, "typic": [27, 29, 31], "zstandard": 27, "lease_dur": 27, "durat": 27, "leas": 27, "collect": [27, 32, 457, 458], "increas": [27, 383, 389], "sequenti": 27, "nanosecond": 27, "timestamp": [27, 199, 207, 209, 224, 225, 489], "monoton": 27, "manag": [27, 32, 33, 70, 400], "batch": [27, 32, 33, 34, 35, 242, 381, 384, 480], "creation": 27, "xxxxxxxxxxxxxxxx": 27, "portion": [27, 416, 492], "filenam": [27, 28], "referenc": [27, 110, 151, 184, 299, 332, 374], "lowercas": 27, "hexadecim": 27, "d": [27, 32, 82, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 131, 132, 149, 151, 158, 159, 160, 161, 163, 164, 165, 166, 183, 184, 193, 194, 195, 196, 282, 285, 298, 299, 307, 308, 309, 310, 314, 317, 331, 332, 341, 342, 343, 344, 345, 346, 354, 357, 361, 373, 374, 391, 392, 393, 394, 445, 446, 468, 479, 490, 491], "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": 27, "too": 27, "random": 27, "exsit": 27, "client": 27, "travers": 27, "desir": [27, 294], "sever": [27, 118], "despit": 27, "variou": 27, "replac": [27, 222, 347, 490], "retain": [27, 33, 39, 50, 116, 243, 388, 490, 492], "varint": 27, "uint32b": [27, 30], "uint64l": 27, "uint32l": 27, "bodi": 27, "compression_format": 27, "magic_valu": 27, "0x0cdb3a2a": 27, "crc32c_checksum": 27, "checksum": 27, "ubyt": 27, "max_decoded_note_byt": 27, "compression_method": 27, "int32l": 27, "compres": 27, "data_file_t": 27, "inline_vers": 27, "version_nod": 27, "indirectli": [27, 162, 492], "base_path": 27, "relative_path": 27, "full_path": 27, "transitive_path": 27, "transit": 27, "child": [27, 80, 81], "65535": 27, "count": [27, 147, 444, 482], "num_fil": 27, "path_prefix_length": 27, "path_suffix_length": 27, "base_path_length": 27, "path_suffix": 27, "simplifi": 27, "That": 27, "past": 27, "previou": [27, 490], "suffix": [27, 199, 212, 213, 229], "0x0cdb1234": 27, "manfiest": 27, "num_vers": 27, "generation_numb": [27, 479], "root_height": [27, 479], "data_file_id": 27, "data_file_offset": 27, "data_file_length": 27, "num_kei": [27, 479], "num_tree_byt": [27, 479], "num_indirect_value_byt": [27, 479], "commit_tim": [27, 479], "former": 27, "strictli": [27, 131, 165], "leap": 27, "reachabl": 27, "num_children": 27, "num_gener": 27, "entry_height": 27, "subtre": 27, "millisecond": 27, "earliest": 27, "contrast": [27, 490], "rather": [27, 52, 57, 58, 64, 107, 444, 481, 482, 490, 492], "decreas": 27, "representaiton": 27, "0x0cdb20de": 27, "num_entri": 27, "children": 27, "relative_kei": 27, "prepend": 27, "key_prefix_length": 27, "key_suffix_length": 27, "key_suffix": 27, "value_length": 27, "value_kind": 27, "k": [27, 116, 131, 165], "num_indirect_entri": 27, "direct_value_length": 27, "num_direct_entri": 27, "deriv": [27, 410, 419], "direct_entri": 27, "direct": [27, 107], "direct_valu": 27, "indirect_entri": 27, "indirect": 27, "indirect_valu": [27, 479], "subtree_common_prefix_length": 27, "aw": 28, "requester_pai": 28, "suppli": [28, 491], "owner": 28, "aws_region": 28, "signatur": 28, "endpoint": 28, "1234": [28, 459], "host_head": 28, "host": 28, "localstack": 28, "mybucket": 28, "af": 28, "south": 28, "aws_credenti": 28, "s3_request_concurr": 28, "s3_request_retri": 28, "experimental_s3_rate_limit": 28, "tensorstore_s3_request_concurr": 28, "profil": 28, "aws_profil": 28, "aws_shared_credentials_fil": 28, "metadata_endpoint": 28, "aws_ec2_metadata_service_endpoint": 28, "aws_access_key_id": 28, "aws_secret_access_kei": 28, "aws_session_token": 28, "would": [28, 109, 110, 147, 149, 151, 183, 184, 298, 299, 331, 332, 373, 374, 383], "cli": 28, "found": [28, 231], "ec2": 28, "imd": 28, "associ": [28, 33, 82, 119, 207, 209, 211, 231, 242, 247, 313, 330, 347, 349, 372, 390, 405, 480], "iam": 28, "userguid": 28, "envvar": 28, "html": 28, "secret": 28, "password": 28, "session": 28, "token": 28, "st": 28, "169": 28, "254": 28, "uri": 28, "respond": 28, "sdkref": 28, "featur": [28, 31], "tensorstore_grpc": 29, "kvstoreservic": 29, "timeout": [29, 118, 124, 127, 427, 434, 436], "There": [29, 350, 474, 483, 488, 491, 493], "known": [29, 444, 481, 482], "around": 29, "codec": [30, 36, 37, 52, 54, 64, 281, 288, 292, 311, 313, 324, 338, 347, 349, 367, 385, 480], "long": 30, "cell": 30, "grid_cell_indic": 30, "grid_shap": 30, "entri": [30, 224, 227, 479], "class": [32, 33, 37, 67, 71, 73, 82, 106, 118, 128, 129, 137, 162, 198, 200, 207, 212, 224, 248, 255, 265, 269, 277, 281, 313, 349, 350, 400, 410, 422, 425, 427, 445, 449, 476, 490], "stage": [32, 400], "modif": [32, 400], "abort": [32, 242, 400, 402, 403, 405, 407, 408, 409], "potenti": [32, 33, 490], "futur": [32, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 199, 237, 238, 239, 240, 242, 247, 277, 278, 279, 280, 349, 381, 383, 384, 389, 399, 400, 405, 408, 427, 428, 431, 432, 435, 459, 479, 480, 491], "4611686018427387903": [32, 101, 102, 468], "dim": [32, 62, 66, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 129, 131, 133, 137, 165, 169, 192, 255, 257, 260, 468], "outputindexmethod": [32, 255, 262, 265, 269, 270, 271, 272, 273, 274, 275, 276], "dimexpress": [32, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 129, 130, 132, 149, 151, 158, 159, 160, 161, 162, 163, 166, 183, 184, 193, 194, 195, 196, 281, 282, 285, 298, 299, 307, 308, 309, 310, 313, 314, 317, 331, 332, 343, 344, 345, 346, 349, 354, 357, 361, 373, 374, 391, 392, 393, 394, 445, 490], "newaxi": [32, 107, 108, 475, 490], "alia": [32, 36, 37, 45, 59, 129, 146, 152, 162, 174, 175, 176, 177, 178, 179, 180, 182, 185, 281, 300, 313, 333, 349, 376, 475], "singleton": [32, 108, 475], "openmod": [32, 248, 249, 250, 251, 252, 253, 254, 313, 335, 347, 349, 388, 480], "unit": [32, 281, 288, 294, 311, 313, 326, 347, 349, 368, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 444, 480, 481, 482, 489], "arraylik": [32, 107, 255, 257, 259, 281, 288, 297, 311, 313, 329, 347, 349, 355, 360, 361, 362, 363, 371, 378, 381, 396, 399, 437, 480, 489], "virtualchunkedreadparamet": [32, 422, 423, 424, 489], "callback": [32, 120, 126, 422, 425, 427, 428, 435, 489], "virtual_chunk": [32, 422, 425, 489], "virtualchunkedwriteparamet": [32, 425, 426, 489], "bool_": [32, 439], "ustr": [32, 488, 493], "unicod": [32, 488, 493], "str": [32, 70, 76, 82, 86, 87, 88, 89, 92, 93, 104, 106, 109, 129, 133, 136, 140, 149, 150, 162, 169, 172, 179, 183, 199, 200, 202, 205, 206, 208, 212, 213, 216, 217, 220, 223, 224, 226, 229, 230, 231, 232, 233, 234, 241, 242, 245, 247, 269, 271, 274, 281, 288, 290, 298, 311, 313, 321, 331, 347, 349, 373, 375, 410, 412, 415, 416, 419, 444, 445, 449, 452, 453, 455, 457, 458, 459, 479, 480, 481, 482, 488, 489, 490], "consum": [32, 107, 118, 239, 427, 490], "promis": [32, 118, 122, 277, 278, 279, 280], "produc": [32, 118, 124, 127, 277, 490], "writefutur": [32, 118, 349, 399, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "futurelik": [32, 118, 119, 128, 489], "distributedcoordinatorserv": [32, 476, 477, 478], "tree": [32, 476, 479], "dump": [32, 479], "experimental_collect_matching_metr": [32, 457], "metric": [32, 457, 458, 459], "experimental_collect_prometheus_format_metr": [32, 458], "prometheu": [32, 458, 459], "exposit": [32, 458], "io": [32, 458], "instrument": [32, 458], "exposition_format": [32, 458], "experimental_push_metrics_to_prometheu": [32, 459], "pushgatewai": [32, 459], "defer": [33, 490], "until": [33, 118, 124, 127, 230, 231, 233, 237, 238, 242, 247, 381, 384, 400, 409, 427, 480, 489, 490], "releas": 33, "ultim": 33, "usag": [33, 400], "np": [33, 147, 355, 383, 489, 490, 491], "arang": [33, 383, 490], "reshap": [33, 383], "read_future1": 33, "read_future2": 33, "await": [33, 110, 118, 119, 199, 229, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 349, 355, 356, 357, 358, 359, 365, 366, 367, 368, 369, 370, 371, 372, 377, 381, 383, 384, 385, 388, 389, 395, 399, 400, 441, 444, 480, 481, 482, 489, 490, 491], "18": [33, 114], "19": 33, "23": [33, 114], "25": [33, 115, 322, 365], "26": 33, "27": 33, "28": [33, 114], "submit": [33, 35, 242, 381, 384, 480], "deadlock": [33, 119, 242, 381, 384, 480, 489], "reli": [33, 493], "destructor": 33, "del": [33, 230], "indefinit": [33, 489], "cyclic": 33, "self": [35, 38, 49, 50, 51, 62, 63, 64, 66, 69, 72, 75, 76, 83, 84, 85, 90, 91, 92, 93, 95, 96, 98, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 139, 140, 142, 148, 149, 151, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 213, 214, 216, 217, 219, 221, 222, 225, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 242, 243, 246, 247, 266, 267, 269, 271, 279, 280, 282, 283, 284, 285, 286, 287, 290, 293, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 325, 331, 332, 334, 336, 339, 340, 341, 343, 344, 345, 346, 347, 348, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 371, 373, 374, 377, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 402, 405, 407, 411, 417, 418, 421, 428, 429, 430, 433, 434, 435, 436, 450, 455], "rais": [35, 62, 66, 90, 109, 110, 112, 113, 114, 115, 118, 124, 127, 134, 147, 149, 151, 160, 161, 183, 184, 195, 196, 230, 231, 233, 239, 242, 284, 285, 286, 287, 288, 298, 299, 301, 309, 310, 311, 312, 316, 317, 318, 319, 331, 332, 334, 345, 346, 347, 348, 373, 374, 389, 393, 394, 400, 407, 480, 489], "valueerror": [35, 62, 66, 90, 134, 147, 161, 196, 239, 284, 285, 286, 287, 301, 310, 312, 316, 317, 318, 319, 334, 346, 348, 394], "to_json": [36, 37, 49, 63, 67, 69, 71, 72, 73, 75, 80, 129, 157, 162, 192, 212, 221, 281, 306, 313, 341, 410, 421, 449, 455], "ndim": [36, 37, 45, 59, 129, 152, 162, 185, 281, 300, 313, 333, 349, 376], "tupl": [36, 37, 41, 42, 47, 48, 55, 56, 57, 58, 129, 141, 143, 144, 145, 146, 147, 150, 153, 155, 162, 164, 174, 175, 176, 177, 178, 179, 180, 182, 187, 190, 277, 278, 281, 288, 294, 302, 304, 311, 313, 326, 336, 339, 347, 349, 368, 379, 386, 410, 415, 444, 480, 481, 482, 489, 490], "innermost": [36, 52, 57, 64, 492], "inner_order_soft_constraint": [36, 52, 57, 58, 64, 492], "grid_origin_soft_constraint": [36, 52, 56, 62, 64, 66, 492], "write_chunk_templ": [36, 62, 66], "read_chunk_templ": [36, 62, 66], "__eq__": [36, 37, 38, 51, 82, 85, 200, 201, 212, 214, 224, 225, 281, 283, 313, 315, 410, 411], "compar": [36, 37, 38, 51, 82, 85, 200, 201, 212, 214, 224, 225, 281, 283, 313, 315, 410, 411], "include_default": [37, 49, 67, 69, 71, 72, 73, 75, 212, 221, 281, 306, 313, 341], "shape_soft_constraint": [37, 39, 48, 50, 52, 63, 64, 492], "aspect": [37, 39, 41, 42, 50, 52, 64, 492], "aspect_ratio_soft_constraint": [37, 39, 42, 50, 52, 64, 492], "elements_soft_constraint": [37, 39, 44, 50, 52, 64, 492], "grid_soft_constraint": [39, 50], "chunk_shape_soft_constraint": [52, 64], "write_chunk_shape_soft_constraint": [52, 63, 64], "read_chunk_shape_soft_constraint": [52, 64], "codec_chunk_shap": [52, 64], "codec_chunk_shape_soft_constraint": [52, 64], "chunk_aspect_ratio_soft_constraint": [52, 64], "write_chunk_aspect_ratio": [52, 64], "write_chunk_aspect_ratio_soft_constraint": [52, 64], "read_chunk_aspect_ratio": [52, 64], "read_chunk_aspect_ratio_soft_constraint": [52, 64], "codec_chunk_aspect_ratio": [52, 64], "codec_chunk_aspect_ratio_soft_constraint": [52, 64], "chunk_elements_soft_constraint": [52, 64], "write_chunk_elements_soft_constraint": [52, 64], "read_chunk_elements_soft_constraint": [52, 64], "codec_chunk_el": [52, 64], "codec_chunk_elements_soft_constraint": [52, 64], "prefer": [52, 64, 492], "clear": [52, 64], "105": [62, 66, 341, 342, 489], "206": [62, 66], "307": [62, 66], "207": [62, 66], "incompat": [62, 66, 288, 311, 347, 480, 489], "1000000": 63, "framework": 70, "pars": [70, 73, 79, 199, 212, 416, 492], "inherit": [70, 78, 79, 80], "__getitem__": [70, 76, 106, 107, 111, 117, 129, 131, 132, 133, 134, 135, 162, 165, 166, 167, 168, 186, 197, 199, 230, 231, 233, 242, 265, 266, 281, 284, 285, 286, 287, 301, 312, 313, 316, 317, 318, 319, 334, 348, 349, 356, 357, 358, 359, 361, 377, 395, 445], "whether": [75, 86, 87, 88, 89, 107, 118, 122, 123, 129, 136, 143, 144, 162, 169, 174, 175, 350, 352, 353, 388, 389, 400, 403, 404, 406, 409, 457, 490], "primarili": [76, 82, 132, 135], "introspect": 76, "constructor": 77, "5000000": [78, 80, 81], "assert": [80, 119, 214, 283, 315, 468], "implicit_low": [82, 85, 86, 87, 88, 89, 99], "intersect": [82, 103, 108, 129, 148, 350], "exclusive_min": [82, 96, 102], "implicit_upp": [82, 85, 86, 87, 88, 89, 92, 100], "__len__": [82, 91, 129, 139, 265, 267], "__contains__": [82, 83, 84], "__iter__": [82, 90], "iter": [82, 90], "__str__": [82, 93, 269, 271], "__repr__": [82, 92, 129, 140, 162, 172, 199, 212, 216, 232, 281, 290, 313, 321], "4611686018427387904": [95, 96], "propag": [98, 103, 142, 148], "9223372036854775807": 105, "particularli": [105, 489], "meaning": 105, "numpyindexingspec": [106, 107, 111, 117, 162, 167, 186, 197, 281, 286, 301, 312, 313, 318, 334, 348, 349, 358, 362, 377, 378, 395, 396, 445], "oindex": [106, 111, 162, 167, 186, 281, 286, 287, 301, 312, 313, 318, 319, 334, 348, 349, 358, 359, 362, 363, 377, 378, 395, 396, 445], "outer": [106, 111, 162, 186, 281, 301, 313, 334, 349, 377, 378, 445], "vindex": [106, 107, 117, 162, 167, 197, 281, 286, 287, 301, 312, 313, 318, 319, 334, 348, 349, 358, 359, 362, 363, 377, 378, 395, 396, 445], "translate_to": [106, 115, 129, 160, 162, 195, 281, 309, 313, 345, 349, 393, 445, 481], "translate_bi": [106, 107, 109, 114, 129, 132, 159, 162, 164, 166, 194, 281, 308, 313, 341, 342, 344, 349, 392, 445], "shift": [106, 113, 114, 445, 490], "translate_backward_bi": [106, 113, 129, 158, 162, 193, 281, 307, 313, 343, 349, 391, 445], "amount": [106, 112, 239, 445, 490], "dimselectionlik": [106, 116, 129, 134, 161, 162, 196, 281, 310, 313, 346, 349, 394, 445, 446], "diagon": [106, 108, 445], "extract": [106, 108, 445, 490], "mark_bounds_implicit": [106, 110, 129, 151, 162, 184, 281, 299, 313, 332, 349, 374, 445], "slice": [106, 107, 110, 112, 129, 131, 147, 151, 162, 165, 184, 281, 299, 313, 332, 349, 374, 445, 490, 491], "term": [107, 111, 117, 186, 197, 301, 312, 334, 348, 362, 377, 378, 395, 396, 490], "stop": [107, 110, 151, 184, 299, 332, 374, 490], "inert": [107, 490], "necessarili": [107, 350, 490, 492], "traceback": [107, 122, 134, 230, 231, 233, 242, 279, 287, 490], "indexerror": [107, 109, 110, 112, 113, 114, 115, 149, 151, 160, 183, 184, 195, 287, 298, 299, 309, 331, 332, 345, 373, 374, 393, 490], "sole": 107, "nonzero": [107, 490], "remov": 108, "newli": 108, "duplic": [109, 149, 183, 298, 331, 373, 490], "adjust": 110, "resolv": [110, 119, 128, 239, 242, 247, 349, 383, 384, 490], "expand": [110, 383], "Be": 110, "bypass": 110, "s_subregion": [110, 490], "orthogon": [111, 186, 301, 334, 377, 378, 490], "expr": [112, 129, 132, 162, 166, 281, 285, 287, 313, 317, 319, 349, 357, 359, 361, 363, 490], "irrespect": [112, 238, 242], "unchang": [112, 113, 114, 115, 158, 159, 160, 193, 194, 195, 222, 240, 307, 308, 309, 343, 344, 345, 347, 391, 392, 393, 490], "neg": [116, 133, 147, 444, 482, 490, 492], "reorder": 116, "uncondition": [117, 197, 312, 348, 395, 396, 490], "pattern": 118, "asyncio": [118, 119, 120, 121, 399, 489, 491], "keyword": 118, "synchron": [118, 230, 231, 233, 349, 355, 360, 361, 362, 363, 378, 381, 396, 399, 400, 407, 489, 491], "add_done_callback": [118, 120, 125, 427, 428], "lambda": 118, "forc": [118, 125], "wait": [118, 399, 489, 491], "design": 118, "interoper": [118, 349, 355, 438, 491], "loop": [118, 119, 120, 489], "ensure_futur": [118, 399], "70": [118, 316, 317, 318, 319, 334, 348, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 370, 377, 378, 381, 388, 395, 396, 399], "callabl": [118, 120, 126, 427, 428, 435, 489], "upon": [118, 120, 490], "remove_done_callback": [118, 126, 427, 435], "unregist": [118, 126], "cancel": [118, 121, 122, 123, 399, 427, 429, 430], "abstracteventloop": [119, 489], "async": [119, 400, 489, 491], "def": [119, 489], "get_valu": 119, "coroutin": [119, 128, 489], "get_running_loop": [119, 489], "readi": [120, 124, 127, 237, 238, 242, 381, 384, 399, 408, 480], "wrap": 120, "call_soon_threadsaf": 120, "unsuccessfulli": [121, 127, 277, 279], "cancellederror": [121, 122], "deadlin": [124, 127, 434, 436], "successfulli": [124, 277, 280, 350, 399, 408, 427], "timeouterror": [124, 127], "did": [124, 127], "keyboardinterrupt": [124, 127], "main": [124, 127], "keyboard": [124, 127], "interrupt": [124, 127], "success": [127, 231, 405, 407], "cartesian": 129, "product": [129, 156], "immut": [129, 410, 489, 490], "implicit_lower_bound": [129, 136, 143, 162, 169, 174, 192, 490], "implicit_upper_bound": [129, 136, 144, 162, 169, 175, 192], "index_exp": [129, 147, 489], "box": [129, 142], "discrep": [131, 165], "behav": 132, "consequ": [132, 135, 222, 243, 347, 388], "though": [132, 135, 489], "output_rank": [135, 162, 164, 189, 287, 319, 359, 360, 363], "len": 139, "arr": 147, "60": [156, 316, 317, 356, 357, 360, 361, 365, 395, 492], "input_origin": [162, 178, 180], "__call__": [162, 164, 449, 450], "obj": [167, 350, 352, 490], "index_rang": [169, 192, 255, 257, 260], "timestampedstoragegener": [199, 207, 208, 209, 224, 225, 226, 227, 228, 240, 242, 247, 489], "readresult": [199, 207, 208, 209, 210, 211, 240, 242, 247], "state": [199, 207, 208, 210, 240, 242, 247], "stamp": [199, 207, 208, 209, 240, 242, 247], "miss": [199, 207, 208, 210, 242, 247, 492], "txn": [199, 246, 362, 399, 400], "with_transact": [199, 240, 246, 349, 362, 397, 399, 400, 444, 480, 481, 482, 489], "commit_sync": [199, 362, 400, 405, 407], "keyrang": [199, 200, 201, 202, 203, 204, 205, 206, 237, 238, 239], "retain_context": [199, 243, 388], "delete_rang": [199, 237], "experimental_copy_range_to": [199, 238], "__setitem__": [199, 230, 231, 233, 242, 247, 349, 360, 361, 362, 363, 378, 396], "__delitem__": [199, 230, 231, 233, 242, 247], "__add__": [199, 212, 213, 229], "__truediv__": [199, 212, 213, 217, 229, 234, 410, 418], "usual": [202, 206, 490], "r": [204, 375], "unbind_context": [212, 222, 243, 347, 388], "dataabc": [213, 229], "comparison": [214, 283, 288, 311, 315, 347, 480], "context_a": [214, 315], "context_b": [214, 315], "strip_context": [222, 347, 388], "captur": [222, 243, 347, 388], "graph": [222, 243, 347, 388], "interdepend": [222, 243, 347, 388], "isomorph": [222, 243, 347, 388], "keyerror": [230, 231, 233, 242], "record": [230, 233, 237, 238, 247], "continu": [230, 231, 233], "aa": 237, "cc": 237, "source_rang": 238, "source_staleness_bound": 238, "abl": 238, "violat": 238, "fraction": [238, 242], "made": [238, 242, 400, 489], "ag": [238, 242], "strip_prefix_length": 239, "strip": [239, 416, 492], "if_not_equ": [242, 422, 423, 489], "staleness_bound": [242, 422, 424], "reflect": [242, 358, 369, 381, 399, 427], "commit_async": [246, 399, 400, 402, 405, 407], "if_equ": [247, 425, 426], "arg0": [265, 266, 449, 450], "signal": 277, "set_result": [277, 280], "set_except": [277, 279], "unconstrain": [294, 480], "open_mod": [313, 335, 347, 349, 388, 480], "cast_spec": 322, "downsampled_spec": 322, "um": 326, "accessor": 335, "mutat": 335, "20000": [349, 491], "1048": 349, "u4": [349, 358, 359, 365, 377, 388, 395], "storagestatist": [349, 350, 351, 352, 353, 389], "statist": [349, 350, 352, 353, 389, 479], "__array__": [349, 355, 381], "ndarrai": [349, 355, 489, 490, 491], "polici": [349, 384], "storage_statist": [349, 350, 352, 353, 389], "readabl": [349, 382], "writabl": [349, 398], "yet": [349, 371, 381], "astyp": [349, 364], "These": 350, "about": 350, "were": [350, 490], "not_stor": [350, 351, 353, 389], "similarli": 350, "fully_stor": [350, 351, 352, 389], "query_fully_stor": [352, 389], "query_not_stor": [353, 389], "partit": [355, 492], "mere": [358, 399, 427], "subscript": [360, 361, 362, 363, 378, 396, 490, 491], "fine": [360, 361, 362, 363, 378, 396], "grain": [360, 361, 362, 363, 378, 396], "shorthand": [362, 363], "5nm": [368, 417, 419, 420], "8nm": 368, "rw": 375, "uncommit": [381, 399, 400], "resize_metadata_onli": 383, "resize_tied_bound": 383, "expand_onli": 383, "shrink_onli": 383, "param": 383, "shrunk": 383, "outsid": [383, 400, 490], "ti": 383, "caution": 383, "fix_resizable_bound": 384, "possibli": 385, "minimal_spec": 388, "significantli": 389, "notimplementederror": 389, "track": 399, "surviv": 399, "acknowledg": 399, "jointli": 399, "accomplish": 399, "keep": 399, "mind": 399, "arrang": 399, "perfectli": [399, 490], "disjoint": 399, "coalesc": [399, 400], "now": [399, 480], "visibl": 400, "roll": 400, "observ": [400, 489], "43": 400, "44": 400, "45": 400, "exit": 400, "repeatable_read": [400, 401], "commit_start": [400, 406], "repeat": 401, "quaniti": [410, 492], "base_unit": [410, 412, 414, 416, 419, 420, 492], "udunits2": [410, 492], "deviat": [410, 492], "__mul__": [410, 417], "divisor": [410, 418], "divid": [410, 418, 490], "trail": [416, 492], "whitespac": [416, 492], "3e5": 416, "300000": 416, "7nm": 418, "u": [419, 420], "newer": [422, 423], "fulfil": [422, 424], "hold": 427, "longer": 427, "forward": 427, "axi": [444, 482], "unshar": [444, 480, 481, 482, 489], "numpy_dtyp": [449, 454], "metric_prefix": [457, 458, 459], "include_zero_metr": 457, "dict": 457, "job": 459, "statu": 459, "ml": [463, 464, 465, 466, 467], "object_": [474, 483, 488], "port": [476, 478], "btreenod": 479, "versionnod": 479, "manifest": 479, "ce": 479, "8388608": 479, "version_tree_nod": 479, "35": 479, "78": 479, "btree": 479, "inline_valu": 479, "minim": [480, 490], "janelia": 480, "flyem": 480, "hemibrain": 480, "segment": [480, 491, 492], "0x8": [480, 491], "41408": [480, 491], "1414": 480, "707": 480, "characterist": 480, "confirm": 480, "simultan": 480, "redund": [480, 492], "store2": 480, "unverifi": 480, "know": 480, "parallel": 480, "nened": 481, "termin": [483, 488], "read_funct": 489, "write_funct": 489, "do_read": 489, "read_param": 489, "102": [489, 491], "103": 489, "104": 489, "106": 489, "read_context": 489, "do_writ": 489, "write_context": 489, "recomput": 489, "100mb": [489, 491], "unmodifi": 489, "broader": 489, "wish": 489, "cloudpickl": 489, "preserv": 489, "unpickl": 489, "free": 489, "basic": 490, "integr": 490, "array_lik": 490, "out_of_rang": 490, "__index__": 490, "pep": 490, "357": 490, "toward": 490, "silent": 490, "unequ": 490, "domin": 490, "interleav": 490, "legaci": 490, "wherebi": 490, "confus": 490, "mix": 490, "perfect": 490, "few": 490, "shortcut": 490, "truncat": 490, "predecessor": 490, "dask": 490, "propos": 490, "enhanc": 490, "power": 490, "sel": 490, "op1": 490, "opn": 490, "denot": 490, "lightweight": 490, "argument": 490, "easili": 490, "flatten": 490, "sum": 490, "plu": 490, "likewis": 490, "intermedi": 490, "dexpr": 490, "iexpr": 490, "arg": 490, "onto": 490, "suffici": 490, "squar": 490, "import": 491, "write_futur": 491, "82": 491, "99": 491, "83": 491, "demonstr": 491, "flyeem": 491, "dataset_futur": 491, "100_000_000": 491, "0x": 491, "dataset_3d": 491, "100x100x1": 491, "middl": 491, "15000": 491, "15100": 491, "read_futur": 491, "1194100437": 491, "1408314276": 491, "1161117856": 491, "1132030694": 491, "5813054053": 491, "hit": 491, "against": 492, "recurs": 492, "third": 492, "chunkss": 492, "unshard": 492, "evenli": 492, "subdivid": 492, "boundari": 492, "further": 492, "9223372036854775808": 492, "486000": 492, "90": 492, "canon": 492, "5e": 492, "9m": 492, "char": 493, "occupi": 493, "ascii": 493, "expon": 493, "mantissa": 493, "bia": 493, "nan": 493, "infin": 493, "utf": 493}, "objects": {"": [[10, 0, 1, "json-CacheRevalidationBound", "CacheRevalidationBound", ""], [492, 0, 1, "json-ChunkLayout", "ChunkLayout", ""], [492, 0, 1, "json-ChunkLayout/Grid", "ChunkLayout/Grid", "Constraints on the write/read/codec chunk grids."], [492, 0, 1, "json-Codec", "Codec", ""], [0, 0, 1, "json-Context", "Context", ""], [0, 0, 1, "json-ContextResource", "ContextResource", ""], [3, 0, 1, "json-DownsampleMethod", "DownsampleMethod", "Downsample method"], [19, 0, 1, "json-IndexDomain", "IndexDomain", ""], [19, 0, 1, "json-IndexInterval", "IndexInterval", "Specifies a closed interval of integer index values."], [19, 0, 1, "json-IndexTransform", "IndexTransform", ""], [10, 0, 1, "json-KeyValueStoreBackedChunkDriver", "KeyValueStoreBackedChunkDriver", ""], [24, 0, 1, "json-KvStore", "KvStore", "Key-value store specification."], [24, 0, 1, "json-KvStoreUrl", "KvStoreUrl", "URL representation of a key-value store."], [21, 0, 1, "json-KvStoreUrl/file", "KvStoreUrl/file", "file:// KvStore URL scheme"], [22, 0, 1, "json-KvStoreUrl/gs", "KvStoreUrl/gs", "gs:// KvStore URL scheme"], [23, 0, 1, "json-KvStoreUrl/http", "KvStoreUrl/http", "http:// and https:// KvStore URL scheme"], [25, 0, 1, "json-KvStoreUrl/memory", "KvStoreUrl/memory", "memory:// KvStore URL scheme"], [28, 0, 1, "json-KvStoreUrl/s3", "KvStoreUrl/s3", "s3:// KvStore URL scheme"], [19, 0, 1, "json-OutputIndexMap", "OutputIndexMap", "Specifies a transform from an input space to a single output index."], [492, 0, 1, "json-Schema", "Schema", ""], [493, 0, 1, "json-TensorStore", "TensorStore", "Specifies a TensorStore to open/create."], [492, 0, 1, "json-Unit", "Unit", "Specifies a physical quantity/unit."], [1, 0, 1, "json-driver/array", "driver/array", ""], [4, 0, 1, "json-driver/avif", "driver/avif", ""], [5, 0, 1, "json-driver/bmp", "driver/bmp", ""], [2, 0, 1, "json-driver/cast", "driver/cast", ""], [3, 0, 1, "json-driver/downsample", "driver/downsample", ""], [6, 0, 1, "json-driver/jpeg", "driver/jpeg", ""], [11, 0, 1, "json-driver/json", "driver/json", ""], [12, 0, 1, "json-driver/n5", "driver/n5", ""], [12, 0, 1, "json-driver/n5/Codec", "driver/n5/Codec", ""], [12, 0, 1, "json-driver/n5/Compression", "driver/n5/Compression", ""], [12, 0, 1, "json-driver/n5/Compression/blosc", "driver/n5/Compression/blosc", ""], [12, 0, 1, "json-driver/n5/Compression/bzip2", "driver/n5/Compression/bzip2", ""], [12, 0, 1, "json-driver/n5/Compression/gzip", "driver/n5/Compression/gzip", ""], [12, 0, 1, "json-driver/n5/Compression/raw", "driver/n5/Compression/raw", ""], [12, 0, 1, "json-driver/n5/Compression/xz", "driver/n5/Compression/xz", ""], [13, 0, 1, "json-driver/neuroglancer_precomputed", "driver/neuroglancer_precomputed", ""], [13, 0, 1, "json-driver/neuroglancer_precomputed/Codec", "driver/neuroglancer_precomputed/Codec", "Neuroglancer Precomputed Codec"], [7, 0, 1, "json-driver/png", "driver/png", ""], [14, 0, 1, "json-driver/stack", "driver/stack", ""], [8, 0, 1, "json-driver/tiff", "driver/tiff", ""], [9, 0, 1, "json-driver/webp", "driver/webp", ""], [15, 0, 1, "json-driver/zarr", "driver/zarr", ""], [15, 0, 1, "json-driver/zarr/Codec", "driver/zarr/Codec", ""], [15, 0, 1, "json-driver/zarr/Compressor", "driver/zarr/Compressor", "Compressor"], [15, 0, 1, "json-driver/zarr/Compressor/blosc", "driver/zarr/Compressor/blosc", ""], [15, 0, 1, "json-driver/zarr/Compressor/bz2", "driver/zarr/Compressor/bz2", ""], [15, 0, 1, "json-driver/zarr/Compressor/zlib", "driver/zarr/Compressor/zlib", ""], [15, 0, 1, "json-driver/zarr/Compressor/zstd", "driver/zarr/Compressor/zstd", ""], [16, 0, 1, "json-driver/zarr3", "driver/zarr3", ""], [16, 0, 1, "json-driver/zarr3/ChunkKeyEncoding", "driver/zarr3/ChunkKeyEncoding", "Specifies the encoding of chunk grid positions as keys in the underlying kvstore."], [16, 0, 1, "json-driver/zarr3/Codec", "driver/zarr3/Codec", ""], [16, 0, 1, "json-driver/zarr3/Codec/blosc", "driver/zarr3/Codec/blosc", "Specifies Blosc compression."], [16, 0, 1, "json-driver/zarr3/Codec/bytes", "driver/zarr3/Codec/bytes", "Fixed-size encoding for numeric types."], [16, 0, 1, "json-driver/zarr3/Codec/crc32c", "driver/zarr3/Codec/crc32c", "Appends a CRC-32C checksum to detect data corruption."], [16, 0, 1, "json-driver/zarr3/Codec/gzip", "driver/zarr3/Codec/gzip", "Specifies gzip compression."], [16, 0, 1, "json-driver/zarr3/Codec/sharding_indexed", "driver/zarr3/Codec/sharding_indexed", "Sharding codec that enables hierarchical chunking."], [16, 0, 1, "json-driver/zarr3/Codec/transpose", "driver/zarr3/Codec/transpose", "Transposes the dimensions of an array."], [16, 0, 1, "json-driver/zarr3/Codec/zstd", "driver/zarr3/Codec/zstd", "Specifies Zstd compression."], [16, 0, 1, "json-driver/zarr3/CodecChain", "driver/zarr3/CodecChain", "Specifies a chain of codecs."], [16, 0, 1, "json-driver/zarr3/DataType", "driver/zarr3/DataType", "Specifies the zarr data type."], [16, 0, 1, "json-driver/zarr3/Metadata", "driver/zarr3/Metadata", ""], [16, 0, 1, "json-driver/zarr3/SingleCodec", "driver/zarr3/SingleCodec", "Specifies a single codec."], [493, 0, 1, "json-dtype", "dtype", "Specifies a TensorStore data type."], [21, 0, 1, "json-kvstore/file", "kvstore/file", "Read/write access to the local filesystem."], [22, 0, 1, "json-kvstore/gcs", "kvstore/gcs", "Read/write access to Google Cloud Storage (GCS)."], [23, 0, 1, "json-kvstore/http", "kvstore/http", "Read-only access to arbitrary HTTP servers."], [25, 0, 1, "json-kvstore/memory", "kvstore/memory", "Read/write, non-persistent in-memory storage."], [26, 0, 1, "json-kvstore/neuroglancer_uint64_sharded", "kvstore/neuroglancer_uint64_sharded", "Read/write adapter for the Neuroglancer Precomputed sharded format."], [26, 0, 1, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec", "kvstore/neuroglancer_uint64_sharded/ShardingSpec", "Sharding metadata"], [27, 0, 1, "json-kvstore/ocdbt", "kvstore/ocdbt", "Read/write adapter for the OCDBT format."], [27, 0, 1, "json-kvstore/ocdbt/Compression/zstd", "kvstore/ocdbt/Compression/zstd", "Specifies Zstandard compression."], [28, 0, 1, "json-kvstore/s3", "kvstore/s3", "Read/write access to Amazon S3-compatible object stores."], [29, 0, 1, "json-kvstore/tsgrpc_kvstore", "kvstore/tsgrpc_kvstore", "Read/write key-value store using the tensorstore-specific gRPC protocol."], [30, 0, 1, "json-kvstore/zarr_sharding_indexed", "kvstore/zarr_sharding_indexed", "Read/write adapter for the zarr v3 sharded_indexed format."], [31, 0, 1, "json-kvstore/zip", "kvstore/zip", "Read-only adapter for the ZIP archive format."], [20, 9, 1, 1, "ARCHFLAGS", "macOS only.  Specifies the CPU architecture to target for cross-compilation. May be -arch x86_64 or -arch arm64.  Universal2 builds (specified by -arch arm64 -arch x86_64 are not supported)."], [28, 9, 1, 1, "AWS_ACCESS_KEY_ID", "Specifies an AWS access key associated with an IAM account. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [28, 9, 1, 1, "AWS_EC2_METADATA_SERVICE_ENDPOINT", "Overrides the default EC2 Instance Metadata Service (IMDS) endpoint of http://169.254.169.254. This must be a valid uri, and should respond to the AWS IMDS api endpoints. See <https://docs.aws.amazon.com/sdkref/latest/guide/feature-imds-credentials.html>"], [28, 9, 1, 1, "AWS_PROFILE", "Specifies the name of the AWS CLI profile with the credentials and options to use. This can be the name of a profile stored in a credentials or config file, or the value default to use the default profile."], [28, 9, 1, 1, "AWS_SECRET_ACCESS_KEY", "Specifies the secret key associated with the access key. This is essentially the \"password\" for the access key. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [28, 9, 1, 1, "AWS_SESSION_TOKEN", "Specifies the session token value that is required if you are using temporary security credentials that you retrieved directly from AWS STS operations. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [28, 9, 1, 1, "AWS_SHARED_CREDENTIALS_FILE", "Specifies the location of the file that the AWS CLI uses to store access keys. The default path is ~/.aws/credentials. See <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>"], [20, 9, 1, 1, "BAZELISK_HOME", "Duplicate explicit target name: \"bazelisk\"."], [17, 9, 1, 1, "GOOGLE_APPLICATION_CREDENTIALS", "Specifies the local path to a Google Cloud JSON credentials file.  Refer to the Google Cloud Storage Authentication section for details."], [20, 9, 1, 1, "MACOSX_DEPLOYMENT_TARGET", "macOS only.  Specifies the minimum required macOS version to target.  Must not be earlier than 10.14.  If not specified, defaults to the same macOS version required by the Python binary itself, or 10.14 if later."], [20, 9, 1, 1, "PYTHON_BIN_PATH", "Path to Python binary to use when running Python executables/tests.  When Bazel is invoked by the Python package build (setup.py), this is set automatically."], [17, 9, 1, 1, "SSLKEYLOGFILE", "Specifies the path to a local file where information necessary to decrypt TensorStore's TLS traffic will be saved in a format compatible with Wireshark.  Refer to the libcurl documentation for more details."], [20, 9, 1, 1, "TENSORSTORE_BAZELISK", "Path to Bazelisk script that is invoked in order to execute the build.  By default the bundled bazelisk.py is used, but this environment variable allows that to be overridden in order to pass additional options, etc."], [20, 9, 1, 1, "TENSORSTORE_BAZEL_BUILD_OPTIONS", "Additional Bazel build options or configuration settings to specify when building.  The encoding is the same as for TENSORSTORE_BAZEL_STARTUP_OPTIONS."], [20, 9, 1, 1, "TENSORSTORE_BAZEL_COMPILATION_MODE", "Bazel compilation mode to use.  Defaults to opt (optimized build)."], [20, 9, 1, 1, "TENSORSTORE_BAZEL_STARTUP_OPTIONS", "Additional Bazel startup options to specify when building.  Multiple options may be separated by spaces; options containing spaces or other special characters should be encoded according to Posix shell escaping rules as implemented by shlex.split()."], [17, 9, 1, 1, "TENSORSTORE_CA_BUNDLE", "Specifies the path to a local file containing one or more CA certificates concatenated into a single file in PEM format.  On many Linux distributions, the system certificate bundle is available at /etc/ssl/certs/ca-certificates.crt.  Refer to the libcurl documentation for more details."], [17, 9, 1, 1, "TENSORSTORE_CA_PATH", "Specifies the path of a local directory containing one or more CA certificates in PEM format.  Each file in the directory must contain a single certificate, and the directory must be prepared using the OpenSSL c_rehash command.  Refer to the libcurl documentation for more details. Note that this is not the most common format for the system CA certificate store.  In most cases, the system CA certificate store should instead be specified using TENSORSTORE_CA_BUNDLE."], [17, 9, 1, 1, "TENSORSTORE_CURL_VERBOSE", "If set to any value, verbose debugging information will be printed to stderr for all HTTP requests."], [17, 9, 1, 1, "TENSORSTORE_GCS_HTTP_URL", "Specifies to connect to an alternative server in place of https://storage.googleapis.com.  Note that the normal Google oauth2 credentials are included in requests, and therefore only trusted servers should be used."], [17, 9, 1, 1, "TENSORSTORE_GCS_REQUEST_CONCURRENCY", "Specifies the concurrency level used by the shared Context Context.gcs_request_concurrency resource. Defaults to 32."], [17, 9, 1, 1, "TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS", "Specifies the maximum number of concurrent streams per HTTP/2 connection, without limiting the total number of active connections.  When unset, a default of 4 concurrent streams are permitted."], [20, 9, 1, 1, "TENSORSTORE_PREBUILT_DIR", "If specified, building is skipped, and instead setup.py expects to find the pre-built extension module in the specified directory, from a prior invocation of build_ext:"], [28, 9, 1, 1, "TENSORSTORE_S3_REQUEST_CONCURRENCY", "Specifies the concurrency level used by the shared Context Context.s3_request_concurrency resource. Defaults to 32."], [20, 9, 1, 1, "TENSORSTORE_SYSTEM_LIBS", "To use system-provided libraries, set the TENSORSTORE_SYSTEM_LIBS environment variable to a comma-separated list of the following identifiers prior to invoking Bazel:"], [17, 9, 1, 1, "TENSORSTORE_VERBOSE_LOGGING", "Enables debug logging for tensorstore internal subsystems.  Set to comma separated list of values, where each value is one of name=int or just name. When all is, present, then verbose logging will be enabled for each subsytem, otherwise logging is set only for those subsystems present in the list."], [17, 9, 1, 1, "all_proxy", "Specifies a proxy server to use for making any HTTP or HTTPS request.  Refer to the libcurl documentation for more details."], [17, 9, 1, 1, "http_proxy", "Specifies a proxy server to use for making HTTP (not HTTPS) requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [17, 9, 1, 1, "https_proxy", "Specifies a proxy server to use for making HTTPS requests.  Takes precedence over all_proxy.  Refer to the libcurl documentation for more details."], [17, 9, 1, 1, "no_proxy", "Specifies a comma-separated list of hostnames or ip addresses for which proxying is disabled.  Refer to the libcurl documentation for more details."]], "ChunkLayout": [[492, 1, 2, "json-ChunkLayout.chunk", "chunk", "Combined constraints on write/read/codec chunks."], [492, 1, 2, "json-ChunkLayout.codec_chunk", "codec_chunk", "Constraints on the chunk grid used by the codec, if applicable."], [492, 1, 2, "json-ChunkLayout.grid_origin", "grid_origin", "Specifies hard constraints on the origin of the chunk grid."], [492, 1, 2, "json-ChunkLayout.grid_origin_soft_constraint", "grid_origin_soft_constraint", "Specifies preferred values for the origin of the chunk grid rather than hard constraints."], [492, 1, 2, "json-ChunkLayout.inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [492, 1, 2, "json-ChunkLayout.inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  If inner_order is also specified, it takes precedence."], [492, 1, 2, "json-ChunkLayout.rank", "rank", "Number of dimensions."], [492, 1, 2, "json-ChunkLayout.read_chunk", "read_chunk", "Constraints on the chunk grid over which reads may be efficiently partitioned."], [492, 1, 2, "json-ChunkLayout.write_chunk", "write_chunk", "Constraints on the chunk grid over which writes may be efficiently partitioned."]], "ChunkLayout/Grid": [[492, 1, 2, "json-ChunkLayout/Grid.aspect_ratio", "aspect_ratio", "Aspect ratio of the chunk shape."], [492, 1, 2, "json-ChunkLayout/Grid.aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraint on aspect ratio, lower precedence than aspect_ratio."], [492, 1, 2, "json-ChunkLayout/Grid.elements", "elements", "Preferred number of elements per chunk."], [492, 1, 2, "json-ChunkLayout/Grid.elements_soft_constraint", "elements_soft_constraint", "Preferred number of elements per chunk, lower precedence than elements."], [492, 1, 2, "json-ChunkLayout/Grid.shape", "shape", "Hard constraints on the chunk size for each dimension."], [492, 1, 2, "json-ChunkLayout/Grid.shape_soft_constraint", "shape_soft_constraint", "Preferred chunk sizes for each dimension."]], "Codec": [[492, 1, 2, "json-Codec.driver", "driver", "Driver identifier"]], "Context": [[0, 1, 2, "json-Context.<resource-type>", "&lt;resource-type&gt;", ""], [0, 1, 2, "json-Context.<resource-type>#<id>", "&lt;resource-type&gt;#&lt;id&gt;", ""], [28, 0, 1, "json-Context.aws_credentials", "aws_credentials", ""], [0, 0, 1, "json-Context.cache_pool", "cache_pool", ""], [29, 0, 1, "json-Context.data_copy_concurrency", "data_copy_concurrency", ""], [22, 0, 1, "json-Context.experimental_gcs_rate_limiter", "experimental_gcs_rate_limiter", ""], [28, 0, 1, "json-Context.experimental_s3_rate_limiter", "experimental_s3_rate_limiter", ""], [21, 0, 1, "json-Context.file_io_concurrency", "file_io_concurrency", ""], [21, 0, 1, "json-Context.file_io_sync", "file_io_sync", "Specifies durability of writes."], [22, 0, 1, "json-Context.gcs_request_concurrency", "gcs_request_concurrency", ""], [22, 0, 1, "json-Context.gcs_request_retries", "gcs_request_retries", ""], [22, 0, 1, "json-Context.gcs_user_project", "gcs_user_project", ""], [23, 0, 1, "json-Context.http_request_concurrency", "http_request_concurrency", ""], [23, 0, 1, "json-Context.http_request_retries", "http_request_retries", ""], [25, 0, 1, "json-Context.memory_key_value_store", "memory_key_value_store", ""], [27, 0, 1, "json-Context.ocdbt_coordinator", "ocdbt_coordinator", "Enables distributed coordination for OCDBT."], [28, 0, 1, "json-Context.s3_request_concurrency", "s3_request_concurrency", ""], [28, 0, 1, "json-Context.s3_request_retries", "s3_request_retries", ""]], "Context.aws_credentials": [[28, 1, 2, "json-Context.aws_credentials.filename", "filename", ""], [28, 1, 2, "json-Context.aws_credentials.metadata_endpoint", "metadata_endpoint", ""], [28, 1, 2, "json-Context.aws_credentials.profile", "profile", ""]], "Context.cache_pool": [[0, 1, 2, "json-Context.cache_pool.total_bytes_limit", "total_bytes_limit", ""]], "Context.data_copy_concurrency": [[29, 1, 2, "json-Context.data_copy_concurrency.limit", "limit", ""]], "Context.experimental_gcs_rate_limiter": [[22, 1, 2, "json-Context.experimental_gcs_rate_limiter.doubling_time", "doubling_time", ""], [22, 1, 2, "json-Context.experimental_gcs_rate_limiter.read_rate", "read_rate", ""], [22, 1, 2, "json-Context.experimental_gcs_rate_limiter.write_rate", "write_rate", ""]], "Context.experimental_s3_rate_limiter": [[28, 1, 2, "json-Context.experimental_s3_rate_limiter.doubling_time", "doubling_time", ""], [28, 1, 2, "json-Context.experimental_s3_rate_limiter.read_rate", "read_rate", ""], [28, 1, 2, "json-Context.experimental_s3_rate_limiter.write_rate", "write_rate", ""]], "Context.file_io_concurrency": [[21, 1, 2, "json-Context.file_io_concurrency.limit", "limit", ""]], "Context.gcs_request_concurrency": [[22, 1, 2, "json-Context.gcs_request_concurrency.limit", "limit", ""]], "Context.gcs_request_retries": [[22, 1, 2, "json-Context.gcs_request_retries.initial_delay", "initial_delay", ""], [22, 1, 2, "json-Context.gcs_request_retries.max_delay", "max_delay", ""], [22, 1, 2, "json-Context.gcs_request_retries.max_retries", "max_retries", ""]], "Context.gcs_user_project": [[22, 1, 2, "json-Context.gcs_user_project.project_id", "project_id", "Google Cloud project id, e.g. \"my-project\".  The Google Cloud account that is used must have appropriate permissions to bill to the specified project."]], "Context.http_request_concurrency": [[23, 1, 2, "json-Context.http_request_concurrency.limit", "limit", ""]], "Context.http_request_retries": [[23, 1, 2, "json-Context.http_request_retries.initial_delay", "initial_delay", ""], [23, 1, 2, "json-Context.http_request_retries.max_delay", "max_delay", ""], [23, 1, 2, "json-Context.http_request_retries.max_retries", "max_retries", ""]], "Context.ocdbt_coordinator": [[27, 1, 2, "json-Context.ocdbt_coordinator.address", "address", "Address of gRPC coordinator server."], [27, 1, 2, "json-Context.ocdbt_coordinator.lease_duration", "lease_duration", "Duration of lease to request from coordinator for B+tree key ranges."]], "Context.s3_request_concurrency": [[28, 1, 2, "json-Context.s3_request_concurrency.limit", "limit", ""]], "Context.s3_request_retries": [[28, 1, 2, "json-Context.s3_request_retries.initial_delay", "initial_delay", ""], [28, 1, 2, "json-Context.s3_request_retries.max_delay", "max_delay", ""], [28, 1, 2, "json-Context.s3_request_retries.max_retries", "max_retries", ""]], "DownsampleMethod": [[3, 1, 2, "json-DownsampleMethod.max", "max", ""], [3, 1, 2, "json-DownsampleMethod.mean", "mean", ""], [3, 1, 2, "json-DownsampleMethod.median", "median", ""], [3, 1, 2, "json-DownsampleMethod.min", "min", ""], [3, 1, 2, "json-DownsampleMethod.mode", "mode", ""], [3, 1, 2, "json-DownsampleMethod.stride", "stride", ""]], "IndexDomain": [[19, 1, 2, "json-IndexDomain.exclusive_max", "exclusive_max", "Exclusive upper bounds of the domain."], [19, 1, 2, "json-IndexDomain.inclusive_max", "inclusive_max", "Inclusive upper bounds of the domain."], [19, 1, 2, "json-IndexDomain.inclusive_min", "inclusive_min", "Inclusive lower bounds of the domain."], [19, 1, 2, "json-IndexDomain.labels", "labels", "Dimension labels for each dimension."], [19, 1, 2, "json-IndexDomain.rank", "rank", "Number of dimensions."], [19, 1, 2, "json-IndexDomain.shape", "shape", "Extent of each dimension of the domain."]], "IndexTransform": [[19, 1, 2, "json-IndexTransform.input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds of the input domain."], [19, 1, 2, "json-IndexTransform.input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds of the input domain."], [19, 1, 2, "json-IndexTransform.input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds of the input domain."], [19, 1, 2, "json-IndexTransform.input_labels", "input_labels", "Dimension labels for each input domain dimension."], [19, 1, 2, "json-IndexTransform.input_rank", "input_rank", "Number of input dimensions."], [19, 1, 2, "json-IndexTransform.input_shape", "input_shape", "Extent of each dimension of the input domain."], [19, 1, 2, "json-IndexTransform.output", "output", "Specifies the output index map for each output dimension."]], "KeyValueStoreBackedChunkDriver": [[10, 1, 2, "json-KeyValueStoreBackedChunkDriver.assume_cached_metadata", "assume_cached_metadata", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.assume_metadata", "assume_metadata", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.cache_pool", "cache_pool", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.context", "context", "Specifies context resources that augment/override the parent context."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.create", "create", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.data_copy_concurrency", "data_copy_concurrency", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.delete_existing", "delete_existing", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.driver", "driver", "Driver identifier"], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.dtype", "dtype", "Specifies the data type."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.kvstore", "kvstore", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.open", "open", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.path", "path", "Additional path within the KvStore specified by kvstore."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.rank", "rank", "Specifies the rank of the TensorStore."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_data", "recheck_cached_data", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata", "recheck_cached_metadata", ""], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.schema", "schema", "Specifies constraints on the schema."], [10, 1, 2, "json-KeyValueStoreBackedChunkDriver.transform", "transform", "Specifies a transform."]], "KvStore": [[24, 1, 2, "json-KvStore.context", "context", ""], [24, 1, 2, "json-KvStore.driver", "driver", "Key-value store driver identifier"], [24, 1, 2, "json-KvStore.path", "path", "Key prefix within the key-value store."]], "OutputIndexMap": [[19, 1, 2, "json-OutputIndexMap.index_array", "index_array", "If present, indicates that this output dimension uses an index array map, with the index array specified as a nested list of rank equal to the input_rank."], [19, 1, 2, "json-OutputIndexMap.index_array_bounds", "index_array_bounds", ""], [19, 1, 2, "json-OutputIndexMap.input_dimension", "input_dimension", "If present, indicates that this output dimension uses a single input dimension map with the specified input dimension.  Must not be specified in conjunction with index_array."], [19, 1, 2, "json-OutputIndexMap.offset", "offset", "Specifies an offset for this output dimension.  If neither input_dimension nor index_array is specified, this specifies the constant value to which this output dimension maps."], [19, 1, 2, "json-OutputIndexMap.stride", "stride", "Multiplier for the input index specified by input_dimension or the index array value specified by index_array."]], "Schema": [[492, 1, 2, "json-Schema.chunk_layout", "chunk_layout", "Data storage layout constraints."], [492, 1, 2, "json-Schema.codec", "codec", ""], [492, 1, 2, "json-Schema.dimension_units", "dimension_units", "Physical units of each dimension."], [492, 1, 2, "json-Schema.domain", "domain", "Domain of the TensorStore, including bounds and optional dimension labels."], [492, 1, 2, "json-Schema.dtype", "dtype", "Specifies the data type of the TensorStore."], [492, 1, 2, "json-Schema.fill_value", "fill_value", "Fill value to use for missing data."], [492, 1, 2, "json-Schema.rank", "rank", "Number of dimensions."]], "TensorStore": [[493, 1, 2, "json-TensorStore.context", "context", "Specifies context resources that augment/override the parent context."], [493, 1, 2, "json-TensorStore.driver", "driver", "Driver identifier"], [493, 1, 2, "json-TensorStore.dtype", "dtype", "Specifies the data type."], [493, 1, 2, "json-TensorStore.rank", "rank", "Specifies the rank of the TensorStore."], [493, 1, 2, "json-TensorStore.schema", "schema", "Specifies constraints on the schema."], [493, 1, 2, "json-TensorStore.transform", "transform", "Specifies a transform."]], "driver/array": [[1, 1, 2, "json-driver/array.array", "array", "Nested array of rank equal to rank specifying the initial value."], [1, 1, 2, "json-driver/array.context", "context", "Specifies context resources that augment/override the parent context."], [1, 1, 2, "json-driver/array.data_copy_concurrency", "data_copy_concurrency", ""], [1, 1, 2, "json-driver/array.driver", "driver", ""], [1, 1, 2, "json-driver/array.dtype", "dtype", "Specifies the data type."], [1, 1, 2, "json-driver/array.rank", "rank", "Specifies the rank of the TensorStore."], [1, 1, 2, "json-driver/array.schema", "schema", "Specifies constraints on the schema."], [1, 1, 2, "json-driver/array.transform", "transform", "Specifies a transform."]], "driver/avif": [[4, 1, 2, "json-driver/avif.cache_pool", "cache_pool", ""], [4, 1, 2, "json-driver/avif.context", "context", "Specifies context resources that augment/override the parent context."], [4, 1, 2, "json-driver/avif.data_copy_concurrency", "data_copy_concurrency", ""], [4, 1, 2, "json-driver/avif.driver", "driver", ""], [4, 1, 2, "json-driver/avif.dtype", "dtype", ""], [4, 1, 2, "json-driver/avif.kvstore", "kvstore", ""], [4, 1, 2, "json-driver/avif.quantizer", "quantizer", ""], [4, 1, 2, "json-driver/avif.rank", "rank", "Specifies the rank of the TensorStore."], [4, 1, 2, "json-driver/avif.schema", "schema", "Specifies constraints on the schema."], [4, 1, 2, "json-driver/avif.speed", "speed", ""], [4, 1, 2, "json-driver/avif.transform", "transform", "Specifies a transform."]], "driver/bmp": [[5, 1, 2, "json-driver/bmp.cache_pool", "cache_pool", ""], [5, 1, 2, "json-driver/bmp.context", "context", "Specifies context resources that augment/override the parent context."], [5, 1, 2, "json-driver/bmp.data_copy_concurrency", "data_copy_concurrency", ""], [5, 1, 2, "json-driver/bmp.driver", "driver", ""], [5, 1, 2, "json-driver/bmp.dtype", "dtype", ""], [5, 1, 2, "json-driver/bmp.kvstore", "kvstore", ""], [5, 1, 2, "json-driver/bmp.rank", "rank", "Specifies the rank of the TensorStore."], [5, 1, 2, "json-driver/bmp.schema", "schema", "Specifies constraints on the schema."], [5, 1, 2, "json-driver/bmp.transform", "transform", "Specifies a transform."]], "driver/cast": [[2, 1, 2, "json-driver/cast.base", "base", "Base TensorStore to convert."], [2, 1, 2, "json-driver/cast.context", "context", "Specifies context resources that augment/override the parent context."], [2, 1, 2, "json-driver/cast.driver", "driver", ""], [2, 1, 2, "json-driver/cast.dtype", "dtype", "Specifies the data type under which to view the base TensorStore."], [2, 1, 2, "json-driver/cast.rank", "rank", "Specifies the rank of the TensorStore."], [2, 1, 2, "json-driver/cast.schema", "schema", "Specifies constraints on the schema."], [2, 1, 2, "json-driver/cast.transform", "transform", "Specifies a transform."]], "driver/downsample": [[3, 1, 2, "json-driver/downsample.base", "base", "Base TensorStore to downsample."], [3, 1, 2, "json-driver/downsample.context", "context", "Specifies context resources that augment/override the parent context."], [3, 1, 2, "json-driver/downsample.downsample_factors", "downsample_factors", ""], [3, 1, 2, "json-driver/downsample.downsample_method", "downsample_method", ""], [3, 1, 2, "json-driver/downsample.driver", "driver", ""], [3, 1, 2, "json-driver/downsample.dtype", "dtype", "Specifies the data type."], [3, 1, 2, "json-driver/downsample.rank", "rank", "Specifies the rank of the TensorStore."], [3, 1, 2, "json-driver/downsample.schema", "schema", "Specifies constraints on the schema."], [3, 1, 2, "json-driver/downsample.transform", "transform", "Specifies a transform."]], "driver/jpeg": [[6, 1, 2, "json-driver/jpeg.cache_pool", "cache_pool", ""], [6, 1, 2, "json-driver/jpeg.context", "context", "Specifies context resources that augment/override the parent context."], [6, 1, 2, "json-driver/jpeg.data_copy_concurrency", "data_copy_concurrency", ""], [6, 1, 2, "json-driver/jpeg.driver", "driver", ""], [6, 1, 2, "json-driver/jpeg.dtype", "dtype", ""], [6, 1, 2, "json-driver/jpeg.kvstore", "kvstore", ""], [6, 1, 2, "json-driver/jpeg.quality", "quality", ""], [6, 1, 2, "json-driver/jpeg.rank", "rank", "Specifies the rank of the TensorStore."], [6, 1, 2, "json-driver/jpeg.schema", "schema", "Specifies constraints on the schema."], [6, 1, 2, "json-driver/jpeg.transform", "transform", "Specifies a transform."]], "driver/json": [[11, 1, 2, "json-driver/json.cache_pool", "cache_pool", ""], [11, 1, 2, "json-driver/json.context", "context", "Specifies context resources that augment/override the parent context."], [11, 1, 2, "json-driver/json.data_copy_concurrency", "data_copy_concurrency", ""], [11, 1, 2, "json-driver/json.driver", "driver", ""], [11, 1, 2, "json-driver/json.dtype", "dtype", ""], [11, 1, 2, "json-driver/json.json_pointer", "json_pointer", ""], [11, 1, 2, "json-driver/json.kvstore", "kvstore", ""], [11, 1, 2, "json-driver/json.path", "path", "Additional path to the JSON file within the KvStore specified by kvstore."], [11, 1, 2, "json-driver/json.rank", "rank", ""], [11, 1, 2, "json-driver/json.recheck_cached_data", "recheck_cached_data", ""], [11, 1, 2, "json-driver/json.schema", "schema", "Specifies constraints on the schema."], [11, 1, 2, "json-driver/json.transform", "transform", "Specifies a transform."]], "driver/n5": [[12, 1, 2, "json-driver/n5.assume_cached_metadata", "assume_cached_metadata", ""], [12, 1, 2, "json-driver/n5.assume_metadata", "assume_metadata", ""], [12, 1, 2, "json-driver/n5.cache_pool", "cache_pool", ""], [12, 1, 2, "json-driver/n5.context", "context", "Specifies context resources that augment/override the parent context."], [12, 1, 2, "json-driver/n5.create", "create", ""], [12, 1, 2, "json-driver/n5.data_copy_concurrency", "data_copy_concurrency", ""], [12, 1, 2, "json-driver/n5.delete_existing", "delete_existing", ""], [12, 1, 2, "json-driver/n5.driver", "driver", ""], [12, 1, 2, "json-driver/n5.dtype", "dtype", "Specifies the data type."], [12, 1, 2, "json-driver/n5.kvstore", "kvstore", ""], [12, 1, 2, "json-driver/n5.metadata", "metadata", "N5 array metadata."], [12, 1, 2, "json-driver/n5.open", "open", ""], [12, 1, 2, "json-driver/n5.path", "path", "Additional path within the KvStore specified by kvstore."], [12, 1, 2, "json-driver/n5.rank", "rank", "Specifies the rank of the TensorStore."], [12, 1, 2, "json-driver/n5.recheck_cached_data", "recheck_cached_data", ""], [12, 1, 2, "json-driver/n5.recheck_cached_metadata", "recheck_cached_metadata", ""], [12, 1, 2, "json-driver/n5.schema", "schema", "Specifies constraints on the schema."], [12, 1, 2, "json-driver/n5.transform", "transform", "Specifies a transform."]], "driver/n5.metadata": [[12, 1, 2, "json-driver/n5.metadata.axes", "axes", "Specifies a label for each dimension of the dataset."], [12, 1, 2, "json-driver/n5.metadata.blockSize", "blockSize", "Chunk dimensions."], [12, 1, 2, "json-driver/n5.metadata.compression", "compression", "Specifies the chunk compression method."], [12, 1, 2, "json-driver/n5.metadata.dataType", "dataType", "Specifies the data type."], [12, 1, 2, "json-driver/n5.metadata.dimensions", "dimensions", "Dimensions of the dataset."], [12, 1, 2, "json-driver/n5.metadata.resolution", "resolution", "Specifies the multiplier for the physical units."], [12, 1, 2, "json-driver/n5.metadata.units", "units", "Specifies the base physical unit for each dimension."]], "driver/n5/Codec": [[12, 1, 2, "json-driver/n5/Codec.compression", "compression", "Specifies the chunk compression method."], [12, 1, 2, "json-driver/n5/Codec.driver", "driver", ""]], "driver/n5/Compression": [[12, 1, 2, "json-driver/n5/Compression.type", "type", ""]], "driver/n5/Compression/blosc": [[12, 1, 2, "json-driver/n5/Compression/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [12, 1, 2, "json-driver/n5/Compression/blosc.cname", "cname", ""], [12, 1, 2, "json-driver/n5/Compression/blosc.shuffle", "shuffle", ""], [12, 1, 2, "json-driver/n5/Compression/blosc.type", "type", ""]], "driver/n5/Compression/bzip2": [[12, 1, 2, "json-driver/n5/Compression/bzip2.blockSize", "blockSize", "Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."], [12, 1, 2, "json-driver/n5/Compression/bzip2.type", "type", ""]], "driver/n5/Compression/gzip": [[12, 1, 2, "json-driver/n5/Compression/gzip.level", "level", "Specifies the zlib compression level to use."], [12, 1, 2, "json-driver/n5/Compression/gzip.type", "type", ""], [12, 1, 2, "json-driver/n5/Compression/gzip.useZlib", "useZlib", ""]], "driver/n5/Compression/raw": [[12, 1, 2, "json-driver/n5/Compression/raw.type", "type", ""]], "driver/n5/Compression/xz": [[12, 1, 2, "json-driver/n5/Compression/xz.preset", "preset", ""], [12, 1, 2, "json-driver/n5/Compression/xz.type", "type", ""]], "driver/neuroglancer_precomputed": [[13, 1, 2, "json-driver/neuroglancer_precomputed.assume_cached_metadata", "assume_cached_metadata", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.assume_metadata", "assume_metadata", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.cache_pool", "cache_pool", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.context", "context", "Specifies context resources that augment/override the parent context."], [13, 1, 2, "json-driver/neuroglancer_precomputed.create", "create", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.data_copy_concurrency", "data_copy_concurrency", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.delete_existing", "delete_existing", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.driver", "driver", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.dtype", "dtype", "Specifies the data type."], [13, 1, 2, "json-driver/neuroglancer_precomputed.kvstore", "kvstore", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata", "multiscale_metadata", "Scale-independent metadata."], [13, 1, 2, "json-driver/neuroglancer_precomputed.open", "open", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.path", "path", "Additional path within the KvStore specified by kvstore."], [13, 1, 2, "json-driver/neuroglancer_precomputed.rank", "rank", "Specifies the rank of the TensorStore."], [13, 1, 2, "json-driver/neuroglancer_precomputed.recheck_cached_data", "recheck_cached_data", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.recheck_cached_metadata", "recheck_cached_metadata", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_index", "scale_index", "Zero-based index of the scale to open or create."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata", "scale_metadata", "Per-scale metadata."], [13, 1, 2, "json-driver/neuroglancer_precomputed.schema", "schema", "Specifies constraints on the schema."], [13, 1, 2, "json-driver/neuroglancer_precomputed.transform", "transform", "Specifies a transform."]], "driver/neuroglancer_precomputed.multiscale_metadata": [[13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.data_type", "data_type", "Specifies the data type."], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels", "num_channels", "Number of channels."], [13, 1, 2, "json-driver/neuroglancer_precomputed.multiscale_metadata.type", "type", "Specifying the type of volume."]], "driver/neuroglancer_precomputed.scale_metadata": [[13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.chunk_size", "chunk_size", "Chunk dimensions (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size", "compressed_segmentation_block_size", "Block size for compressed segmentation encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.encoding", "encoding", "Specifies the chunk encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.key", "key", "Specifies the scale key (relative to path)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.resolution", "resolution", "Voxel size in nanometers (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.sharding", "sharding", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.size", "size", "Voxel dimensions of the volume (XYZ order)."], [13, 1, 2, "json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset", "voxel_offset", "Voxel origin of the volume (XYZ order)."]], "driver/neuroglancer_precomputed/Codec": [[13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.driver", "driver", ""], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.encoding", "encoding", "Specifies the chunk encoding."], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.jpeg_quality", "jpeg_quality", "JPEG encoding quality."], [13, 1, 2, "json-driver/neuroglancer_precomputed/Codec.shard_data_encoding", "shard_data_encoding", "Additional data compression when using the sharded format."]], "driver/png": [[7, 1, 2, "json-driver/png.cache_pool", "cache_pool", ""], [7, 1, 2, "json-driver/png.compression_level", "compression_level", ""], [7, 1, 2, "json-driver/png.context", "context", "Specifies context resources that augment/override the parent context."], [7, 1, 2, "json-driver/png.data_copy_concurrency", "data_copy_concurrency", ""], [7, 1, 2, "json-driver/png.driver", "driver", ""], [7, 1, 2, "json-driver/png.dtype", "dtype", ""], [7, 1, 2, "json-driver/png.kvstore", "kvstore", ""], [7, 1, 2, "json-driver/png.rank", "rank", "Specifies the rank of the TensorStore."], [7, 1, 2, "json-driver/png.schema", "schema", "Specifies constraints on the schema."], [7, 1, 2, "json-driver/png.transform", "transform", "Specifies a transform."]], "driver/stack": [[14, 1, 2, "json-driver/stack.context", "context", "Specifies context resources that augment/override the parent context."], [14, 1, 2, "json-driver/stack.data_copy_concurrency", "data_copy_concurrency", ""], [14, 1, 2, "json-driver/stack.driver", "driver", ""], [14, 1, 2, "json-driver/stack.dtype", "dtype", "Specifies the data type."], [14, 1, 2, "json-driver/stack.layers", "layers", "Array of layered tensorstore drivers."], [14, 1, 2, "json-driver/stack.rank", "rank", "Specifies the rank of the TensorStore."], [14, 1, 2, "json-driver/stack.schema", "schema", "Specifies constraints on the schema."], [14, 1, 2, "json-driver/stack.transform", "transform", "Specifies a transform."]], "driver/tiff": [[8, 1, 2, "json-driver/tiff.cache_pool", "cache_pool", ""], [8, 1, 2, "json-driver/tiff.context", "context", "Specifies context resources that augment/override the parent context."], [8, 1, 2, "json-driver/tiff.data_copy_concurrency", "data_copy_concurrency", ""], [8, 1, 2, "json-driver/tiff.driver", "driver", ""], [8, 1, 2, "json-driver/tiff.dtype", "dtype", ""], [8, 1, 2, "json-driver/tiff.kvstore", "kvstore", ""], [8, 1, 2, "json-driver/tiff.page", "page", ""], [8, 1, 2, "json-driver/tiff.rank", "rank", "Specifies the rank of the TensorStore."], [8, 1, 2, "json-driver/tiff.schema", "schema", "Specifies constraints on the schema."], [8, 1, 2, "json-driver/tiff.transform", "transform", "Specifies a transform."]], "driver/webp": [[9, 1, 2, "json-driver/webp.cache_pool", "cache_pool", ""], [9, 1, 2, "json-driver/webp.context", "context", "Specifies context resources that augment/override the parent context."], [9, 1, 2, "json-driver/webp.data_copy_concurrency", "data_copy_concurrency", ""], [9, 1, 2, "json-driver/webp.driver", "driver", ""], [9, 1, 2, "json-driver/webp.dtype", "dtype", ""], [9, 1, 2, "json-driver/webp.kvstore", "kvstore", ""], [9, 1, 2, "json-driver/webp.lossless", "lossless", ""], [9, 1, 2, "json-driver/webp.quality", "quality", ""], [9, 1, 2, "json-driver/webp.rank", "rank", "Specifies the rank of the TensorStore."], [9, 1, 2, "json-driver/webp.schema", "schema", "Specifies constraints on the schema."], [9, 1, 2, "json-driver/webp.transform", "transform", "Specifies a transform."]], "driver/zarr": [[15, 1, 2, "json-driver/zarr.assume_cached_metadata", "assume_cached_metadata", ""], [15, 1, 2, "json-driver/zarr.assume_metadata", "assume_metadata", ""], [15, 1, 2, "json-driver/zarr.cache_pool", "cache_pool", ""], [15, 1, 2, "json-driver/zarr.context", "context", "Specifies context resources that augment/override the parent context."], [15, 1, 2, "json-driver/zarr.create", "create", ""], [15, 1, 2, "json-driver/zarr.data_copy_concurrency", "data_copy_concurrency", ""], [15, 1, 2, "json-driver/zarr.delete_existing", "delete_existing", ""], [15, 1, 2, "json-driver/zarr.driver", "driver", ""], [15, 1, 2, "json-driver/zarr.dtype", "dtype", "Specifies the data type."], [15, 1, 2, "json-driver/zarr.field", "field", "Name of field to open."], [15, 1, 2, "json-driver/zarr.key_encoding", "key_encoding", "Specifies the encoding of chunk indices into key-value store keys."], [15, 1, 2, "json-driver/zarr.kvstore", "kvstore", ""], [15, 1, 2, "json-driver/zarr.metadata", "metadata", "Zarr array metadata."], [15, 1, 2, "json-driver/zarr.metadata_key", "metadata_key", "Specifies the key under which to store the array metadata in JSON format."], [15, 1, 2, "json-driver/zarr.open", "open", ""], [15, 1, 2, "json-driver/zarr.path", "path", "Additional path within the KvStore specified by kvstore."], [15, 1, 2, "json-driver/zarr.rank", "rank", "Specifies the rank of the TensorStore."], [15, 1, 2, "json-driver/zarr.recheck_cached_data", "recheck_cached_data", ""], [15, 1, 2, "json-driver/zarr.recheck_cached_metadata", "recheck_cached_metadata", ""], [15, 1, 2, "json-driver/zarr.schema", "schema", "Specifies constraints on the schema."], [15, 1, 2, "json-driver/zarr.transform", "transform", "Specifies a transform."]], "driver/zarr.metadata": [[15, 1, 2, "json-driver/zarr.metadata.chunks", "chunks", "Chunk dimensions."], [15, 1, 2, "json-driver/zarr.metadata.compressor", "compressor", "Specifies the chunk compression method."], [15, 1, 2, "json-driver/zarr.metadata.dimension_separator", "dimension_separator", "Specifies the encoding of chunk indices into key-value store keys."], [15, 1, 2, "json-driver/zarr.metadata.dtype", "dtype", "Specifies the scalar or structured data type."], [15, 1, 2, "json-driver/zarr.metadata.fill_value", "fill_value", "Specifies the fill value."], [15, 1, 2, "json-driver/zarr.metadata.filters", "filters", "Specifies the filters to apply to chunks."], [15, 1, 2, "json-driver/zarr.metadata.order", "order", "Specifies the data layout for encoded chunks."], [15, 1, 2, "json-driver/zarr.metadata.shape", "shape", "Chunked dimensions of the array."], [15, 1, 2, "json-driver/zarr.metadata.zarr_format", "zarr_format", ""]], "driver/zarr/Codec": [[15, 1, 2, "json-driver/zarr/Codec.compressor", "compressor", "Specifies the chunk compression method."], [15, 1, 2, "json-driver/zarr/Codec.driver", "driver", ""], [15, 1, 2, "json-driver/zarr/Codec.filters", "filters", "Specifies the filters to apply to chunks."]], "driver/zarr/Compressor": [[15, 1, 2, "json-driver/zarr/Compressor.id", "id", ""]], "driver/zarr/Compressor/blosc": [[15, 1, 2, "json-driver/zarr/Compressor/blosc.blocksize", "blocksize", "Specifies the Blosc blocksize."], [15, 1, 2, "json-driver/zarr/Compressor/blosc.clevel", "clevel", "Specifies the Blosc compression level to use."], [15, 1, 2, "json-driver/zarr/Compressor/blosc.cname", "cname", ""], [15, 1, 2, "json-driver/zarr/Compressor/blosc.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/blosc.shuffle", "shuffle", ""]], "driver/zarr/Compressor/bz2": [[15, 1, 2, "json-driver/zarr/Compressor/bz2.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/bz2.level", "level", "Specifies the bzip2 buffer size/compression level to use."]], "driver/zarr/Compressor/zlib": [[15, 1, 2, "json-driver/zarr/Compressor/zlib.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/zlib.level", "level", "Specifies the zlib compression level to use."]], "driver/zarr/Compressor/zstd": [[15, 1, 2, "json-driver/zarr/Compressor/zstd.id", "id", ""], [15, 1, 2, "json-driver/zarr/Compressor/zstd.level", "level", "Specifies the compression level to use."]], "driver/zarr3": [[16, 1, 2, "json-driver/zarr3.assume_cached_metadata", "assume_cached_metadata", ""], [16, 1, 2, "json-driver/zarr3.assume_metadata", "assume_metadata", ""], [16, 1, 2, "json-driver/zarr3.cache_pool", "cache_pool", ""], [16, 1, 2, "json-driver/zarr3.context", "context", "Specifies context resources that augment/override the parent context."], [16, 1, 2, "json-driver/zarr3.create", "create", ""], [16, 1, 2, "json-driver/zarr3.data_copy_concurrency", "data_copy_concurrency", ""], [16, 1, 2, "json-driver/zarr3.delete_existing", "delete_existing", ""], [16, 1, 2, "json-driver/zarr3.driver", "driver", ""], [16, 1, 2, "json-driver/zarr3.dtype", "dtype", "Specifies the data type."], [16, 1, 2, "json-driver/zarr3.kvstore", "kvstore", ""], [16, 1, 2, "json-driver/zarr3.metadata", "metadata", "Zarr v3 array metadata."], [16, 1, 2, "json-driver/zarr3.open", "open", ""], [16, 1, 2, "json-driver/zarr3.path", "path", "Additional path within the KvStore specified by kvstore."], [16, 1, 2, "json-driver/zarr3.rank", "rank", "Specifies the rank of the TensorStore."], [16, 1, 2, "json-driver/zarr3.recheck_cached_data", "recheck_cached_data", ""], [16, 1, 2, "json-driver/zarr3.recheck_cached_metadata", "recheck_cached_metadata", ""], [16, 1, 2, "json-driver/zarr3.schema", "schema", "Specifies constraints on the schema."], [16, 1, 2, "json-driver/zarr3.transform", "transform", "Specifies a transform."]], "driver/zarr3/ChunkKeyEncoding": [[16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.configuration", "configuration", "Configuration options."], [16, 0, 1, "json-driver/zarr3/ChunkKeyEncoding.default", "default", "Default chunk key encoding."], [16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.name", "name", "Identifies the chunk key encoding."], [16, 0, 1, "json-driver/zarr3/ChunkKeyEncoding.v2", "v2", "Zarr v2-compatible chunk key encoding."]], "driver/zarr3/ChunkKeyEncoding.default": [[16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.default.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.default.name", "name", ""]], "driver/zarr3/ChunkKeyEncoding.default.configuration": [[16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.default.configuration.separator", "separator", "Separator character between dimensions"]], "driver/zarr3/ChunkKeyEncoding.v2": [[16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.name", "name", ""]], "driver/zarr3/ChunkKeyEncoding.v2.configuration": [[16, 1, 2, "json-driver/zarr3/ChunkKeyEncoding.v2.configuration.separator", "separator", "Separator character between dimensions"]], "driver/zarr3/Codec": [[16, 1, 2, "json-driver/zarr3/Codec.codecs", "codecs", ""], [16, 1, 2, "json-driver/zarr3/Codec.driver", "driver", ""]], "driver/zarr3/Codec/blosc": [[16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/blosc.name", "name", ""]], "driver/zarr3/Codec/blosc.configuration": [[16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.blocksize", "blocksize", "Specifies the Blosc blocksize."], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.clevel", "clevel", "Specifies the Blosc compression level to use."], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.cname", "cname", ""], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle", "shuffle", ""], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.typesize", "typesize", "Specifies the stride in bytes for shuffling."]], "driver/zarr3/Codec/blosc.configuration.shuffle": [[16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.bitshuffle", "bitshuffle", "Bit-wise shuffle"], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.noshuffle", "noshuffle", "No shuffling."], [16, 1, 2, "json-driver/zarr3/Codec/blosc.configuration.shuffle.shuffle", "shuffle", "Byte-wise shuffle"]], "driver/zarr3/Codec/bytes": [[16, 1, 2, "json-driver/zarr3/Codec/bytes.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/bytes.name", "name", ""]], "driver/zarr3/Codec/bytes.configuration": [[16, 1, 2, "json-driver/zarr3/Codec/bytes.configuration.endian", "endian", ""]], "driver/zarr3/Codec/crc32c": [[16, 1, 2, "json-driver/zarr3/Codec/crc32c.configuration", "configuration", "No configuration options are supported."], [16, 1, 2, "json-driver/zarr3/Codec/crc32c.name", "name", ""]], "driver/zarr3/Codec/gzip": [[16, 1, 2, "json-driver/zarr3/Codec/gzip.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/gzip.name", "name", ""]], "driver/zarr3/Codec/sharding_indexed": [[16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.name", "name", ""]], "driver/zarr3/Codec/sharding_indexed.configuration": [[16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.chunk_shape", "chunk_shape", "Shape of each sub-chunk."], [16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.codecs", "codecs", "Sub-chunk codec chain"], [16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.index_codecs", "index_codecs", "Shard index codec chain"], [16, 1, 2, "json-driver/zarr3/Codec/sharding_indexed.configuration.index_location", "index_location", "Location of the shard index within the shard."]], "driver/zarr3/Codec/transpose": [[16, 1, 2, "json-driver/zarr3/Codec/transpose.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/transpose.name", "name", ""]], "driver/zarr3/Codec/transpose.configuration": [[16, 1, 2, "json-driver/zarr3/Codec/transpose.configuration.order", "order", "Permutation of the dimensions."]], "driver/zarr3/Codec/zstd": [[16, 1, 2, "json-driver/zarr3/Codec/zstd.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Codec/zstd.name", "name", ""]], "driver/zarr3/Codec/zstd.configuration": [[16, 1, 2, "json-driver/zarr3/Codec/zstd.configuration.level", "level", "Specifies the compression level to use."]], "driver/zarr3/DataType": [[16, 1, 2, "json-driver/zarr3/DataType.bfloat16", "bfloat16", "bfloat16 floating-point format number."], [16, 1, 2, "json-driver/zarr3/DataType.bool", "bool", "Boolean value."], [16, 1, 2, "json-driver/zarr3/DataType.complex128", "complex128", "Complex number, where the real and imaginary components are each represented by a float64."], [16, 1, 2, "json-driver/zarr3/DataType.complex64", "complex64", "Complex number, where the real and imaginary components are each represented by a float32."], [16, 1, 2, "json-driver/zarr3/DataType.float16", "float16", "IEEE 754 binary16 half-precision floating-point number."], [16, 1, 2, "json-driver/zarr3/DataType.float32", "float32", "IEEE 754 binary32 single-precision floating-point number."], [16, 1, 2, "json-driver/zarr3/DataType.float64", "float64", "IEEE 754 binary64 double-precision floating-point number."], [16, 1, 2, "json-driver/zarr3/DataType.int16", "int16", "16-bit signed two's-complement integer."], [16, 1, 2, "json-driver/zarr3/DataType.int32", "int32", "32-bit signed two's-complement integer."], [16, 1, 2, "json-driver/zarr3/DataType.int4", "int4", "4-bit signed two's-complement integer."], [16, 1, 2, "json-driver/zarr3/DataType.int64", "int64", "64-bit signed two's-complement integer."], [16, 1, 2, "json-driver/zarr3/DataType.int8", "int8", "8-bit signed two's-complement integer."], [16, 1, 2, "json-driver/zarr3/DataType.uint16", "uint16", "16-bit unsigned integer."], [16, 1, 2, "json-driver/zarr3/DataType.uint32", "uint32", "32-bit unsigned integer."], [16, 1, 2, "json-driver/zarr3/DataType.uint64", "uint64", "64-bit unsigned integer."], [16, 1, 2, "json-driver/zarr3/DataType.uint8", "uint8", "8-bit unsigned integer."]], "driver/zarr3/Metadata": [[16, 1, 2, "json-driver/zarr3/Metadata.attributes", "attributes", "Specifies user-defined attributes."], [16, 1, 2, "json-driver/zarr3/Metadata.chunk_grid", "chunk_grid", ""], [16, 1, 2, "json-driver/zarr3/Metadata.chunk_key_encoding", "chunk_key_encoding", ""], [16, 1, 2, "json-driver/zarr3/Metadata.codecs", "codecs", "Specifies the chunk encoding."], [16, 1, 2, "json-driver/zarr3/Metadata.data_type", "data_type", "Data type of the array."], [16, 1, 2, "json-driver/zarr3/Metadata.dimension_names", "dimension_names", "Specifies an optional name for each dimension."], [16, 1, 2, "json-driver/zarr3/Metadata.fill_value", "fill_value", "Specifies the fill value."], [16, 1, 2, "json-driver/zarr3/Metadata.node_type", "node_type", "Identifies the zarr node type."], [16, 1, 2, "json-driver/zarr3/Metadata.shape", "shape", "Dimensions of the array."], [16, 1, 2, "json-driver/zarr3/Metadata.zarr_format", "zarr_format", "Identifies the zarr specification version."]], "driver/zarr3/Metadata.attributes": [[16, 1, 2, "json-driver/zarr3/Metadata.attributes.dimension_units", "dimension_units", "Physical units corresponding to each dimension of the array."]], "driver/zarr3/Metadata.chunk_grid": [[16, 1, 2, "json-driver/zarr3/Metadata.chunk_grid.configuration", "configuration", ""], [16, 1, 2, "json-driver/zarr3/Metadata.chunk_grid.name", "name", ""]], "driver/zarr3/Metadata.chunk_grid.configuration": [[16, 1, 2, "json-driver/zarr3/Metadata.chunk_grid.configuration.chunk_shape", "chunk_shape", "Chunk dimensions."]], "driver/zarr3/SingleCodec": [[16, 1, 2, "json-driver/zarr3/SingleCodec.configuration", "configuration", "Specifies codec-specific configuration options."], [16, 1, 2, "json-driver/zarr3/SingleCodec.name", "name", "Identifies the codec."]], "dtype": [[493, 1, 2, "json-dtype.bfloat16", "bfloat16", "bfloat16 floating-point format number."], [493, 1, 2, "json-dtype.bool", "bool", "Boolean value (0 or 1)."], [493, 1, 2, "json-dtype.byte", "byte", "Single byte."], [493, 1, 2, "json-dtype.char", "char", "Single byte, interpreted as an ASCII character."], [493, 1, 2, "json-dtype.complex128", "complex128", "Complex number, where the real and imaginary components are each represented by a float64."], [493, 1, 2, "json-dtype.complex64", "complex64", "Complex number, where the real and imaginary components are each represented by a float32."], [493, 1, 2, "json-dtype.float16", "float16", "IEEE 754 binary16 half-precision floating-point number."], [493, 1, 2, "json-dtype.float32", "float32", "IEEE 754 binary32 single-precision floating-point number."], [493, 1, 2, "json-dtype.float64", "float64", "IEEE 754 binary64 double-precision floating-point number."], [493, 1, 2, "json-dtype.float8_e4m3b11fnuz", "float8_e4m3b11fnuz", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 11, with NaN,  without infinities ."], [493, 1, 2, "json-dtype.float8_e4m3fn", "float8_e4m3fn", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 7, with NaN,  without infinities ."], [493, 1, 2, "json-dtype.float8_e4m3fnuz", "float8_e4m3fnuz", "8-bit floating point - Exponent: 4, Mantissa: 3, bias: 8, with NaN,  without infinities ."], [493, 1, 2, "json-dtype.float8_e5m2", "float8_e5m2", "8-bit floating point - Exponent: 5, Mantissa: 2, bias: 15, IEEE 754, with NaN and infinities. ."], [493, 1, 2, "json-dtype.float8_e5m2fnuz", "float8_e5m2fnuz", "8-bit floating point - Exponent: 5, Mantissa: 2, bias: 16, with NaN, without infinities. ."], [493, 1, 2, "json-dtype.int16", "int16", "16-bit signed two's-complement integer."], [493, 1, 2, "json-dtype.int32", "int32", "32-bit signed two's-complement integer."], [493, 1, 2, "json-dtype.int4", "int4", "4-bit signed two's-complement integer, internally stored as its 8-bit signed integer equivalent (i.e. sign-extended)."], [493, 1, 2, "json-dtype.int64", "int64", "64-bit signed two's-complement integer."], [493, 1, 2, "json-dtype.int8", "int8", "8-bit signed two's-complement integer."], [493, 1, 2, "json-dtype.json", "json", "JSON value."], [493, 1, 2, "json-dtype.string", "string", "Byte string."], [493, 1, 2, "json-dtype.uint16", "uint16", "16-bit unsigned integer."], [493, 1, 2, "json-dtype.uint32", "uint32", "32-bit unsigned integer."], [493, 1, 2, "json-dtype.uint64", "uint64", "64-bit unsigned integer."], [493, 1, 2, "json-dtype.uint8", "uint8", "8-bit unsigned integer."], [493, 1, 2, "json-dtype.ustring", "ustring", "Unicode string (represented in memory as UTF-8)."]], "kvstore/file": [[21, 1, 2, "json-kvstore/file.context", "context", ""], [21, 1, 2, "json-kvstore/file.driver", "driver", ""], [21, 1, 2, "json-kvstore/file.file_io_concurrency", "file_io_concurrency", ""], [21, 1, 2, "json-kvstore/file.file_io_sync", "file_io_sync", ""], [21, 1, 2, "json-kvstore/file.path", "path", "Path to root directory on local filesystem."]], "kvstore/gcs": [[22, 1, 2, "json-kvstore/gcs.bucket", "bucket", "Google Cloud Storage bucket to use."], [22, 1, 2, "json-kvstore/gcs.context", "context", ""], [22, 1, 2, "json-kvstore/gcs.driver", "driver", ""], [22, 1, 2, "json-kvstore/gcs.gcs_request_concurrency", "gcs_request_concurrency", ""], [22, 1, 2, "json-kvstore/gcs.gcs_request_retries", "gcs_request_retries", ""], [22, 1, 2, "json-kvstore/gcs.gcs_user_project", "gcs_user_project", ""], [22, 1, 2, "json-kvstore/gcs.path", "path", "Key prefix within the key-value store."]], "kvstore/http": [[23, 1, 2, "json-kvstore/http.base_url", "base_url", "Base URL."], [23, 1, 2, "json-kvstore/http.context", "context", ""], [23, 1, 2, "json-kvstore/http.driver", "driver", ""], [23, 1, 2, "json-kvstore/http.headers", "headers", "Additional HTTP headers to send with every request."], [23, 1, 2, "json-kvstore/http.http_request_concurrency", "http_request_concurrency", ""], [23, 1, 2, "json-kvstore/http.http_request_retries", "http_request_retries", ""], [23, 1, 2, "json-kvstore/http.path", "path", "Path relative to base_url."]], "kvstore/memory": [[25, 1, 2, "json-kvstore/memory.atomic", "atomic", ""], [25, 1, 2, "json-kvstore/memory.context", "context", ""], [25, 1, 2, "json-kvstore/memory.driver", "driver", ""], [25, 1, 2, "json-kvstore/memory.memory_key_value_store", "memory_key_value_store", ""], [25, 1, 2, "json-kvstore/memory.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded": [[26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.base", "base", "Underlying key-value store."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.cache_pool", "cache_pool", ""], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.context", "context", ""], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency", "data_copy_concurrency", ""], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.driver", "driver", ""], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.metadata", "metadata", "Specifies the sharding format."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded.path", "path", "Key prefix within the key-value store."]], "kvstore/neuroglancer_uint64_sharded/ShardingSpec": [[26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type", "@type", ""], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding", "data_encoding", "Specifies the encoding of the data chunks."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash", "hash", "Specifies the hash function used to map chunk IDs to shards."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits", "minishard_bits", "Number of bits of the hashed chunk ID that determine the minishard number."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding", "minishard_index_encoding", "Specifies the encoding of the minishard index."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits", "preshift_bits", "Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."], [26, 1, 2, "json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits", "shard_bits", "Number of bits of the hashed chunk ID that determine the shard number."]], "kvstore/ocdbt": [[27, 1, 2, "json-kvstore/ocdbt.base", "base", "Underlying key-value store."], [27, 1, 2, "json-kvstore/ocdbt.cache_pool", "cache_pool", ""], [27, 1, 2, "json-kvstore/ocdbt.config", "config", "Constrains the database configuration."], [27, 1, 2, "json-kvstore/ocdbt.context", "context", ""], [27, 1, 2, "json-kvstore/ocdbt.coordinator", "coordinator", ""], [27, 1, 2, "json-kvstore/ocdbt.data_copy_concurrency", "data_copy_concurrency", ""], [27, 1, 2, "json-kvstore/ocdbt.driver", "driver", ""], [27, 1, 2, "json-kvstore/ocdbt.path", "path", "Key prefix within the key-value store."], [27, 1, 2, "json-kvstore/ocdbt.target_data_file_size", "target_data_file_size", "Target size of each ocdbt data file."]], "kvstore/ocdbt.config": [[27, 1, 2, "json-kvstore/ocdbt.config.compression", "compression", "Compression method used to encode the manifest and B+Tree nodes."], [27, 1, 2, "json-kvstore/ocdbt.config.manifest_kind", "manifest_kind", "Manifest format to use."], [27, 1, 2, "json-kvstore/ocdbt.config.max_decoded_node_bytes", "max_decoded_node_bytes", "Maximum size of an (uncompressed) B+tree node."], [27, 1, 2, "json-kvstore/ocdbt.config.max_inline_value_bytes", "max_inline_value_bytes", "Maximum number of value bytes to store inline in a B+tree leaf node."], [27, 1, 2, "json-kvstore/ocdbt.config.uuid", "uuid", "Unique 128-bit identifier for the database, specified as 32 hex digits."], [27, 1, 2, "json-kvstore/ocdbt.config.version_tree_arity_log2", "version_tree_arity_log2", "Base-2 logarithm of the arity of the tree of versions."]], "kvstore/ocdbt.config.manifest_kind": [[27, 1, 2, "json-kvstore/ocdbt.config.manifest_kind.numbered", "numbered", "Numbered-file manifest format"], [27, 1, 2, "json-kvstore/ocdbt.config.manifest_kind.single", "single", "Single-file manifest format"]], "kvstore/ocdbt/Compression/zstd": [[27, 1, 2, "json-kvstore/ocdbt/Compression/zstd.id", "id", ""], [27, 1, 2, "json-kvstore/ocdbt/Compression/zstd.level", "level", "Compression level."]], "kvstore/s3": [[28, 1, 2, "json-kvstore/s3.aws_credentials", "aws_credentials", ""], [28, 1, 2, "json-kvstore/s3.aws_region", "aws_region", "AWS region identifier to use in signatures."], [28, 1, 2, "json-kvstore/s3.bucket", "bucket", "AWS S3 Storage bucket."], [28, 1, 2, "json-kvstore/s3.context", "context", ""], [28, 1, 2, "json-kvstore/s3.data_copy_concurrency", "data_copy_concurrency", ""], [28, 1, 2, "json-kvstore/s3.driver", "driver", ""], [28, 1, 2, "json-kvstore/s3.endpoint", "endpoint", "S3 server endpoint to use in place of the public Amazon S3 endpoints."], [28, 1, 2, "json-kvstore/s3.experimental_s3_rate_limiter", "experimental_s3_rate_limiter", ""], [28, 1, 2, "json-kvstore/s3.host_header", "host_header", "Override HTTP host header to send in requests."], [28, 1, 2, "json-kvstore/s3.path", "path", "Key prefix within the key-value store."], [28, 1, 2, "json-kvstore/s3.requester_pays", "requester_pays", "Permit requester-pays requests."], [28, 1, 2, "json-kvstore/s3.s3_request_concurrency", "s3_request_concurrency", ""], [28, 1, 2, "json-kvstore/s3.s3_request_retries", "s3_request_retries", ""]], "kvstore/tsgrpc_kvstore": [[29, 1, 2, "json-kvstore/tsgrpc_kvstore.address", "address", "gRPC Service Address."], [29, 1, 2, "json-kvstore/tsgrpc_kvstore.context", "context", ""], [29, 1, 2, "json-kvstore/tsgrpc_kvstore.data_copy_concurrency", "data_copy_concurrency", ""], [29, 1, 2, "json-kvstore/tsgrpc_kvstore.driver", "driver", ""], [29, 1, 2, "json-kvstore/tsgrpc_kvstore.path", "path", "Key prefix within the key-value store."], [29, 1, 2, "json-kvstore/tsgrpc_kvstore.timeout", "timeout", ""]], "kvstore/zarr_sharding_indexed": [[30, 1, 2, "json-kvstore/zarr_sharding_indexed.base", "base", "Underlying key-value store with path to shard."], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.cache_pool", "cache_pool", ""], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.context", "context", ""], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.data_copy_concurrency", "data_copy_concurrency", ""], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.driver", "driver", ""], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.grid_shape", "grid_shape", "Shape of the grid of entries in the shard."], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.index_codecs", "index_codecs", "Codec chain for encoding/decoding the shard index."], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.index_location", "index_location", "Location of the shard index within the shard."], [30, 1, 2, "json-kvstore/zarr_sharding_indexed.path", "path", "Key prefix within the key-value store."]], "kvstore/zip": [[31, 1, 2, "json-kvstore/zip.base", "base", "Underlying key-value store with path to a ZIP file."], [31, 1, 2, "json-kvstore/zip.cache_pool", "cache_pool", ""], [31, 1, 2, "json-kvstore/zip.context", "context", ""], [31, 1, 2, "json-kvstore/zip.data_copy_concurrency", "data_copy_concurrency", ""], [31, 1, 2, "json-kvstore/zip.driver", "driver", ""], [31, 1, 2, "json-kvstore/zip.path", "path", "Key prefix within the key-value store."]], "tensorstore": [[33, 2, 1, "", "Batch", "Batches are used to group together read operations for potentially improved efficiency."], [36, 2, 1, "", "ChunkLayout", "Describes the storage layout of a tensorstore.TensorStore."], [67, 2, 1, "", "CodecSpec", "Specifies driver-specific encoding/decoding parameters."], [70, 2, 1, "", "Context", "Manages shared TensorStore context resources, such as caches and credentials."], [82, 2, 1, "", "Dim", "1-d index interval with optionally-implicit bounds and dimension label."], [106, 2, 1, "", "DimExpression", "Specifies an advanced indexing operation."], [118, 2, 1, "", "Future", "Handle for consuming the result of an asynchronous operation."], [128, 2, 1, "", "FutureLike", "Abstract base class for types representing an asynchronous result."], [129, 2, 1, "", "IndexDomain", "Domain (including bounds and optional dimension labels) of an N-dimensional index space."], [162, 2, 1, "", "IndexTransform", "Represents a transform from an input index space to an output space."], [198, 2, 1, "", "Indexable", "Abstract base class for types that support TensorStore indexing operations."], [199, 2, 1, "", "KvStore", "Key-value store that maps an ordered set of byte string keys to byte string values."], [248, 2, 1, "", "OpenMode", "Specifies the mode to use when opening a TensorStore."], [255, 2, 1, "", "OutputIndexMap", "Represents an output index map for an index transform."], [265, 2, 1, "", "OutputIndexMaps", "View of the output index maps for an index transform."], [269, 2, 1, "", "OutputIndexMethod", "Indicates the output index method of an OutputIndexMap."], [277, 2, 1, "", "Promise", "Handle for producing the result of an asynchronous operation."], [281, 2, 1, "", "Schema", "Driver-independent options for defining a TensorStore schema."], [313, 2, 1, "", "Spec", "Specification for opening or creating a TensorStore."], [349, 2, 1, "", "TensorStore", "Asynchronous multi-dimensional array handle."], [400, 2, 1, "", "Transaction", "Transactions are used to stage a group of modifications (e.g. writes to tensorstore.TensorStore objects) in memory, and then either commit the group all at once or abort it."], [410, 2, 1, "", "Unit", "Specifies a physical quantity/unit."], [422, 2, 1, "", "VirtualChunkedReadParameters", "Options passed to read callbacks used with virtual_chunked."], [425, 2, 1, "", "VirtualChunkedWriteParameters", "Options passed to write callbacks used with virtual_chunked."], [427, 2, 1, "", "WriteFutures", "Handle for consuming the result of an asynchronous write operation."], [437, 7, 1, "", "array", "Returns a TensorStore that reads/writes from an in-memory array."], [438, 8, 1, "", "bfloat16", "bfloat16 floating-point data type."], [439, 8, 1, "", "bool", "Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."], [440, 7, 1, "", "cast(spec)", "Returns a view with the data type converted."], [441, 7, 1, "", "cast(store)", "Returns a read/write view with the data type converted."], [442, 8, 1, "", "complex128", "Complex number based on float64.  Corresponds to numpy.complex128."], [443, 8, 1, "", "complex64", "Complex number based on float32.  Corresponds to numpy.complex64."], [444, 7, 1, "", "concat", "Virtually concatenates a sequence of TensorStore layers along an existing dimension."], [445, 2, 1, "", "d", "Specifies a dimension selection, for starting a dimension expression."], [447, 7, 1, "", "downsample(spec)", "Returns a virtual downsampled view view of a Spec."], [448, 7, 1, "", "downsample(store)", "Returns a virtual downsampled view of a TensorStore."], [449, 2, 1, "", "dtype", "TensorStore data type representation."], [457, 7, 1, "", "experimental_collect_matching_metrics", "Collects metrics with a matching prefix."], [458, 7, 1, "", "experimental_collect_prometheus_format_metrics", "Collects metrics in prometheus exposition format. See: https://prometheus.io/docs/instrumenting/exposition_formats/"], [459, 7, 1, "", "experimental_push_metrics_to_prometheus", "Publishes metrics to the prometheus pushgateway. See: https://github.com/prometheus/pushgateway"], [460, 8, 1, "", "float16", "IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."], [461, 8, 1, "", "float32", "IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."], [462, 8, 1, "", "float64", "IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."], [463, 8, 1, "", "float8_e4m3b11fnuz", "8-bit floating-point data type."], [464, 8, 1, "", "float8_e4m3fn", "8-bit floating-point data type."], [465, 8, 1, "", "float8_e4m3fnuz", "8-bit floating-point data type."], [466, 8, 1, "", "float8_e5m2", "8-bit floating-point data type."], [467, 8, 1, "", "float8_e5m2fnuz", "8-bit floating-point data type."], [468, 8, 1, "", "inf", "Special constant equal to 2^{62}-1 that indicates an unbounded index domain."], [469, 8, 1, "", "int16", "16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."], [470, 8, 1, "", "int32", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."], [471, 8, 1, "", "int4", "4-bit signed two's-complement integer data type, internally stored as its 8-bit signed integer equivalent (i.e. sign-extended). Corresponds to jax.numpy.int4."], [472, 8, 1, "", "int64", "32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."], [473, 8, 1, "", "int8", "8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."], [474, 8, 1, "", "json", "JSON data type.  Corresponds to an arbitrary Python JSON value."], [475, 8, 1, "", "newaxis", "Alias for None used in indexing expressions to specify a new singleton dimension."], [480, 7, 1, "", "open", "Opens or creates a TensorStore from a Spec."], [481, 7, 1, "", "overlay", "Virtually overlays a sequence of TensorStore layers within a common domain."], [482, 7, 1, "", "stack", "Virtually stacks a sequence of TensorStore layers along a new dimension."], [483, 8, 1, "", "string", "Variable-length byte string data type.  Corresponds to the Python python:bytes type."], [484, 8, 1, "", "uint16", "16-bit unsigned integer.  Corresponds to numpy.uint16."], [485, 8, 1, "", "uint32", "32-bit unsigned integer.  Corresponds to numpy.uint32."], [486, 8, 1, "", "uint64", "64-bit unsigned integer data type.  Corresponds to numpy.uint64."], [487, 8, 1, "", "uint8", "8-bit unsigned integer.  Corresponds to numpy.uint8."], [488, 8, 1, "", "ustring", "Variable-length Unicode string data type.  Corresponds to the Python python:str type."], [489, 7, 1, "", "virtual_chunked", "Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]], "tensorstore.Batch": [[34, 3, 1, "", "__init__", "Creates a new batch."], [35, 3, 1, "", "submit", "Submits the batch."]], "tensorstore.ChunkLayout": [[37, 2, 1, "", "Grid", "Describes a regular grid layout for write/read/codec chunks."], [51, 3, 1, "", "__eq__", "Compares two chunk layouts for equality."], [52, 3, 1, "", "__init__(components)", "Constructs from component parts."], [53, 3, 1, "", "__init__(json)", "Constructs from the JSON representation."], [54, 5, 1, "", "codec_chunk", "Chunk grid used by the codec."], [55, 5, 1, "", "grid_origin", "Hard constraints on the grid origin."], [56, 5, 1, "", "grid_origin_soft_constraint", "Soft constraints on the grid origin."], [57, 5, 1, "", "inner_order", "Permutation specifying the element storage order within the innermost chunks."], [58, 5, 1, "", "inner_order_soft_constraint", "Permutation specifying soft constraint on the element storage order."], [59, 5, 1, "", "ndim", "Alias for rank."], [60, 5, 1, "", "rank", "Number of dimensions in the index space."], [61, 5, 1, "", "read_chunk", "Chunk grid for efficient reads."], [62, 5, 1, "", "read_chunk_template", "Chunk offset and shape for efficient reads."], [63, 3, 1, "", "to_json", "Converts to the JSON representation."], [64, 3, 1, "", "update", "Adds additional constraints."], [65, 5, 1, "", "write_chunk", "Chunk grid for efficient writes."], [66, 5, 1, "", "write_chunk_template", "Chunk offset and shape for efficient writes."]], "tensorstore.ChunkLayout.Grid": [[38, 3, 1, "", "__eq__", "Compares two chunk grids for equality."], [39, 3, 1, "", "__init__(components)", "Constructs a chunk grid."], [40, 3, 1, "", "__init__(json)", "Constructs from the JSON representation."], [41, 5, 1, "", "aspect_ratio", "Chunk shape aspect ratio."], [42, 5, 1, "", "aspect_ratio_soft_constraint", "Soft constraints on chunk shape aspect ratio."], [43, 5, 1, "", "elements", "Target number of elements per chunk."], [44, 5, 1, "", "elements_soft_constraint", "Soft constraint on target number of elements per chunk."], [45, 5, 1, "", "ndim", "Alias for rank."], [46, 5, 1, "", "rank", "Number of dimensions, or None if unspecified."], [47, 5, 1, "", "shape", "Hard constraints on chunk shape."], [48, 5, 1, "", "shape_soft_constraint", "Soft constraints on chunk shape."], [49, 3, 1, "", "to_json", "Converts to the JSON representation."], [50, 3, 1, "", "update", "Adds additional constraints."]], "tensorstore.ChunkLayout.Grid.__init__(components)": [[39, 4, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio."], [39, 4, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio_soft_constraint."], [39, 4, 2, "p-elements", "elements", "Target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements."], [39, 4, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements_soft_constraint."], [39, 4, 2, "p-grid", "grid", "Other grid constraints to merge in.  Hard and soft constraints in grid are retained as hard and soft constraints, respectively."], [39, 4, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [39, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [39, 4, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape."], [39, 4, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape_soft_constraint."]], "tensorstore.ChunkLayout.Grid.update": [[50, 4, 2, "p-aspect_ratio", "aspect_ratio", "Aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio."], [50, 4, 2, "p-aspect_ratio_soft_constraint", "aspect_ratio_soft_constraint", "Soft constraints on the aspect ratio for each dimension.  Corresponds to ChunkLayout/Grid.aspect_ratio_soft_constraint."], [50, 4, 2, "p-elements", "elements", "Target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements."], [50, 4, 2, "p-elements_soft_constraint", "elements_soft_constraint", "Soft constraint on the target number of elements per chunk.  Corresponds to ChunkLayout/Grid.elements_soft_constraint."], [50, 4, 2, "p-grid", "grid", "Other grid constraints to merge in.  Hard and soft constraints in grid are retained as hard and soft constraints, respectively."], [50, 4, 2, "p-grid_soft_constraint", "grid_soft_constraint", "Other grid constraints to merge in as soft constraints."], [50, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [50, 4, 2, "p-shape", "shape", "Hard constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape."], [50, 4, 2, "p-shape_soft_constraint", "shape_soft_constraint", "Soft constraints on the chunk size for each dimension.  Corresponds to ChunkLayout/Grid.shape_soft_constraint."]], "tensorstore.ChunkLayout.__init__(components)": [[52, 4, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks.  Corresponds to the JSON ChunkLayout.chunk member.  The shape and elements constraints apply only to write and read chunks, while the aspect_ratio constraints apply to write, read, and codec chunks."], [52, 4, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio, read_chunk_aspect_ratio, and codec_chunk_aspect_ratio."], [52, 4, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the aspect_ratio_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio_soft_constraint, read_chunk_aspect_ratio_soft_constraint, and codec_chunk_aspect_ratio_soft_constraint."], [52, 4, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements and read_chunk_elements."], [52, 4, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements_soft_constraint and read_chunk_elements_soft_constraint."], [52, 4, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape and read_chunk_shape."], [52, 4, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape_soft_constraint and read_chunk_shape_soft_constraint."], [52, 4, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks.  Corresponds to the JSON ChunkLayout.codec_chunk member."], [52, 4, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.codec_chunk."], [52, 4, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [52, 4, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [52, 4, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid.  Corresponds to the JSON ChunkLayout.grid_origin_soft_constraint member."], [52, 4, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member.  This must be a permutation of [0, 1, ..., rank-1].  Lexicographic order (i.e. C order/row-major order) is specified as [0, 1, ..., rank-1], while colexicographic order (i.e. Fortran order/column-major order) is specified as [rank-1, ..., 1, 0]."], [52, 4, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  Corresponds to the JSON ChunkLayout.inner_order_soft_constraint member.  If inner_order is also specified, it takes precedence."], [52, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [52, 4, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks.  Corresponds to the JSON ChunkLayout.read_chunk member."], [52, 4, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.read_chunk."], [52, 4, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.read_chunk."], [52, 4, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks.  Corresponds to the JSON elements member of ChunkLayout.read_chunk."], [52, 4, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.read_chunk."], [52, 4, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.read_chunk."], [52, 4, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.read_chunk."], [52, 4, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks.  Corresponds to the JSON ChunkLayout.write_chunk member."], [52, 4, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.write_chunk."], [52, 4, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.write_chunk."], [52, 4, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks.  Corresponds to the JSON elements member of ChunkLayout.write_chunk."], [52, 4, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.write_chunk."], [52, 4, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape.  Corresponds to the JSON shape member of ChunkLayout.write_chunk."], [52, 4, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.write_chunk."]], "tensorstore.ChunkLayout.update": [[64, 4, 2, "p-chunk", "chunk", "Common constraints on write, read, and codec chunks.  Corresponds to the JSON ChunkLayout.chunk member.  The shape and elements constraints apply only to write and read chunks, while the aspect_ratio constraints apply to write, read, and codec chunks."], [64, 4, 2, "p-chunk_aspect_ratio", "chunk_aspect_ratio", "Hard constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio, read_chunk_aspect_ratio, and codec_chunk_aspect_ratio."], [64, 4, 2, "p-chunk_aspect_ratio_soft_constraint", "chunk_aspect_ratio_soft_constraint", "Soft constraints on the write, read, and codec chunk aspect ratio.  Corresponds to the aspect_ratio_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying write_chunk_aspect_ratio_soft_constraint, read_chunk_aspect_ratio_soft_constraint, and codec_chunk_aspect_ratio_soft_constraint."], [64, 4, 2, "p-chunk_elements", "chunk_elements", "Hard constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements and read_chunk_elements."], [64, 4, 2, "p-chunk_elements_soft_constraint", "chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write and read chunks. Corresponds to the JSON elements_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_elements_soft_constraint and read_chunk_elements_soft_constraint."], [64, 4, 2, "p-chunk_shape", "chunk_shape", "Hard constraints on both the write and read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape and read_chunk_shape."], [64, 4, 2, "p-chunk_shape_soft_constraint", "chunk_shape_soft_constraint", "Soft constraints on both the write and read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.chunk.  Equivalent to specifying both write_chunk_shape_soft_constraint and read_chunk_shape_soft_constraint."], [64, 4, 2, "p-codec_chunk", "codec_chunk", "Constraints on codec chunks.  Corresponds to the JSON ChunkLayout.codec_chunk member."], [64, 4, 2, "p-codec_chunk_aspect_ratio", "codec_chunk_aspect_ratio", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-codec_chunk_aspect_ratio_soft_constraint", "codec_chunk_aspect_ratio_soft_constraint", "Soft constraints on the codec chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-codec_chunk_elements", "codec_chunk_elements", "Hard constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-codec_chunk_elements_soft_constraint", "codec_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for codec chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-codec_chunk_shape", "codec_chunk_shape", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-codec_chunk_shape_soft_constraint", "codec_chunk_shape_soft_constraint", "Soft constraints on the codec chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.codec_chunk."], [64, 4, 2, "p-finalize", "finalize", "Validates and converts the layout into a precise chunk layout."], [64, 4, 2, "p-grid_origin", "grid_origin", "Hard constraints on the origin of the chunk grid. Corresponds to the JSON ChunkLayout.grid_origin member."], [64, 4, 2, "p-grid_origin_soft_constraint", "grid_origin_soft_constraint", "Soft constraints on the origin of the chunk grid.  Corresponds to the JSON ChunkLayout.grid_origin_soft_constraint member."], [64, 4, 2, "p-inner_order", "inner_order", "Permutation specifying the element storage order within the innermost chunks. Corresponds to the JSON ChunkLayout.inner_order member.  This must be a permutation of [0, 1, ..., rank-1].  Lexicographic order (i.e. C order/row-major order) is specified as [0, 1, ..., rank-1], while colexicographic order (i.e. Fortran order/column-major order) is specified as [rank-1, ..., 1, 0]."], [64, 4, 2, "p-inner_order_soft_constraint", "inner_order_soft_constraint", "Specifies a preferred value for inner_order rather than a hard constraint.  Corresponds to the JSON ChunkLayout.inner_order_soft_constraint member.  If inner_order is also specified, it takes precedence."], [64, 4, 2, "p-rank", "rank", "Specifies the number of dimensions."], [64, 4, 2, "p-read_chunk", "read_chunk", "Constraints on read chunks.  Corresponds to the JSON ChunkLayout.read_chunk member."], [64, 4, 2, "p-read_chunk_aspect_ratio", "read_chunk_aspect_ratio", "Hard constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.read_chunk."], [64, 4, 2, "p-read_chunk_aspect_ratio_soft_constraint", "read_chunk_aspect_ratio_soft_constraint", "Soft constraints on the read chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.read_chunk."], [64, 4, 2, "p-read_chunk_elements", "read_chunk_elements", "Hard constraints on the target number of elements for read chunks.  Corresponds to the JSON elements member of ChunkLayout.read_chunk."], [64, 4, 2, "p-read_chunk_elements_soft_constraint", "read_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for read chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.read_chunk."], [64, 4, 2, "p-read_chunk_shape", "read_chunk_shape", "Hard constraints on the read chunk shape.  Corresponds to the JSON shape member of ChunkLayout.read_chunk."], [64, 4, 2, "p-read_chunk_shape_soft_constraint", "read_chunk_shape_soft_constraint", "Soft constraints on the read chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.read_chunk."], [64, 4, 2, "p-write_chunk", "write_chunk", "Constraints on write chunks.  Corresponds to the JSON ChunkLayout.write_chunk member."], [64, 4, 2, "p-write_chunk_aspect_ratio", "write_chunk_aspect_ratio", "Hard constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio member of ChunkLayout.write_chunk."], [64, 4, 2, "p-write_chunk_aspect_ratio_soft_constraint", "write_chunk_aspect_ratio_soft_constraint", "Soft constraints on the write chunk aspect ratio.  Corresponds to the JSON aspect_ratio_soft_constraint member of ChunkLayout.write_chunk."], [64, 4, 2, "p-write_chunk_elements", "write_chunk_elements", "Hard constraints on the target number of elements for write chunks.  Corresponds to the JSON elements member of ChunkLayout.write_chunk."], [64, 4, 2, "p-write_chunk_elements_soft_constraint", "write_chunk_elements_soft_constraint", "Soft constraints on the target number of elements for write chunks.  Corresponds to the JSON elements_soft_constraint member of ChunkLayout.write_chunk."], [64, 4, 2, "p-write_chunk_shape", "write_chunk_shape", "Hard constraints on the write chunk shape.  Corresponds to the JSON shape member of ChunkLayout.write_chunk."], [64, 4, 2, "p-write_chunk_shape_soft_constraint", "write_chunk_shape_soft_constraint", "Soft constraints on the write chunk shape.  Corresponds to the JSON shape_soft_constraint member of ChunkLayout.write_chunk."]], "tensorstore.CodecSpec": [[68, 3, 1, "", "__init__", "Constructs from the JSON representation."], [69, 3, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.Context": [[71, 2, 1, "", "Resource", "Handle to a context resource."], [73, 2, 1, "", "Spec", "Parsed representation of a JSON Context specification."], [76, 3, 1, "", "__getitem__", "Creates or retrieves the context resource for the given key."], [77, 3, 1, "", "__init__(default)", "Constructs a default context."], [78, 3, 1, "", "__init__(json)", "Constructs a context from its JSON representation."], [79, 3, 1, "", "__init__(spec)", "Constructs a context from a parsed spec."], [80, 5, 1, "", "parent", "Parent context from which this context inherits."], [81, 5, 1, "", "spec", "Spec from which this context was constructed."]], "tensorstore.Context.Resource": [[72, 3, 1, "", "to_json", "Returns the JSON representation of the context resource."]], "tensorstore.Context.Spec": [[74, 3, 1, "", "__init__", "Creates a context specification from its JSON representation."], [75, 3, 1, "", "to_json", "Returns the JSON representation."]], "tensorstore.Context.Spec.to_json": [[75, 4, 2, "p-include_defaults", "include_defaults", "Indicates whether to include members even if they are equal to the default value."]], "tensorstore.Context.__getitem__": [[76, 4, 2, "p-key", "key", "Resource key, of the form '<resource-type>' or <resource-type>#<id>."]], "tensorstore.Context.__init__(json)": [[78, 4, 2, "p-json", "json", "JSON representation of the context."], [78, 4, 2, "p-parent", "parent", "Parent context from which to inherit.  Defaults to a new default context as returned by tensorstore.Context()."]], "tensorstore.Context.__init__(spec)": [[79, 4, 2, "p-parent", "parent", "Parent context from which to inherit.  Defaults to a new default context as returned by tensorstore.Context()."], [79, 4, 2, "p-spec", "spec", "Parsed context spec."]], "tensorstore.Dim": [[83, 3, 1, "", "__contains__(dim)", "Checks if the interval contains another interval."], [84, 3, 1, "", "__contains__(index)", "Checks if the interval contains a given index."], [85, 3, 1, "", "__eq__", "Compares for equality with another interval."], [86, 3, 1, "", "__init__(exclusive_max)", "Constructs a half-open interval [inclusive_min, exclusive_max)."], [87, 3, 1, "", "__init__(inclusive_max)", "Constructs a closed interval [inclusive_min, inclusive_max]."], [88, 3, 1, "", "__init__(size)", "Constructs a sized interval [inclusive_min, inclusive_min+size)."], [89, 3, 1, "", "__init__(unbounded)", "Constructs an unbounded interval (-inf, +inf)."], [90, 3, 1, "", "__iter__", "Enables iteration over the indices contained in the interval."], [91, 3, 1, "", "__len__", "Size of the interval, equivalent to size."], [92, 3, 1, "", "__repr__", "Returns the string representation as a Python expression."], [93, 3, 1, "", "__str__", "Returns the string representation of the interval."], [94, 5, 1, "", "empty", "Returns True if size is zero."], [95, 5, 1, "", "exclusive_max", "Exclusive upper bound of the interval."], [96, 5, 1, "", "exclusive_min", "Exclusive lower bound of the interval."], [97, 5, 1, "", "finite", "Indicates if the interval is finite."], [98, 3, 1, "", "hull", "Hull with another Dim."], [99, 5, 1, "", "implicit_lower", "Indicates if the lower bound is implicit/resizeable."], [100, 5, 1, "", "implicit_upper", "Indicates if the upper bound is implicit/resizeable."], [101, 5, 1, "", "inclusive_max", "Inclusive upper bound of the interval."], [102, 5, 1, "", "inclusive_min", "Inclusive lower bound of the interval."], [103, 3, 1, "", "intersect", "Intersect with another Dim."], [104, 5, 1, "", "label", "Dimension label, or the empty string to indicate an unlabeled dimension."], [105, 5, 1, "", "size", "Size of the interval."]], "tensorstore.Dim.__init__(exclusive_max)": [[86, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound."], [86, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit.  Defaults to False if inclusive_min is specified, otherwise True."], [86, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if exclusive_max is specified, otherwise True."], [86, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [86, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(inclusive_max)": [[87, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit.  Defaults to False if inclusive_min is specified, otherwise True."], [87, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if exclusive_max is specified, otherwise True."], [87, 4, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bound."], [87, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound."], [87, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.__init__(size)": [[88, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [88, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit.  Defaults to False if size is specified, otherwise True."], [88, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound.  Defaults to 0."], [88, 4, 2, "p-label", "label", "Dimension label."], [88, 4, 2, "p-size", "size", "Size of the interval."]], "tensorstore.Dim.__init__(unbounded)": [[89, 4, 2, "p-implicit_lower", "implicit_lower", "Indicates whether the lower bound is implicit."], [89, 4, 2, "p-implicit_upper", "implicit_upper", "Indicates whether the upper bound is implicit."], [89, 4, 2, "p-label", "label", "Dimension label."]], "tensorstore.Dim.hull": [[98, 4, 2, "p-other", "other", "Object to hull with."]], "tensorstore.Dim.intersect": [[103, 4, 2, "p-other", "other", "Object to intersect with."]], "tensorstore.DimExpression": [[107, 3, 1, "", "__getitem__", "Applies a NumPy-style indexing operation with default index array semantics."], [108, 5, 1, "", "diagonal", "Extracts the diagonal of the selected dimensions."], [109, 3, 1, "", "label", "Sets (or changes) the labels of the selected dimensions."], [110, 3, 1, "", "mark_bounds_implicit", "Marks the lower/upper bounds of the selected dimensions as implicit/explicit."], [111, 3, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [112, 3, 1, "", "stride", "Strides the domains of the selected input dimensions by the specified amounts."], [113, 3, 1, "", "translate_backward_by", "Translates (shifts) the domains of the selected input dimensions backward by the specified offsets, without affecting the output range."], [114, 3, 1, "", "translate_by", "Translates (shifts) the domains of the selected input dimensions by the specified offsets, without affecting the output range."], [115, 3, 1, "", "translate_to", "Translates the domains of the selected input dimensions to the specified origins without affecting the output range."], [116, 3, 1, "", "transpose", "Transposes the selected dimensions to the specified target indices."], [117, 3, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.DimExpression.label": [[109, 4, 2, "p-labels", "labels", "Dimension labels for each selected dimension."]], "tensorstore.DimExpression.mark_bounds_implicit": [[110, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds.  Must be one of:"]], "tensorstore.DimExpression.stride": [[112, 4, 2, "p-strides", "strides", "Strides for each selected dimension.  May also be a scalar, e.g. 2, in which case the same stride value is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying a stride of 1) leaves that dimension unchanged.  Specify a stride of 0 is not valid."]], "tensorstore.DimExpression.translate_backward_by": [[113, 4, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.DimExpression.translate_by": [[114, 4, 2, "p-offsets", "offsets", "The offsets for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all selected dimensions.  Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.DimExpression.translate_to": [[115, 4, 2, "p-origins", "origins", "The new origins for each of the selected dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all selected dimensions.  If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.DimExpression.transpose": [[116, 4, 2, "p-target", "target", "Target dimension indices for the selected dimensions.  All dimensions must be specified by index.  Labels are not permitted.  If the dimension selection has k > 1 dimensions, a single non-negative index i is equivalent to i:i+k; a single negative index -i is equivalent to -i-k:-i."]], "tensorstore.Future": [[119, 3, 1, "", "__new__", "Converts a FutureLike object to a Future."], [120, 3, 1, "", "add_done_callback", "Registers a callback to be invoked upon completion of the asynchronous operation."], [121, 3, 1, "", "cancel", "Requests cancellation of the asynchronous operation."], [122, 3, 1, "", "cancelled", "Queries whether the asynchronous operation has been cancelled."], [123, 3, 1, "", "done", "Queries whether the asynchronous operation has completed or been cancelled."], [124, 3, 1, "", "exception", "Blocks until asynchronous operation completes, and returns the error if any."], [125, 3, 1, "", "force", "Ensures the asynchronous operation begins executing."], [126, 3, 1, "", "remove_done_callback", "Unregisters a previously-registered callback."], [127, 3, 1, "", "result", "Blocks until the asynchronous operation completes, and returns the result."]], "tensorstore.Future.__new__": [[119, 4, 2, "p-future", "future", "Specifies the immediate or asynchronous result."], [119, 4, 2, "p-loop", "loop", "Event loop on which to run future if it is a coroutine.  If not specified (or None is specified), defaults to the loop returned by asyncio.get_running_loop.  If loop is not specified and there is no running event loop, it is an error for future to be a coroutine."]], "tensorstore.Future.add_done_callback": [[120, 4, 2, "p-callback", "callback", "Callback to invoke with self when this future becomes ready."]], "tensorstore.Future.exception": [[124, 4, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [124, 4, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.Future.result": [[127, 4, 2, "p-deadline", "deadline", "Deadline in seconds since the Unix epoch."], [127, 4, 2, "p-timeout", "timeout", "Maximum number of seconds to block."]], "tensorstore.IndexDomain": [[130, 5, 1, "", "T", "View with the dimension order reversed (transposed)."], [131, 3, 1, "", "__getitem__(domain)", "Slices this domain by another domain."], [132, 3, 1, "", "__getitem__(expr)", "Transforms the domain by a dimension expression."], [133, 3, 1, "", "__getitem__(identifier)", "Returns the single dimension specified by identifier."], [134, 3, 1, "", "__getitem__(selection)", "Returns a new domain with a subset of the dimensions."], [135, 3, 1, "", "__getitem__(transform)", "Transforms the domain using an explicit index transform."], [136, 3, 1, "", "__init__(components)", "Constructs an index domain from component vectors."], [137, 3, 1, "", "__init__(dimensions)", "Constructs an index domain from a :py:class`.Dim` sequence."], [138, 3, 1, "", "__init__(json)", "Constructs an index domain from its JSON representation."], [139, 3, 1, "", "__len__", "Returns the number of dimensions (rank)."], [140, 3, 1, "", "__repr__", "Returns the string representation."], [141, 5, 1, "", "exclusive_max", "Exclusive upper bound of the domain."], [142, 3, 1, "", "hull", "Computes the hull (minimum containing box) with another domain."], [143, 5, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each dimension is implicit or explicit."], [144, 5, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each dimension is implicit or explicit."], [145, 5, 1, "", "inclusive_max", "Inclusive upper bound of the domain."], [146, 5, 1, "", "inclusive_min", "Inclusive lower bound of the domain, alias of origin."], [147, 5, 1, "", "index_exp", "Equivalent NumPy-compatible index expression."], [148, 3, 1, "", "intersect", "Intersects with another domain."], [149, 3, 1, "", "label", "Returns a new view with the dimension labels changed."], [150, 5, 1, "", "labels", "Dimension labels for each dimension."], [151, 3, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [152, 5, 1, "", "ndim", "Alias for rank."], [153, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [154, 5, 1, "", "rank", "Number of dimensions in the index space."], [155, 5, 1, "", "shape", "Shape of the domain."], [156, 5, 1, "", "size", "Total number of elements in the domain."], [157, 3, 1, "", "to_json", "Returns the JSON representation."], [158, 3, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [159, 3, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [160, 3, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [161, 3, 1, "", "transpose", "Returns a view with a transposed domain."]], "tensorstore.IndexDomain.__getitem__(expr)": [[132, 4, 2, "p-expr", "expr", "Dimension expression to apply."]], "tensorstore.IndexDomain.__getitem__(identifier)": [[133, 4, 2, "p-identifier", "identifier", "Specifies a dimension by integer index or label.  As with python:list, a negative index specifies a dimension starting from the last dimension."]], "tensorstore.IndexDomain.__getitem__(selection)": [[134, 4, 2, "p-selection", "selection", "Specifies the dimensions to include, either by index or label.  May be any value or sequence of values convertible to a dimension selection."]], "tensorstore.IndexDomain.__getitem__(transform)": [[135, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.IndexDomain.__init__(components)": [[136, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bounds for each dimension.  At most one of exclusive_max, inclusive_max, and shape may be specified."], [136, 4, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit.  Defaults to all explicit if inclusive_min or shape is specified, otherwise defaults to all implicit."], [136, 4, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit.  Defaults to all explicit if exclusive_max, inclusive_max, or shape is specified, otherwise defaults to all implicit."], [136, 4, 2, "p-inclusive_max", "inclusive_max", "Inclusive upper bounds for each dimension."], [136, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bounds for each dimension.  If not specified, defaults to all zero if shape is specified, otherwise unbounded."], [136, 4, 2, "p-labels", "labels", "Dimension labels.  Defaults to all unlabeled."], [136, 4, 2, "p-rank", "rank", "Number of dimensions.  Only required if no other parameter is specified."], [136, 4, 2, "p-shape", "shape", "Size for each dimension."]], "tensorstore.IndexDomain.__init__(dimensions)": [[137, 4, 2, "p-dimensions", "dimensions", "Sequence of :py:class`.Dim` objects."]], "tensorstore.IndexDomain.hull": [[142, 4, 2, "p-other", "other", "Object to hull with."]], "tensorstore.IndexDomain.intersect": [[148, 4, 2, "p-other", "other", "Object to intersect with."]], "tensorstore.IndexDomain.label": [[149, 4, 2, "p-labels", "labels", "Dimension labels for each dimension."]], "tensorstore.IndexDomain.mark_bounds_implicit": [[151, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"]], "tensorstore.IndexDomain.translate_backward_by": [[158, 4, 2, "p-offsets", "offsets", "The offset for each dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.IndexDomain.translate_by": [[159, 4, 2, "p-offsets", "offsets", "The offset for each dimension.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.IndexDomain.translate_to": [[160, 4, 2, "p-origins", "origins", "The new origin for each dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all dimensions. If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.IndexDomain.transpose": [[161, 4, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view.  Dimensions may be specified either by index or label.  Specifying None is equivalent to specifying [rank-1, ..., 0], which reverses the dimension order."]], "tensorstore.IndexTransform": [[163, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [164, 3, 1, "", "__call__", "Maps an input index vector to an output index vector."], [165, 3, 1, "", "__getitem__(domain)", "Slices this index transform by another domain."], [166, 3, 1, "", "__getitem__(expr)", "Applies a dimension expression to this transform."], [167, 3, 1, "", "__getitem__(indices)", "Applies a NumPy-style indexing operation with default index array semantics."], [168, 3, 1, "", "__getitem__(transform)", "Composes this index transform with another index transform."], [169, 3, 1, "", "__init__(components)", "Constructs an index transform from component vectors."], [170, 3, 1, "", "__init__(domain)", "Constructs an index transform from a domain and output index maps."], [171, 3, 1, "", "__init__(json)", "Constructs an index transform from its JSON representation."], [172, 3, 1, "", "__repr__", "Returns the string representation."], [173, 5, 1, "", "domain", "Input domain of the index transform."], [174, 5, 1, "", "implicit_lower_bounds", "Indicates whether the lower bound of each input dimension is implicit or explicit."], [175, 5, 1, "", "implicit_upper_bounds", "Indicates whether the upper bound of each input dimension is implicit or explicit."], [176, 5, 1, "", "input_exclusive_max", "Exclusive upper bound of the input domain."], [177, 5, 1, "", "input_inclusive_max", "Inclusive upper bound of the input domain."], [178, 5, 1, "", "input_inclusive_min", "Inclusive lower bound of the input domain, alias for input_origin."], [179, 5, 1, "", "input_labels", "Dimension labels for each input dimension."], [180, 5, 1, "", "input_origin", "Inclusive lower bound of the input domain."], [181, 5, 1, "", "input_rank", "Rank of the input space."], [182, 5, 1, "", "input_shape", "Shape of the input domain."], [183, 3, 1, "", "label", "Returns a new view with the dimension labels changed."], [184, 3, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [185, 5, 1, "", "ndim", "Rank of the input space, alias for input_rank."], [186, 3, 1, "", "oindex", "Applies a NumPy-style indexing operation with outer indexing semantics."], [187, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [188, 5, 1, "", "output", "Output index maps."], [189, 5, 1, "", "output_rank", "Rank of the output space."], [190, 5, 1, "", "shape", "Shape of the domain."], [191, 5, 1, "", "size", "Total number of elements in the domain."], [192, 3, 1, "", "to_json", "Returns the JSON representation of the transform."], [193, 3, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [194, 3, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [195, 3, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [196, 3, 1, "", "transpose", "Returns a view with a transposed domain."], [197, 3, 1, "", "vindex", "Applies a NumPy-style indexing operation with vectorized indexing semantics."]], "tensorstore.IndexTransform.__call__": [[164, 4, 2, "p-indices", "indices", "Input vector of length input_rank."]], "tensorstore.IndexTransform.__init__(components)": [[169, 4, 2, "p-implicit_lower_bounds", "implicit_lower_bounds", "Indicates whether each lower bound is implicit or explicit.  Defaults to all explicit if input_inclusive_min or input_shape is specified, otherwise defaults to all implicit."], [169, 4, 2, "p-implicit_upper_bounds", "implicit_upper_bounds", "Indicates whether each upper bound is implicit or explicit.  Defaults to all explicit if input_exclusive_max, input_inclusive_max, or shape is specified, otherwise defaults to all implicit."], [169, 4, 2, "p-input_exclusive_max", "input_exclusive_max", "Exclusive upper bounds for each input dimension.  At most one of input_exclusive_max, input_inclusive_max, and input_shape may be specified."], [169, 4, 2, "p-input_inclusive_max", "input_inclusive_max", "Inclusive upper bounds for each input dimension."], [169, 4, 2, "p-input_inclusive_min", "input_inclusive_min", "Inclusive lower bounds for each input dimension.  If not specified, defaults to all zero if input_shape is specified, otherwise unbounded."], [169, 4, 2, "p-input_labels", "input_labels", "Dimension labels for each input dimension.  Defaults to all unlabeled."], [169, 4, 2, "p-input_rank", "input_rank", "Number of input dimensions.  Only required if the input rank is not otherwise specified."], [169, 4, 2, "p-input_shape", "input_shape", "Size for each input dimension."], [169, 4, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform.  If not specified, constructs an identity transform over the domain."]], "tensorstore.IndexTransform.__init__(domain)": [[170, 4, 2, "p-domain", "domain", "The domain of the index transform."], [170, 4, 2, "p-output", "output", "Sequence of output index maps, or OutputIndexMaps object from an existing transform.  If not specified, constructs an identity transform over the domain."]], "tensorstore.IndexTransform.label": [[183, 4, 2, "p-labels", "labels", "Dimension labels for each dimension."]], "tensorstore.IndexTransform.mark_bounds_implicit": [[184, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"]], "tensorstore.IndexTransform.translate_backward_by": [[193, 4, 2, "p-offsets", "offsets", "The offset for each dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.IndexTransform.translate_by": [[194, 4, 2, "p-offsets", "offsets", "The offset for each dimension.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.IndexTransform.translate_to": [[195, 4, 2, "p-origins", "origins", "The new origin for each dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all dimensions. If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.IndexTransform.transpose": [[196, 4, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view.  Dimensions may be specified either by index or label.  Specifying None is equivalent to specifying [rank-1, ..., 0], which reverses the dimension order."]], "tensorstore.KvStore": [[200, 2, 1, "", "KeyRange", "Half-open interval of byte string keys, according to lexicographical order."], [207, 2, 1, "", "ReadResult", "Specifies the result of a read operation."], [212, 2, 1, "", "Spec", "Parsed representation of a JSON key-value store specification."], [224, 2, 1, "", "TimestampedStorageGeneration", "Specifies a storage generation identifier and a timestamp."], [229, 3, 1, "", "__add__", "Returns a key-value store with the suffix appended to the path."], [230, 3, 1, "", "__delitem__", "Synchronously deletes a single key."], [231, 3, 1, "", "__getitem__", "Synchronously reads the value of a single key."], [232, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [233, 3, 1, "", "__setitem__", "Synchronously writes the value of a single key."], [234, 3, 1, "", "__truediv__", "Returns a key-value store with an additional path component joined to the path."], [235, 5, 1, "", "base", "Underlying key-value store, if this is a key-value store adapter."], [236, 3, 1, "", "copy", "Returns a copy of the key-value store."], [237, 3, 1, "", "delete_range", "Deletes a key range."], [238, 3, 1, "", "experimental_copy_range_to", "Copies a range of keys."], [239, 3, 1, "", "list", "Lists the keys in the key-value store."], [240, 3, 1, "", "open", "Opens a key-value store."], [241, 5, 1, "", "path", "Path prefix within the base key-value store."], [242, 3, 1, "", "read", "Reads the value of a single key."], [243, 3, 1, "", "spec", "Spec that may be used to re-open or re-create the key-value store."], [244, 5, 1, "", "transaction", "Transaction bound to this key-value store."], [245, 5, 1, "", "url", "URL representation of the key-value store specification."], [246, 3, 1, "", "with_transaction", "Returns a transaction-bound view of this key-value store."], [247, 3, 1, "", "write", "Writes or deletes a single key."]], "tensorstore.KvStore.KeyRange": [[201, 3, 1, "", "__eq__", "Compares with another range for equality."], [202, 3, 1, "", "__init__", "Constructs a key range from the specified half-open bounds."], [203, 3, 1, "", "copy", "Returns a copy of the range."], [204, 5, 1, "", "empty", "Indicates if the range contains no keys."], [205, 5, 1, "", "exclusive_max", "Exclusive upper bound of the range."], [206, 5, 1, "", "inclusive_min", "Inclusive lower bound of the range."]], "tensorstore.KvStore.KeyRange.__init__": [[202, 4, 2, "p-exclusive_max", "exclusive_max", "Exclusive upper bound of the range.  As a special case, an empty string indicates no upper bound."], [202, 4, 2, "p-inclusive_min", "inclusive_min", "Inclusive lower bound of the range.  In accordance with the usual lexicographical order, an empty string indicates no lower bound."]], "tensorstore.KvStore.ReadResult": [[208, 3, 1, "", "__init__", "Constructs a read result."], [209, 5, 1, "", "stamp", "Generation and timestamp associated with the value."], [210, 5, 1, "", "state", "Indicates the interpretation of value."], [211, 5, 1, "", "value", "Value associated with the key."]], "tensorstore.KvStore.Spec": [[213, 3, 1, "", "__add__", "Returns a key-value store with the suffix appended to the path."], [214, 3, 1, "", "__eq__", "Compares with another KvStore.Spec for equality based on the JSON representation."], [215, 3, 1, "", "__new__", "Constructs from the JSON representation or a URL."], [216, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [217, 3, 1, "", "__truediv__", "Returns a key-value store with an additional path component joined to the path."], [218, 5, 1, "", "base", "Underlying key-value store, if this is a key-value store adapter."], [219, 3, 1, "", "copy", "Returns a copy of the key-value store spec."], [220, 5, 1, "", "path", "Path prefix within the base key-value store."], [221, 3, 1, "", "to_json", "Converts to the JSON representation."], [222, 3, 1, "", "update", "Modifies a spec."], [223, 5, 1, "", "url", "URL representation of the key-value store specification."]], "tensorstore.KvStore.Spec.update": [[222, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [222, 4, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [222, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.TimestampedStorageGeneration": [[225, 3, 1, "", "__eq__", "Compares two timestamped storage generations for equality."], [226, 3, 1, "", "__init__", "Constructs from a storage generation and time."], [227, 5, 1, "", "generation", "Identifies a specific version of a key-value store entry."], [228, 5, 1, "", "time", "Time (seconds since Unix epoch) at which generation is valid."]], "tensorstore.KvStore.__delitem__": [[230, 4, 2, "p-key", "key", "Key to delete.  This is appended (without any separator) to the existing path, if any."]], "tensorstore.KvStore.__getitem__": [[231, 4, 2, "p-key", "key", "The key to read.  This is appended (without any separator) to the existing path, if any."]], "tensorstore.KvStore.__setitem__": [[233, 4, 2, "p-key", "key", "Key to write/delete.  This is appended (without any separator) to the existing path, if any."], [233, 4, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.KvStore.delete_range": [[237, 4, 2, "p-range", "range", "Key range to delete.  This is relative to the existing path, if any."]], "tensorstore.KvStore.experimental_copy_range_to": [[238, 4, 2, "p-source_range", "source_range", "Key range to include.  This is relative to the existing path, if any.  If not specified, all keys under path are copied."], [238, 4, 2, "p-source_staleness_bound", "source_staleness_bound", "Specifies a time in (fractional) seconds since the Unix epoch.  If specified, data that is cached internally by the kvstore implementation may be used without validation if not older than the source_staleness_bound.  Cached data older than source_staleness_bound must be validated before being returned. A value of float('inf') indicates that the result must be current as of the time the read request was made, i.e. it is equivalent to specifying a value of time.time().  A value of float('-inf') indicates that cached data may be returned without validation irrespective of its age."], [238, 4, 2, "p-target", "target", "Target key-value store."]], "tensorstore.KvStore.list": [[239, 4, 2, "p-range", "range", "If specified, restricts to the specified key range."], [239, 4, 2, "p-strip_prefix_length", "strip_prefix_length", "Strips the specified number of bytes from the start of the returned keys."]], "tensorstore.KvStore.open": [[240, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [240, 4, 2, "p-spec", "spec", "Key-value store spec to open.  May also be specified as JSON or a URL."], [240, 4, 2, "p-transaction", "transaction", "Transaction to use for read/write operations.  By default, operations are non-transactional."]], "tensorstore.KvStore.read": [[242, 4, 2, "p-batch", "batch", "Batch to use for the read operation."], [242, 4, 2, "p-if_not_equal", "if_not_equal", "If specified, the read is aborted if the generation associated with key matches if_not_equal.  An aborted read due to this condition is indicated by a ReadResult.state of 'unspecified'.  This may be useful for validating a cached value cache validation at a higher level."], [242, 4, 2, "p-key", "key", "The key to read.  This is appended (without any separator) to the existing path, if any."], [242, 4, 2, "p-staleness_bound", "staleness_bound", "Specifies a time in (fractional) seconds since the Unix epoch.  If specified, data that is cached internally by the kvstore implementation may be used without validation if not older than the staleness_bound.  Cached data older than staleness_bound must be validated before being returned.  A value of float('inf') indicates that the result must be current as of the time the read request was made, i.e. it is equivalent to specifying a value of time.time().  A value of float('-inf') indicates that cached data may be returned without validation irrespective of its age."]], "tensorstore.KvStore.spec": [[243, 4, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g. specific concurrency pools, specific cache pools)."], [243, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.KvStore.write": [[247, 4, 2, "p-if_equal", "if_equal", "If specified, indicates a conditional write operation.  The write is performed only if the existing generation associated with key matches if_equal."], [247, 4, 2, "p-key", "key", "Key to write/delete.  This is appended (without any separator) to the existing path, if any."], [247, 4, 2, "p-value", "value", "Value to store, or None to delete."]], "tensorstore.OpenMode": [[249, 3, 1, "", "__init__", "Constructs an open mode."], [250, 5, 1, "", "assume_cached_metadata", "Skip reading the metadata when opening."], [251, 5, 1, "", "assume_metadata", "Don't access the stored metadata."], [252, 5, 1, "", "create", "Allow creating a new TensorStore."], [253, 5, 1, "", "delete_existing", "Delete any existing data before creating a new array."], [254, 5, 1, "", "open", "Allow opening an existing TensorStore."]], "tensorstore.OpenMode.__init__": [[249, 4, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening."], [249, 4, 2, "p-assume_metadata", "assume_metadata", "Don't access the stored metadata."], [249, 4, 2, "p-create", "create", "Allow creating a new TensorStore."], [249, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array."], [249, 4, 2, "p-open", "open", "Allow opening an existing TensorStore."]], "tensorstore.OutputIndexMap": [[256, 3, 1, "", "__init__(constant)", "Constructs a constant map."], [257, 3, 1, "", "__init__(index_array)", "Constructs an index array map."], [258, 3, 1, "", "__init__(input_dimension)", "Constructs a single input dimension map."], [259, 5, 1, "", "index_array", ""], [260, 5, 1, "", "index_range", ""], [261, 5, 1, "", "input_dimension", ""], [262, 5, 1, "", "method", ""], [263, 5, 1, "", "offset", ""], [264, 5, 1, "", "stride", ""]], "tensorstore.OutputIndexMaps": [[266, 3, 1, "", "__getitem__", ""], [267, 3, 1, "", "__len__", "Returns the output rank."], [268, 5, 1, "", "rank", "Returns the output rank."]], "tensorstore.OutputIndexMethod": [[270, 3, 1, "", "__init__", ""], [271, 3, 1, "", "__str__", "name(self: handle) -> str"], [272, 6, 1, "", "array", ""], [273, 6, 1, "", "constant", ""], [274, 5, 1, "", "name", ""], [275, 6, 1, "", "single_input_dimension", ""], [276, 5, 1, "", "value", ""]], "tensorstore.Promise": [[278, 3, 1, "", "new", "Creates a linked promise and future pair."], [279, 3, 1, "", "set_exception", "Marks the linked future as unsuccessfully completed with the specified error."], [280, 3, 1, "", "set_result", "Marks the linked future as successfully completed with the specified result."]], "tensorstore.Schema": [[282, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [283, 3, 1, "", "__eq__", "Compares with another Schema for equality based on the JSON representation."], [284, 3, 1, "", "__getitem__(domain)", "Transforms the schema using an explicit index domain."], [285, 3, 1, "", "__getitem__(expr)", "Transforms the schema using a dimension expression."], [286, 3, 1, "", "__getitem__(indices)", "Transforms the schema using NumPy-style indexing with default index array semantics."], [287, 3, 1, "", "__getitem__(transform)", "Transforms the schema using an explicit index transform."], [288, 3, 1, "", "__init__(components)", "Constructs from component parts."], [289, 3, 1, "", "__init__(json)", "Constructs from its JSON representation."], [290, 3, 1, "", "__repr__", "Returns a string representation based on the  JSON representation."], [291, 5, 1, "", "chunk_layout", "Chunk layout constraints specified by the schema."], [292, 5, 1, "", "codec", "Codec constraints specified by the schema."], [293, 3, 1, "", "copy", "Returns a copy of the schema."], [294, 5, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [295, 5, 1, "", "domain", "Domain of the schema, or None if unspecified."], [296, 5, 1, "", "dtype", "Data type, or None if unspecified."], [297, 5, 1, "", "fill_value", "Fill value specified by the schema."], [298, 3, 1, "", "label", "Returns a new view with the dimension labels changed."], [299, 3, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [300, 5, 1, "", "ndim", "Alias for rank."], [301, 3, 1, "", "oindex", "Transforms the schema using NumPy-style indexing with outer indexing semantics."], [302, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [303, 5, 1, "", "rank", "Rank of the schema, or None if unspecified."], [304, 5, 1, "", "shape", "Shape of the domain."], [305, 5, 1, "", "size", "Total number of elements in the domain."], [306, 3, 1, "", "to_json", "Converts to the JSON representation."], [307, 3, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [308, 3, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [309, 3, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [310, 3, 1, "", "transpose", "Returns a view with a transposed domain."], [311, 3, 1, "", "update", "Adds additional constraints."], [312, 3, 1, "", "vindex", "Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Schema.__getitem__(domain)": [[284, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.Schema.__getitem__(transform)": [[287, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Schema.__init__(components)": [[288, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [288, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [288, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [288, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [288, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [288, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [288, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [288, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [288, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."]], "tensorstore.Schema.label": [[298, 4, 2, "p-labels", "labels", "Dimension labels for each dimension."]], "tensorstore.Schema.mark_bounds_implicit": [[299, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"]], "tensorstore.Schema.translate_backward_by": [[307, 4, 2, "p-offsets", "offsets", "The offset for each dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.Schema.translate_by": [[308, 4, 2, "p-offsets", "offsets", "The offset for each dimension.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.Schema.translate_to": [[309, 4, 2, "p-origins", "origins", "The new origin for each dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all dimensions. If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.Schema.transpose": [[310, 4, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view.  Dimensions may be specified either by index or label.  Specifying None is equivalent to specifying [rank-1, ..., 0], which reverses the dimension order."]], "tensorstore.Schema.update": [[311, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [311, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [311, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [311, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [311, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [311, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [311, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [311, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [311, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."]], "tensorstore.Spec": [[314, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [315, 3, 1, "", "__eq__", "Compares with another Spec for equality based on the JSON representation."], [316, 3, 1, "", "__getitem__(domain)", "Transforms the spec using an explicit index domain."], [317, 3, 1, "", "__getitem__(expr)", "Transforms the spec using a dimension expression."], [318, 3, 1, "", "__getitem__(indices)", "Transforms the spec using NumPy-style indexing with default index array semantics."], [319, 3, 1, "", "__getitem__(transform)", "Transforms the spec using an explicit index transform."], [320, 3, 1, "", "__new__", "Constructs from the JSON representation."], [321, 3, 1, "", "__repr__", "Returns a string representation based on the JSON representation."], [322, 5, 1, "", "base", "Spec of the underlying TensorStore, if this is an adapter of a single underlying TensorStore."], [323, 5, 1, "", "chunk_layout", "Effective chunk layout, including any constraints implied by driver-specific options."], [324, 5, 1, "", "codec", "Effective codec, including any constraints implied by driver-specific options."], [325, 3, 1, "", "copy", "Returns a copy of the spec."], [326, 5, 1, "", "dimension_units", "Effective physical units of each dimension of the domain, including any constraints implied by driver-specific options."], [327, 5, 1, "", "domain", "Effective index domain, including any constraints implied by driver-specific options."], [328, 5, 1, "", "dtype", "Data type, or None if unspecified."], [329, 5, 1, "", "fill_value", "Effective fill value, including any constraints implied by driver-specific options."], [330, 5, 1, "", "kvstore", "Spec of the associated key-value store used as the underlying storage."], [331, 3, 1, "", "label", "Returns a new view with the dimension labels changed."], [332, 3, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [333, 5, 1, "", "ndim", "Alias for rank."], [334, 3, 1, "", "oindex", "Transforms the spec using NumPy-style indexing with outer indexing semantics."], [335, 5, 1, "", "open_mode", "Open mode with which the driver will be opened."], [336, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [337, 5, 1, "", "rank", "Returns the rank of the domain, or None if unspecified."], [338, 5, 1, "", "schema", "Effective schema, including any constraints implied by driver-specific options."], [339, 5, 1, "", "shape", "Shape of the domain."], [340, 5, 1, "", "size", "Total number of elements in the domain."], [341, 3, 1, "", "to_json", "Converts to the JSON representation."], [342, 5, 1, "", "transform", "The index transform, or None if unspecified."], [343, 3, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [344, 3, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [345, 3, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [346, 3, 1, "", "transpose", "Returns a view with a transposed domain."], [347, 3, 1, "", "update", "Adds additional constraints or changes the open mode."], [348, 3, 1, "", "vindex", "Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.Spec.__getitem__(domain)": [[316, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.Spec.__getitem__(transform)": [[319, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.Spec.label": [[331, 4, 2, "p-labels", "labels", "Dimension labels for each dimension."]], "tensorstore.Spec.mark_bounds_implicit": [[332, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"]], "tensorstore.Spec.translate_backward_by": [[343, 4, 2, "p-offsets", "offsets", "The offset for each dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.Spec.translate_by": [[344, 4, 2, "p-offsets", "offsets", "The offset for each dimension.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.Spec.translate_to": [[345, 4, 2, "p-origins", "origins", "The new origin for each dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all dimensions. If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.Spec.transpose": [[346, 4, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view.  Dimensions may be specified either by index or label.  Specifying None is equivalent to specifying [rank-1, ..., 0], which reverses the dimension order."]], "tensorstore.Spec.update": [[347, 4, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata may still be accessed by subsequent operations that need to re-validate or modify the metadata.  Requires that open is True and delete_existing is False.  The assume_metadata option takes precedence if also specified."], [347, 4, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata need not even exist.  Operations such as resizing that modify the stored metadata are not supported.  Overrides the existing open mode.  Requires that open is True and delete_existing is False.  This option takes precedence over assume_cached_metadata if that option is also specified."], [347, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [347, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [347, 4, 2, "p-context", "context", "Bind any context resource specs using the specified shared resource context."], [347, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [347, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [347, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [347, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [347, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [347, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [347, 4, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [347, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [347, 4, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [347, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [347, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [347, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [347, 4, 2, "p-strip_context", "strip_context", "Replace any bound context resources and unbound context resource specs by default context resource specs."], [347, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.TensorStore": [[350, 2, 1, "", "StorageStatistics", "Statistics related to the storage of an array specified by a TensorStore."], [354, 5, 1, "", "T", "View with transposed domain (reversed dimension order)."], [355, 3, 1, "", "__array__", "Automatic conversion to numpy.ndarray for interoperability with NumPy."], [356, 3, 1, "", "__getitem__(domain)", "Computes a virtual view using an explicit index domain."], [357, 3, 1, "", "__getitem__(expr)", "Computes a virtual view using a dimension expression."], [358, 3, 1, "", "__getitem__(indices)", "Computes a virtual view using NumPy-style indexing with default index array semantics."], [359, 3, 1, "", "__getitem__(transform)", "Computes a virtual view using an explicit index transform."], [360, 3, 1, "", "__setitem__(domain)", "Synchronously writes using an explicit index domain."], [361, 3, 1, "", "__setitem__(expr)", "Synchronously writes using a dimension expression."], [362, 3, 1, "", "__setitem__(indices)", "Synchronously writes using NumPy-style indexing with default index array semantics."], [363, 3, 1, "", "__setitem__(transform)", "Synchronously writes using an explicit index transform."], [364, 3, 1, "", "astype", "Returns a read/write view as the specified data type."], [365, 5, 1, "", "base", "Underlying TensorStore, if this is an adapter."], [366, 5, 1, "", "chunk_layout", "Chunk layout of the TensorStore."], [367, 5, 1, "", "codec", "Data codec spec."], [368, 5, 1, "", "dimension_units", "Physical units of each dimension of the domain."], [369, 5, 1, "", "domain", "Domain of the array."], [370, 5, 1, "", "dtype", "Data type of the array."], [371, 5, 1, "", "fill_value", "Fill value for positions not yet written."], [372, 5, 1, "", "kvstore", "Associated key-value store used as the underlying storage."], [373, 3, 1, "", "label", "Returns a new view with the dimension labels changed."], [374, 3, 1, "", "mark_bounds_implicit", "Returns a new view with the lower/upper bounds changed to implicit/explicit."], [375, 5, 1, "", "mode", "Read/write mode."], [376, 5, 1, "", "ndim", "Alias for rank."], [377, 3, 1, "", "oindex", "Computes a virtual view using NumPy-style indexing with outer indexing semantics."], [379, 5, 1, "", "origin", "Inclusive lower bound of the domain."], [380, 5, 1, "", "rank", "Number of dimensions in the domain."], [381, 3, 1, "", "read", "Reads the data within the current domain."], [382, 5, 1, "", "readable", "Indicates if reading is supported."], [383, 3, 1, "", "resize", "Resizes the current domain, persistently modifying the stored representation."], [384, 3, 1, "", "resolve", "Obtains updated bounds, subject to the cache policy."], [385, 5, 1, "", "schema", "Schema of this TensorStore."], [386, 5, 1, "", "shape", "Shape of the domain."], [387, 5, 1, "", "size", "Total number of elements in the domain."], [388, 3, 1, "", "spec", "Spec that may be used to re-open or re-create the TensorStore."], [389, 3, 1, "", "storage_statistics", "Obtains statistics of the data stored for the domain."], [390, 5, 1, "", "transaction", "Associated transaction used for read/write operations."], [391, 3, 1, "", "translate_backward_by", "Returns a new view with the origin translated backward by the specified offsets."], [392, 3, 1, "", "translate_by", "Returns a new view with the origin translated by the specified offsets."], [393, 3, 1, "", "translate_to", "Returns a new view with origin translated to the specified origin."], [394, 3, 1, "", "transpose", "Returns a view with a transposed domain."], [395, 3, 1, "", "vindex", "Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."], [397, 3, 1, "", "with_transaction", "Returns a transaction-bound view of this TensorStore."], [398, 5, 1, "", "writable", "Indicates if writing is supported."], [399, 3, 1, "", "write", "Writes to the current domain."]], "tensorstore.TensorStore.StorageStatistics": [[351, 3, 1, "", "__init__", "Constructs from attribute values."], [352, 5, 1, "", "fully_stored", "py:obj:~TensorStore.domain`."], [353, 5, 1, "", "not_stored", "Indicates whether no data is stored for the specified domain."]], "tensorstore.TensorStore.__getitem__(domain)": [[356, 4, 2, "p-domain", "domain", "Index domain, must have dimension labels that can be aligned to self.domain."]], "tensorstore.TensorStore.__getitem__(transform)": [[359, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(domain)": [[360, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."], [360, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.__setitem__(indices)": [[362, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [362, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.__setitem__(transform)": [[363, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain[transform] and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."], [363, 4, 2, "p-transform", "transform", "Index transform, transform.output_rank must equal self.rank."]], "tensorstore.TensorStore.label": [[373, 4, 2, "p-labels", "labels", "Dimension labels for each dimension."]], "tensorstore.TensorStore.mark_bounds_implicit": [[374, 4, 2, "p-implicit", "implicit", "Indicates the new implicit value for the lower and upper bounds. Must be one of:"]], "tensorstore.TensorStore.oindex": [[378, 3, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with outer indexing semantics."]], "tensorstore.TensorStore.oindex.__setitem__": [[378, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [378, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.oindex[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.read": [[381, 4, 2, "p-batch", "batch", "Batch to use for the read operation."], [381, 4, 2, "p-order", "order", "Contiguous layout order of the returned array:"]], "tensorstore.TensorStore.resize": [[383, 4, 2, "p-exclusive_max", "exclusive_max", "Sequence of length self.rank() specifying the new exclusive max bounds.  A bound of None indicates no change."], [383, 4, 2, "p-expand_only", "expand_only", "Fail if any bounds would be reduced."], [383, 4, 2, "p-inclusive_min", "inclusive_min", "Sequence of length self.rank() specifying the new inclusive min bounds.  A bound of None indicates no change."], [383, 4, 2, "p-resize_metadata_only", "resize_metadata_only", "Requests that, if applicable, the resize operation affect only the metadata but not delete data chunks that are outside of the new bounds."], [383, 4, 2, "p-resize_tied_bounds", "resize_tied_bounds", "Requests that the resize be permitted even if other bounds tied to the specified bounds must also be resized.  This option should be used with caution."], [383, 4, 2, "p-shrink_only", "shrink_only", "Fail if any bounds would be increased."]], "tensorstore.TensorStore.resolve": [[384, 4, 2, "p-batch", "batch", "Batch to use for resolving the bounds."], [384, 4, 2, "p-fix_resizable_bounds", "fix_resizable_bounds", "Mark all resizable bounds as explicit."]], "tensorstore.TensorStore.spec": [[388, 4, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata may still be accessed by subsequent operations that need to re-validate or modify the metadata.  Requires that open is True and delete_existing is False.  The assume_metadata option takes precedence if also specified."], [388, 4, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata need not even exist.  Operations such as resizing that modify the stored metadata are not supported.  Overrides the existing open mode.  Requires that open is True and delete_existing is False.  This option takes precedence over assume_cached_metadata if that option is also specified."], [388, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [388, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [388, 4, 2, "p-minimal_spec", "minimal_spec", "Indicates whether to include in the returned Spec the metadata necessary to re-create the TensorStore.  By default, the returned Spec includes the full metadata, but it is skipped if minimal_spec is set to True."], [388, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [388, 4, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [388, 4, 2, "p-retain_context", "retain_context", "Retain all bound context resources (e.g. specific concurrency pools, specific cache pools)."], [388, 4, 2, "p-unbind_context", "unbind_context", "Convert any bound context resources to context resource specs that fully capture the graph of shared context resources and interdependencies."]], "tensorstore.TensorStore.storage_statistics": [[389, 4, 2, "p-query_fully_stored", "query_fully_stored", "Check whether there is data stored for all elements of the domain."], [389, 4, 2, "p-query_not_stored", "query_not_stored", "Check whether there is data stored for any element of the domain."]], "tensorstore.TensorStore.translate_backward_by": [[391, 4, 2, "p-offsets", "offsets", "The offset for each dimensions.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.TensorStore.translate_by": [[392, 4, 2, "p-offsets", "offsets", "The offset for each dimension.  May also be a scalar, e.g. 5, in which case the same offset is used for all dimensions. Specifying None for a given dimension (equivalent to specifying an offset of 0) leaves the origin of that dimension unchanged."]], "tensorstore.TensorStore.translate_to": [[393, 4, 2, "p-origins", "origins", "The new origin for each dimensions.  May also be a scalar, e.g. 5, in which case the same origin is used for all dimensions. If None is specified for a given dimension, the origin of that dimension remains unchanged."]], "tensorstore.TensorStore.transpose": [[394, 4, 2, "p-axes", "axes", "Specifies the existing dimension corresponding to each dimension of the new view.  Dimensions may be specified either by index or label.  Specifying None is equivalent to specifying [rank-1, ..., 0], which reverses the dimension order."]], "tensorstore.TensorStore.vindex": [[396, 3, 1, "", "__setitem__", "Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]], "tensorstore.TensorStore.vindex.__setitem__": [[396, 4, 2, "p-indices", "indices", "NumPy-style indexing terms."], [396, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.vindex[indices].domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.TensorStore.write": [[399, 4, 2, "p-source", "source", "Source array, broadcast-compatible with self.domain and with a data type convertible to self.dtype.  May be an existing TensorStore or any ArrayLike, including a scalar."]], "tensorstore.Transaction": [[401, 3, 1, "", "__init__", "Creates a new transaction."], [402, 3, 1, "", "abort", "Aborts the transaction."], [403, 5, 1, "", "aborted", "Indicates whether the transaction has been aborted."], [404, 5, 1, "", "atomic", "Indicates whether the transaction is atomic."], [405, 3, 1, "", "commit_async", "Asynchronously commits the transaction."], [406, 5, 1, "", "commit_started", "Indicates whether the commit of the transaction has already started."], [407, 3, 1, "", "commit_sync", "Synchronously commits the transaction."], [408, 5, 1, "", "future", "Commit result future."], [409, 5, 1, "", "open", "Indicates whether the transaction is still open."]], "tensorstore.Transaction.__init__": [[401, 4, 2, "p-atomic", "atomic", "Requires atomicity when committing."], [401, 4, 2, "p-repeatable_read", "repeatable_read", "Requires that repeated reads return the same result."]], "tensorstore.Unit": [[411, 3, 1, "", "__eq__", "Compares two units for equality."], [412, 3, 1, "", "__init__(components)", "Constructs a unit from a multiplier and base unit."], [413, 3, 1, "", "__init__(json)", "Constructs a unit from its JSON representation."], [414, 3, 1, "", "__init__(multiplier)", "Constructs a dimension-less quantity of the specified value."], [415, 3, 1, "", "__init__(pair)", "Constructs a unit from a multiplier and base unit pair."], [416, 3, 1, "", "__init__(unit)", "Constructs a unit from a string."], [417, 3, 1, "", "__mul__", "Multiplies this unit by the specified multiplier."], [418, 3, 1, "", "__truediv__", "Divides this unit by the specified divisor."], [419, 5, 1, "", "base_unit", "Base unit from which this unit is derived."], [420, 5, 1, "", "multiplier", "Multiplier for the base_unit."], [421, 3, 1, "", "to_json", "Converts to the JSON representation."]], "tensorstore.VirtualChunkedReadParameters": [[423, 5, 1, "", "if_not_equal", "Cached generation, read request can be skipped if no newer data is available."], [424, 5, 1, "", "staleness_bound", "Read may be fulfilled with cached data no older than the specified bound."]], "tensorstore.VirtualChunkedWriteParameters": [[426, 5, 1, "", "if_equal", "If non-empty, writeback should be conditioned on the existing data matching the specified generation."]], "tensorstore.WriteFutures": [[428, 3, 1, "", "add_done_callback", ""], [429, 3, 1, "", "cancel", ""], [430, 3, 1, "", "cancelled", ""], [431, 5, 1, "", "commit", ""], [432, 5, 1, "", "copy", ""], [433, 3, 1, "", "done", ""], [434, 3, 1, "", "exception", ""], [435, 3, 1, "", "remove_done_callback", ""], [436, 3, 1, "", "result", ""]], "tensorstore.array": [[437, 4, 2, "p-array", "array", "Source array."], [437, 4, 2, "p-context", "context", "Context to use."], [437, 4, 2, "p-dtype", "dtype", "Data type to which array will be converted."]], "tensorstore.concat": [[444, 4, 2, "p-axis", "axis", "Existing dimension along which to concatenate.  A negative number counts from the end.  May also be specified by a dimension label."], [444, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [444, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [444, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [444, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [444, 4, 2, "p-layers", "layers", "Sequence of layers to concatenate.  If a layer is specified as a Spec rather than a TensorStore, it must have a known domain and will be opened on-demand as needed for individual read and write operations."], [444, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [444, 4, 2, "p-read", "read", "Allow read access.  Defaults to True if neither read nor write is specified."], [444, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [444, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [444, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [444, 4, 2, "p-write", "write", "Allow write access.  Defaults to True if neither read nor write is specified."]], "tensorstore.d": [[446, 3, 1, "", "__class_getitem__", "Constructs from a sequence of dimension indices, ranges, and/or labels."]], "tensorstore.dtype": [[450, 3, 1, "", "__call__", "Construct a scalar instance of this data type"], [451, 3, 1, "", "__init__(dtype)", "Construct from an existing TensorStore or NumPy data type."], [452, 3, 1, "", "__init__(name)", "Construct by name."], [453, 5, 1, "", "name", ""], [454, 5, 1, "", "numpy_dtype", ""], [455, 3, 1, "", "to_json", ""], [456, 5, 1, "", "type", ""]], "tensorstore.experimental_collect_matching_metrics": [[457, 4, 2, "p-include_zero_metrics", "include_zero_metrics", "Indicate whether zero-valued metrics are included."], [457, 4, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to collect."]], "tensorstore.experimental_collect_prometheus_format_metrics": [[458, 4, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to collect."]], "tensorstore.experimental_push_metrics_to_prometheus": [[459, 4, 2, "p-instance", "instance", "prometheus instance identifier"], [459, 4, 2, "p-job", "job", "prometheus job name"], [459, 4, 2, "p-metric_prefix", "metric_prefix", "Prefix of the metric names to publish."], [459, 4, 2, "p-pushgateway", "pushgateway", "prometheus pushgateway url, like 'http://localhost:1234/'"]], "tensorstore.ocdbt": [[476, 2, 1, "", "DistributedCoordinatorServer", "Distributed coordinator server for the OCDBT (Optionally-Cooperative Distributed B+Tree) database."], [479, 7, 1, "", "dump", "Dumps the internal representation of an OCDBT database."]], "tensorstore.ocdbt.DistributedCoordinatorServer": [[477, 3, 1, "", "__init__", ""], [478, 5, 1, "", "port", ""]], "tensorstore.ocdbt.dump": [[479, 4, 2, "p-base", "base", "Base kvstore containing the OCDBT database."], [479, 4, 2, "p-context", "context", "Context from which the Context.cache_pool and Context.data_copy_concurrency resources will be used.  If not specified, a new default context is used."], [479, 4, 2, "p-node", "node", "Reference to the node or value to dump, of the form \"<type>:<file-id>:<offset>:<length>\" where <type> is one of \"value\", \"btreenode\", or \"versionnode\", as specified in a \"location\" field within the manifest, a B+tree node, or a version node. If not specified, the manifest is dumped."]], "tensorstore.open": [[480, 4, 2, "p-assume_cached_metadata", "assume_cached_metadata", "Skip reading the metadata when opening.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata may still be accessed by subsequent operations that need to re-validate or modify the metadata.  Requires that open is True and delete_existing is False.  The assume_metadata option takes precedence if also specified."], [480, 4, 2, "p-assume_metadata", "assume_metadata", "Neither read nor write stored metadata.  Instead, just assume any necessary metadata based on constraints in the spec, using the same defaults for any unspecified metadata as when creating a new TensorStore.  The stored metadata need not even exist.  Operations such as resizing that modify the stored metadata are not supported.  Overrides the existing open mode.  Requires that open is True and delete_existing is False.  This option takes precedence over assume_cached_metadata if that option is also specified."], [480, 4, 2, "p-batch", "batch", "Batch to use for reading any metadata required for opening."], [480, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [480, 4, 2, "p-codec", "codec", "Constrains the codec.  If there is an existing codec constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [480, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [480, 4, 2, "p-create", "create", "Allow creating a new TensorStore.  Overrides the existing open mode.  To open or create, specify create=True and open=True."], [480, 4, 2, "p-delete_existing", "delete_existing", "Delete any existing data before creating a new array.  Overrides the existing open mode.  Must be specified in conjunction with create=True."], [480, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [480, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [480, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [480, 4, 2, "p-fill_value", "fill_value", "Specifies the fill value for positions that have not been written."], [480, 4, 2, "p-kvstore", "kvstore", "Sets the associated key-value store used as the underlying storage."], [480, 4, 2, "p-open", "open", "Allow opening an existing TensorStore.  Overrides the existing open mode."], [480, 4, 2, "p-open_mode", "open_mode", "Overrides the existing open mode."], [480, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [480, 4, 2, "p-read", "read", "Allow read access.  Defaults to True if neither read nor write is specified."], [480, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [480, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [480, 4, 2, "p-spec", "spec", "TensorStore Spec to open.  May also be specified as JSON."], [480, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [480, 4, 2, "p-write", "write", "Allow write access.  Defaults to True if neither read nor write is specified."]], "tensorstore.overlay": [[481, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [481, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [481, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [481, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [481, 4, 2, "p-layers", "layers", "Sequence of layers to overlay.  Later layers take precedence.  If a layer is specified as a Spec rather than a TensorStore, it must have a known domain and will be opened on-demand as neneded for individual read and write operations."], [481, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [481, 4, 2, "p-read", "read", "Allow read access.  Defaults to True if neither read nor write is specified."], [481, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [481, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [481, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [481, 4, 2, "p-write", "write", "Allow write access.  Defaults to True if neither read nor write is specified."]], "tensorstore.stack": [[482, 4, 2, "p-axis", "axis", "New dimension along which to stack.  A negative number counts from the end."], [482, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [482, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [482, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [482, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [482, 4, 2, "p-layers", "layers", "Sequence of layers to stack.  If a layer is specified as a Spec rather than a TensorStore, it must have a known domain and will be opened on-demand as needed for individual read and write operations."], [482, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [482, 4, 2, "p-read", "read", "Allow read access.  Defaults to True if neither read nor write is specified."], [482, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [482, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [482, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [482, 4, 2, "p-write", "write", "Allow write access.  Defaults to True if neither read nor write is specified."]], "tensorstore.virtual_chunked": [[489, 4, 2, "p-chunk_layout", "chunk_layout", "Constrains the chunk layout.  If there is an existing chunk layout constraint, the constraints are merged.  If the constraints are incompatible, an error is raised."], [489, 4, 2, "p-context", "context", "Shared resource context.  Defaults to a new (unshared) context with default options, as returned by tensorstore.Context().  To share resources, such as cache pools, between multiple open TensorStores, you must specify a context."], [489, 4, 2, "p-dimension_units", "dimension_units", "Specifies the physical units of each dimension of the domain."], [489, 4, 2, "p-domain", "domain", "Constrains the domain of the TensorStore.  If there is an existing domain, the specified domain is merged with it as follows:"], [489, 4, 2, "p-dtype", "dtype", "Constrains the data type of the TensorStore.  If a data type has already been set, it is an error to specify a different data type."], [489, 4, 2, "p-loop", "loop", "Event loop on which to execute read_function and/or write_function if they are async functions.  If not specified (or None is specified), defaults to the loop returned by asyncio.get_running_loop (in the context of the call to virtual_chunked).  If loop is not specified and there is no running event loop, it is an error for read_function or write_function to return a coroutine."], [489, 4, 2, "p-rank", "rank", "Constrains the rank of the TensorStore.  If there is an index transform, the rank constraint must match the rank of the input space."], [489, 4, 2, "p-read_function", "read_function", "Callback that handles chunk read requests.  Must be specified to create a virtual view that supports reads.  To create a write-only view, leave this unspecified (as None)."], [489, 4, 2, "p-schema", "schema", "Additional schema constraints to merge with existing constraints."], [489, 4, 2, "p-shape", "shape", "Constrains the shape and origin of the TensorStore.  Equivalent to specifying a domain of ts.IndexDomain(shape=shape)."], [489, 4, 2, "p-transaction", "transaction", "Transaction to use for opening/creating, and for subsequent operations.  By default, the open is non-transactional."], [489, 4, 2, "p-write_function", "write_function", "Callback that handles chunk write requests.  Must be specified to create a virtual view that supports writes.  To create a read-only view, leave this unspecified (as None)."]]}, "objtypes": {"0": "json:schema", "1": "json:subschema", "2": "py:class", "3": "py:method", "4": "py:parameter", "5": "py:property", "6": "py:attribute", "7": "py:function", "8": "py:data", "9": "std:envvar"}, "objnames": {"0": ["json", "schema", "JSON type"], "1": ["json", "subschema", "JSON member"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "function", "Python function"], "8": ["py", "data", "Python data"], "9": ["std", "envvar", "environment variable"]}, "titleterms": {"context": 0, "framework": 0, "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 28, 30, 31, 59, 60, 62, 63, 66, 72, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 189, 192, 197, 199, 204, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 256, 257, 258, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 303, 306, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 341, 342, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 380, 381, 383, 385, 388, 389, 399, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 440, 441, 446, 468, 475, 476, 479, 480, 490, 492], "arrai": [1, 12, 13, 15, 16, 107, 480, 490], "driver": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "cast": 2, "downsampl": 3, "avif": 4, "bmp": 5, "jpeg": 6, "png": 7, "tiff": 8, "webp": 9, "singl": [10, 27], "file": [10, 21, 27], "chunk": [10, 12, 13, 14, 15, 16, 36, 492], "storag": [10, 17, 24, 27], "warn": [10, 12, 13, 15, 16, 20, 24, 33, 110, 118, 119, 120, 238, 239, 242, 347, 355, 360, 361, 362, 363, 378, 381, 384, 388, 389, 396, 399, 480, 489, 490], "note": [10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 27, 29, 62, 66, 77, 105, 108, 112, 129, 131, 132, 135, 165, 230, 231, 233, 238, 240, 242, 288, 291, 311, 323, 324, 326, 327, 329, 335, 338, 347, 399, 444, 480, 481, 482, 483, 488, 489, 490, 492], "json": [11, 13, 26, 30, 31, 493], "n5": [12, 491], "compress": [12, 13, 16, 27], "map": [12, 13, 15, 16], "tensorstor": [12, 13, 14, 15, 16, 18, 480], "schema": [12, 13, 14, 15, 16, 492], "data": [12, 13, 14, 15, 16, 27, 32, 349], "type": [12, 13, 14, 15, 16, 32, 349], "domain": [12, 13, 14, 15, 16, 19], "layout": [12, 13, 14, 15, 16, 492], "select": [12, 13, 15, 16, 490], "when": [12, 13, 15, 16, 480], "creat": [12, 13, 15, 16, 480], "new": [12, 13, 15, 16, 480], "unconstrain": [12, 13, 15, 16], "explicit": [12, 13, 15, 16], "shape": [12, 13, 15, 16], "constraint": [12, 13, 15, 16], "aspect": [12, 15], "ratio": [12, 15], "element": [12, 15], "codec": [12, 13, 14, 15, 16, 492], "fill": [12, 13, 14, 15, 16], "valu": [12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "dimens": [12, 13, 14, 16, 107, 131, 165, 490, 492], "unit": [12, 13, 14, 16, 492], "limit": [12, 13, 15, 21, 26, 29, 30, 31], "neuroglancer_precomput": 13, "specif": [13, 26, 30, 31], "unshard": 13, "raw": 13, "encod": [13, 16], "segment": 13, "shard": [13, 16], "separ": [13, 16], "read": [13, 16, 480, 491], "write": [13, 16, 21, 480, 491], "stack": 14, "python": [14, 20], "api": [14, 20, 32], "support": [14, 15, 20, 32, 489], "oper": [14, 33, 36, 37, 82, 106, 129, 199, 200, 212, 224, 281, 313, 400, 410, 445, 490], "zarr": 15, "compressor": 15, "scalar": 15, "structur": 15, "c": [15, 20], "order": 15, "fortran": 15, "zarr3": 16, "see": [16, 54, 55, 56, 57, 58, 61, 62, 65, 66, 70, 82, 107, 111, 117, 118, 129, 130, 149, 151, 158, 159, 160, 161, 162, 163, 167, 183, 184, 186, 193, 194, 195, 196, 197, 218, 230, 231, 233, 235, 242, 247, 255, 265, 269, 277, 282, 284, 285, 286, 287, 298, 299, 301, 307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 331, 332, 334, 343, 344, 345, 346, 348, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 373, 374, 377, 378, 381, 391, 392, 393, 394, 395, 396, 405, 407, 427, 444, 481, 482], "also": [16, 54, 55, 56, 57, 58, 61, 62, 65, 66, 70, 82, 107, 111, 117, 118, 129, 130, 149, 151, 158, 159, 160, 161, 162, 163, 167, 183, 184, 186, 193, 194, 195, 196, 197, 218, 230, 231, 233, 235, 242, 247, 255, 265, 269, 277, 282, 284, 285, 286, 287, 298, 299, 301, 307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 331, 332, 334, 343, 344, 345, 346, 348, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 373, 374, 377, 378, 381, 391, 392, 393, 394, 395, 396, 405, 407, 427, 444, 481, 482], "byte": 16, "checksum": 16, "kei": [16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "without": [16, 20], "environ": 17, "variabl": 17, "http": [17, 23], "request": 17, "tl": [17, 22, 23], "ca": [17, 22, 23], "certif": [17, 22, 23], "proxi": 17, "configur": [17, 27], "debug": 17, "googl": 17, "cloud": 17, "credenti": 17, "highlight": 18, "get": 18, "start": 18, "concept": [18, 27], "index": [19, 32, 107, 129, 162, 281, 313, 349, 490], "space": 19, "transform": [19, 490], "output": 19, "method": 19, "align": 19, "broadcast": 19, "build": 20, "instal": 20, "from": 20, "pypi": 20, "sourc": 20, "local": [20, 491], "checkout": 20, "ipython": 20, "shell": 20, "bazel": 20, "integr": 20, "cmake": 20, "gener": 20, "third": 20, "parti": 20, "depend": 20, "cach": [20, 23, 489], "develop": 20, "document": 20, "run": 20, "test": [20, 22], "requir": 20, "librari": 20, "store": [21, 22, 23, 25, 26, 27, 28, 29, 30, 31], "durabl": 21, "gc": 22, "authent": [22, 28], "behavior": 23, "layer": 24, "memori": 25, "neuroglancer_uint64_shard": 26, "import": [26, 30], "ocdbt": [27, 32], "format": 27, "manifest": 27, "kind": 27, "number": 27, "header": 27, "zstd": 27, "version": 27, "tree": 27, "footer": 27, "tabl": 27, "node": 27, "outer": [27, 490], "inner": 27, "leaf": 27, "entri": 27, "height": 27, "0": 27, "interior": 27, "b": 27, "s3": 28, "tsgrpc_kvstore": 29, "zarr_sharding_index": 30, "zip": 31, "refer": 32, "core": 32, "spec": [32, 493], "view": 32, "virtual": 32, "asynchron": 32, "experiment": 32, "constructor": [33, 36, 37, 67, 70, 73, 82, 118, 129, 162, 199, 200, 207, 212, 224, 248, 255, 269, 277, 281, 313, 350, 400, 410, 445, 449, 476], "class": [36, 70, 199, 492], "accessor": [36, 70, 71, 73, 82, 118, 129, 162, 199, 200, 212, 224, 248, 281, 313, 349, 400, 410], "setter": 36, "templat": 36, "comparison": [36, 37, 200, 212, 224, 281, 313, 410], "public": [37, 67, 82, 118, 207, 255, 265, 269, 277, 350, 422, 425, 427, 445, 449, 476], "member": [37, 67, 82, 118, 207, 255, 265, 269, 277, 350, 422, 425, 427, 445, 449, 476], "string": [82, 129, 162, 199, 212, 269, 281, 313], "represent": [82, 129, 162, 199, 212, 269, 281, 313], "integ": [107, 490], "interv": [107, 490], "ad": [107, 490], "singleton": [107, 490], "error": 107, "ellipsi": [107, 490], "boolean": [107, 490], "callback": 118, "interfac": 118, "block": 118, "sequenc": 129, "geometr": 129, "all": [131, 165], "unlabel": [131, 165], "fulli": [131, 165], "label": [131, 165, 490], "mix": [131, 165], "i": [199, 349], "o": [199, 349], "synchron": 199, "transact": [199, 349, 399, 489], "mutat": [212, 281, 313], "tip": 381, "non": 399, "semant": 399, "arithmet": 410, "open": 480, "an": 480, "exist": 480, "us": 480, "assume_metadata": 480, "improv": 480, "concurr": 480, "effici": 480, "skip": 480, "metadata": 480, "pickl": 489, "numpi": 490, "style": 490, "differ": 490, "compar": 490, "vector": 490, "mode": 490, "vindex": 490, "oindex": 490, "express": 490, "diagon": 490, "translate_to": 490, "translate_bi": 490, "translate_backward_bi": 490, "stride": 490, "transpos": 490, "mark_bounds_implicit": 490, "compos": 490, "construct": 490, "tutori": 491, "dataset": 491, "janelia": 491, "flyem": 491, "hemibrain": 491}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Accessors": [[71, "accessors"], [82, "accessors"], [73, "accessors"], [70, "accessors"], [129, "accessors"], [118, "accessors"], [36, "accessors"], [410, "accessors"], [400, "accessors"], [349, "accessors"], [313, "accessors"], [281, "accessors"], [248, "accessors"], [224, "accessors"], [212, "accessors"], [199, "accessors"], [200, "accessors"], [162, "accessors"]], "Example": [[81, null], [77, null], [95, null], [103, null], [72, null], [78, null], [102, null], [96, null], [101, null], [98, null], [99, null], [76, null], [80, null], [97, null], [100, null], [104, null], [135, null], [130, null], [139, null], [119, null], [105, null], [122, null], [60, null], [63, null], [62, null], [59, null], [66, null], [492, null], [492, null], [475, null], [468, null], [476, null], [441, null], [440, null], [420, null], [421, null], [413, null], [412, null], [418, null], [411, null], [415, null], [388, null], [417, null], [419, null], [385, null], [389, null], [399, null], [414, null], [416, null], [380, null], [362, null], [370, null], [359, null], [376, null], [360, null], [371, null], [372, null], [363, null], [367, null], [381, null], [364, null], [369, null], [366, null], [357, null], [365, null], [368, null], [356, null], [358, null], [361, null], [383, null], [10, null], [9, null], [4, null], [2, null], [13, null], [13, null], [13, null], [13, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [12, null], [23, null], [23, null], [23, null], [23, null], [19, null], [19, null], [19, null], [7, null], [1, null], [8, null], [28, null], [28, null], [5, null], [3, null], [3, null], [0, null], [6, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [14, null], [14, "example"], [11, null], [11, null], [318, null], [324, null], [322, null], [348, null], [342, null], [338, null], [328, null], [321, null], [329, null], [330, null], [337, null], [323, null], [347, null], [341, null], [327, null], [315, null], [320, null], [325, null], [316, null], [334, null], [333, null], [335, null], [319, null], [326, null], [317, null], [301, null], [295, null], [284, null], [297, null], [280, null], [294, null], [288, null], [303, null], [287, null], [285, null], [286, null], [296, null], [289, null], [312, null], [283, null], [290, null], [306, null], [291, null], [292, null], [293, null], [311, null], [300, null], [246, null], [258, null], [256, null], [279, null], [257, null], [247, null], [245, null], [214, null], [219, null], [217, null], [239, null], [231, null], [235, null], [218, null], [223, null], [213, null], [230, null], [216, null], [241, null], [221, null], [220, null], [222, null], [238, null], [242, null], [243, null], [233, null], [234, null], [237, null], [232, null], [229, null], [236, null], [177, null], [176, null], [179, null], [180, null], [197, null], [199, null], [185, null], [181, null], [182, null], [189, null], [186, null], [204, null], [192, null], [178, null], [175, null], [174, null], [144, null], [153, null], [156, null], [141, null], [148, null], [155, null], [152, null], [150, null], [173, null], [143, null], [167, null], [147, null], [145, null], [154, null], [146, null], [142, null], [166, null]], "Note": [[77, null], [131, null], [135, null], [129, null], [108, null], [132, null], [105, null], [112, null], [62, null], [66, null], [490, null], [490, null], [490, null], [490, null], [490, null], [490, null], [492, null], [482, null], [482, null], [483, null], [481, null], [481, null], [480, null], [480, null], [488, null], [489, null], [489, null], [489, null], [444, null], [444, null], [399, null], [21, null], [10, null], [29, null], [17, null], [13, null], [12, null], [23, null], [19, null], [19, null], [19, null], [27, null], [27, null], [27, null], [27, null], [27, null], [15, null], [15, null], [16, null], [20, null], [20, null], [20, null], [20, null], [11, null], [324, null], [338, null], [329, null], [323, null], [347, null], [327, null], [335, null], [326, null], [288, null], [291, null], [311, null], [231, null], [240, null], [230, null], [238, null], [242, null], [233, null], [165, null]], "Examples": [[89, null], [88, null], [87, null], [83, null], [82, null], [84, null], [86, null], [90, null], [114, null], [109, null], [113, null], [110, null], [133, null], [108, null], [132, null], [137, null], [111, null], [134, null], [115, null], [136, null], [107, "examples"], [112, null], [138, null], [117, null], [480, "examples"], [446, null], [355, null], [21, null], [23, null], [28, null], [25, null], [22, null], [349, null], [171, null], [169, null], [170, null], [168, null], [164, null]], "See also": [[82, null], [70, null], [130, null], [129, null], [111, null], [107, null], [107, null], [107, null], [107, null], [107, null], [107, null], [118, null], [117, null], [57, null], [54, null], [65, null], [62, null], [55, null], [61, null], [56, null], [66, null], [58, null], [482, null], [481, null], [427, null], [444, null], [394, null], [391, null], [405, null], [393, null], [395, null], [396, null], [407, null], [392, null], [378, null], [362, null], [359, null], [377, null], [360, null], [363, null], [381, null], [373, null], [357, null], [354, null], [356, null], [374, null], [350, null], [358, null], [355, null], [361, null], [16, null], [16, null], [16, null], [16, null], [16, null], [16, null], [318, null], [346, null], [348, null], [344, null], [345, null], [332, null], [316, null], [334, null], [319, null], [317, null], [331, null], [343, null], [301, null], [284, null], [308, null], [299, null], [314, null], [287, null], [285, null], [286, null], [307, null], [282, null], [312, null], [310, null], [298, null], [309, null], [265, null], [277, null], [269, null], [247, null], [255, null], [231, null], [235, null], [218, null], [230, null], [242, null], [233, null], [193, null], [197, null], [194, null], [196, null], [183, null], [186, null], [195, null], [184, null], [161, null], [149, null], [162, null], [167, null], [160, null], [151, null], [163, null], [159, null], [158, null]], "Constructors": [[82, "constructors"], [73, "constructors"], [70, "constructors"], [129, "constructors"], [118, "constructors"], [67, "constructors"], [37, "constructors"], [36, "constructors"], [476, "constructors"], [445, "constructors"], [449, "constructors"], [410, "constructors"], [400, "constructors"], [350, "constructors"], [33, "constructors"], [313, "constructors"], [281, "constructors"], [277, "constructors"], [248, "constructors"], [269, "constructors"], [255, "constructors"], [224, "constructors"], [212, "constructors"], [207, "constructors"], [199, "constructors"], [200, "constructors"], [162, "constructors"]], "Public members": [[82, "public-members"], [118, "public-members"], [67, "public-members"], [37, "public-members"], [476, "public-members"], [425, "public-members"], [427, "public-members"], [445, "public-members"], [422, "public-members"], [449, "public-members"], [350, "public-members"], [265, "public-members"], [277, "public-members"], [269, "public-members"], [255, "public-members"], [207, "public-members"]], "Operations": [[82, "operations"], [106, "operations"], [490, "operations"], [445, "operations"], [400, "operations"], [33, "operations"]], "String representation": [[82, "string-representation"], [129, "string-representation"], [313, "string-representation"], [281, "string-representation"], [269, "string-representation"], [212, "string-representation"], [199, "string-representation"], [162, "string-representation"]], "Classes": [[70, "classes"], [36, "classes"], [199, "classes"]], "Example with all unlabeled dimensions": [[131, null], [165, null]], "Example with fully labeled dimensions": [[131, null], [165, null]], "Example with mixed labeled and unlabeled dimensions": [[131, null], [165, null]], "Warning": [[120, null], [110, null], [119, null], [118, null], [490, null], [490, null], [490, null], [480, null], [480, null], [480, null], [489, null], [489, null], [388, null], [388, null], [396, null], [389, null], [399, null], [399, null], [378, null], [362, null], [360, null], [363, null], [381, null], [384, null], [355, null], [361, null], [10, null], [10, null], [13, null], [13, null], [13, null], [12, null], [12, null], [24, null], [15, null], [15, null], [15, null], [16, null], [16, null], [16, null], [16, null], [20, null], [20, null], [33, null], [33, null], [347, null], [347, null], [239, null], [238, null], [238, null], [242, null]], "Sequence accessors": [[129, "sequence-accessors"]], "Indexing": [[129, "indexing"], [490, "indexing"], [32, "indexing"], [349, "indexing"], [313, "indexing"], [281, "indexing"], [162, "indexing"]], "Geometric operations": [[129, "geometric-operations"]], "Integer indexing": [[107, "integer-indexing"], [490, "integer-indexing"]], "Interval indexing": [[107, "interval-indexing"], [490, "interval-indexing"]], "Adding singleton dimensions": [[107, "adding-singleton-dimensions"], [490, "adding-singleton-dimensions"]], "Error": [[107, null], [107, null]], "Ellipsis": [[107, "ellipsis"], [490, "ellipsis"]], "Integer array indexing": [[107, "integer-array-indexing"], [490, "integer-array-indexing"]], "Boolean array indexing": [[107, "boolean-array-indexing"], [490, "boolean-array-indexing"]], "Callback interface": [[118, "callback-interface"]], "Blocking interface": [[118, "blocking-interface"]], "Comparison operators": [[37, "comparison-operators"], [36, "comparison-operators"], [410, "comparison-operators"], [313, "comparison-operators"], [281, "comparison-operators"], [224, "comparison-operators"], [212, "comparison-operators"], [200, "comparison-operators"]], "Setters": [[36, "setters"]], "Chunk templates": [[36, "chunk-templates"]], "Index transforms": [[490, "index-transforms"]], "NumPy-style indexing": [[490, "numpy-style-indexing"]], "Differences compared to NumPy indexing": [[490, "differences-compared-to-numpy-indexing"]], "Vectorized indexing mode (vindex)": [[490, "vectorized-indexing-mode-vindex"]], "Outer indexing mode (oindex)": [[490, "outer-indexing-mode-oindex"]], "Dimension expressions": [[490, "dimension-expressions"]], "label": [[490, "label"]], "diagonal": [[490, "diagonal"]], "translate_to": [[490, "translate-to"]], "translate_by": [[490, "translate-by"]], "translate_backward_by": [[490, "translate-backward-by"]], "stride": [[490, "stride"]], "transpose": [[490, "transpose"]], "mark_bounds_implicit": [[490, "mark-bounds-implicit"]], "oindex": [[490, "oindex"]], "vindex": [[490, "vindex"]], "Composed examples": [[490, "composed-examples"]], "Dimension selections": [[490, "dimension-selections"]], "Dimension expression construction": [[490, "dimension-expression-construction"]], "NumPy-style dimension expression indexing": [[490, "numpy-style-dimension-expression-indexing"]], "JSON Spec": [[493, "json-spec"]], "Tutorial": [[491, "tutorial"]], "Reading and writing a local N5 dataset": [[491, "reading-and-writing-a-local-n5-dataset"]], "Reading the Janelia FlyEM Hemibrain dataset": [[491, "reading-the-janelia-flyem-hemibrain-dataset"]], "Schema": [[492, "schema"]], "Example\nclass: example": [[492, null], [492, null]], "Chunk layout": [[492, "chunk-layout"], [13, "chunk-layout"], [12, "chunk-layout"], [15, "chunk-layout"], [16, "chunk-layout"], [14, "chunk-layout"]], "Codec": [[492, "codec"], [13, "codec"], [12, "codec"], [15, "codec"], [16, "codec"], [14, "codec"]], "Dimension units": [[492, "dimension-units"], [12, "dimension-units"], [16, "dimension-units"], [14, "dimension-units"]], "Examples:": [[479, "examples"]], "Opening an existing TensorStore": [[480, "opening-an-existing-tensorstore"]], "Creating a new TensorStore": [[480, "creating-a-new-tensorstore"]], "Using assume_metadata for improved concurrent open efficiency": [[480, "using-assume-metadata-for-improved-concurrent-open-efficiency"]], "Example of skipping reading the metadata when opening an existing array": [[480, null]], "Example of skipping writing the metadata when creating a new array": [[480, null]], "Caching": [[489, "caching"]], "Pickle support": [[489, "pickle-support"]], "Transaction support": [[489, "transaction-support"]], "Arithmetic operators": [[410, "arithmetic-operators"]], "Non-transactional semantics": [[399, "non-transactional-semantics"]], "Transactional semantics": [[399, "transactional-semantics"]], "Tip": [[381, null], [381, null]], "API reference": [[32, "api-reference"]], "Core": [[32, "core"]], "Spec": [[32, "spec"]], "Views": [[32, "views"]], "Virtual views": [[32, "virtual-views"]], "Data types": [[32, "data-types"]], "Asynchronous support": [[32, "asynchronous-support"]], "OCDBT": [[32, "ocdbt"]], "Experimental": [[32, "experimental"]], "file Key-Value Store driver": [[21, "file-key-value-store-driver"]], "Durability of writes": [[21, "durability-of-writes"]], "Limitations": [[21, "limitations"], [30, "limitations"], [29, "limitations"], [26, "limitations"], [13, "limitations"], [12, "limitations"], [31, "limitations"], [15, "limitations"]], "zarr_sharding_indexed Key-Value Store driver": [[30, "zarr-sharding-indexed-key-value-store-driver"]], "Important": [[30, null], [26, null]], "Example JSON specifications": [[30, "example-json-specifications"], [26, "example-json-specifications"], [13, "example-json-specifications"], [31, "example-json-specifications"]], "Drivers": [[10, "drivers"], [24, "drivers"]], "Single file drivers": [[10, "single-file-drivers"]], "Chunked storage drivers": [[10, "chunked-storage-drivers"]], "webp Driver": [[9, "webp-driver"]], "avif Driver": [[4, "avif-driver"]], "tsgrpc_kvstore Key-Value Store driver": [[29, "tsgrpc-kvstore-key-value-store-driver"]], "Environment variables": [[17, "environment-variables"]], "HTTP requests": [[17, "http-requests"]], "TLS CA certificates": [[17, "tls-ca-certificates"], [23, "tls-ca-certificates"], [22, "tls-ca-certificates"]], "Proxy configuration": [[17, "proxy-configuration"]], "Debugging": [[17, "debugging"]], "Google Cloud Credentials": [[17, "google-cloud-credentials"]], "Google Cloud Storage": [[17, "google-cloud-storage"]], "cast Driver": [[2, "cast-driver"]], "neuroglancer_uint64_sharded Key-Value Store driver": [[26, "neuroglancer-uint64-sharded-key-value-store-driver"]], "neuroglancer_precomputed Driver": [[13, "neuroglancer-precomputed-driver"]], "Mapping to TensorStore Schema": [[13, "mapping-to-tensorstore-schema"], [12, "mapping-to-tensorstore-schema"], [15, "mapping-to-tensorstore-schema"], [16, "mapping-to-tensorstore-schema"]], "Example with unsharded raw encoding": [[13, null]], "Example with unsharded compressed segmentation encoding": [[13, null]], "Example with sharded raw encoding": [[13, null]], "Data type": [[13, "data-type"], [12, "data-type"], [15, "data-type"], [16, "data-type"], [14, "data-type"], [349, "data-type"]], "Domain": [[13, "domain"], [12, "domain"], [15, "domain"], [16, "domain"], [14, "domain"]], "Selection of chunk layout when creating a new array": [[13, "selection-of-chunk-layout-when-creating-a-new-array"], [12, "selection-of-chunk-layout-when-creating-a-new-array"], [15, "selection-of-chunk-layout-when-creating-a-new-array"], [16, "selection-of-chunk-layout-when-creating-a-new-array"]], "Example of unconstrained chunk layout": [[13, null], [12, null], [15, null], [16, null]], "Example of unconstrained chunk layout with compressed segmentation encoding": [[13, null]], "Example of chunk layout with separate read and write chunk constraints": [[13, null], [16, null]], "Example of chunk layout with explicit chunk shapes": [[13, null], [16, null]], "Fill value": [[13, "fill-value"], [12, "fill-value"], [15, "fill-value"], [16, "fill-value"], [14, "fill-value"]], "Dimension Units": [[13, "dimension-units"]], "n5 Driver": [[12, "n5-driver"]], "Compression": [[12, "compression"], [16, "compression"]], "Example of explicit chunk shape constraint": [[12, null], [15, null]], "Example of chunk aspect ratio constraint": [[12, null], [15, null]], "Example of chunk aspect ratio and elements constraint": [[12, null], [15, null]], "http Key-Value Store driver": [[23, "http-key-value-store-driver"]], "Cache behavior": [[23, "cache-behavior"]], "Index space": [[19, "index-space"]], "Index domain": [[19, "index-domain"]], "Index transform": [[19, "index-transform"]], "Output index methods": [[19, "output-index-methods"]], "Alignment and broadcasting": [[19, "alignment-and-broadcasting"]], "png Driver": [[7, "png-driver"]], "zip Key-Value Store driver": [[31, "zip-key-value-store-driver"]], "array Driver": [[1, "array-driver"]], "tiff Driver": [[8, "tiff-driver"]], "s3 Key-Value Store driver": [[28, "s3-key-value-store-driver"]], "Authentication": [[28, "authentication"], [22, "authentication"]], "bmp Driver": [[5, "bmp-driver"]], "downsample Driver": [[3, "downsample-driver"]], "Context framework": [[0, "context-framework"]], "ocdbt Key-Value Store driver": [[27, "ocdbt-key-value-store-driver"]], "Concepts": [[27, "concepts"], [18, "concepts"]], "Storage format": [[27, "storage-format"]], "Manifest kinds": [[27, "manifest-kinds"]], "Single file": [[27, "single-file"]], "Numbered file": [[27, "numbered-file"]], "Manifest format": [[27, "manifest-format"]], "Manifest header": [[27, "manifest-header"]], "Manifest configuration": [[27, "manifest-configuration"]], "Compression configuration": [[27, "compression-configuration"]], "Zstd compression configuration": [[27, "zstd-compression-configuration"]], "Manifest version tree": [[27, "manifest-version-tree"]], "Manifest footer": [[27, "manifest-footer"]], "Data file table format": [[27, "data-file-table-format"]], "Version tree node format": [[27, "version-tree-node-format"]], "Version tree node outer header": [[27, "version-tree-node-outer-header"]], "Version tree node inner header": [[27, "version-tree-node-inner-header"]], "Version tree leaf node entries format (height = 0)": [[27, "version-tree-leaf-node-entries-format-height-0"]], "Interior version tree node entries (height > 0)": [[27, "interior-version-tree-node-entries-height-0"]], "Version tree node footer": [[27, "version-tree-node-footer"]], "B+tree node format": [[27, "b-tree-node-format"]], "B+tree node outer header": [[27, "b-tree-node-outer-header"]], "B+tree node inner header": [[27, "b-tree-node-inner-header"]], "Leaf B+tree node format (height = 0)": [[27, "leaf-b-tree-node-format-height-0"]], "Interior B+tree node format (height > 0)": [[27, "interior-b-tree-node-format-height-0"]], "B+tree node footer": [[27, "b-tree-node-footer"]], "jpeg Driver": [[6, "jpeg-driver"]], "Key-Value Storage Layer": [[24, "key-value-storage-layer"]], "zarr Driver": [[15, "zarr-driver"]], "Compressors": [[15, "compressors"]], "Example with scalar data type": [[15, null], [15, null], [15, null]], "Example with structured data type": [[15, null], [15, null], [15, null]], "Supported data types": [[15, "id8"]], "Example with scalar data type and C order": [[15, null]], "Example with scalar data type and Fortran order": [[15, null]], "Example with structured data type and C order": [[15, null]], "Example with structured data type and Fortran order": [[15, null]], "memory Key-Value Store driver": [[25, "memory-key-value-store-driver"]], "TensorStore": [[18, "tensorstore"]], "Highlights": [[18, "highlights"]], "Getting started": [[18, "getting-started"]], "zarr3 Driver": [[16, "zarr3-driver"]], "Codecs": [[16, "codecs"]], "Array -> array codecs": [[16, "array-array-codecs"]], "Array -> bytes codecs": [[16, "array-bytes-codecs"]], "Bytes -> bytes codecs": [[16, "bytes-bytes-codecs"]], "Checksum": [[16, "checksum"]], "Chunk key encodings": [[16, "chunk-key-encodings"]], "Example without sharding": [[16, null]], "Building and Installing": [[20, "building-and-installing"]], "Python API from PyPI": [[20, "python-api-from-pypi"]], "Python API from Source": [[20, "python-api-from-source"]], "Local checkout installation": [[20, "local-checkout-installation"]], "IPython shell without installing": [[20, "ipython-shell-without-installing"]], "C++ API": [[20, "c-api"]], "Bazel integration": [[20, "bazel-integration"]], "CMake integration": [[20, "cmake-integration"]], "Supported generators": [[20, "supported-generators"]], "Third-party dependencies": [[20, "third-party-dependencies"]], "Build caching": [[20, "build-caching"]], "Development": [[20, "development"]], "Building the documentation": [[20, "building-the-documentation"]], "Running tests": [[20, "running-tests"]], "Build Requirements": [[20, "build-requirements"]], "Bazel Build Requirements": [[20, "bazel-build-requirements"]], "Required third-party libraries": [[20, "id8"]], "CMake Build Requirements": [[20, "cmake-build-requirements"]], "gcs Key-Value Store driver": [[22, "gcs-key-value-store-driver"]], "Testing": [[22, "testing"]], "stack Driver": [[14, "stack-driver"]], "Python API": [[14, "python-api"]], "Supported operations": [[14, "supported-operations"]], "Example of stack driver": [[14, null]], "TensorStore Schema": [[14, "tensorstore-schema"]], "json Driver": [[11, "json-driver"]], "I/O": [[349, "i-o"], [199, "i-o"]], "Transactions": [[349, "transactions"], [199, "transactions"]], "Mutators": [[313, "mutators"], [281, "mutators"], [212, "mutators"]], "Operators": [[212, "operators"], [199, "operators"]], "Synchronous I/O": [[199, "synchronous-i-o"]]}, "indexentries": {"rfc": [[11, "index-0"], [11, "index-1"], [23, "index-0"]], "rfc 6901": [[11, "index-0"], [11, "index-1"]], "google_application_credentials": [[17, "envvar-GOOGLE_APPLICATION_CREDENTIALS"], [22, "index-1"]], "sslkeylogfile": [[17, "envvar-SSLKEYLOGFILE"]], "tensorstore_ca_bundle": [[17, "envvar-TENSORSTORE_CA_BUNDLE"], [17, "index-0"], [17, "index-2"]], "tensorstore_ca_path": [[17, "envvar-TENSORSTORE_CA_PATH"], [17, "index-1"]], "tensorstore_curl_verbose": [[17, "envvar-TENSORSTORE_CURL_VERBOSE"]], "tensorstore_gcs_http_url": [[17, "envvar-TENSORSTORE_GCS_HTTP_URL"], [22, "index-2"]], "tensorstore_gcs_request_concurrency": [[17, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY"], [22, "index-0"]], "tensorstore_http2_max_concurrent_streams": [[17, "envvar-TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS"]], "tensorstore_system_libs": [[17, "index-3"], [20, "envvar-TENSORSTORE_SYSTEM_LIBS"], [20, "index-1"]], "tensorstore_verbose_logging": [[17, "envvar-TENSORSTORE_VERBOSE_LOGGING"]], "all_proxy": [[17, "envvar-all_proxy"], [17, "index-4"], [17, "index-5"]], "environment variable": [[17, "envvar-GOOGLE_APPLICATION_CREDENTIALS"], [17, "envvar-SSLKEYLOGFILE"], [17, "envvar-TENSORSTORE_CA_BUNDLE"], [17, "envvar-TENSORSTORE_CA_PATH"], [17, "envvar-TENSORSTORE_CURL_VERBOSE"], [17, "envvar-TENSORSTORE_GCS_HTTP_URL"], [17, "envvar-TENSORSTORE_GCS_REQUEST_CONCURRENCY"], [17, "envvar-TENSORSTORE_HTTP2_MAX_CONCURRENT_STREAMS"], [17, "envvar-TENSORSTORE_VERBOSE_LOGGING"], [17, "envvar-all_proxy"], [17, "envvar-http_proxy"], [17, "envvar-https_proxy"], [17, "envvar-no_proxy"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [17, "index-3"], [17, "index-4"], [17, "index-5"], [20, "envvar-ARCHFLAGS"], [20, "envvar-BAZELISK_HOME"], [20, "envvar-MACOSX_DEPLOYMENT_TARGET"], [20, "envvar-PYTHON_BIN_PATH"], [20, "envvar-TENSORSTORE_BAZELISK"], [20, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS"], [20, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE"], [20, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS"], [20, "envvar-TENSORSTORE_PREBUILT_DIR"], [20, "envvar-TENSORSTORE_SYSTEM_LIBS"], [20, "index-0"], [20, "index-1"], [22, "index-0"], [22, "index-1"], [22, "index-2"], [28, "envvar-AWS_ACCESS_KEY_ID"], [28, "envvar-AWS_EC2_METADATA_SERVICE_ENDPOINT"], [28, "envvar-AWS_PROFILE"], [28, "envvar-AWS_SECRET_ACCESS_KEY"], [28, "envvar-AWS_SESSION_TOKEN"], [28, "envvar-AWS_SHARED_CREDENTIALS_FILE"], [28, "envvar-TENSORSTORE_S3_REQUEST_CONCURRENCY"], [28, "index-0"], [28, "index-1"], [28, "index-2"], [28, "index-3"], [28, "index-4"], [28, "index-5"], [28, "index-6"], [28, "index-7"], [28, "index-8"]], "http_proxy": [[17, "envvar-http_proxy"]], "https_proxy": [[17, "envvar-https_proxy"]], "no_proxy": [[17, "envvar-no_proxy"]], "archflags": [[20, "envvar-ARCHFLAGS"]], "bazelisk_home": [[20, "envvar-BAZELISK_HOME"]], "macosx_deployment_target": [[20, "envvar-MACOSX_DEPLOYMENT_TARGET"]], "python_bin_path": [[20, "envvar-PYTHON_BIN_PATH"]], "tensorstore_bazelisk": [[20, "envvar-TENSORSTORE_BAZELISK"]], "tensorstore_bazel_build_options": [[20, "envvar-TENSORSTORE_BAZEL_BUILD_OPTIONS"]], "tensorstore_bazel_compilation_mode": [[20, "envvar-TENSORSTORE_BAZEL_COMPILATION_MODE"]], "tensorstore_bazel_startup_options": [[20, "envvar-TENSORSTORE_BAZEL_STARTUP_OPTIONS"], [20, "index-0"]], "tensorstore_prebuilt_dir": [[20, "envvar-TENSORSTORE_PREBUILT_DIR"]], "rfc 7230#section-3.2": [[23, "index-0"]], "aws_access_key_id": [[28, "envvar-AWS_ACCESS_KEY_ID"], [28, "index-4"]], "aws_ec2_metadata_service_endpoint": [[28, "envvar-AWS_EC2_METADATA_SERVICE_ENDPOINT"], [28, "index-3"]], "aws_profile": [[28, "envvar-AWS_PROFILE"], [28, "index-1"], [28, "index-8"]], "aws_secret_access_key": [[28, "envvar-AWS_SECRET_ACCESS_KEY"], [28, "index-5"]], "aws_session_token": [[28, "envvar-AWS_SESSION_TOKEN"], [28, "index-6"]], "aws_shared_credentials_file": [[28, "envvar-AWS_SHARED_CREDENTIALS_FILE"], [28, "index-2"], [28, "index-7"]], "tensorstore_s3_request_concurrency": [[28, "envvar-TENSORSTORE_S3_REQUEST_CONCURRENCY"], [28, "index-0"]], "pep 357": [[490, "index-0"]], "python enhancement proposals": [[490, "index-0"]]}, "docurls": ["context.html", "driver/array/index.html", "driver/cast/index.html", "driver/downsample/index.html", "driver/image/avif/index.html", "driver/image/bmp/index.html", "driver/image/jpeg/index.html", "driver/image/png/index.html", "driver/image/tiff/index.html", "driver/image/webp/index.html", "driver/index.html", "driver/json/index.html", "driver/n5/index.html", "driver/neuroglancer_precomputed/index.html", "driver/stack/index.html", "driver/zarr/index.html", "driver/zarr3/index.html", "environment.html", "index.html", "index_space.html", "installation.html", "kvstore/file/index.html", "kvstore/gcs/index.html", "kvstore/http/index.html", "kvstore/index.html", "kvstore/memory/index.html", "kvstore/neuroglancer_uint64_sharded/index.html", "kvstore/ocdbt/index.html", "kvstore/s3/index.html", "kvstore/tsgrpc/index.html", "kvstore/zarr3_sharding_indexed/index.html", "kvstore/zip/index.html", "python/api/index.html", "python/api/tensorstore.Batch.html", "python/api/tensorstore.Batch.__init__.html", "python/api/tensorstore.Batch.submit.html", "python/api/tensorstore.ChunkLayout.html", "python/api/tensorstore.ChunkLayout.Grid.html", "python/api/tensorstore.ChunkLayout.Grid.__eq__.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-components.html", "python/api/tensorstore.ChunkLayout.Grid.__init__-json.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html", "python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.elements.html", "python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.ndim.html", "python/api/tensorstore.ChunkLayout.Grid.rank.html", "python/api/tensorstore.ChunkLayout.Grid.shape.html", "python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html", "python/api/tensorstore.ChunkLayout.Grid.to_json.html", "python/api/tensorstore.ChunkLayout.Grid.update.html", "python/api/tensorstore.ChunkLayout.__eq__.html", "python/api/tensorstore.ChunkLayout.__init__-components.html", "python/api/tensorstore.ChunkLayout.__init__-json.html", "python/api/tensorstore.ChunkLayout.codec_chunk.html", "python/api/tensorstore.ChunkLayout.grid_origin.html", "python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html", "python/api/tensorstore.ChunkLayout.inner_order.html", "python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html", "python/api/tensorstore.ChunkLayout.ndim.html", "python/api/tensorstore.ChunkLayout.rank.html", "python/api/tensorstore.ChunkLayout.read_chunk.html", "python/api/tensorstore.ChunkLayout.read_chunk_template.html", "python/api/tensorstore.ChunkLayout.to_json.html", "python/api/tensorstore.ChunkLayout.update.html", "python/api/tensorstore.ChunkLayout.write_chunk.html", "python/api/tensorstore.ChunkLayout.write_chunk_template.html", "python/api/tensorstore.CodecSpec.html", "python/api/tensorstore.CodecSpec.__init__.html", "python/api/tensorstore.CodecSpec.to_json.html", "python/api/tensorstore.Context.html", "python/api/tensorstore.Context.Resource.html", "python/api/tensorstore.Context.Resource.to_json.html", "python/api/tensorstore.Context.Spec.html", "python/api/tensorstore.Context.Spec.__init__.html", "python/api/tensorstore.Context.Spec.to_json.html", "python/api/tensorstore.Context.__getitem__.html", "python/api/tensorstore.Context.__init__-default.html", "python/api/tensorstore.Context.__init__-json.html", "python/api/tensorstore.Context.__init__-spec.html", "python/api/tensorstore.Context.parent.html", "python/api/tensorstore.Context.spec.html", "python/api/tensorstore.Dim.html", "python/api/tensorstore.Dim.__contains__-dim.html", "python/api/tensorstore.Dim.__contains__-index.html", "python/api/tensorstore.Dim.__eq__.html", "python/api/tensorstore.Dim.__init__-exclusive_max.html", "python/api/tensorstore.Dim.__init__-inclusive_max.html", "python/api/tensorstore.Dim.__init__-size.html", "python/api/tensorstore.Dim.__init__-unbounded.html", "python/api/tensorstore.Dim.__iter__.html", "python/api/tensorstore.Dim.__len__.html", "python/api/tensorstore.Dim.__repr__.html", "python/api/tensorstore.Dim.__str__.html", "python/api/tensorstore.Dim.empty.html", "python/api/tensorstore.Dim.exclusive_max.html", "python/api/tensorstore.Dim.exclusive_min.html", "python/api/tensorstore.Dim.finite.html", "python/api/tensorstore.Dim.hull.html", "python/api/tensorstore.Dim.implicit_lower.html", "python/api/tensorstore.Dim.implicit_upper.html", "python/api/tensorstore.Dim.inclusive_max.html", "python/api/tensorstore.Dim.inclusive_min.html", "python/api/tensorstore.Dim.intersect.html", "python/api/tensorstore.Dim.label.html", "python/api/tensorstore.Dim.size.html", "python/api/tensorstore.DimExpression.html", "python/api/tensorstore.DimExpression.__getitem__.html", "python/api/tensorstore.DimExpression.diagonal.html", "python/api/tensorstore.DimExpression.label.html", "python/api/tensorstore.DimExpression.mark_bounds_implicit.html", "python/api/tensorstore.DimExpression.oindex.html", "python/api/tensorstore.DimExpression.stride.html", "python/api/tensorstore.DimExpression.translate_backward_by.html", "python/api/tensorstore.DimExpression.translate_by.html", "python/api/tensorstore.DimExpression.translate_to.html", "python/api/tensorstore.DimExpression.transpose.html", "python/api/tensorstore.DimExpression.vindex.html", "python/api/tensorstore.Future.html", "python/api/tensorstore.Future.__new__.html", "python/api/tensorstore.Future.add_done_callback.html", "python/api/tensorstore.Future.cancel.html", "python/api/tensorstore.Future.cancelled.html", "python/api/tensorstore.Future.done.html", "python/api/tensorstore.Future.exception.html", "python/api/tensorstore.Future.force.html", "python/api/tensorstore.Future.remove_done_callback.html", "python/api/tensorstore.Future.result.html", "python/api/tensorstore.FutureLike.html", "python/api/tensorstore.IndexDomain.html", "python/api/tensorstore.IndexDomain.T.html", "python/api/tensorstore.IndexDomain.__getitem__-domain.html", "python/api/tensorstore.IndexDomain.__getitem__-expr.html", "python/api/tensorstore.IndexDomain.__getitem__-identifier.html", "python/api/tensorstore.IndexDomain.__getitem__-selection.html", "python/api/tensorstore.IndexDomain.__getitem__-transform.html", "python/api/tensorstore.IndexDomain.__init__-components.html", "python/api/tensorstore.IndexDomain.__init__-dimensions.html", "python/api/tensorstore.IndexDomain.__init__-json.html", "python/api/tensorstore.IndexDomain.__len__.html", "python/api/tensorstore.IndexDomain.__repr__.html", "python/api/tensorstore.IndexDomain.exclusive_max.html", "python/api/tensorstore.IndexDomain.hull.html", "python/api/tensorstore.IndexDomain.implicit_lower_bounds.html", "python/api/tensorstore.IndexDomain.implicit_upper_bounds.html", "python/api/tensorstore.IndexDomain.inclusive_max.html", "python/api/tensorstore.IndexDomain.inclusive_min.html", "python/api/tensorstore.IndexDomain.index_exp.html", "python/api/tensorstore.IndexDomain.intersect.html", "python/api/tensorstore.IndexDomain.label.html", "python/api/tensorstore.IndexDomain.labels.html", "python/api/tensorstore.IndexDomain.mark_bounds_implicit.html", "python/api/tensorstore.IndexDomain.ndim.html", "python/api/tensorstore.IndexDomain.origin.html", "python/api/tensorstore.IndexDomain.rank.html", "python/api/tensorstore.IndexDomain.shape.html", "python/api/tensorstore.IndexDomain.size.html", "python/api/tensorstore.IndexDomain.to_json.html", "python/api/tensorstore.IndexDomain.translate_backward_by.html", "python/api/tensorstore.IndexDomain.translate_by.html", "python/api/tensorstore.IndexDomain.translate_to.html", "python/api/tensorstore.IndexDomain.transpose.html", "python/api/tensorstore.IndexTransform.html", "python/api/tensorstore.IndexTransform.T.html", "python/api/tensorstore.IndexTransform.__call__.html", "python/api/tensorstore.IndexTransform.__getitem__-domain.html", "python/api/tensorstore.IndexTransform.__getitem__-expr.html", "python/api/tensorstore.IndexTransform.__getitem__-indices.html", "python/api/tensorstore.IndexTransform.__getitem__-transform.html", "python/api/tensorstore.IndexTransform.__init__-components.html", "python/api/tensorstore.IndexTransform.__init__-domain.html", "python/api/tensorstore.IndexTransform.__init__-json.html", "python/api/tensorstore.IndexTransform.__repr__.html", "python/api/tensorstore.IndexTransform.domain.html", "python/api/tensorstore.IndexTransform.implicit_lower_bounds.html", "python/api/tensorstore.IndexTransform.implicit_upper_bounds.html", "python/api/tensorstore.IndexTransform.input_exclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_max.html", "python/api/tensorstore.IndexTransform.input_inclusive_min.html", "python/api/tensorstore.IndexTransform.input_labels.html", "python/api/tensorstore.IndexTransform.input_origin.html", "python/api/tensorstore.IndexTransform.input_rank.html", "python/api/tensorstore.IndexTransform.input_shape.html", "python/api/tensorstore.IndexTransform.label.html", "python/api/tensorstore.IndexTransform.mark_bounds_implicit.html", "python/api/tensorstore.IndexTransform.ndim.html", "python/api/tensorstore.IndexTransform.oindex.html", "python/api/tensorstore.IndexTransform.origin.html", "python/api/tensorstore.IndexTransform.output.html", "python/api/tensorstore.IndexTransform.output_rank.html", "python/api/tensorstore.IndexTransform.shape.html", "python/api/tensorstore.IndexTransform.size.html", "python/api/tensorstore.IndexTransform.to_json.html", "python/api/tensorstore.IndexTransform.translate_backward_by.html", "python/api/tensorstore.IndexTransform.translate_by.html", "python/api/tensorstore.IndexTransform.translate_to.html", "python/api/tensorstore.IndexTransform.transpose.html", "python/api/tensorstore.IndexTransform.vindex.html", "python/api/tensorstore.Indexable.html", "python/api/tensorstore.KvStore.html", "python/api/tensorstore.KvStore.KeyRange.html", "python/api/tensorstore.KvStore.KeyRange.__eq__.html", "python/api/tensorstore.KvStore.KeyRange.__init__.html", "python/api/tensorstore.KvStore.KeyRange.copy.html", "python/api/tensorstore.KvStore.KeyRange.empty.html", "python/api/tensorstore.KvStore.KeyRange.exclusive_max.html", "python/api/tensorstore.KvStore.KeyRange.inclusive_min.html", "python/api/tensorstore.KvStore.ReadResult.html", "python/api/tensorstore.KvStore.ReadResult.__init__.html", "python/api/tensorstore.KvStore.ReadResult.stamp.html", "python/api/tensorstore.KvStore.ReadResult.state.html", "python/api/tensorstore.KvStore.ReadResult.value.html", "python/api/tensorstore.KvStore.Spec.html", "python/api/tensorstore.KvStore.Spec.__add__.html", "python/api/tensorstore.KvStore.Spec.__eq__.html", "python/api/tensorstore.KvStore.Spec.__new__.html", "python/api/tensorstore.KvStore.Spec.__repr__.html", "python/api/tensorstore.KvStore.Spec.__truediv__.html", "python/api/tensorstore.KvStore.Spec.base.html", "python/api/tensorstore.KvStore.Spec.copy.html", "python/api/tensorstore.KvStore.Spec.path.html", "python/api/tensorstore.KvStore.Spec.to_json.html", "python/api/tensorstore.KvStore.Spec.update.html", "python/api/tensorstore.KvStore.Spec.url.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html", "python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html", "python/api/tensorstore.KvStore.__add__.html", "python/api/tensorstore.KvStore.__delitem__.html", "python/api/tensorstore.KvStore.__getitem__.html", "python/api/tensorstore.KvStore.__repr__.html", "python/api/tensorstore.KvStore.__setitem__.html", "python/api/tensorstore.KvStore.__truediv__.html", "python/api/tensorstore.KvStore.base.html", "python/api/tensorstore.KvStore.copy.html", "python/api/tensorstore.KvStore.delete_range.html", "python/api/tensorstore.KvStore.experimental_copy_range_to.html", "python/api/tensorstore.KvStore.list.html", "python/api/tensorstore.KvStore.open.html", "python/api/tensorstore.KvStore.path.html", "python/api/tensorstore.KvStore.read.html", "python/api/tensorstore.KvStore.spec.html", "python/api/tensorstore.KvStore.transaction.html", "python/api/tensorstore.KvStore.url.html", "python/api/tensorstore.KvStore.with_transaction.html", "python/api/tensorstore.KvStore.write.html", "python/api/tensorstore.OpenMode.html", "python/api/tensorstore.OpenMode.__init__.html", "python/api/tensorstore.OpenMode.assume_cached_metadata.html", "python/api/tensorstore.OpenMode.assume_metadata.html", "python/api/tensorstore.OpenMode.create.html", "python/api/tensorstore.OpenMode.delete_existing.html", "python/api/tensorstore.OpenMode.open.html", "python/api/tensorstore.OutputIndexMap.html", "python/api/tensorstore.OutputIndexMap.__init__-constant.html", "python/api/tensorstore.OutputIndexMap.__init__-index_array.html", "python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html", "python/api/tensorstore.OutputIndexMap.index_array.html", "python/api/tensorstore.OutputIndexMap.index_range.html", "python/api/tensorstore.OutputIndexMap.input_dimension.html", "python/api/tensorstore.OutputIndexMap.method.html", "python/api/tensorstore.OutputIndexMap.offset.html", "python/api/tensorstore.OutputIndexMap.stride.html", "python/api/tensorstore.OutputIndexMaps.html", "python/api/tensorstore.OutputIndexMaps.__getitem__.html", "python/api/tensorstore.OutputIndexMaps.__len__.html", "python/api/tensorstore.OutputIndexMaps.rank.html", "python/api/tensorstore.OutputIndexMethod.html", "python/api/tensorstore.OutputIndexMethod.__init__.html", "python/api/tensorstore.OutputIndexMethod.__str__.html", "python/api/tensorstore.OutputIndexMethod.array.html", "python/api/tensorstore.OutputIndexMethod.constant.html", "python/api/tensorstore.OutputIndexMethod.name.html", "python/api/tensorstore.OutputIndexMethod.single_input_dimension.html", "python/api/tensorstore.OutputIndexMethod.value.html", "python/api/tensorstore.Promise.html", "python/api/tensorstore.Promise.new.html", "python/api/tensorstore.Promise.set_exception.html", "python/api/tensorstore.Promise.set_result.html", "python/api/tensorstore.Schema.html", "python/api/tensorstore.Schema.T.html", "python/api/tensorstore.Schema.__eq__.html", "python/api/tensorstore.Schema.__getitem__-domain.html", "python/api/tensorstore.Schema.__getitem__-expr.html", "python/api/tensorstore.Schema.__getitem__-indices.html", "python/api/tensorstore.Schema.__getitem__-transform.html", "python/api/tensorstore.Schema.__init__-components.html", "python/api/tensorstore.Schema.__init__-json.html", "python/api/tensorstore.Schema.__repr__.html", "python/api/tensorstore.Schema.chunk_layout.html", "python/api/tensorstore.Schema.codec.html", "python/api/tensorstore.Schema.copy.html", "python/api/tensorstore.Schema.dimension_units.html", "python/api/tensorstore.Schema.domain.html", "python/api/tensorstore.Schema.dtype.html", "python/api/tensorstore.Schema.fill_value.html", "python/api/tensorstore.Schema.label.html", "python/api/tensorstore.Schema.mark_bounds_implicit.html", "python/api/tensorstore.Schema.ndim.html", "python/api/tensorstore.Schema.oindex.html", "python/api/tensorstore.Schema.origin.html", "python/api/tensorstore.Schema.rank.html", "python/api/tensorstore.Schema.shape.html", "python/api/tensorstore.Schema.size.html", "python/api/tensorstore.Schema.to_json.html", "python/api/tensorstore.Schema.translate_backward_by.html", "python/api/tensorstore.Schema.translate_by.html", "python/api/tensorstore.Schema.translate_to.html", "python/api/tensorstore.Schema.transpose.html", "python/api/tensorstore.Schema.update.html", "python/api/tensorstore.Schema.vindex.html", "python/api/tensorstore.Spec.html", "python/api/tensorstore.Spec.T.html", "python/api/tensorstore.Spec.__eq__.html", "python/api/tensorstore.Spec.__getitem__-domain.html", "python/api/tensorstore.Spec.__getitem__-expr.html", "python/api/tensorstore.Spec.__getitem__-indices.html", "python/api/tensorstore.Spec.__getitem__-transform.html", "python/api/tensorstore.Spec.__new__.html", "python/api/tensorstore.Spec.__repr__.html", "python/api/tensorstore.Spec.base.html", "python/api/tensorstore.Spec.chunk_layout.html", "python/api/tensorstore.Spec.codec.html", "python/api/tensorstore.Spec.copy.html", "python/api/tensorstore.Spec.dimension_units.html", "python/api/tensorstore.Spec.domain.html", "python/api/tensorstore.Spec.dtype.html", "python/api/tensorstore.Spec.fill_value.html", "python/api/tensorstore.Spec.kvstore.html", "python/api/tensorstore.Spec.label.html", "python/api/tensorstore.Spec.mark_bounds_implicit.html", "python/api/tensorstore.Spec.ndim.html", "python/api/tensorstore.Spec.oindex.html", "python/api/tensorstore.Spec.open_mode.html", "python/api/tensorstore.Spec.origin.html", "python/api/tensorstore.Spec.rank.html", "python/api/tensorstore.Spec.schema.html", "python/api/tensorstore.Spec.shape.html", "python/api/tensorstore.Spec.size.html", "python/api/tensorstore.Spec.to_json.html", "python/api/tensorstore.Spec.transform.html", "python/api/tensorstore.Spec.translate_backward_by.html", "python/api/tensorstore.Spec.translate_by.html", "python/api/tensorstore.Spec.translate_to.html", "python/api/tensorstore.Spec.transpose.html", "python/api/tensorstore.Spec.update.html", "python/api/tensorstore.Spec.vindex.html", "python/api/tensorstore.TensorStore.html", "python/api/tensorstore.TensorStore.StorageStatistics.html", "python/api/tensorstore.TensorStore.StorageStatistics.__init__.html", "python/api/tensorstore.TensorStore.StorageStatistics.fully_stored.html", "python/api/tensorstore.TensorStore.StorageStatistics.not_stored.html", "python/api/tensorstore.TensorStore.T.html", "python/api/tensorstore.TensorStore.__array__.html", "python/api/tensorstore.TensorStore.__getitem__-domain.html", "python/api/tensorstore.TensorStore.__getitem__-expr.html", "python/api/tensorstore.TensorStore.__getitem__-indices.html", "python/api/tensorstore.TensorStore.__getitem__-transform.html", "python/api/tensorstore.TensorStore.__setitem__-domain.html", "python/api/tensorstore.TensorStore.__setitem__-expr.html", "python/api/tensorstore.TensorStore.__setitem__-indices.html", "python/api/tensorstore.TensorStore.__setitem__-transform.html", "python/api/tensorstore.TensorStore.astype.html", "python/api/tensorstore.TensorStore.base.html", "python/api/tensorstore.TensorStore.chunk_layout.html", "python/api/tensorstore.TensorStore.codec.html", "python/api/tensorstore.TensorStore.dimension_units.html", "python/api/tensorstore.TensorStore.domain.html", "python/api/tensorstore.TensorStore.dtype.html", "python/api/tensorstore.TensorStore.fill_value.html", "python/api/tensorstore.TensorStore.kvstore.html", "python/api/tensorstore.TensorStore.label.html", "python/api/tensorstore.TensorStore.mark_bounds_implicit.html", "python/api/tensorstore.TensorStore.mode.html", "python/api/tensorstore.TensorStore.ndim.html", "python/api/tensorstore.TensorStore.oindex.html", "python/api/tensorstore.TensorStore.oindex.__setitem__.html", "python/api/tensorstore.TensorStore.origin.html", "python/api/tensorstore.TensorStore.rank.html", "python/api/tensorstore.TensorStore.read.html", "python/api/tensorstore.TensorStore.readable.html", "python/api/tensorstore.TensorStore.resize.html", "python/api/tensorstore.TensorStore.resolve.html", "python/api/tensorstore.TensorStore.schema.html", "python/api/tensorstore.TensorStore.shape.html", "python/api/tensorstore.TensorStore.size.html", "python/api/tensorstore.TensorStore.spec.html", "python/api/tensorstore.TensorStore.storage_statistics.html", "python/api/tensorstore.TensorStore.transaction.html", "python/api/tensorstore.TensorStore.translate_backward_by.html", "python/api/tensorstore.TensorStore.translate_by.html", "python/api/tensorstore.TensorStore.translate_to.html", "python/api/tensorstore.TensorStore.transpose.html", "python/api/tensorstore.TensorStore.vindex.html", "python/api/tensorstore.TensorStore.vindex.__setitem__.html", "python/api/tensorstore.TensorStore.with_transaction.html", "python/api/tensorstore.TensorStore.writable.html", "python/api/tensorstore.TensorStore.write.html", "python/api/tensorstore.Transaction.html", "python/api/tensorstore.Transaction.__init__.html", "python/api/tensorstore.Transaction.abort.html", "python/api/tensorstore.Transaction.aborted.html", "python/api/tensorstore.Transaction.atomic.html", "python/api/tensorstore.Transaction.commit_async.html", "python/api/tensorstore.Transaction.commit_started.html", "python/api/tensorstore.Transaction.commit_sync.html", "python/api/tensorstore.Transaction.future.html", "python/api/tensorstore.Transaction.open.html", "python/api/tensorstore.Unit.html", "python/api/tensorstore.Unit.__eq__.html", "python/api/tensorstore.Unit.__init__-components.html", "python/api/tensorstore.Unit.__init__-json.html", "python/api/tensorstore.Unit.__init__-multiplier.html", "python/api/tensorstore.Unit.__init__-pair.html", "python/api/tensorstore.Unit.__init__-unit.html", "python/api/tensorstore.Unit.__mul__.html", "python/api/tensorstore.Unit.__truediv__.html", "python/api/tensorstore.Unit.base_unit.html", "python/api/tensorstore.Unit.multiplier.html", "python/api/tensorstore.Unit.to_json.html", "python/api/tensorstore.VirtualChunkedReadParameters.html", "python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html", "python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html", "python/api/tensorstore.VirtualChunkedWriteParameters.html", "python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html", "python/api/tensorstore.WriteFutures.html", "python/api/tensorstore.WriteFutures.add_done_callback.html", "python/api/tensorstore.WriteFutures.cancel.html", "python/api/tensorstore.WriteFutures.cancelled.html", "python/api/tensorstore.WriteFutures.commit.html", "python/api/tensorstore.WriteFutures.copy.html", "python/api/tensorstore.WriteFutures.done.html", "python/api/tensorstore.WriteFutures.exception.html", "python/api/tensorstore.WriteFutures.remove_done_callback.html", "python/api/tensorstore.WriteFutures.result.html", "python/api/tensorstore.array.html", "python/api/tensorstore.bfloat16.html", "python/api/tensorstore.bool.html", "python/api/tensorstore.cast-spec.html", "python/api/tensorstore.cast-store.html", "python/api/tensorstore.complex128.html", "python/api/tensorstore.complex64.html", "python/api/tensorstore.concat.html", "python/api/tensorstore.d.html", "python/api/tensorstore.d.__class_getitem__.html", "python/api/tensorstore.downsample-spec.html", "python/api/tensorstore.downsample-store.html", "python/api/tensorstore.dtype.html", "python/api/tensorstore.dtype.__call__.html", "python/api/tensorstore.dtype.__init__-dtype.html", "python/api/tensorstore.dtype.__init__-name.html", "python/api/tensorstore.dtype.name.html", "python/api/tensorstore.dtype.numpy_dtype.html", "python/api/tensorstore.dtype.to_json.html", "python/api/tensorstore.dtype.type.html", "python/api/tensorstore.experimental_collect_matching_metrics.html", "python/api/tensorstore.experimental_collect_prometheus_format_metrics.html", "python/api/tensorstore.experimental_push_metrics_to_prometheus.html", "python/api/tensorstore.float16.html", "python/api/tensorstore.float32.html", "python/api/tensorstore.float64.html", "python/api/tensorstore.float8_e4m3b11fnuz.html", "python/api/tensorstore.float8_e4m3fn.html", "python/api/tensorstore.float8_e4m3fnuz.html", "python/api/tensorstore.float8_e5m2.html", "python/api/tensorstore.float8_e5m2fnuz.html", "python/api/tensorstore.inf.html", "python/api/tensorstore.int16.html", "python/api/tensorstore.int32.html", "python/api/tensorstore.int4.html", "python/api/tensorstore.int64.html", "python/api/tensorstore.int8.html", "python/api/tensorstore.json.html", "python/api/tensorstore.newaxis.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.__init__.html", "python/api/tensorstore.ocdbt.DistributedCoordinatorServer.port.html", "python/api/tensorstore.ocdbt.dump.html", "python/api/tensorstore.open.html", "python/api/tensorstore.overlay.html", "python/api/tensorstore.stack.html", "python/api/tensorstore.string.html", "python/api/tensorstore.uint16.html", "python/api/tensorstore.uint32.html", "python/api/tensorstore.uint64.html", "python/api/tensorstore.uint8.html", "python/api/tensorstore.ustring.html", "python/api/tensorstore.virtual_chunked.html", "python/indexing.html", "python/tutorial.html", "schema.html", "spec.html"]})