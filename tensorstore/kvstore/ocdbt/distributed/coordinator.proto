// Copyright 2022 The TensorStore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC service definition for OCDBT Coordinator service.

syntax = "proto2";

// Note: This package name is unfortunately part of the gRPC service identifier
// sent over the network.
package tensorstore.internal_ocdbt.grpc_gen;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

service Coordinator {
  // Requests a lease on the specified key range.
  //
  // If there is no existing lease, the lease is assigned to the requesting
  // client.
  rpc RequestLease(LeaseRequest) returns (LeaseResponse) {}
}

message LeaseRequest {
  optional bytes key = 1;

  // Port of the requesting host on which a `Cooperator` server can be reached.
  optional int32 cooperator_port = 2;

  // Optional.  Specifies an existing lease to renew if possible.
  optional uint64 renew_lease_id = 3;

  // Optional.  Specifies a `lease_id` previously returned in a `LeaseResponse`
  // where the indicated `owner` is no longer responding.  If this `lease_id` is
  // still active, it will be terminated.
  optional uint64 uncooperative_lease_id = 4;

  optional google.protobuf.Duration lease_duration = 5;
}

message LeaseResponse {
  // Address (hostname:port) of the owner.
  optional bytes owner = 1;

  // Indicates if the requester is the owner.
  optional bool is_owner = 2;

  // Expiration time of the lease.
  optional google.protobuf.Timestamp expiration_time = 3;

  optional uint64 lease_id = 4;
}
