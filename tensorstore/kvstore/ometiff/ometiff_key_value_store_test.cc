// Copyright 2023 The TensorStore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "tensorstore/kvstore/ometiff/ometiff_key_value_store.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <fstream>
#include <numeric>
#include <vector>

#include "absl/log/globals.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "riegeli/bytes/string_reader.h"
#include "tensorstore/context.h"
#include "tensorstore/driver/ometiff/metadata.h"
#include "tensorstore/internal/intrusive_ptr.h"
#include "tensorstore/internal/json_gtest.h"
#include "tensorstore/kvstore/driver.h"
#include "tensorstore/kvstore/memory/memory_key_value_store.h"
#include "tensorstore/util/status_testutil.h"

namespace {

namespace kvstore = tensorstore::kvstore;
using ::tensorstore::MatchesJson;
using ::tensorstore::Result;
using ::tensorstore::internal_ometiff::OMETiffMetadata;
using ::tensorstore::ometiff::GetOMETiffMetadataKeyValueStore;

static constexpr unsigned char tile_data[] = {
    0x49, 0x49, 0x2a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01,
    0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x15, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x1b, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x28, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x01,
    0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x42, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x43, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x44, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x45, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7b, 0x22, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x3a, 0x20,
    0x5b, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x5d, 0x7d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x69, 0x66, 0x66,
    0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
    0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b,
    0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93,
    0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
    0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb,
    0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3,
    0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};

static constexpr unsigned char zstd_unit16_tile_data[] = {
    0x49, 0x49, 0x2a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0xc3, 0x00, 0x00, 0x06, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01,
    0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x15, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x1b, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x28, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x01,
    0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x42, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x43, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x44, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x45, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7b, 0x22, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x3a, 0x20,
    0x5b, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x5d, 0x7d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x69, 0x66, 0x66,
    0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xb5, 0x2f, 0xfd,
    0x60, 0x00, 0x01, 0xbd, 0x0a, 0x00, 0x06, 0xe0, 0x54, 0x0a, 0x10, 0xf8,
    0x6c, 0x07, 0xff, 0xff, 0x3f, 0x5a, 0x32, 0x05, 0x4f, 0x00, 0x51, 0x00,
    0x51, 0x00, 0x7b, 0xe4, 0x71, 0x47, 0x1d, 0x73, 0xc4, 0xf1, 0x46, 0x1b,
    0x6b, 0xa4, 0x71, 0x46, 0x19, 0x63, 0x84, 0xf1, 0x45, 0x17, 0x5b, 0x64,
    0x71, 0x45, 0x15, 0x53, 0x44, 0xf1, 0x44, 0x13, 0x4b, 0x24, 0x71, 0x44,
    0x11, 0x43, 0x04, 0xf1, 0x43, 0x0f, 0x3b, 0xe4, 0x70, 0x43, 0x0d, 0x33,
    0xc4, 0xf0, 0x42, 0x0b, 0x2b, 0xa4, 0x70, 0x42, 0x09, 0x23, 0x84, 0xf0,
    0x41, 0x07, 0x1b, 0x64, 0x70, 0x41, 0x05, 0x13, 0x44, 0xf0, 0x40, 0x03,
    0x0b, 0x24, 0x70, 0x40, 0x01, 0x03, 0x04, 0xf0, 0xef, 0xfb, 0xe4, 0x73,
    0x4f, 0x3d, 0xf3, 0xc4, 0xf3, 0x4e, 0x3b, 0xeb, 0xa4, 0x73, 0x4e, 0x39,
    0xe3, 0x84, 0xf3, 0x4d, 0x37, 0xdb, 0x64, 0x73, 0x4d, 0x35, 0xd3, 0x44,
    0xf3, 0x4c, 0x33, 0xcb, 0x24, 0x73, 0x4c, 0x31, 0xc3, 0x04, 0xf3, 0x4b,
    0x2f, 0xbb, 0xe4, 0x72, 0x4b, 0x2d, 0xb3, 0xc4, 0xf2, 0x4a, 0x2b, 0xab,
    0xa4, 0x72, 0x4a, 0x29, 0xa3, 0x84, 0xf2, 0x49, 0x27, 0x9b, 0x64, 0x72,
    0x49, 0x25, 0x93, 0x44, 0xf2, 0x48, 0x23, 0x8b, 0x24, 0x72, 0x48, 0x21,
    0x83, 0x04, 0xf2, 0x47, 0x1f, 0x01, 0x7b, 0xe5, 0x75, 0x57, 0x5d, 0x73,
    0xc5, 0xf5, 0x56, 0x5b, 0x6b, 0xa5, 0x75, 0x56, 0x59, 0x63, 0x85, 0xf5,
    0x55, 0x57, 0x5b, 0x65, 0x75, 0x55, 0x55, 0x53, 0x45, 0xf5, 0x54, 0x53,
    0x4b, 0x25, 0x75, 0x54, 0x51, 0x43, 0x05, 0xf5, 0x53, 0x4f, 0x3b, 0xe5,
    0x74, 0x53, 0x4d, 0x33, 0xc5, 0xf4, 0x52, 0x4b, 0x2b, 0xa5, 0x74, 0x52,
    0x49, 0x23, 0x85, 0xf4, 0x51, 0x47, 0x1b, 0x65, 0x74, 0x51, 0x45, 0x13,
    0x45, 0xf4, 0x50, 0x43, 0x0b, 0x25, 0x74, 0x50, 0x41, 0x03, 0x05, 0xf4,
    0x4f, 0x3f, 0x01, 0xfb, 0xe5, 0x77, 0x5f, 0x7d, 0xf3, 0xc5, 0xf7, 0x5e,
    0x7b, 0xeb, 0xa5, 0x77, 0x5e, 0x79, 0xe3, 0x85, 0xf7, 0x5d, 0x77, 0xdb,
    0x65, 0x77, 0x5d, 0x75, 0xd3, 0x45, 0xf7, 0x5c, 0x73, 0xcb, 0x25, 0x77,
    0x5c, 0x71, 0xc3, 0x05, 0xf7, 0x5b, 0x6f, 0xbb, 0xe5, 0x76, 0x5b, 0x6d,
    0xb3, 0xc5, 0xf6, 0x5a, 0x6b, 0xab, 0xa5, 0x76, 0x5a, 0x69, 0xa3, 0x85,
    0xf6, 0x59, 0x67, 0x9b, 0x65, 0x76, 0x59, 0x65, 0x93, 0x45, 0xf6, 0x58,
    0x63, 0x8b, 0x25, 0x76, 0x58, 0x61, 0x83, 0x05, 0xf6, 0x57, 0x5f, 0x01,
    0x00};

static constexpr unsigned char offset_strip_data[] = {
    0x49, 0x49, 0x2a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01,
    0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x11, 0x01,
    0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x15, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x01,
    0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x01,
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0x1a, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x1b, 0x01,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x28, 0x01,
    0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x01,
    0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7b, 0x22, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x3a, 0x20,
    0x5b, 0x31, 0x30, 0x2c, 0x20, 0x31, 0x35, 0x2c, 0x20, 0x31, 0x5d, 0x7d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00,
    0x6a, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x2d, 0x00, 0x2d, 0x00,
    0x2d, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x69, 0x66, 0x66,
    0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x79, 0x00, 0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
    0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b,
    0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93,
    0x94, 0x95};

// static std::string ChunkToKey(uint64_t chunk) {
//   std::string key;
//   key.resize(sizeof(uint64_t));
//   absl::big_endian::Store64(key.data(), chunk);
//   return key;
// }

Result<OMETiffMetadata> MetadataFromMemoryStore(const unsigned char* data,
                                                size_t size) {
  auto mem_store = tensorstore::GetMemoryKeyValueStore();
  TENSORSTORE_RETURN_IF_ERROR(mem_store->Write(
      "tiff",
      absl::Cord(absl::string_view(reinterpret_cast<const char*>(data), size)),
      kvstore::WriteOptions()));

  auto store = GetOMETiffMetadataKeyValueStore(mem_store, "tiff");
  TENSORSTORE_ASSIGN_OR_RETURN(auto result, store->Read("tiff").result());

  nlohmann::json raw_data =
      nlohmann::json::parse(result.value.Flatten(), nullptr, false);
  TENSORSTORE_ASSIGN_OR_RETURN(auto metadata,
                               OMETiffMetadata::FromJson(std::move(raw_data)));

  return std::move(metadata);
}

// Result<std::vector<uint8_t>> DataFromMemoryStore(const unsigned char* data,
//                                                  size_t size) {
//   auto mem_store = tensorstore::GetMemoryKeyValueStore();
//   TENSORSTORE_RETURN_IF_ERROR(mem_store->Write(
//       "tiff",
//       absl::Cord(absl::string_view(reinterpret_cast<const char*>(data),
//       size)), kvstore::WriteOptions()));

//   auto store = GetOMETiffDataKeyValueStore(mem_store, "tiff");
//   TENSORSTORE_ASSIGN_OR_RETURN(auto result,
//                                store->Read(ChunkToKey(0)).result());
//   auto view = result.value.Flatten();
//   std::vector<uint8_t> result_buffer(view.size());
//   std::copy(view.data(), view.data() + view.size(), result_buffer.data());

//   return std::move(result_buffer);
// }

TEST(OMETiffMetadataKeyValueStoreTest, StripMetadata) {
  static constexpr unsigned char data[] = {
      0x49, 0x49, 0x2a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01,
      0x02, 0x00, 0x15, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x11, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x01,
      0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x1b, 0x01,
      0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x28, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x01,
      0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x7b, 0x22, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x3a, 0x20,
      0x5b, 0x31, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x31, 0x5d, 0x7d, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x69, 0x66, 0x66, 0x66, 0x69,
      0x6c, 0x65, 0x2e, 0x70, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00};

  TENSORSTORE_ASSERT_OK_AND_ASSIGN(auto metadata,
                                   MetadataFromMemoryStore(data, sizeof(data)));
  EXPECT_EQ(metadata.rank, 2);
  EXPECT_EQ(metadata.shape, std::vector<int64_t>({1, 1}));
  EXPECT_EQ(metadata.chunk_shape, std::vector<int64_t>({1, 1}));
  EXPECT_EQ(metadata.bits_per_sample, 8);
  EXPECT_EQ(metadata.samples_per_pixel, 1);
  EXPECT_EQ(metadata.is_tiled, 0);
  EXPECT_EQ(metadata.num_chunks(), 1);
  EXPECT_EQ(metadata.chunk_info[0].offset, 256);
  EXPECT_EQ(metadata.chunk_info[0].size, sizeof(uint8_t));
  EXPECT_EQ(metadata.compressor, nullptr);
  EXPECT_EQ(metadata.dtype, tensorstore::dtype_v<uint8_t>);
}

TEST(OMETiffMetadataKeyValueStoreTest, TileMetadata) {
  static constexpr unsigned char data[] = {
      0x49, 0x49, 0x2a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01,
      0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x15, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x01,
      0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x1b, 0x01,
      0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x28, 0x01,
      0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x01,
      0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x42, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x43, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x44, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x45, 0x01,
      0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x7b, 0x22, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x3a, 0x20,
      0x5b, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x36, 0x2c, 0x20, 0x31, 0x5d, 0x7d,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x69, 0x66, 0x66,
      0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  TENSORSTORE_ASSERT_OK_AND_ASSIGN(auto metadata,
                                   MetadataFromMemoryStore(data, sizeof(data)));
  EXPECT_EQ(metadata.rank, 2);
  EXPECT_EQ(metadata.shape, std::vector<int64_t>({16, 16}));
  EXPECT_EQ(metadata.chunk_shape, std::vector<int64_t>({16, 16}));
  EXPECT_EQ(metadata.bits_per_sample, 8);
  EXPECT_EQ(metadata.samples_per_pixel, 1);
  EXPECT_EQ(metadata.is_tiled, 1);
  EXPECT_EQ(metadata.num_chunks(), 1);
  EXPECT_EQ(metadata.chunk_info[0].offset, 272);
  EXPECT_EQ(metadata.chunk_info[0].size, sizeof(uint8_t) * 16 * 16);
  EXPECT_EQ(metadata.compressor, nullptr);
  EXPECT_EQ(metadata.dtype, tensorstore::dtype_v<uint8_t>);
}

TEST(OMETiffMetadataKeyValueStoreTest, ZSTDCompressedTileData) {
  TENSORSTORE_ASSERT_OK_AND_ASSIGN(
      auto metadata, MetadataFromMemoryStore(zstd_unit16_tile_data,
                                             sizeof(zstd_unit16_tile_data)));
  EXPECT_EQ(metadata.rank, 2);
  EXPECT_EQ(metadata.shape, std::vector<int64_t>({16, 16}));
  EXPECT_EQ(metadata.chunk_shape, std::vector<int64_t>({16, 16}));
  EXPECT_EQ(metadata.bits_per_sample, 16);
  EXPECT_EQ(metadata.samples_per_pixel, 1);
  EXPECT_EQ(metadata.is_tiled, 1);
  EXPECT_EQ(metadata.num_chunks(), 1);
  EXPECT_EQ(metadata.chunk_info[0].offset, 272);
  EXPECT_THAT(metadata.compressor.ToJson().value(),
              MatchesJson({{"id", "zstd"}}));
  EXPECT_EQ(metadata.dtype, tensorstore::dtype_v<uint16_t>);
}

// TEST(OMETiffDataKeyValueStoreTest, TileData) {
//   std::vector<uint8_t> expected_data(16 * 16);
//   std::iota(expected_data.begin(), expected_data.end(), 0);

//   TENSORSTORE_ASSERT_OK_AND_ASSIGN(
//       auto data, DataFromMemoryStore(tile_data, sizeof(tile_data)));
//   EXPECT_EQ(data.size(), 16 * 16);
//   EXPECT_EQ(data, expected_data);
// }

// TEST(OMETiffDataKeyValueStoreTest, ZSTDCompressedTileData) {
//   std::vector<uint16_t> expected_data(16 * 16);
//   std::iota(expected_data.begin(), expected_data.end(), 0);

//   TENSORSTORE_ASSERT_OK_AND_ASSIGN(
//       auto data, DataFromMemoryStore(zstd_unit16_tile_data,
//                                      sizeof(zstd_unit16_tile_data)));

//   std::vector<uint16_t> converted_data(data.size() / 2);
//   std::memcpy(converted_data.data(), data.data(), data.size());

//   EXPECT_EQ(converted_data.size(), 16 * 16);
//   EXPECT_EQ(converted_data, expected_data);
// }

}  // namespace
