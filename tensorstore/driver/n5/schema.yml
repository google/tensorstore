$schema: http://json-schema.org/draft-07/schema#
$id: driver/n5
allOf:
- $ref: KeyValueStoreBackedChunkDriver
- type: object
  properties:
    driver:
      const: n5
    metadata:
      title: N5 array metadata.
      description: |
        Specifies constraints on the metdata of a dataset exactly as in the
        `attributes.json file
        <https://github.com/saalfeldlab/n5#file-system-specification-version-203-snapshot>`_,
        except that all members are optional.  When creating a new array, the
        new metadata is obtained by combining these metadata constraints with
        any `Schema` constraints.

        Arbitrary additional members may also be specified in addition to the
        ones listed here.  When creating a new array, they will be included in
        the :file:`attributes.json` file as additional N5 attributes, but will not
        be validated in any way.  When opening an existing array, all additional
        members that are specified must be present with identical values in the
        existing :file:`attributes.json` file, or the open operation will fail.
      allOf:
      - type: object
        properties:
          dimensions:
            type: array
            items:
              type: integer
              minimum: 0
            title: Dimensions of the dataset.
            description: |
              Required when creating a new array if the `Schema.domain` is not
              otherwise specified.
            examples:
            - [500, 500, 500]
          blockSize:
            type: array
            items:
              type: integer
              minimum: 1
            title: Chunk dimensions.
            description: |
              Specifies the chunk size for each dimension.  Must have the same
              length as `.dimensions`.  If not specified when creating a new
              array, the chunk dimensions are chosen automatically according to
              the `Schema.chunk_layout`.
            examples:
            - [64, 64, 64]
          dataType:
            type: string
            enum:
            - uint8
            - uint16
            - uint32
            - uint64
            - int8
            - int16
            - int32
            - int64
            - float32
            - float64
            title: Specifies the data type.
            description: |
              Required when creating a new array if `Schema.dtype` is not
              otherwise specified.
          axes:
            type: array
            items:
              type: string
            title: Specifies a label for each dimension of the dataset.
            description: |
              Optional.  If not specified when creating a new array (and also
              unspecified by the `Schema.domain`), all dimensions are unlabeled
              (equivalent to specifying an empty string for each dimension).
              Labels are specified in the same order as the `.dimensions` and
              `.blockSize` properties.  Note that this specifies the *stored*
              dimension labels.  As with any TensorStore driver, dimension
              labels may also be overridden by specifying a `.transform`.
            examples:
            - ["x", "y", "z"]
          units:
            type: array
            items:
              type: string
            title: Specifies the base physical unit for each dimension.
            description: |
              Optional.  Must have the same length as `.dimensions`.
            examples:
            - ["nm", "nm", "nm", "s"]
          resolution:
            type: array
            items:
              type: number
            title: Specifies the multiplier for the physical `.units`.
            description: |
              Optional.  Must have the same length as `.dimensions`.  If
              `.resolution` is not specified but `.units` is specified, the
              multipliers are assumed to be all :json:`1`.  Normally,
              `.resolution` should only be specified if `.units` is also
              specified; if `.resolution` is specified but `.units` is not
              specified, the `Schema.dimension_units` will be considered
              unspecified.
            examples:
            - [4, 4, 40, 0.5]
      - $ref: "#codec-properties"

definitions:
  codec-properties:
    $id: '#codec-properties'
    type: object
    properties:
      compression:
        $ref: 'driver/n5/Compression'
        title: Specifies the chunk compression method.
  codec:
    $id: 'driver/n5/Codec'
    allOf:
      - $ref: Codec
      - type: object
        properties:
          driver:
            const: "n5"
      - $ref: "#codec-properties"
  compression:
    $id: 'driver/n5/Compression'
    type: object
    description: |
      The `.type` member identifies the compression method.  The remaining
      members are specific to the compression method.
    properties:
      type:
        type: string
        description: Identifies the compressor.
    required:
    - type
  compression-raw:
    $id: 'driver/n5/Compression/raw'
    description: Chunks are encoded directly as big endian values without compression.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: raw
  compression-gzip:
    $id: 'driver/n5/Compression/gzip'
    description: |
      Specifies `zlib <https://zlib.net>`_ compression with a gzip or zlib
      header.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: gzip
        level:
          type: integer
          minimum: -1
          maximum: 9
          default: -1
          title: Specifies the zlib compression level to use.
          description: |
            Level 0 indicates no compression (fastest), while level 9 indicaets
            the best compression ratio (slowest).  The default value of :json:`-1`
            indicates to use the zlib default compression level (equal to 6).
        useZlib:
          type: boolean
          default: false
          description: If :json:`true`, use a zlib header.  Otherwise, use a gzip header.
  compression-bzip2:
    $id: 'driver/n5/Compression/bzip2'
    description: |
      Specifies `bzip2 <https://sourceware.org/bzip2/>`_ compression.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: bzip2
        blockSize:
          type: integer
          minimum: 1
          maximum: 9
          default: 9
          title: Specifies the bzip2 block size to use (in units of 100KB), which also
            determine the compression level.
  compression-xz:
    $id: 'driver/n5/Compression/xz'
    description: Specifies `xz <https://tukaani.org/xz/>`_ compression.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: xz
        preset:
          type: integer
          minimum: 0
          maximum: 9
          default: 6
          description: |
            Specifies the XZ preset level.  Preset 0 corresponds to the fastest
            compression with the worst compression ratio, while preset 9
            corresponds to the slowest compression with the best compression
            ratio.
  compression-zstd:
    $id: 'driver/n5/Compression/zstd'
    description: Specifies `zstd <https://github.com/facebook/zstd>`_ compression.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: zstd
        level:
          type: integer
          maximum: 22
          default: 0
          description: |
            Specifies the zstd compression level to use. Level 1 is the fastest compression with
            the worst compression ratio, while level 22 is the slowest compression with the best
            compression ratio. Level 0 uses the zstd default compression level (equal to 3).
            Negative values are also supported per the zstd specification.
  compression-blosc:
    $id: 'driver/n5/Compression/blosc'
    description: Specifies `Blosc <https://github.com/Blosc/c-blosc>`_ compression.
    allOf:
    - $ref: driver/n5/Compression
    - type: object
      properties:
        type:
          const: blosc
        cname:
          enum:
          - blosclz
          - lz4
          - lz4hc
          - snappy
          - zlib
          - zstd
          description: Specifies the compression method used by Blosc.
        clevel:
          type: integer
          minimum: 0
          maximum: 9
          title: Specifies the Blosc compression level to use.
          description: Higher values are slower but achieve a higher compression ratio.
        shuffle:
          oneOf:
          - const: 0
            title: No shuffle
          - const: 1
            title: Byte-wise shuffle
          - const: 2
            title: Bit-wise shuffle
      required:
      - cname
      - clevel
      - shuffle
    examples:
    - type: blosc
      cname: blosclz
      clevel: 9
      shuffle: 2

