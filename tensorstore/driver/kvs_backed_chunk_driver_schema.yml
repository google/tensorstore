$schema: http://json-schema.org/draft-07/schema#
$id: KeyValueStoreBackedChunkDriver
description: |-
  Common options supported by all chunked storage drivers.
allOf:
- $ref: TensorStore
- type: object
  properties:
    kvstore:
      oneOf:
      - $ref: KvStore
      - $ref: KvStoreUrl
      description: |-
        Specifies the underlying storage mechanism.
    path:
      type: string
      default: ''
      examples:
      - path/to/data
      deprecated: true
      title: |
        Additional path within the `KvStore` specified by
        `.kvstore`.
      description: |-
        This is joined as an additional ``"/"``-separated path component
        after any `~KvStore.path` member directly within
        `.kvstore`.  This is supported for backwards compatibility only; the
        `KvStore.path` member should be used instead.
    open:
      type: boolean
      description: |-
        Open an existing TensorStore.  If neither `.open` nor
        `.create` is specified, defaults to ``true``.
    create:
      type: boolean
      description: |-
        Create a new TensorStore.  Specify ``true`` for both `.open`
        and `.create` to permit either opening an existing TensorStore
        or creating a new TensorStore if it does not already exist.
      default: false
    delete_existing:
      type: boolean
      description: |-
        Delete any existing data at the specified path before creating
        a new TensorStore.  Requires that `.create` is
        ``true``, and that `.open` is ``false``.
      default: false
    assume_metadata:
      type: boolean
      description: |-
        Neither read nor write stored metadata.  Instead, just assume any
        necessary metadata based on constraints in the spec, using the same
        defaults for any unspecified metadata as when creating a new
        TensorStore.  The stored metadata need not even exist.  Operations such
        as resizing that modify the stored metadata are not supported.  Requires
        that `.open` is ``true`` and `.delete_existing` is ``false``.  This
        option takes precedence over `.assume_cached_metadata` if that option is
        also specified.

        .. warning::

           This option can lead to data corruption if the assumed metadata does
           not match the stored metadata, or multiple concurrent writers use
           different assumed metadata.
      default: false
    assume_cached_metadata:
      type: boolean
      description: |-
        Skip reading the metadata when opening.  Instead, just assume any
        necessary metadata based on constraints in the spec, using the same
        defaults for any unspecified metadata as when creating a new
        TensorStore.  The stored metadata may still be accessed by subsequent
        operations that need to re-validate or modify the metadata.  Requires
        that `.open` is ``true`` and `.delete_existing` is ``false``.  The
        `.assume_metadata` option takes precedence if also specified.

        .. note::

           Unlike the `.assume_metadata` option, operations such as resizing
           that modify the stored metadata are supported (and access the stored
           metadata).

        .. warning::

           This option can lead to data corruption if the assumed metadata does
           not match the stored metadata, or multiple concurrent writers use
           different assumed metadata.
      default: false
    cache_pool:
      $ref: ContextResource
      description: |-
        Specifies or references a previously defined
        `Context.cache_pool`.  It is normally more convenient to
        specify a default `~Context.cache_pool` in the
        `.context`.
      default: cache_pool
    data_copy_concurrency:
      $ref: ContextResource
      description: |-
        Specifies or references a previously defined
        `Context.data_copy_concurrency`.  It is normally more convenient to
        specify a default `~Context.data_copy_concurrency` in the `.context`.
      default: data_copy_concurrency
    recheck_cached_metadata:
      $ref: CacheRevalidationBound
      default: open
      description: |
        Time after which cached metadata is assumed to be fresh.  Cached
        metadata older than the specified time is revalidated prior to use.  The
        metadata is used to check the bounds of every read or write operation.

        Specifying ``true`` means that the metadata will be revalidated
        prior to every read or write operation.  With the default value of
        ``"open"``, any cached metadata is revalidated when the TensorStore
        is opened but is not rechecked for each read or write operation.
    recheck_cached_data:
      $ref: CacheRevalidationBound
      default: true
      description: |
        Time after which cached data is assumed to be fresh.  Cached data older
        than the specified time is revalidated prior to being returned from a
        read operation.  Partial chunk writes are always consistent regardless
        of the value of this option.

        The default value of ``true`` means that cached data is revalidated
        on every read.  To enable in-memory data caching, you must both specify
        a `~Context.cache_pool` with a non-zero
        `~Context.cache_pool.total_bytes_limit` and also specify ``false``,
        ``"open"``, or an explicit time bound for `.recheck_cached_data`.
  required:
  - kvstore
definitions:
  cache-revalidation-bound:
    $id: CacheRevalidationBound
    description: Determines under what circumstances cached data is revalidated.
    oneOf:
    - const: true
      description: |-
        Revalidate cached data at every operation.
    - const: false
      description: |-
        Assume cached data is always fresh and never revalidate.
    - const: open
      description: |-
        Revalidate cached data older than the time at which the TensorStore was
        opened.
    - type: number
      description: |-
        Revalidate cached data older than the specified time in seconds since
        the unix epoch.
